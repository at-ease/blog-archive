{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/browser-fetch-flow-2016-04-07.png","path":"img/browser-fetch-flow-2016-04-07.png","modified":0,"renderable":0},{"_id":"source/img/data-package-header-2016-04-13.png","path":"img/data-package-header-2016-04-13.png","modified":0,"renderable":0},{"_id":"source/img/es2015-set-methods.png","path":"img/es2015-set-methods.png","modified":0,"renderable":0},{"_id":"source/img/es2015-generator-yield.png","path":"img/es2015-generator-yield.png","modified":0,"renderable":0},{"_id":"source/img/flexbox-cell.png","path":"img/flexbox-cell.png","modified":0,"renderable":0},{"_id":"source/img/inline-and-absolute.png","path":"img/inline-and-absolute.png","modified":0,"renderable":0},{"_id":"source/img/mac-tool-kit.png","path":"img/mac-tool-kit.png","modified":0,"renderable":0},{"_id":"source/img/flexbox.png","path":"img/flexbox.png","modified":0,"renderable":0},{"_id":"source/img/mixin-vs-extend.png","path":"img/mixin-vs-extend.png","modified":0,"renderable":0},{"_id":"source/img/react-component-comunication.png","path":"img/react-component-comunication.png","modified":0,"renderable":0},{"_id":"source/img/react-component.png","path":"img/react-component.png","modified":0,"renderable":0},{"_id":"source/img/react-lifecycle.png","path":"img/react-lifecycle.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-2.png","path":"img/shuffle-array-2.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-1.png","path":"img/shuffle-array-1.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-3.png","path":"img/shuffle-array-3.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-4.png","path":"img/shuffle-array-4.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-5.png","path":"img/shuffle-array-5.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-6.png","path":"img/shuffle-array-6.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-7.png","path":"img/shuffle-array-7.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-8.png","path":"img/shuffle-array-8.png","modified":0,"renderable":0},{"_id":"source/img/shuffle-array-9.png","path":"img/shuffle-array-9.png","modified":0,"renderable":0},{"_id":"source/img/tcp-ip-protocol-group-2016-04-13.png","path":"img/tcp-ip-protocol-group-2016-04-13.png","modified":0,"renderable":0},{"_id":"source/img/tmux-structure.png","path":"img/tmux-structure.png","modified":0,"renderable":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/img/resources-loading-times-2016-04-07.png","path":"img/resources-loading-times-2016-04-07.png","modified":0,"renderable":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/img/flexbox-container.png","path":"img/flexbox-container.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"ba64683b82f51c18f5419339a4ef75e195f7c402","modified":1450170901000},{"_id":"source/.DS_Store","hash":"d799b744b8e9ccd969a172edd95c9de4f8f353cb","modified":1455350399000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1453369844000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1453369844000},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1457886985000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1453371073000},{"_id":"themes/apollo/_config.yml","hash":"608171315f025250fda07c70cdeea12a0a85c78d","modified":1460196559000},{"_id":"themes/apollo/package.json","hash":"9426138c09ebb95969021d951590c0c54b187a43","modified":1453515142000},{"_id":"source/_posts/2016-JavaScript-技术栈展望.md","hash":"22fdadb03e2e6d74a29390e602325693ff422ad3","modified":1460342816000},{"_id":"source/_posts/CSS-Counters.md","hash":"0412282d9d60a7a8aa18bcbc3fc8745b9ad383e2","modified":1453782680000},{"_id":"source/_posts/CSS-Flexbox.md","hash":"682a92fe7da6be62cffb80479de4b30a53604a78","modified":1451208722000},{"_id":"source/_posts/GET-vs-POST.md","hash":"fb42dd053474576a1b5ef7e21598c898c2500089","modified":1460383843000},{"_id":"source/_posts/ES2015.md","hash":"aeaf8a41944fd5944700710ba5cbc039d5fbac0c","modified":1454288487000},{"_id":"source/_posts/PhantomJS.md","hash":"8e29ab82927203b0b91b3e9797994a7400818503","modified":1460957040000},{"_id":"source/_posts/HTML5-canvas.md","hash":"af74e92cc57845dd2fb6f168dfb35f9b8fa58ef1","modified":1459924801000},{"_id":"source/_posts/JavaScript 常见问题和解决方式.md","hash":"195b168bc383e653a1ede2d4facc8781b457d92d","modified":1459505004000},{"_id":"source/_posts/Lazy-loading-images-on-the-web.md","hash":"47cec51c2a10c0c252bc2d1718a3e948ea8a500f","modified":1456291910000},{"_id":"source/_posts/Pug.md","hash":"21d6d9fe2c373b6f4993b0d25fe659e105bb038b","modified":1459064182000},{"_id":"source/_posts/React-组件的生命周期.md","hash":"00a516162e38af3239528df017e607f7ebffa73c","modified":1451208630000},{"_id":"source/_posts/React-组件间的消息传递.md","hash":"5b2af4e056b293db8199cddc82c09181a1279ff2","modified":1451208761000},{"_id":"source/_posts/Sass.md","hash":"a6e1d8d6ac9cf942ad67dc4b989477cac696adfc","modified":1451208542000},{"_id":"source/_posts/Tmux.md","hash":"a163dde4c01d85e37acb5401d37f39e71f573524","modified":1455360307000},{"_id":"source/_posts/Truthy-and-Falsy.md","hash":"2bff630d9af2586d3ee5d5bc4f4bbfb7ea032896","modified":1455686181000},{"_id":"source/_posts/inline-and-absolute.md","hash":"da221c4cce4258cdd72c6b58cf2caac3e92a6701","modified":1451208668000},{"_id":"source/_posts/mongodb.md","hash":"8f2ee5589d31482639ddeaea9d2cd03788cfcfcb","modified":1455025933000},{"_id":"source/_posts/void-and-undefined.md","hash":"b1031feb4823f14e676fae1e6c2a70b14993a224","modified":1450170901000},{"_id":"source/_posts/mac-tool-kit.md","hash":"b81b5d977f84fd0c820be6ddcad4d611b2f9c3da","modified":1457884500000},{"_id":"source/_posts/开发者必看的技术站点.md","hash":"0d0af20812d03b507d2bc6aa6cc38509a69d63b8","modified":1459924943000},{"_id":"source/_posts/性能优化的十二个方面.md","hash":"c16d351c4a360d8eaf6bd9fa1445448b7ea944d7","modified":1459064257000},{"_id":"source/_posts/数据类型的分类.md","hash":"d3c000566260ffd3fc260f6ec620345a54443c0a","modified":1450170901000},{"_id":"source/_posts/洗牌算法.md","hash":"e8853175fae423196ecaab9780d12ddd4d01721a","modified":1459654499000},{"_id":"source/_posts/求值策略.md","hash":"e75ffcb0f571928ffee2918d95e85d14acf700ce","modified":1450170901000},{"_id":"source/_posts/读《图解-TCP-IP》.md","hash":"53438d7162b9be5bc97e67ea17801b2f871658fe","modified":1460551473000},{"_id":"source/_posts/读《高性能网站建设指南》.md","hash":"43b0ad781377f1bcdd5455f90bfaf666be3b28f7","modified":1460440115000},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1460032352000},{"_id":"source/img/browser-fetch-flow-2016-04-07.png","hash":"00992ca03e7ce93bf5c9f255bd2e28c8b33c8672","modified":1460440400000},{"_id":"source/img/data-package-header-2016-04-13.png","hash":"a31a2fdd8cd525db698233326948f66b13cdc79b","modified":1460525467000},{"_id":"source/img/es2015-set-methods.png","hash":"206cb198e061c67c5c5fa423e8ced5629ef57ae0","modified":1460440211000},{"_id":"source/img/es2015-generator-yield.png","hash":"90996d0ad551b141b7cbbb087374b9b46884d2ec","modified":1460440216000},{"_id":"source/img/flexbox-cell.png","hash":"af8e6ca103903120aa65061edd8cae60f742d423","modified":1460440230000},{"_id":"source/img/inline-and-absolute.png","hash":"ff3730a2e342cff7343ae433a364e2419a1e0a73","modified":1460440216000},{"_id":"source/img/mac-tool-kit.png","hash":"e7f267227c2091f4bae1283ae546358f1967b5e2","modified":1460440224000},{"_id":"source/img/flexbox.png","hash":"88388c4adba71ba30ed4a4e46dff079745ac71d5","modified":1460440218000},{"_id":"source/img/mixin-vs-extend.png","hash":"211192b714cd97235a0c87dd91a3cfeb5b66bd6d","modified":1460440226000},{"_id":"source/img/react-component-comunication.png","hash":"90a5ab804c96cec8407f92e9d18b6ba4b9bb3ee7","modified":1460440226000},{"_id":"source/img/react-component.png","hash":"bf8f8040b4a88248113822385a3eb16b64881a82","modified":1460440236000},{"_id":"source/img/react-lifecycle.png","hash":"90f62f5cfb9e03282c986850b1fce7f21329dae8","modified":1460440245000},{"_id":"source/img/shuffle-array-2.png","hash":"b5e91a3df132a907f91109f792f08373761a7680","modified":1460440232000},{"_id":"source/img/shuffle-array-1.png","hash":"58471745e666f97fb25aba375ff3dfc1538e368a","modified":1460440231000},{"_id":"source/img/shuffle-array-3.png","hash":"f74f9b653f55e0ad41d67468237f351e311341b3","modified":1460440233000},{"_id":"source/img/shuffle-array-4.png","hash":"dc4d6df142224404b8ad37e4c784dce5f620c304","modified":1460440235000},{"_id":"source/img/shuffle-array-5.png","hash":"6f8a0e5d5a3a7918d0fdbb2ace72fbe370085c93","modified":1460440237000},{"_id":"source/img/shuffle-array-6.png","hash":"7395cbef2b6a697ff8ff11a6db3961b0ff7bbda8","modified":1460440237000},{"_id":"source/img/shuffle-array-7.png","hash":"7e8ea7687079d23236e3053268de1fee9f68434e","modified":1460440238000},{"_id":"source/img/shuffle-array-8.png","hash":"ea26ce73eacbe09c8acaba3ba462618fc7370773","modified":1460440239000},{"_id":"source/img/shuffle-array-9.png","hash":"4c592e27a92a6ca15442a24ecbda60186192cbb0","modified":1460440239000},{"_id":"source/img/tcp-ip-protocol-group-2016-04-13.png","hash":"03c8463bb0f417c1e65427348cf13bd82b7e7d00","modified":1460482668000},{"_id":"themes/apollo/.git/COMMIT_EDITMSG","hash":"6aa0f44b88fec30f7c8feebc681d0eb7702e8755","modified":1460383750000},{"_id":"themes/apollo/.git/FETCH_HEAD","hash":"466a678b20604b96a90c8c424569ca35e9df6a0f","modified":1460303312000},{"_id":"source/img/tmux-structure.png","hash":"eb9b5e7b1dfc45b7d182e5c6c56dbdeff039ff58","modified":1460440243000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1453369844000},{"_id":"themes/apollo/.git/ORIG_HEAD","hash":"c1a7be2cfbf34189ec20cf2894925af358ec7eb6","modified":1460303312000},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1453369844000},{"_id":"themes/apollo/.git/index","hash":"619da686c6091828bf64fdfa949d77b2a2072775","modified":1460383750000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1453369837000},{"_id":"themes/apollo/.git/packed-refs","hash":"176c992b99a3801abbcd5c7d2f82be4eb6b5e48e","modified":1453369844000},{"_id":"themes/apollo/doc/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1455591407000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1459065170000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1459065011000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1455282875000},{"_id":"themes/apollo/layout/post.jade","hash":"33ab46ab3736e5d51388939858647942ce375b9b","modified":1453430909000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1457781359000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1459086194000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1455024433000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1453369844000},{"_id":"source/img/resources-loading-times-2016-04-07.png","hash":"1fe9a0bf94b89f1473cbecec2d026aeec95a00da","modified":1460440239000},{"_id":"themes/apollo/node_modules/verror/.gitmodules","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1360175300000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1453369837000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1453369837000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1453369837000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"cf23e3cf90785318212053b2e1be44a31a3f7085","modified":1460383750000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1453519223000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"90eedc680eff34bf297d0561d343c7bf118606a0","modified":1458816745000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1453369844000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"1ac04b9dbcff6cc5c1ac8304d5ec86ffeed12183","modified":1455282867000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"51b2ba6a1cebb275730eb7131eea211c91f0986a","modified":1454326268000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"538dbc76a4b42ead66adc4d6ba0a0938002c1784","modified":1460107416000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1453369844000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"f981ebc7af9b83066f1a5673808bb41b9515d009","modified":1460130070000},{"_id":"themes/apollo/source/css/apollo.css","hash":"7dc829069da92b1ada12f0983fb9e34fa2403557","modified":1461380726000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"a3153dfedbaff08c20930b2bde95f2db49f6d518","modified":1460110362000},{"_id":"themes/apollo/node_modules/ansi/.jshintrc","hash":"fd0b1549f6f8ca118a0da0a99719689907273b2f","modified":1442006415000},{"_id":"themes/apollo/node_modules/ansi/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1426184022000},{"_id":"themes/apollo/node_modules/ansi/History.md","hash":"e08a586cfeff13f78415131ab12dc59047625b8f","modified":1452816446000},{"_id":"themes/apollo/node_modules/ansi/LICENSE","hash":"29e2ec2d24a38c009dfb6f3c1b8d1b57e3ec492b","modified":1452816251000},{"_id":"themes/apollo/node_modules/ansi/README.md","hash":"95d1873583f32730c8ffa1ff463b2cadf08f2667","modified":1442006415000},{"_id":"themes/apollo/node_modules/ansi/package.json","hash":"a8d286a43af1573be2af729ce4b0ccb440f5e134","modified":1460380284000},{"_id":"themes/apollo/node_modules/ansi-regex/index.js","hash":"03d6a4cc534cbb9a855b01b372a17bfa2b830442","modified":1435679868000},{"_id":"themes/apollo/node_modules/ansi-regex/package.json","hash":"c03d81309f353e97472137d5a70bf12cf4afa960","modified":1460380281000},{"_id":"themes/apollo/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/ansi-regex/readme.md","hash":"76c119f1cf0605a0409f9c2756de3e55a1398fc2","modified":1435679915000},{"_id":"themes/apollo/node_modules/abbrev/.npmignore","hash":"07cd07890babc5d03fd44e1ce9203b4f16c848e1","modified":1433026652000},{"_id":"themes/apollo/node_modules/abbrev/.travis.yml","hash":"79213a95749ddb02aac8146f88c2e9ee705bec84","modified":1433026630000},{"_id":"themes/apollo/node_modules/abbrev/CONTRIBUTING.md","hash":"12ce7abccdd3aeebd1d093a30bb1768f120fb8cb","modified":1360631762000},{"_id":"themes/apollo/node_modules/abbrev/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432169859000},{"_id":"themes/apollo/node_modules/abbrev/README.md","hash":"c520bc857ec612ed88e13d794c47882d5aed3286","modified":1286218346000},{"_id":"themes/apollo/node_modules/abbrev/abbrev.js","hash":"b75c6b10bbfac1092ef493079ae044cc89824dc0","modified":1397765081000},{"_id":"themes/apollo/node_modules/abbrev/package.json","hash":"74fb7d8dbf1f7ec946cbcb8e3e3965d3e10bd77e","modified":1460380283000},{"_id":"themes/apollo/node_modules/.bin/browserslist","hash":"f3b7024c82e25969f8e9b689f8aa36acf0be61ee","modified":1458206941000},{"_id":"themes/apollo/node_modules/.bin/mkdirp","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1419626841000},{"_id":"themes/apollo/node_modules/abbrev/test.js","hash":"4af3fea0290e02e4d82225ce75721b423c212483","modified":1433026583000},{"_id":"themes/apollo/node_modules/.bin/gulp","hash":"6febf2868b92a817f55f40172cc25b742da27e5e","modified":1454273747000},{"_id":"themes/apollo/node_modules/.bin/har-validator","hash":"702b45900cba1bd2ee74c4df1a5b51db0aeab0d7","modified":1448373288000},{"_id":"themes/apollo/node_modules/.bin/rimraf","hash":"366b465d5a8637f94cea9366f505a25fc78c8a83","modified":1447980323000},{"_id":"themes/apollo/node_modules/.bin/node-sass","hash":"637e7399f64bbf0e819987c2198123792dfb2045","modified":1447231540000},{"_id":"themes/apollo/node_modules/.bin/node-gyp","hash":"1ff34646635921971502632a4fcb1ebcaa199866","modified":1441510208000},{"_id":"themes/apollo/node_modules/.bin/nopt","hash":"f2a561712df0e004c712bfd6c9b0fdc70cc26e8e","modified":1447359143000},{"_id":"themes/apollo/node_modules/.bin/sshpk-sign","hash":"e187df199ed0e1c1d782f679b4742df047919854","modified":1452565517000},{"_id":"themes/apollo/node_modules/.bin/sassgraph","hash":"983e1581a6c68c99ccca85cb709081aa9a79c01c","modified":1430718059000},{"_id":"themes/apollo/node_modules/.bin/sshpk-conv","hash":"fea08967162027695aed134d117056a5b789d188","modified":1452039039000},{"_id":"themes/apollo/node_modules/.bin/semver","hash":"95e0a5fdac7ea5824aff144c4416ca4a31b2ea6f","modified":1413420141000},{"_id":"themes/apollo/node_modules/.bin/user-home","hash":"5df51f1f8552b61704a808793c129196b5efeb68","modified":1421171004000},{"_id":"themes/apollo/node_modules/.bin/strip-indent","hash":"aef33a307f851bb25b1bb7efbe24089df85cf7c8","modified":1407937346000},{"_id":"themes/apollo/node_modules/.bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1452565517000},{"_id":"themes/apollo/node_modules/ansi-styles/index.js","hash":"7e89eee4c6711e897597268d129348b685cc6548","modified":1459197140000},{"_id":"themes/apollo/node_modules/ansi-styles/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/ansi-styles/package.json","hash":"8ce4170b6b8d51116b6edaf6e51733590e1a39cf","modified":1460380282000},{"_id":"themes/apollo/node_modules/ansi-styles/readme.md","hash":"b12348b9ea14a18112719b1aad4cdf7e52f4b35f","modified":1459197140000},{"_id":"themes/apollo/node_modules/.bin/uuid","hash":"cc4874ec4258ffff8b743227a3619f895941b563","modified":1425583776000},{"_id":"themes/apollo/node_modules/archy/index.js","hash":"893d827a6d051964e215c48ee9a9ecdcb6a5d899","modified":1331248175000},{"_id":"themes/apollo/node_modules/archy/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1355734018000},{"_id":"themes/apollo/node_modules/archy/.travis.yml","hash":"475f49f2ac7ca71a18a511fe8549491952a94a71","modified":1355734082000},{"_id":"themes/apollo/node_modules/archy/package.json","hash":"eb2fdb68eb09f75412f07cb0bd1ddcc82f81ccc7","modified":1460380283000},{"_id":"themes/apollo/node_modules/archy/readme.markdown","hash":"786f5f364ad18b4d50fe04ccb4571b09d027295f","modified":1355734012000},{"_id":"themes/apollo/node_modules/array-differ/index.js","hash":"fa4d86125291436d0770fde12e47a92e6f521505","modified":1403205411000},{"_id":"themes/apollo/node_modules/array-differ/readme.md","hash":"a4e0fbfa8619397e85729ffe5dbc062672265821","modified":1403301440000},{"_id":"themes/apollo/node_modules/array-find-index/index.js","hash":"efd290fcda74bc499ada359abb6f06e7d0ea29f2","modified":1451410643000},{"_id":"themes/apollo/node_modules/.bin/window-size","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1447614663000},{"_id":"themes/apollo/node_modules/array-find-index/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/array-find-index/readme.md","hash":"39be772206f167f3c21edc4976265a3f2bb05bf3","modified":1451394905000},{"_id":"themes/apollo/node_modules/array-find-index/package.json","hash":"f73e6dea806262ebbec31e3291f9bb8bf4d2303c","modified":1460380282000},{"_id":"themes/apollo/node_modules/array-uniq/index.js","hash":"af56cb340f08d42a1905d5bd14efaedc14638526","modified":1418275694000},{"_id":"themes/apollo/node_modules/array-uniq/package.json","hash":"4ff5f244f17c0b49dad253e30900a10e00b5335f","modified":1460380281000},{"_id":"themes/apollo/node_modules/array-uniq/readme.md","hash":"33ac2b44ba2088c1878133dfaee1e0048f097792","modified":1403301088000},{"_id":"themes/apollo/node_modules/asn1/.npmignore","hash":"e4d8961c077c0e5648b0dcf3e885a607190674c2","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/.travis.yml","hash":"ccb3d08679457eddf37ce946ffab66f6440f70da","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/LICENSE","hash":"724e48cfc739674999ff82b4e49d76d5376818e9","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/README.md","hash":"71e6a47944ebaefe5d5357a7b6f46df9c389316f","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/package.json","hash":"99250cfdbc7b4c29ee6bd95f834cfc16bec338e2","modified":1460380284000},{"_id":"themes/apollo/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1446952976000},{"_id":"themes/apollo/node_modules/assert-plus/CHANGES.md","hash":"b64b8d16f3858a1c3d55538c5bfee934437af75b","modified":1447141659000},{"_id":"themes/apollo/node_modules/assert-plus/README.md","hash":"79988e7cb3bb80b7cc20dc420ee2a7f86ab3d3e0","modified":1446952976000},{"_id":"themes/apollo/node_modules/assert-plus/assert.js","hash":"8f3f85bae8edd30db24882766a5c8c4df8357462","modified":1447140668000},{"_id":"themes/apollo/node_modules/assert-plus/package.json","hash":"78a5a1479916a56286b3f5db30c6382ef6948dc8","modified":1460380282000},{"_id":"themes/apollo/node_modules/async/CHANGELOG.md","hash":"f6dbdbec1d4babb8661eae69a9d35700ca89bfb1","modified":1452211409000},{"_id":"themes/apollo/node_modules/async/package.json","hash":"5ac00c3b15187f794f7a889c7be24b36e1c5085e","modified":1460380283000},{"_id":"themes/apollo/node_modules/async/LICENSE","hash":"e452de6c5360ba269a3bda17cca33f0bf51035f5","modified":1432069407000},{"_id":"themes/apollo/node_modules/async-foreach/README.md","hash":"7aba653cf644c5456b51586294f8b63a2c44a4f8","modified":1367240097000},{"_id":"themes/apollo/node_modules/async-foreach/LICENSE-MIT","hash":"66da65f826b5293a5437c475751a9d0826d2956e","modified":1316119536000},{"_id":"themes/apollo/node_modules/async-foreach/grunt.js","hash":"dcf9112bffd310c7e6b042d13d02a1f8a9672b72","modified":1326250034000},{"_id":"themes/apollo/node_modules/async/README.md","hash":"1e5c0380861222c007090d0c0a1d8ca4f5272dc5","modified":1452208687000},{"_id":"themes/apollo/node_modules/async-foreach/package.json","hash":"31b3e6d511551b01e5a5123f995aa8763a72d600","modified":1460380283000},{"_id":"themes/apollo/node_modules/array-differ/package.json","hash":"cd69bd76a642bf0eabd8e00cb075729592590e4d","modified":1460380281000},{"_id":"themes/apollo/node_modules/.bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1444242830000},{"_id":"themes/apollo/node_modules/aws-sign2/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1366607619000},{"_id":"themes/apollo/node_modules/aws-sign2/README.md","hash":"5e8e0e7c811b1f319c0e94ff08f38ecf4896e3c9","modified":1366607619000},{"_id":"themes/apollo/node_modules/aws-sign2/index.js","hash":"b380be041c204108febb8f32b19431a54aaed4a6","modified":1444584231000},{"_id":"themes/apollo/node_modules/aws-sign2/package.json","hash":"a6adbfa30589af4cb80a0483fd0f67f36edefd53","modified":1460380281000},{"_id":"themes/apollo/node_modules/array-index/.jshintrc","hash":"376fb58b23f635abb65b33e5f60d1fbd8e996ad1","modified":1449091500000},{"_id":"themes/apollo/node_modules/array-index/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449091500000},{"_id":"themes/apollo/node_modules/array-index/.travis.yml","hash":"e6bd32b7a185fcab5e19edf7d1637e690ce4bafb","modified":1451413683000},{"_id":"themes/apollo/node_modules/array-index/History.md","hash":"777352c67e14410830f4fe5ba735b09be2551c51","modified":1451791328000},{"_id":"themes/apollo/node_modules/array-index/LICENSE","hash":"29e2ec2d24a38c009dfb6f3c1b8d1b57e3ec492b","modified":1451285212000},{"_id":"themes/apollo/node_modules/array-index/Makefile","hash":"3ac3791057bcf3b34cf3f8e730456a0550d03f78","modified":1449091500000},{"_id":"themes/apollo/node_modules/array-index/README.md","hash":"a80a808ab5a81b0d94acc71363f821461f4ddf1f","modified":1451537758000},{"_id":"themes/apollo/node_modules/array-index/index.js","hash":"550b0a14433998a8e5f2fe80deba40b79ea6b5ed","modified":1451791270000},{"_id":"themes/apollo/node_modules/array-index/component.json","hash":"b50cb600eb3e6c7994745be4d62c02f3449d5b8d","modified":1451791331000},{"_id":"themes/apollo/node_modules/array-index/package.json","hash":"1b095fd8f5b03292e24ca8aa7211628ef0c7f441","modified":1460380284000},{"_id":"themes/apollo/node_modules/array-index/test.js","hash":"8c67a092d60f69c2cf8a8592e0d3124a23596a4d","modified":1451791209000},{"_id":"themes/apollo/node_modules/autoprefixer/LICENSE","hash":"0b4be858ebd79c7ec4f7ba4fbda0406e3f3e821f","modified":1459623888000},{"_id":"themes/apollo/node_modules/.bin/dateformat","hash":"74dbf2e8c6bbc317d1a64d8eea3aa3ae694cac94","modified":1417082792000},{"_id":"themes/apollo/node_modules/autoprefixer/package.json","hash":"02226f76dc332f775fd0596df7b7688dd94f3a7d","modified":1460380285000},{"_id":"themes/apollo/node_modules/autoprefixer/CHANGELOG.md","hash":"4d26c155a6d00fcff6ae9fd5edb3b970c17c4058","modified":1459623887000},{"_id":"themes/apollo/node_modules/autoprefixer/README.md","hash":"f77cdf58f8a82014f02cce1a4262ebb2dcd33d95","modified":1459623888000},{"_id":"themes/apollo/node_modules/beeper/index.js","hash":"ebf5dd83a5bef6c42385b0734b1bdb048c9a65a7","modified":1433151176000},{"_id":"themes/apollo/node_modules/beeper/readme.md","hash":"d50f3e764f0836cea37c187224fba2acd0b4eda7","modified":1433151073000},{"_id":"themes/apollo/node_modules/beeper/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/beeper/package.json","hash":"06d3977a53fa07f0cec68124145016116930430d","modified":1460380282000},{"_id":"themes/apollo/node_modules/are-we-there-yet/.npmignore","hash":"37d30d03d55d2451e3155618fed639b5d1bebafb","modified":1453936297000},{"_id":"themes/apollo/node_modules/are-we-there-yet/CHANGES.md","hash":"b7811fe6c7dbff3708107fe65b34b94081cf0371","modified":1454118439000},{"_id":"themes/apollo/node_modules/are-we-there-yet/LICENSE","hash":"13b22b5c5f89edc3f31e092b7298cd65687e7250","modified":1449362748000},{"_id":"themes/apollo/node_modules/are-we-there-yet/README.md","hash":"666f3b79e2fd863f6118b041a37130058637de9d","modified":1454115179000},{"_id":"themes/apollo/node_modules/are-we-there-yet/index.js","hash":"d154805f279e1f7708732426e960ab7990fffbe2","modified":1454118261000},{"_id":"themes/apollo/node_modules/are-we-there-yet/tracker-base.js","hash":"7246c8d6f9faa94a98ed31353cbdf41c62ce20fb","modified":1454118261000},{"_id":"themes/apollo/node_modules/are-we-there-yet/package.json","hash":"bd56768d5d2c4429fd1bda780899e811239ede65","modified":1460380284000},{"_id":"themes/apollo/node_modules/are-we-there-yet/tracker-group.js","hash":"7dd60bcd62aa5385de69e4b5d6e91362ed305616","modified":1458084382000},{"_id":"themes/apollo/node_modules/are-we-there-yet/tracker-stream.js","hash":"f0f0d608c7bc4dbf6adbf1af52baf68f84905a2d","modified":1454118261000},{"_id":"themes/apollo/node_modules/are-we-there-yet/tracker.js","hash":"6afd823dfe51e31c67fd4e79a9db24790e7770d9","modified":1454118261000},{"_id":"themes/apollo/node_modules/balanced-match/.npmignore","hash":"26f694f06251bfec1d47828c0fca78596688d2a7","modified":1445519548000},{"_id":"themes/apollo/node_modules/balanced-match/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1445519548000},{"_id":"themes/apollo/node_modules/balanced-match/LICENSE.md","hash":"09013c002fbdd686da2ec13c5a6d014f0a294ba9","modified":1445519600000},{"_id":"themes/apollo/node_modules/balanced-match/Makefile","hash":"98cb6ef36a74f052f3bad15c72f01d78e2d0ba8e","modified":1445519548000},{"_id":"themes/apollo/node_modules/balanced-match/README.md","hash":"261a929745508f56c655d4ec306123bbfabdaa16","modified":1448714230000},{"_id":"themes/apollo/node_modules/balanced-match/example.js","hash":"27792bf4ffe9ce453c5d6896611d7647fd8f0e6b","modified":1445519548000},{"_id":"themes/apollo/node_modules/balanced-match/index.js","hash":"8c1cf0e709f8668e14b11c9086a50c70a0b0434e","modified":1448714230000},{"_id":"themes/apollo/node_modules/block-stream/LICENCE","hash":"fbc159c463d7717ec1acff3d8b6524d0ce74f2a7","modified":1331939706000},{"_id":"themes/apollo/node_modules/balanced-match/package.json","hash":"a12bf949935e1f9766b7b6e18f7f8f168e7d6838","modified":1460380283000},{"_id":"themes/apollo/node_modules/block-stream/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432105388000},{"_id":"themes/apollo/node_modules/block-stream/README.md","hash":"165520dbb78c0d401c0cbc3efc33753b9737d2f0","modified":1317956974000},{"_id":"themes/apollo/node_modules/bl/.npmignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1371299705000},{"_id":"themes/apollo/node_modules/block-stream/block-stream.js","hash":"60770fccf771c6d03441efebf62fb257473c163a","modified":1366232220000},{"_id":"themes/apollo/node_modules/block-stream/package.json","hash":"77faaac6d3e5fd5827480e2c798b8c32fcc08ab8","modified":1460380284000},{"_id":"themes/apollo/node_modules/bl/.travis.yml","hash":"42a8f1ab26879aa4f414fc60cd5b3fb6d2d9c4a1","modified":1454243825000},{"_id":"themes/apollo/node_modules/bl/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1374564272000},{"_id":"themes/apollo/node_modules/bl/LICENSE.md","hash":"d068ae801f9277b4b248f0c2aad7f50181dacaad","modified":1410313674000},{"_id":"themes/apollo/node_modules/bl/README.md","hash":"df67850ad3963a7ba6409a14e22d3727a63b7839","modified":1455246137000},{"_id":"themes/apollo/node_modules/bl/bl.js","hash":"2969db3736e9ec3869daed5cbd16ec8e329987c1","modified":1455246578000},{"_id":"themes/apollo/node_modules/bl/package.json","hash":"994aca9648c350caf50220e55f2da2792f383964","modified":1460380283000},{"_id":"themes/apollo/node_modules/camelcase/index.js","hash":"2b8c116fea89376fba3557ffb11fa0e3328846d5","modified":1457803830000},{"_id":"themes/apollo/node_modules/camelcase/package.json","hash":"d533e86e869c58f08b4f4aaaf29211c1fc8f4260","modified":1460380282000},{"_id":"themes/apollo/node_modules/camelcase/readme.md","hash":"c90528b5f1cea2de255651c9daab5b0aea013737","modified":1447354467000},{"_id":"themes/apollo/node_modules/camelcase/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/aws4/.npmignore","hash":"c2ad4c3e5e24417715cba447a66fa2a024477584","modified":1456867923000},{"_id":"themes/apollo/node_modules/aws4/.travis.yml","hash":"73c40717fe695caf839f2bc871320837b3c2abae","modified":1451426685000},{"_id":"themes/apollo/node_modules/aws4/.tern-port","hash":"8db710197696210837bb654bcdc25d6c523c1150","modified":1371607454000},{"_id":"themes/apollo/node_modules/aws4/LICENSE","hash":"9ba903f14c37d0ab0250a8e6920e7269bdc5b294","modified":1384232184000},{"_id":"themes/apollo/node_modules/aws4/README.md","hash":"715985b16620684a70441f3a86746f2c03cc717d","modified":1456871210000},{"_id":"themes/apollo/node_modules/aws4/package.json","hash":"673e4740a97ea009f302011c9da35018d5e9a9ba","modified":1460380283000},{"_id":"themes/apollo/node_modules/builtin-modules/builtin-modules.json","hash":"953b59a184bce91f59b938f6e60a19782c68bfb0","modified":1451655545000},{"_id":"themes/apollo/node_modules/aws4/aws4.js","hash":"cc49e416602b33c46747701edfef5b0b7223a116","modified":1456774722000},{"_id":"themes/apollo/node_modules/builtin-modules/index.js","hash":"c5531b6f78beb7583eb04832971f23056d11f5dc","modified":1451655539000},{"_id":"themes/apollo/node_modules/builtin-modules/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/builtin-modules/readme.md","hash":"5456a1f751e5525acb49307bedc1f58a5b6a5b3f","modified":1441128472000},{"_id":"themes/apollo/node_modules/builtin-modules/package.json","hash":"1a36989f83fb14dcc93a685a74d995f8d80e574c","modified":1460380283000},{"_id":"themes/apollo/node_modules/builtin-modules/static.js","hash":"236bc8e0e9861a4dd0e629b3189fcd1eab61c005","modified":1430753509000},{"_id":"themes/apollo/node_modules/boom/.npmignore","hash":"ea5a6d3bfaa388a6dbf7be84ef42c1a51dd7c416","modified":1407506005000},{"_id":"themes/apollo/node_modules/boom/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1411478104000},{"_id":"themes/apollo/node_modules/boom/.travis.yml","hash":"d6a8554d6a87df690d085a197d30109f26bdb583","modified":1442930822000},{"_id":"themes/apollo/node_modules/boom/LICENSE","hash":"53ded9fedb90236c92321a45d1ab00fa35f282d8","modified":1407506005000},{"_id":"themes/apollo/node_modules/brace-expansion/README.md","hash":"3ed262742cc9e8e0db93c5f1d729127af1ffbe82","modified":1446204351000},{"_id":"themes/apollo/node_modules/boom/package.json","hash":"362499fca41252e908e45fe407d3291e92fa1b99","modified":1460380283000},{"_id":"themes/apollo/node_modules/brace-expansion/.npmignore","hash":"67918e1a845b24d436452508fc5baadbab7b464f","modified":1446204351000},{"_id":"themes/apollo/node_modules/boom/README.md","hash":"2d7368cd181df38d42b300f04f7323cc16f9b7d2","modified":1446232305000},{"_id":"themes/apollo/node_modules/brace-expansion/example.js","hash":"8a259435e31e75ac76d3abcbefd225af7f41c185","modified":1446204351000},{"_id":"themes/apollo/node_modules/brace-expansion/index.js","hash":"acd1637cc605d2aff5f9da27ff9f7df5a9f79840","modified":1455216657000},{"_id":"themes/apollo/node_modules/brace-expansion/package.json","hash":"1c4fbd6ae324bfa4d3cea3c294bb03cc1b62ed3a","modified":1460380282000},{"_id":"themes/apollo/node_modules/camelcase-keys/index.js","hash":"1dfea152d4c0081f9a2b43ca8b060d04874e0021","modified":1458051710000},{"_id":"themes/apollo/node_modules/camelcase-keys/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/camelcase-keys/readme.md","hash":"2e8d2e70154ef46f7f2d3118ccff382bd4f7b549","modified":1458051609000},{"_id":"themes/apollo/node_modules/camelcase-keys/package.json","hash":"5b0924dd5e2eef11b65c45806ff2dd4f96d6f0bf","modified":1460380282000},{"_id":"themes/apollo/node_modules/caniuse-db/.editorconfig","hash":"7aed10b32add23f5aeaaf0077b431e926e1417b5","modified":1433902033000},{"_id":"themes/apollo/node_modules/caniuse-db/README.md","hash":"745029f74019393c55242ee89d2147699523d4c0","modified":1434870314000},{"_id":"themes/apollo/node_modules/caniuse-db/.npmignore","hash":"8450da94364ad56c1f0704465fc30429d96b97a2","modified":1390883653000},{"_id":"themes/apollo/node_modules/caniuse-db/CONTRIBUTING.md","hash":"e56c388b39e491ef7528164a6edaaacda07f590e","modified":1459919991000},{"_id":"themes/apollo/node_modules/caniuse-db/package.json","hash":"6868ab09cfdded34ee41ddeaa8ac9dc1356528ba","modified":1460380288000},{"_id":"themes/apollo/node_modules/caseless/README.md","hash":"5770b9496fb480f7c403b6c38759a27d6170e882","modified":1414608769000},{"_id":"themes/apollo/node_modules/caseless/index.js","hash":"326fc25f6edec25f7d239314ed6e75259147088a","modified":1424972076000},{"_id":"themes/apollo/node_modules/caseless/LICENSE","hash":"48f9e0a4c07f36c07d47962212fe022d0417c90f","modified":1435268329000},{"_id":"themes/apollo/node_modules/caseless/package.json","hash":"30b0bc88d716ed489dc4b23f7dd45d1f97e9f2cd","modified":1460380282000},{"_id":"themes/apollo/node_modules/caseless/test.js","hash":"73948ff77c144352fb9d9615079ee35cab781912","modified":1414609010000},{"_id":"themes/apollo/node_modules/browserslist/.npmignore","hash":"617a9cb2ecb9e61a87480762bf4994a4d9d01dca","modified":1458106850000},{"_id":"themes/apollo/node_modules/browserslist/cli.js","hash":"f3b7024c82e25969f8e9b689f8aa36acf0be61ee","modified":1458206941000},{"_id":"themes/apollo/node_modules/browserslist/LICENSE","hash":"ebcfde46d0d8f79d00d5c42bbcfaccdb28d67cb0","modified":1458106850000},{"_id":"themes/apollo/node_modules/browserslist/CHANGELOG.md","hash":"32e52cd446c9ab6073626a25fd06d26f0fec3dcc","modified":1459618127000},{"_id":"themes/apollo/node_modules/browserslist/README.md","hash":"50253f830b9c3fee5e2a27550deb013872b6da22","modified":1459616445000},{"_id":"themes/apollo/node_modules/browserslist/index.js","hash":"78d59b058e6eb2984cbc4ab11eea20f7b7340d32","modified":1459616892000},{"_id":"themes/apollo/node_modules/clone/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1346721042000},{"_id":"themes/apollo/node_modules/browserslist/package.json","hash":"c477f5e96f731ff68fc77c8748d70386dd634892","modified":1460380283000},{"_id":"themes/apollo/node_modules/clone/LICENSE","hash":"ab8d07f122b88e61e3c3596d78fe4a41ee3c2e13","modified":1421231867000},{"_id":"themes/apollo/node_modules/clone/.travis.yml","hash":"35c3960038b3eb1390c0970d0713b4ca33a99c31","modified":1427326534000},{"_id":"themes/apollo/node_modules/clone/README.md","hash":"697e5c6b42265181c282c7797c349c7737df0b3a","modified":1425167635000},{"_id":"themes/apollo/node_modules/clone/package.json","hash":"bdbb5ab6d589d6e28d426b10602226efbc050821","modified":1460380283000},{"_id":"themes/apollo/node_modules/clone/test-apart-ctx.html","hash":"f5288e5d44243cb371126a0dc6aac649a18c43aa","modified":1427323680000},{"_id":"themes/apollo/node_modules/clone/clone.js","hash":"dc80d1d2716cb3180d344f4b4cbbee5d7736c52d","modified":1427323823000},{"_id":"themes/apollo/node_modules/clone/test.html","hash":"87e49bc506f97b3c491d1723970b2c134f37e4ad","modified":1427323548000},{"_id":"themes/apollo/node_modules/clone/test.js","hash":"9eb61238eead53a319845309edb1a557708bb9e5","modified":1427324275000},{"_id":"themes/apollo/node_modules/cliui/CHANGELOG.md","hash":"26cb805006986096e67141729c6fa6e6de4b3fc6","modified":1460342812000},{"_id":"themes/apollo/node_modules/cliui/LICENSE.txt","hash":"039fa81eb89fc5c892f5ce2d22ee6ac0a8503880","modified":1458191766000},{"_id":"themes/apollo/node_modules/cliui/README.md","hash":"1e22b71fd4a73fa941054e5f565c3f4e21827804","modified":1460340216000},{"_id":"themes/apollo/node_modules/chalk/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1459195776000},{"_id":"themes/apollo/node_modules/cliui/package.json","hash":"dbafe3a73bf72e53e2ae6c51332352ee70f82126","modified":1460380282000},{"_id":"themes/apollo/node_modules/chalk/package.json","hash":"ef32c380b5f058277844829f4de2959d61886372","modified":1460380282000},{"_id":"themes/apollo/node_modules/chalk/index.js","hash":"08315806beaa18a4eb58052e8e7182b2d8bddf8f","modified":1459210441000},{"_id":"themes/apollo/node_modules/chalk/readme.md","hash":"a10251893e1a61957a4c7238001e682d20d46d47","modified":1459210441000},{"_id":"themes/apollo/node_modules/cliui/index.js","hash":"ffb7fefbb726b99e2dff9e1342ff86caba27e863","modified":1458191766000},{"_id":"themes/apollo/node_modules/combined-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1403594961000},{"_id":"themes/apollo/node_modules/combined-stream/Readme.md","hash":"9a4115c7973388087b21e93e1c538371e5f94ce9","modified":1434294512000},{"_id":"themes/apollo/node_modules/combined-stream/package.json","hash":"d20025f6cbef91c57b2dda6df7cf4587bb297e0e","modified":1460380282000},{"_id":"themes/apollo/node_modules/concat-map/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1339129737000},{"_id":"themes/apollo/node_modules/concat-map/README.markdown","hash":"132e6e8fd1d19ec2422fdcde00840d8237e44094","modified":1354099276000},{"_id":"themes/apollo/node_modules/concat-map/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1391050985000},{"_id":"themes/apollo/node_modules/concat-map/package.json","hash":"9af091d56089d2eed307d10bf416d8d0c6c15aca","modified":1460380283000},{"_id":"themes/apollo/node_modules/concat-map/index.js","hash":"a3063f014cc693b320dbd64de3243a79247c1e05","modified":1354939769000},{"_id":"themes/apollo/node_modules/clone-stats/LICENSE.md","hash":"a2044c244873a141001e2bcae34bd06c491545b5","modified":1389417013000},{"_id":"themes/apollo/node_modules/clone-stats/README.md","hash":"cf817d942fe8d9b8ef6c08c65701d10e53a4daea","modified":1389417059000},{"_id":"themes/apollo/node_modules/clone-stats/index.js","hash":"e4d66adbb2e1e760df1d70b8d2781564c163f3c0","modified":1389416516000},{"_id":"themes/apollo/node_modules/clone-stats/package.json","hash":"98c44f563ca65178cf91114727bbf1672f539137","modified":1460380282000},{"_id":"themes/apollo/node_modules/clone-stats/test.js","hash":"68e04b2b4b70a534fe0828a20aa1e599857752d3","modified":1389423624000},{"_id":"themes/apollo/node_modules/commander/History.md","hash":"386cc2f8d7b3b54307b7056a57fc4516402aa894","modified":1444749720000},{"_id":"themes/apollo/node_modules/commander/LICENSE","hash":"63513188251d15fcdc716703fbee89be4a3a20e6","modified":1444531073000},{"_id":"themes/apollo/node_modules/commander/Readme.md","hash":"af810334e87894faf80bd73d9e207c9d5f2b3c90","modified":1444531073000},{"_id":"themes/apollo/node_modules/commander/package.json","hash":"f5ae6f99e7a90513a6d3e124302edcd2b022ac84","modified":1460380282000},{"_id":"themes/apollo/node_modules/commander/index.js","hash":"5adc820ea125a479f7fa597cfe2083eeede0dd2b","modified":1444748408000},{"_id":"themes/apollo/node_modules/convert-source-map/.npmignore","hash":"f6cb9aff3d16283ba572fb4b9b3a03503239b57c","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/.travis.yml","hash":"9ef2ed07d454b7ea720e3cc72251c29ce30d7b11","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/LICENSE","hash":"6e47d19f00f067b650809e0fa486c2c99283411d","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/README.md","hash":"070154bc75b486a22cf7ba9a52a156aba8a40fec","modified":1456506683000},{"_id":"themes/apollo/node_modules/convert-source-map/index.js","hash":"fefc173280317f83f1596f4b038939361038604a","modified":1456506683000},{"_id":"themes/apollo/node_modules/convert-source-map/package.json","hash":"a8b4dccf659dfd7897e17e0a46f1dc661d85f1c9","modified":1460380284000},{"_id":"themes/apollo/node_modules/concat-stream/index.js","hash":"cc3ca95d3f2f04d241efa33ecc76a6d512324b46","modified":1428106461000},{"_id":"themes/apollo/node_modules/concat-stream/LICENSE","hash":"3ff8cf88cab3a26fc89c43bc829bbbb6161389d7","modified":1394042384000},{"_id":"themes/apollo/node_modules/concat-stream/package.json","hash":"36789c0cc66b2f9d427924c6dc9838da658953c0","modified":1460380282000},{"_id":"themes/apollo/node_modules/concat-stream/readme.md","hash":"cce7a35033ddf1f21cb5cbb697d02e230f1066fe","modified":1445206208000},{"_id":"themes/apollo/node_modules/cross-spawn/.editorconfig","hash":"625a1e1af0bffc1c37d437fa4455ee6380c0ddc6","modified":1451748453000},{"_id":"themes/apollo/node_modules/cross-spawn/.jshintrc","hash":"00418e4d24e1a43631be7311279e6a135dec8ef8","modified":1435782623000},{"_id":"themes/apollo/node_modules/cross-spawn/.npmignore","hash":"b9cde40294800ff90fa50ee4723d34c714ce4af6","modified":1435782623000},{"_id":"themes/apollo/node_modules/cross-spawn/.travis.yml","hash":"2cb720ace163571aaa063653b656f5b25cfcca1a","modified":1459976786000},{"_id":"themes/apollo/node_modules/cross-spawn/LICENSE","hash":"45c1476739d0c028c845b2c90c401c3a4435de04","modified":1435844224000},{"_id":"themes/apollo/node_modules/cross-spawn/README.md","hash":"36262690f4aa6703a683e887d97c557dd63930a3","modified":1459975691000},{"_id":"themes/apollo/node_modules/cross-spawn/appveyor.yml","hash":"dd7c480b06028d3919635583b62e66ad1c82ee81","modified":1459976794000},{"_id":"themes/apollo/node_modules/cross-spawn-async/.editorconfig","hash":"625a1e1af0bffc1c37d437fa4455ee6380c0ddc6","modified":1451748290000},{"_id":"themes/apollo/node_modules/cross-spawn/index.js","hash":"d3e69307b9648c5c66ed21347cc41b11f710e40f","modified":1435868307000},{"_id":"themes/apollo/node_modules/cross-spawn-async/.jshintrc","hash":"00418e4d24e1a43631be7311279e6a135dec8ef8","modified":1435839159000},{"_id":"themes/apollo/node_modules/cross-spawn/package.json","hash":"01ae16bad69bd2f6eb6a739e205ba8194024e759","modified":1460380283000},{"_id":"themes/apollo/node_modules/cross-spawn-async/.npmignore","hash":"b9cde40294800ff90fa50ee4723d34c714ce4af6","modified":1435839159000},{"_id":"themes/apollo/node_modules/cross-spawn-async/.travis.yml","hash":"2cb720ace163571aaa063653b656f5b25cfcca1a","modified":1459976725000},{"_id":"themes/apollo/node_modules/cross-spawn-async/LICENSE","hash":"ca5287b71c0661edaa850d1d2daab2b717101dde","modified":1435839161000},{"_id":"themes/apollo/node_modules/cross-spawn-async/README.md","hash":"b1423b454f4211c1f26decddccbf5f0ccc3a8161","modified":1459972394000},{"_id":"themes/apollo/node_modules/cross-spawn-async/appveyor.yml","hash":"dd7c480b06028d3919635583b62e66ad1c82ee81","modified":1459976759000},{"_id":"themes/apollo/node_modules/cross-spawn-async/index.js","hash":"11603ee98afa7a7b87930d170b3cb43b8250b290","modified":1459976702000},{"_id":"themes/apollo/node_modules/cross-spawn-async/package.json","hash":"1bdb1a4ddf5ce2dd2c4d7b36630b82d859224dc4","modified":1460380284000},{"_id":"themes/apollo/node_modules/code-point-at/index.js","hash":"6470bf99550991a78ace073dafbbf480ab1f0a08","modified":1437076207000},{"_id":"themes/apollo/node_modules/code-point-at/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/code-point-at/package.json","hash":"e97a38698107b7830cec458cb1c89e5eaaaa732e","modified":1460380282000},{"_id":"themes/apollo/node_modules/code-point-at/readme.md","hash":"87d40dbec23f6bbd14511f8706345f520d2bf569","modified":1437083435000},{"_id":"themes/apollo/node_modules/cryptiles/.npmignore","hash":"5780c6e4913f76085dc4a32b9a8c5b2d2a37ae1d","modified":1432064081000},{"_id":"themes/apollo/node_modules/cryptiles/.travis.yml","hash":"a76172450d8ce91e1812ed3c7591fe03d7364446","modified":1441778625000},{"_id":"themes/apollo/node_modules/cryptiles/LICENSE","hash":"2d1840f1b4088e3a370317c82e7b443321f2b2eb","modified":1441778892000},{"_id":"themes/apollo/node_modules/cryptiles/README.md","hash":"52c9561e75f66870d194d12ac07c05bc0484df18","modified":1441778892000},{"_id":"themes/apollo/node_modules/cryptiles/package.json","hash":"ab026a75c7dcb32dd3498843632210d32198f483","modified":1460380283000},{"_id":"themes/apollo/node_modules/dashdash/package.json","hash":"75256f369a980977c77e3bcc6a9907a4d20de386","modified":1460380282000},{"_id":"themes/apollo/node_modules/dashdash/README.md","hash":"e40739349732594d5d96438bd27aa444915d3f79","modified":1453144686000},{"_id":"themes/apollo/node_modules/config-chain/.npmignore","hash":"ce6ec6945a433dabf9df0dab82f65f8bbca4feba","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/package.json","hash":"a987c410ae575b92f8b8b03ede912371f7df59ea","modified":1460380284000},{"_id":"themes/apollo/node_modules/config-chain/readme.markdown","hash":"be96d6723d03ef1d554bdf7d0770513e8a759992","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/index.js","hash":"539d8e1fd83e2cb1c4109d1fc399dabf58e3da90","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/LICENCE","hash":"20de5fa08717f08627a5925dda51fb005f107145","modified":1453089250000},{"_id":"themes/apollo/node_modules/debug/.jshintrc","hash":"a994d6e35b24a4841479dd38dcb0d248e4dd1040","modified":1404922593000},{"_id":"themes/apollo/node_modules/debug/.npmignore","hash":"fcdcb9d570c8f54cd58831120cb1b14b95a641ee","modified":1404922593000},{"_id":"themes/apollo/node_modules/debug/History.md","hash":"b468a2f1d58147ab41c4b817d4aa627ad13c7018","modified":1431199973000},{"_id":"themes/apollo/node_modules/debug/Makefile","hash":"6521581191ac9a04ee418c5f2e3b05042421eed7","modified":1431199632000},{"_id":"themes/apollo/node_modules/debug/Readme.md","hash":"a5c1b396924aa2101e501543bfe9750bdf2f9480","modified":1431199632000},{"_id":"themes/apollo/node_modules/debug/component.json","hash":"b31ef70de11fdd63030cb49b2c8e50bbf54f1ae2","modified":1431242465000},{"_id":"themes/apollo/node_modules/debug/browser.js","hash":"36202f55a9cbc03b8d10bc9b14748eb00a79a419","modified":1431199632000},{"_id":"themes/apollo/node_modules/debug/bower.json","hash":"d66ecb3b7d22df8fcc8936a18f1e3b9261808cb8","modified":1431242465000},{"_id":"themes/apollo/node_modules/debug/debug.js","hash":"bb692db9f1b4e06986755b168fa71c1bd360edb8","modified":1408510177000},{"_id":"themes/apollo/node_modules/debug/package.json","hash":"0c2ab59bcffd54841f9339d0fe32de002e75a286","modified":1460380284000},{"_id":"themes/apollo/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/apollo/node_modules/debug/node.js","hash":"30354b578cac8fc83d13d2f8b42f19c579255e3d","modified":1426272474000},{"_id":"themes/apollo/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/apollo/node_modules/core-util-is/package.json","hash":"c80038aee5c24278623f25ed9be530ea00c24c77","modified":1460380283000},{"_id":"themes/apollo/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/apollo/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/apollo/node_modules/d/.lint","hash":"22b6aa455da72475137f55f97a667f856243711d","modified":1377629948000},{"_id":"themes/apollo/node_modules/d/.travis.yml","hash":"5a3a72e402432f38e0c24ec1c01b280d00cca9a9","modified":1371724320000},{"_id":"themes/apollo/node_modules/d/CHANGES","hash":"b60e8ab89f64bdcd54a2e40a2173eb2ac4eb5e0c","modified":1398352836000},{"_id":"themes/apollo/node_modules/d/.npmignore","hash":"ee933d04feb8c48d0d63f640ab7bd205adb878bf","modified":1371724290000},{"_id":"themes/apollo/node_modules/d/README.md","hash":"4df1ff03a4fd3f44aa8595f7710db1dcd2027905","modified":1398352490000},{"_id":"themes/apollo/node_modules/d/auto-bind.js","hash":"3b72b15f715a440716debc45a126e6395199f1fa","modified":1380537234000},{"_id":"themes/apollo/node_modules/d/LICENCE","hash":"c551c40c6610ad8398847785578a7d2ed694a6db","modified":1371724369000},{"_id":"themes/apollo/node_modules/d/index.js","hash":"6436b5071ce3f446e51cb76501a06df197dad692","modified":1382535396000},{"_id":"themes/apollo/node_modules/d/lazy.js","hash":"2f6d99f9bb5e8f2ff717ef2b9278cea6b9540da9","modified":1393582883000},{"_id":"themes/apollo/node_modules/dateformat/.npmignore","hash":"e06c95b04983129eea55d19ff2376ff69078443e","modified":1417082792000},{"_id":"themes/apollo/node_modules/dateformat/.travis.yml","hash":"8335647eddbeeab76f07be405e926c0406e2bfd1","modified":1447915155000},{"_id":"themes/apollo/node_modules/d/package.json","hash":"45cea528e6c9920a30420ee3bf8bfb33e446b647","modified":1460380284000},{"_id":"themes/apollo/node_modules/dateformat/package.json","hash":"2dd8c3724db90f51562a74f0253d7eb9c4155cb6","modified":1460380284000},{"_id":"themes/apollo/node_modules/dateformat/Readme.md","hash":"67a9ecf5d2b5bbfd18b6ae0c78536df6c6c0e9d3","modified":1447915155000},{"_id":"themes/apollo/node_modules/dateformat/LICENSE","hash":"bbdbafe95c7e86caa022d7012805e8f06532b3e1","modified":1410851296000},{"_id":"themes/apollo/node_modules/delayed-stream/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1430430799000},{"_id":"themes/apollo/node_modules/delayed-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1430160212000},{"_id":"themes/apollo/node_modules/delayed-stream/Readme.md","hash":"21db9b7ec97b7028a031a18867aab00575b09850","modified":1430160212000},{"_id":"themes/apollo/node_modules/delayed-stream/package.json","hash":"b59b56eda73b3022035156157d9c1d11b7eb7581","modified":1460380283000},{"_id":"themes/apollo/node_modules/delayed-stream/Makefile","hash":"1d88cf18c0fef56e91425a086590e31271a7c4d5","modified":1430160212000},{"_id":"themes/apollo/node_modules/delegates/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1450122923000},{"_id":"themes/apollo/node_modules/delegates/License","hash":"9d414bd96ce8326fadc2f959781154de49af5b00","modified":1450122923000},{"_id":"themes/apollo/node_modules/delegates/History.md","hash":"37e8641729544115b9d3a566ead3480e47d44a9b","modified":1450122948000},{"_id":"themes/apollo/node_modules/delegates/Makefile","hash":"abd4a7cd4a519df349900dd853a307f58a5cd4a5","modified":1450122923000},{"_id":"themes/apollo/node_modules/delegates/index.js","hash":"694697be68fb102fb7e9f70d9f35a8827c6d6943","modified":1450122923000},{"_id":"themes/apollo/node_modules/delegates/Readme.md","hash":"b0afdd75170fd52fc87f9d0bbaa713054fdf42c7","modified":1450122923000},{"_id":"themes/apollo/node_modules/delegates/package.json","hash":"8fcf4e5733e8e0517d0ffdcef1afefde11e5afec","modified":1460380283000},{"_id":"themes/apollo/node_modules/defaults/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1443824587000},{"_id":"themes/apollo/node_modules/defaults/LICENSE","hash":"cc09a716da29a2bfcb41930b14a153f145a0a057","modified":1443824587000},{"_id":"themes/apollo/node_modules/defaults/README.md","hash":"47acb2e278952ea76467c6e0165e8a1ef8fa45c4","modified":1443824587000},{"_id":"themes/apollo/node_modules/defaults/index.js","hash":"e40db818e440a87121be59fc3169018315e2db23","modified":1443824587000},{"_id":"themes/apollo/node_modules/defaults/package.json","hash":"5cd6bf9dbd22c01d695f55dbfbd42791bc459eae","modified":1460380283000},{"_id":"themes/apollo/node_modules/defaults/test.js","hash":"41537038884b550553e36f41145abb61b9193efc","modified":1443824587000},{"_id":"themes/apollo/node_modules/decamelize/index.js","hash":"b2b327355fce3e54d2a2c542beb41ae803c33285","modified":1457167643000},{"_id":"themes/apollo/node_modules/decamelize/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/decamelize/package.json","hash":"6d78ecc531f94ad5bc6cf8034ce6421eea4927c5","modified":1460380281000},{"_id":"themes/apollo/node_modules/decamelize/readme.md","hash":"ab75be4d249b40443b662f2cd920be0cf657c6e0","modified":1457167687000},{"_id":"themes/apollo/node_modules/deprecated/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1390537035000},{"_id":"themes/apollo/node_modules/deprecated/.travis.yml","hash":"90f5e8d71697d1271575c5be0c3d9174ffa49f6f","modified":1390537035000},{"_id":"themes/apollo/node_modules/deprecated/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1390537035000},{"_id":"themes/apollo/node_modules/deprecated/README.md","hash":"ffdd6a0f1e831d1933c19bc546526883964ef28e","modified":1390538777000},{"_id":"themes/apollo/node_modules/deprecated/package.json","hash":"ee236b1a801e9c356bc736239ba76fe578dfbcf2","modified":1460380283000},{"_id":"themes/apollo/node_modules/deprecated/index.js","hash":"5eb9790e1df022081b0d1fc24a52a5b61ee47990","modified":1390539034000},{"_id":"themes/apollo/node_modules/ecc-jsbn/.npmignore","hash":"4eb6d3215a6bbe8de1dd28113d86860c61a5531e","modified":1393978405000},{"_id":"themes/apollo/node_modules/ecc-jsbn/LICENSE","hash":"d9dddd103d636dbaa178cd222de612fd923f62da","modified":1393978405000},{"_id":"themes/apollo/node_modules/ecc-jsbn/index.js","hash":"13c052ad0b0507a4203d5d1274fdfa049a6c1339","modified":1448288282000},{"_id":"themes/apollo/node_modules/ecc-jsbn/README.md","hash":"97cb1bdec48ebb5e46e64fc5441c79d3d38a3c82","modified":1408853444000},{"_id":"themes/apollo/node_modules/ecc-jsbn/package.json","hash":"cd2fe27bd4e37458ace15781ff5d68c7a8d5e6da","modified":1460380283000},{"_id":"themes/apollo/node_modules/duplexer2/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1378905957000},{"_id":"themes/apollo/node_modules/duplexer2/LICENSE.md","hash":"e3136307cb0ebcb271379a109b98b19e8c481ffd","modified":1362299114000},{"_id":"themes/apollo/node_modules/duplexer2/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1378532352000},{"_id":"themes/apollo/node_modules/ecc-jsbn/test.js","hash":"9709f584f556ceb8acaa0fd746029dcb58390eb4","modified":1408853485000},{"_id":"themes/apollo/node_modules/duplexer2/example.js","hash":"194a1edd345562fb45486c1cb4cbd63143ca1d86","modified":1398042537000},{"_id":"themes/apollo/node_modules/duplexer2/index.js","hash":"5dc1cf405aad205f2033b4635f199cf51dc98db8","modified":1398042537000},{"_id":"themes/apollo/node_modules/duplexer2/package.json","hash":"3747b6a69b199b9e559ca4e3a6a14f1275541cd8","modified":1460380283000},{"_id":"themes/apollo/node_modules/duplexer2/README.md","hash":"a2f5cdfd53e3f8e1c415b097df376e7f32b3b7a1","modified":1378905869000},{"_id":"themes/apollo/node_modules/es5-ext/.lint","hash":"f83dda2f68f3540e7a47570d849e8262503226b8","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/.npmignore","hash":"c2aa19f367ac105d17deb7a428a4b3cc53036af4","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/.lintignore","hash":"2d85bf5084532daff9a4168b50ddd85c560f2058","modified":1449840686000},{"_id":"themes/apollo/node_modules/es5-ext/.travis.yml","hash":"8d7c9b275428371ea51d96822f6d21818a8209db","modified":1448960430000},{"_id":"themes/apollo/node_modules/es5-ext/LICENSE","hash":"2e480f905df52f7b5b60f713518704ff1868abed","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/CHANGES","hash":"3cec157a3c8c08460f1edb857f08b02b2b037149","modified":1450438223000},{"_id":"themes/apollo/node_modules/es5-ext/README.md","hash":"d6411c9efdcf658fbfc7fbe2de52e6347874ff95","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/index.js","hash":"b335fcd28d0555f143691b9ae9a9f1601e65bde4","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/global.js","hash":"487c15b5df1798ddf6ad41fd8cd11661732565fa","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/package.json","hash":"416c02bf8e14f3edf1e79454a365aa42fdf61c9b","modified":1460380289000},{"_id":"themes/apollo/node_modules/es6-iterator/.npmignore","hash":"ee933d04feb8c48d0d63f640ab7bd205adb878bf","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/.lint","hash":"6f8d4b8c71260455a92303dff4ee49e58fb104ea","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/.travis.yml","hash":"a904398e6a7ea41083b7c73a2284a5c9f045c5c3","modified":1443792205000},{"_id":"themes/apollo/node_modules/es6-iterator/CHANGES","hash":"3908b3a68941056f9bd64a510b420c226c29b03d","modified":1443792138000},{"_id":"themes/apollo/node_modules/es6-iterator/LICENSE","hash":"e1dbb4fa0cc8faebb415ee77ffcf08c28b811439","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/README.md","hash":"2bf529ae3b8080c109d3225d9f2b80612a270e53","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/array.js","hash":"a430c163e11bec0e234e784b56c3ececcf7b8ea5","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/for-of.js","hash":"717ba10bb7acc2f45d13a9c45f3ac467b9647322","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/get.js","hash":"d29c5ce590472494bbe3925c7196c9079bf80aa6","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/index.js","hash":"49acbda491c803a9c84aa4fe8ce5dcd157ad5b42","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/is-iterable.js","hash":"a85e8f88adb31058890bbe9674f0dcf39cb02d1c","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/package.json","hash":"8235305ef764bc4a7c6abfd55a08b97a4f8fc32c","modified":1460380285000},{"_id":"themes/apollo/node_modules/es6-iterator/valid-iterable.js","hash":"085e1fd7097807c0bb7598dfa81fb774544d8dba","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/string.js","hash":"3baebfbbf89ca9e3ac4acd2997226371fddf063a","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-symbol/.lint","hash":"74f97b0169e6997dac71f01c8c97e9130c41a5b2","modified":1436271219000},{"_id":"themes/apollo/node_modules/es6-symbol/.npmignore","hash":"ee933d04feb8c48d0d63f640ab7bd205adb878bf","modified":1435238797000},{"_id":"themes/apollo/node_modules/es6-symbol/.travis.yml","hash":"9fe86ee446c86a9e42601b54ec71aed3ea4f44bc","modified":1449924266000},{"_id":"themes/apollo/node_modules/es6-symbol/CHANGES","hash":"b09c19b8a70ce21ba21f3237f2a0abf53d7040c7","modified":1449924214000},{"_id":"themes/apollo/node_modules/es6-symbol/README.md","hash":"577a833ba1c05d07875a27e66314c0e2571bdbec","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/LICENSE","hash":"e1dbb4fa0cc8faebb415ee77ffcf08c28b811439","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/implement.js","hash":"29c926283c988987ae440408e5d0a8125b42ff8d","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/is-native-implemented.js","hash":"abf92d060209e098d17308dbd2fd81fee6fecbaa","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/index.js","hash":"deb074eba423b0fd1dd46c97df5214a174a25749","modified":1449850655000},{"_id":"themes/apollo/node_modules/es6-symbol/is-implemented.js","hash":"03d50bc0b269d4658e0f23dbb6bbad860ccc1439","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/is-symbol.js","hash":"be4490c82c04d5d30d59c82093c0ab096522fd5c","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/polyfill.js","hash":"3aeb53d5b8e3d08787aee28b84e2a22750ddd832","modified":1449923953000},{"_id":"themes/apollo/node_modules/es6-symbol/package.json","hash":"3f9f435664e8cc8fa759c6d7c2e10d4564819334","modified":1460380285000},{"_id":"themes/apollo/node_modules/es6-symbol/validate-symbol.js","hash":"c3b4242faff88aaee7df624c5c20c9b05cb3ef7e","modified":1449850752000},{"_id":"themes/apollo/node_modules/extend/.travis.yml","hash":"57d292889e94bf87b8a943a322415a09b958bd24","modified":1429985522000},{"_id":"themes/apollo/node_modules/extend/.npmignore","hash":"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3","modified":1369089234000},{"_id":"themes/apollo/node_modules/extend/CHANGELOG.md","hash":"bcee6a15e3441b60378d9e2c4a489476ade90ee3","modified":1429985965000},{"_id":"themes/apollo/node_modules/extend/.jscs.json","hash":"6ce027f60c056efd71bd18f2eac97feae672fc99","modified":1428996559000},{"_id":"themes/apollo/node_modules/extend/component.json","hash":"3bc267571032a43fd6753e50f689bca2cf7446ab","modified":1429985983000},{"_id":"themes/apollo/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":1397023983000},{"_id":"themes/apollo/node_modules/extend/README.md","hash":"4bce70a4b2e7dda8a760418301a4622c0557bae9","modified":1428996559000},{"_id":"themes/apollo/node_modules/extend/index.js","hash":"7994dc6905fc9b331a6de7d1ec05543b6b05e520","modified":1429985472000},{"_id":"themes/apollo/node_modules/extend/package.json","hash":"79b7255003ab55647388a29ad1bebf89c86d2db7","modified":1460380283000},{"_id":"themes/apollo/node_modules/extsprintf/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/.gitmodules","hash":"4e4b68b6130a57a1e75d2ac0666725b9de1a23d3","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/Makefile","hash":"88eff1bf9d8152cf847e0720e384a4a84418082f","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/Makefile.deps","hash":"f27b6650501f14e21f8ce186476537d0e2f3e026","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/README.md","hash":"e06a0c86165e03cf3170be3f4e5b7dfd5c7eca5f","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/jsl.node.conf","hash":"7197578b829d6c93d8356bf114c7f3d26722ec0b","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/package.json","hash":"c51f89c55a8951bb091b2ec34ea30cc1428106dc","modified":1460380283000},{"_id":"themes/apollo/node_modules/error-ex/LICENSE","hash":"92605120ca7f929c96354540307a059bafe2e78a","modified":1446649645000},{"_id":"themes/apollo/node_modules/error-ex/index.js","hash":"f7ad7bfb3633d3f6c10f52568478cbf33c1a898d","modified":1446650289000},{"_id":"themes/apollo/node_modules/error-ex/README.md","hash":"835fcba18a8825187127541e7502610e2dcfa5b0","modified":1446649645000},{"_id":"themes/apollo/node_modules/error-ex/package.json","hash":"174cb8748487dc7dafd1cf9208e124031759448c","modified":1460380282000},{"_id":"themes/apollo/node_modules/end-of-stream/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1385507043000},{"_id":"themes/apollo/node_modules/end-of-stream/README.md","hash":"9873a3d2102becace683bf903a8d4e8df09a7ea4","modified":1387449646000},{"_id":"themes/apollo/node_modules/end-of-stream/index.js","hash":"138bd49bcb95b65244f0eb267fcac0288e5b059b","modified":1392718617000},{"_id":"themes/apollo/node_modules/end-of-stream/package.json","hash":"5850aedd9eff2e38cde5821755d404e83d7a6b73","modified":1460380282000},{"_id":"themes/apollo/node_modules/fancy-log/README.md","hash":"d2f1bab5d9fad7c01414c2420d175b05817fcb68","modified":1455044876000},{"_id":"themes/apollo/node_modules/end-of-stream/test.js","hash":"9a67fcb50b7d7f08969bd3b06dcc2da6cd5cb9f0","modified":1385507579000},{"_id":"themes/apollo/node_modules/fancy-log/LICENSE","hash":"5aef5ef4736c1fc4735ca87be67d82cc3944382c","modified":1441667320000},{"_id":"themes/apollo/node_modules/fancy-log/index.js","hash":"0fedde237a4786c5329230efbfa3e27dc6b0610a","modified":1455044876000},{"_id":"themes/apollo/node_modules/fancy-log/package.json","hash":"48db42d9988a9083cc84cfba192398d143ada90d","modified":1460380282000},{"_id":"themes/apollo/node_modules/escape-string-regexp/index.js","hash":"17b40cc4dc8a455277994ab351c0650215394042","modified":1456057032000},{"_id":"themes/apollo/node_modules/escape-string-regexp/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1403645654000},{"_id":"themes/apollo/node_modules/escape-string-regexp/package.json","hash":"605f735addd799aed09e9ff7a7b5371baa3e4bd4","modified":1460380282000},{"_id":"themes/apollo/node_modules/escape-string-regexp/readme.md","hash":"b693d3ddaf0a2edac02f8dc9b60382f7a818083e","modified":1456057032000},{"_id":"themes/apollo/node_modules/first-chunk-stream/index.js","hash":"7aa7f1dcb44280830b4d22a22e3d64256ad240b6","modified":1401032813000},{"_id":"themes/apollo/node_modules/first-chunk-stream/package.json","hash":"e2f47a08c97e889d46a91cc59707e299e96218a7","modified":1460380281000},{"_id":"themes/apollo/node_modules/first-chunk-stream/readme.md","hash":"dd2d5a3b6ffb86251f250b61e92e128141787ef1","modified":1401032664000},{"_id":"themes/apollo/node_modules/find-index/README.md","hash":"43e82774070e5848db5eef44d7028d982dc8d695","modified":1404040111000},{"_id":"themes/apollo/node_modules/find-index/last.js","hash":"cdc89afea68a4f1606d7dcfccb937298f9b17bc1","modified":1404035964000},{"_id":"themes/apollo/node_modules/find-index/index.js","hash":"7aa83db59d51b90d827641ebca5d1b4ba5fdd749","modified":1404032977000},{"_id":"themes/apollo/node_modules/find-index/package.json","hash":"5c042450e94b69a53becf1d5e4d0e57962f1addf","modified":1460380281000},{"_id":"themes/apollo/node_modules/flagged-respawn/.npmignore","hash":"21e24145b35d4ce2addb430c559b06cd88cd2111","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/README.md","hash":"373a351c56591a390fcd4ab8ba22e438ab6e49c8","modified":1458638667000},{"_id":"themes/apollo/node_modules/flagged-respawn/.travis.yml","hash":"77c8ed2e952017cb862891774d71f2d4e1c1a355","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/index.js","hash":"fc73edba8bacf46313930820a66e9fcecb8dbafc","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/package.json","hash":"825b6d2d85c4db90c7ca0dfe13030e8bdbaa946d","modified":1460380284000},{"_id":"themes/apollo/node_modules/find-up/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/find-up/index.js","hash":"ca95796b11fe9c62570d1881f6c40603ffbd1f80","modified":1457198946000},{"_id":"themes/apollo/node_modules/find-up/package.json","hash":"ada1ac7ba03d628795ab180bb498ad891785bbeb","modified":1460380282000},{"_id":"themes/apollo/node_modules/find-up/readme.md","hash":"bea77ddbf765541e6bdc10eacabbe12548187cb8","modified":1453750929000},{"_id":"themes/apollo/node_modules/forever-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1426938522000},{"_id":"themes/apollo/node_modules/forever-agent/README.md","hash":"fd2b1d08b55284aa2abc72d199e3c487744a0c31","modified":1426938522000},{"_id":"themes/apollo/node_modules/forever-agent/index.js","hash":"a96917d5912eef5a8ed12a4b1f3a41400eac80d1","modified":1428426146000},{"_id":"themes/apollo/node_modules/forever-agent/package.json","hash":"f0190f64b638eb8e3985efe48fcf9f153df31bb3","modified":1460380282000},{"_id":"themes/apollo/node_modules/fstream/.npmignore","hash":"f098fc2ff8ac864bb604b9e084022be99571b879","modified":1441842040000},{"_id":"themes/apollo/node_modules/fstream/.travis.yml","hash":"3081f603b0e5b0f5a6540376eef56b3dbf47136b","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/README.md","hash":"ed7e0a5f1120d22e425ac6c5f08c3ed611f93baa","modified":1441842040000},{"_id":"themes/apollo/node_modules/fstream/fstream.js","hash":"cde00245f823e368a96b0bf0aa7749fbf94021bd","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/package.json","hash":"befb1d39a3ec10204656a964b8652e91263c564a","modified":1460380285000},{"_id":"themes/apollo/node_modules/findup-sync/.npmignore","hash":"056e6aa202e4a1d6d8a415c2f42e6442e2e92b09","modified":1442281864000},{"_id":"themes/apollo/node_modules/findup-sync/LICENSE-MIT","hash":"b418ef01b1aa695789ec0237509d4c54bbec98ee","modified":1442281864000},{"_id":"themes/apollo/node_modules/findup-sync/README.md","hash":"c8e6da43b03868de1d05c142b416d85a6294fbe3","modified":1442281948000},{"_id":"themes/apollo/node_modules/generate-function/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1406740697000},{"_id":"themes/apollo/node_modules/generate-function/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1406740680000},{"_id":"themes/apollo/node_modules/findup-sync/package.json","hash":"4e0c39149bc526e62102851c90dab5e63ac7b659","modified":1460380282000},{"_id":"themes/apollo/node_modules/generate-function/README.md","hash":"d9255d9f65aeed364e61715ce43392b237dd10a7","modified":1406741356000},{"_id":"themes/apollo/node_modules/generate-function/test.js","hash":"9bb3d8f4f20a97f1af0ef033d8dbe32693f9fb3a","modified":1406740670000},{"_id":"themes/apollo/node_modules/generate-function/example.js","hash":"677d763dc7b82f9d69585388ff04094107481e4d","modified":1406741329000},{"_id":"themes/apollo/node_modules/generate-function/package.json","hash":"4fc6c7f9b15a164bae2208174f9dde328a6a0540","modified":1460380283000},{"_id":"themes/apollo/node_modules/generate-function/index.js","hash":"2942e1c63f5a2013a70196110b4859029d09c48d","modified":1408639884000},{"_id":"themes/apollo/node_modules/form-data/.dockerignore","hash":"1b496309f27eaf50766efdcf30a1262b640f764c","modified":1451411275000},{"_id":"themes/apollo/node_modules/form-data/.editorconfig","hash":"f25626398b38d8a693d95eb8274090861f4781bc","modified":1439784209000},{"_id":"themes/apollo/node_modules/form-data/.eslintrc","hash":"94459ff2b5b40621426339cbb1568effeabf219e","modified":1458029925000},{"_id":"themes/apollo/node_modules/form-data/.eslintignore","hash":"7ca689ee76b1ec3f8b20acdfae66dc26d6daa935","modified":1440043461000},{"_id":"themes/apollo/node_modules/form-data/License","hash":"1d11381521bdc7e7df9bb1d7bf85341ffca266d9","modified":1354688992000},{"_id":"themes/apollo/node_modules/form-data/README.md","hash":"3c05cc44ec45fc1a7b48eef5b725b69ff71a2a4a","modified":1451628251000},{"_id":"themes/apollo/node_modules/form-data/wercker.yml","hash":"ee5a8c67838bc047be3527b2b0994aad9786ac77","modified":1451631950000},{"_id":"themes/apollo/node_modules/form-data/package.json","hash":"4122ec4ca8aa538ec7102d8b09e3fd6bebb99465","modified":1460380284000},{"_id":"themes/apollo/node_modules/gaze/LICENSE-MIT","hash":"37915b706014362d2676a6f7b3ee86e1322f27be","modified":1444075561000},{"_id":"themes/apollo/node_modules/gaze/README.md","hash":"23d436d51a34c68353db4a4671092234a47ac1cc","modified":1444076172000},{"_id":"themes/apollo/node_modules/get-stdin/package.json","hash":"63e0f9bfeb58642d59b158af8f746bf51b851609","modified":1460380281000},{"_id":"themes/apollo/node_modules/gaze/package.json","hash":"078791a16e92ed8288ada07c5c68b13154f0b6ca","modified":1460380282000},{"_id":"themes/apollo/node_modules/get-stdin/index.js","hash":"d2a3722d41b11b6c0783046b1657b5aa0c56e536","modified":1421760909000},{"_id":"themes/apollo/node_modules/get-stdin/readme.md","hash":"463253693f496ad1b7e3d7504489d24625a33859","modified":1408302976000},{"_id":"themes/apollo/node_modules/gauge/.npmignore","hash":"55b765775e83c893a09f350acd5f831f6ef793c5","modified":1455832954000},{"_id":"themes/apollo/node_modules/gauge/LICENSE","hash":"ce0c4782bdbd720baf4d2484e5b71728d3a943af","modified":1455832954000},{"_id":"themes/apollo/node_modules/gauge/README.md","hash":"d112a4f28a723fbb561ecc16337dce9114a31b7f","modified":1455835241000},{"_id":"themes/apollo/node_modules/gauge/package.json","hash":"3725260feed7f6db25e1e1c43c69e0a8392ed4c6","modified":1460380283000},{"_id":"themes/apollo/node_modules/gauge/example.png","hash":"7fb19a54b7521b6a7b08c52ef70f311751fa800f","modified":1455832954000},{"_id":"themes/apollo/node_modules/gauge/progress-bar.js","hash":"d8cdb23e5cc8a741f6ff4bd2e9e9fd0d91ee7f01","modified":1455835395000},{"_id":"themes/apollo/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/apollo/node_modules/glob/README.md","hash":"07230aa38a2a68d30d9d56ab3658b5be2a480337","modified":1434666227000},{"_id":"themes/apollo/node_modules/glob/common.js","hash":"8eafaad2390b2916188550cb28ee4006490580ef","modified":1439497932000},{"_id":"themes/apollo/node_modules/glob/package.json","hash":"08a3cdbc375f7ab3473f72e7d95208b6156f8906","modified":1460380283000},{"_id":"themes/apollo/node_modules/glob/glob.js","hash":"7eadb3bf29e1b6ed15cd11d2033b214b2e1a2e04","modified":1442360722000},{"_id":"themes/apollo/node_modules/glob-stream/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1389191537000},{"_id":"themes/apollo/node_modules/glob/sync.js","hash":"6585718061bdd1f27bec952486252c6ee46ea35e","modified":1436923593000},{"_id":"themes/apollo/node_modules/glob-stream/index.js","hash":"a006ea91f5e611d2c2e49a31f4f73949f3d5a534","modified":1409596176000},{"_id":"themes/apollo/node_modules/glob-stream/README.md","hash":"8ea2556ce51cca33019efb76a92f1977157c2b29","modified":1389854784000},{"_id":"themes/apollo/node_modules/glob-stream/package.json","hash":"a12fe0a1bf682ec9cfcd5ec93b1dd560d2127f7a","modified":1460380282000},{"_id":"themes/apollo/node_modules/glob2base/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1402376992000},{"_id":"themes/apollo/node_modules/glob2base/index.js","hash":"44c2325e713fd4a2f6f39a8f7b3e559bb8abb8ef","modified":1415921443000},{"_id":"themes/apollo/node_modules/glob2base/package.json","hash":"37b616a23441c4a48aca66e5d9a3a81ba4866780","modified":1460380282000},{"_id":"themes/apollo/node_modules/glob-watcher/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1397537692000},{"_id":"themes/apollo/node_modules/glob2base/README.md","hash":"2422c76b894de6ca05649c9d938600a8707c64e0","modified":1402377227000},{"_id":"themes/apollo/node_modules/glob-watcher/.travis.yml","hash":"90f5e8d71697d1271575c5be0c3d9174ffa49f6f","modified":1397537692000},{"_id":"themes/apollo/node_modules/glob-watcher/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1397537692000},{"_id":"themes/apollo/node_modules/glob-watcher/README.md","hash":"32cf4bbd08ca0a7c932863facf42a045c54497dd","modified":1397537692000},{"_id":"themes/apollo/node_modules/glob-watcher/index.js","hash":"d2cc0b87f11d6eb6a7b930d2d21f8c4eca2f9cbb","modified":1397537770000},{"_id":"themes/apollo/node_modules/glob-watcher/package.json","hash":"608fe5f6f7747b12b9a4954935539252e5421180","modified":1460380283000},{"_id":"themes/apollo/node_modules/generate-object-property/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1427465395000},{"_id":"themes/apollo/node_modules/generate-object-property/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1427465395000},{"_id":"themes/apollo/node_modules/generate-object-property/LICENSE","hash":"a95ab3a4b0e4bd978897f09b3b430a449da20a08","modified":1427465395000},{"_id":"themes/apollo/node_modules/generate-object-property/README.md","hash":"e300730218d5bbf519653e5d19cfbd5857b78796","modified":1427465395000},{"_id":"themes/apollo/node_modules/generate-object-property/package.json","hash":"ff1038595bb961b94faca8e9f1782d0dc6861f5b","modified":1460380283000},{"_id":"themes/apollo/node_modules/generate-object-property/index.js","hash":"47eacac5534f58609e9f3ccc3a1c5879c20f9add","modified":1431893671000},{"_id":"themes/apollo/node_modules/generate-object-property/test.js","hash":"b738cbfd474028baa30f5b003e228356d61c6a58","modified":1427465395000},{"_id":"themes/apollo/node_modules/glogg/README.md","hash":"b3a65f8bdf4cb09bffe5c6173d67fc223f88e6e7","modified":1441934182000},{"_id":"themes/apollo/node_modules/glogg/index.js","hash":"d3049a8abb64a80355f0319be2dce88f3c187214","modified":1420966777000},{"_id":"themes/apollo/node_modules/glogg/package.json","hash":"7d0f76be9d9c3f1bd57f1a413a4ac2b69d7cc60c","modified":1460380282000},{"_id":"themes/apollo/node_modules/glogg/LICENSE","hash":"de40e364b1016b13d3888c8a778cae31652bc20c","modified":1419816613000},{"_id":"themes/apollo/node_modules/globule/.npmignore","hash":"4908b67461dad9714fb835308800efdeea795c62","modified":1363728678000},{"_id":"themes/apollo/node_modules/globule/.jshintrc","hash":"29433d358ee71a9b57a8059eaa4a01a227c3e664","modified":1363728678000},{"_id":"themes/apollo/node_modules/globule/.travis.yml","hash":"75d47644e03b370399b1c187df69c8f10f780b65","modified":1365707661000},{"_id":"themes/apollo/node_modules/globule/Gruntfile.js","hash":"f69e615ca9653096cdaf8d3c18ba10e0dfa9118c","modified":1363894316000},{"_id":"themes/apollo/node_modules/globule/LICENSE-MIT","hash":"b418ef01b1aa695789ec0237509d4c54bbec98ee","modified":1363728678000},{"_id":"themes/apollo/node_modules/globule/README.md","hash":"3977f5ddc732867ab17cbbfa40eab7959124b3bc","modified":1365709973000},{"_id":"themes/apollo/node_modules/globule/package.json","hash":"df24b321571e6529b6d0c9cfcbeb34bdbb289ace","modified":1460380284000},{"_id":"themes/apollo/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1435431095000},{"_id":"themes/apollo/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1435436586000},{"_id":"themes/apollo/node_modules/graceful-fs/README.md","hash":"3ca4000bd861d5d95e8f861fc35d30a31b48677d","modified":1435601369000},{"_id":"themes/apollo/node_modules/graceful-fs/graceful-fs.js","hash":"48c86f6a8c193aa2ee2969f4b8fbf3c722ab97d8","modified":1454449073000},{"_id":"themes/apollo/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1435436586000},{"_id":"themes/apollo/node_modules/graceful-fs/package.json","hash":"200e8ac6369a59b06b92ec41a5c4cee96e152910","modified":1460380283000},{"_id":"themes/apollo/node_modules/graceful-readlink/.travis.yml","hash":"1f437f56c31df7e844c4eae4ec71c51a4b5c6f45","modified":1423665419000},{"_id":"themes/apollo/node_modules/graceful-fs/polyfills.js","hash":"57619610164625aeff0f6bbefc4008ac2d909b43","modified":1435436586000},{"_id":"themes/apollo/node_modules/graceful-readlink/.npmignore","hash":"9b5c8076a6c12fe70da70e40d7ed1e53735810cb","modified":1423667128000},{"_id":"themes/apollo/node_modules/graceful-readlink/README.md","hash":"a3e9fe045614e9dc2473a75cd9a7e9a6315043c9","modified":1423714083000},{"_id":"themes/apollo/node_modules/graceful-readlink/package.json","hash":"35ffb3ccab0d67e54aaf0e1cf82d6329959de568","modified":1460380283000},{"_id":"themes/apollo/node_modules/graceful-readlink/LICENSE","hash":"e9f4a5c36ecaa401588e457af96e7a85d53a98f0","modified":1423665419000},{"_id":"themes/apollo/node_modules/graceful-readlink/index.js","hash":"3ecfe7f28912aa64161b8a6e4129c2b4fbcf50a0","modified":1423714095000},{"_id":"themes/apollo/node_modules/gulp-autoprefixer/index.js","hash":"d4adc73145b1462a27432ca0ec74befef7686fa4","modified":1443030273000},{"_id":"themes/apollo/node_modules/gulp-autoprefixer/readme.md","hash":"6b6ea498c018949afbd5832aee2192987163d970","modified":1441387064000},{"_id":"themes/apollo/node_modules/gulp-autoprefixer/package.json","hash":"09b3e7f3ae34528ef0c7d105ae2cf4e41a3fde62","modified":1460380282000},{"_id":"themes/apollo/node_modules/gulp-autoprefixer/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/LICENSE.md","hash":"22adcd0731c9392621a33ca392db56c40124bced","modified":1443376831000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/README.md","hash":"30beffcf63579e3b5d44b685c1c404809ea79ad6","modified":1443401304000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/package.json","hash":"583508bd7529d930ca5102fafdc6deb82736adeb","modified":1460380282000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/index.js","hash":"5f1a125c71faec4141ee04762d98a66c645ddb1b","modified":1443402567000},{"_id":"themes/apollo/node_modules/gulplog/CHANGELOG.md","hash":"05c91cdc491d511cc139d43a48228508af191f45","modified":1443228982000},{"_id":"themes/apollo/node_modules/gulplog/index.js","hash":"85b5a6aa1ef72d9a3dd0d139ce40de9dea456231","modified":1439942211000},{"_id":"themes/apollo/node_modules/gulplog/LICENSE","hash":"b04e7634ad4f265c22c571a43201d16ac9f8e855","modified":1443228093000},{"_id":"themes/apollo/node_modules/gulplog/README.md","hash":"9e5c10a708d3606f8b4ca80dfd0d9f57f3463eb5","modified":1443229042000},{"_id":"themes/apollo/node_modules/gulplog/package.json","hash":"fe9af76cb5c12bbc183cfb87512aa25573072955","modified":1460380282000},{"_id":"themes/apollo/node_modules/gulp-sass/.editorconfig","hash":"9bb210d7cd9310319b10ed733408c481d5cdff8c","modified":1442837213000},{"_id":"themes/apollo/node_modules/gulp-sass/.eslintrc","hash":"5ac7ff726b264b2138ad5571423f3df4e3a06ddc","modified":1449752161000},{"_id":"themes/apollo/node_modules/gulp-sass/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1442837213000},{"_id":"themes/apollo/node_modules/gulp-sass/.travis.yml","hash":"58c493b0a24cd96ae2bf57701e4bd66ee11077bf","modified":1454585722000},{"_id":"themes/apollo/node_modules/gulp-sass/CHANGELOG.md","hash":"e4b9749c74425575cfcdfa5c6b3faf1f0eb1cc39","modified":1442837599000},{"_id":"themes/apollo/node_modules/gulp-sass/CONTRIBUTING.md","hash":"74b155eb0dc3fae69db1bd96c0bb96778e310a28","modified":1442837213000},{"_id":"themes/apollo/node_modules/gulp-sass/LICENSE","hash":"c5071cbccec37fb710f5f9b2c2d2b04564484106","modified":1442837213000},{"_id":"themes/apollo/node_modules/gulp-sass/index.js","hash":"dedadb93a5de7b329f916858492b32df826a6fb5","modified":1454585722000},{"_id":"themes/apollo/node_modules/has-ansi/index.js","hash":"e7305f641b51be9dc463cdfc1e6b7afb8d03576e","modified":1402774137000},{"_id":"themes/apollo/node_modules/gulp-sass/README.md","hash":"d278915f4c9c6ad7722d48b39ff2488a459b69e7","modified":1454585722000},{"_id":"themes/apollo/node_modules/gulp-sass/package.json","hash":"97dd6ca418a217dc5965aac3181ace06dea6d6da","modified":1460380283000},{"_id":"themes/apollo/node_modules/has-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/has-ansi/package.json","hash":"f124fda0a03fb46a2143324442f71f2bfa4c499d","modified":1460380281000},{"_id":"themes/apollo/node_modules/has-ansi/readme.md","hash":"8f5dd99e33b07d2f4abaff2410728acca335ebfc","modified":1435680789000},{"_id":"themes/apollo/node_modules/has-flag/index.js","hash":"4bbcc37d7537b7270cdc9b39b382427dac49fb0e","modified":1436308206000},{"_id":"themes/apollo/node_modules/has-flag/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/has-flag/package.json","hash":"6a2039984378a18ad11b961bfb0b4e7fa0c18aca","modified":1460380281000},{"_id":"themes/apollo/node_modules/has-flag/readme.md","hash":"775711555f26eaa075650debedd9142a61ece8a3","modified":1436308214000},{"_id":"themes/apollo/node_modules/gulp-util/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/index.js","hash":"73d4c17894c17e0699b09dcd412c9c30f0849024","modified":1441922300000},{"_id":"themes/apollo/node_modules/gulp-util/package.json","hash":"334a86cc9e47a955d81b309cf271c0dfa2580967","modified":1460380284000},{"_id":"themes/apollo/node_modules/gulp-util/README.md","hash":"2daacda2cad0c7f24789f8718cdc8c7acb254b32","modified":1440739656000},{"_id":"themes/apollo/node_modules/has-gulplog/LICENSE","hash":"a63c2eb3459651162782880d7bdb565ba69e5016","modified":1441921816000},{"_id":"themes/apollo/node_modules/has-gulplog/README.md","hash":"e97244e6e9843ceec5d99eed422f54a24ea4e5f0","modified":1441921816000},{"_id":"themes/apollo/node_modules/has-gulplog/index.js","hash":"1c2d8b9d681605a991aacf13007ad6362fe92dbb","modified":1441922085000},{"_id":"themes/apollo/node_modules/has-gulplog/package.json","hash":"9838e81718e1192d364290f214400974b4037cae","modified":1460380281000},{"_id":"themes/apollo/node_modules/has-unicode/.npmignore","hash":"ca811d229ae23df0949afffda35b5f1bf082d89f","modified":1419955690000},{"_id":"themes/apollo/node_modules/has-unicode/LICENSE","hash":"0478d8708f5ff5e49c150412201cb066a9b2006d","modified":1419955664000},{"_id":"themes/apollo/node_modules/has-unicode/README.md","hash":"ace56f38c5b7a359fa99a9338a7d93a85a1d24ab","modified":1448499284000},{"_id":"themes/apollo/node_modules/has-unicode/index.js","hash":"35b9e9a4011608fd14ea1d7f158654d7eda8fd0b","modified":1448499183000},{"_id":"themes/apollo/node_modules/hawk/.npmignore","hash":"45153061dbfa521e3ae4055e4ac17ec38883ac1d","modified":1453400406000},{"_id":"themes/apollo/node_modules/has-unicode/package.json","hash":"f484d3c2fba381543ec97774c105010a62c45277","modified":1460380283000},{"_id":"themes/apollo/node_modules/hawk/.travis.yml","hash":"7b48f22fde36baa336c21d81436dce6a2f47ff4c","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/LICENSE","hash":"23dc309f4a3614d359884bbc4a64d0ca20e41d68","modified":1453233148000},{"_id":"themes/apollo/node_modules/hawk/component.json","hash":"004be58031f7d1cbdbff8ca684b464df449cde8c","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/bower.json","hash":"0394736479292c80f177ca8d29263d9162d489b3","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/package.json","hash":"b49f488a8b31855fc6d3a30a914703683c9c3f77","modified":1460380285000},{"_id":"themes/apollo/node_modules/hawk/README.md","hash":"332080064c5f554a1ad68a43ab48a68d2b49a1a4","modified":1453400406000},{"_id":"themes/apollo/node_modules/har-validator/LICENSE","hash":"57fc502455231f1d10c4d2e67c261f0fc56bb17d","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/README.md","hash":"43ef10fa75b3eb5369012ac32654ab907a79fb14","modified":1453244556000},{"_id":"themes/apollo/node_modules/har-validator/package.json","hash":"778f33fb7cbc337db6d1300d81e3e9b812ff7b56","modified":1460380285000},{"_id":"themes/apollo/node_modules/gulp/CHANGELOG.md","hash":"b52272a392a067b0f635520611adfe8316c303d5","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/LICENSE","hash":"427b714be75a629933266745058f51e5c86e0a9c","modified":1454273752000},{"_id":"themes/apollo/node_modules/gulp/README.md","hash":"2ea9ea8a51472fcb14bcf299410425b6d847bd9c","modified":1454956378000},{"_id":"themes/apollo/node_modules/gulp/index.js","hash":"d96a102f21c188b975a465e400ac36d395664e54","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/package.json","hash":"5d170c8a9bdcc7a85e2c115b058c9a3b494a9546","modified":1460380284000},{"_id":"themes/apollo/node_modules/hosted-git-info/.npmignore","hash":"865cb43f913089890334422db7f16b15be6f4c1c","modified":1428454391000},{"_id":"themes/apollo/node_modules/gulp/gulp.1","hash":"bb67a888e903b546457b1eb9bafeed9a917e5aa9","modified":1454957415000},{"_id":"themes/apollo/node_modules/hosted-git-info/.travis.yml","hash":"ad59faa684c7a634ef5c177a18fec5e7f993293e","modified":1428454391000},{"_id":"themes/apollo/node_modules/hosted-git-info/LICENSE","hash":"f87fe9863dc6d7d54117b1670ce07a85715dc465","modified":1432234152000},{"_id":"themes/apollo/node_modules/hosted-git-info/git-host-info.js","hash":"fba94ee737713b33db97287f2d46cb369956d217","modified":1432233905000},{"_id":"themes/apollo/node_modules/hosted-git-info/README.md","hash":"e6029d255fb11860bb98f9d547b73ba4b77a465e","modified":1432233905000},{"_id":"themes/apollo/node_modules/hosted-git-info/git-host.js","hash":"e3a48f79037b9bf96a7466fa44c19b136c3536f0","modified":1432233905000},{"_id":"themes/apollo/node_modules/hosted-git-info/index.js","hash":"c4abf83418f40156084d8e003cf233d52a8b9c6d","modified":1432233905000},{"_id":"themes/apollo/node_modules/hosted-git-info/package.json","hash":"0bd166df61998ff21354a35d2aef31f721f92732","modified":1460380284000},{"_id":"themes/apollo/node_modules/hoek/.npmignore","hash":"09229b8d2f1d99ec4a5068fbe0e8e6b6ed13219b","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/.travis.yml","hash":"2d3f9431018875b0c8c44e8f45b62a5d54eb72fc","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/LICENSE","hash":"8798f9342afed7351f4aa459b96e4d1062c1dd89","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/package.json","hash":"0fef1787e6e8dcf3037bf57f67bcfeea6ab68086","modified":1460380284000},{"_id":"themes/apollo/node_modules/hoek/README.md","hash":"fa10590d10b5c14546e9124bf634621583235285","modified":1442428161000},{"_id":"themes/apollo/node_modules/http-signature/.dir-locals.el","hash":"bda1c75ba87348876340908be6799d6ac3a4b807","modified":1442600921000},{"_id":"themes/apollo/node_modules/http-signature/.npmignore","hash":"8992dfba5fdf2ba23c1da7e57021d6b1274f2456","modified":1442600921000},{"_id":"themes/apollo/node_modules/http-signature/CHANGES.md","hash":"59a2ab5cc1ac7f7691560038beb2349e628eeacc","modified":1453759387000},{"_id":"themes/apollo/node_modules/http-signature/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1442600921000},{"_id":"themes/apollo/node_modules/http-signature/README.md","hash":"5847fa2ec86a2ca744776acd5528fdfd6c3377fc","modified":1444857627000},{"_id":"themes/apollo/node_modules/http-signature/package.json","hash":"92e8f4e5ad2add240eb8203dbc335dd1c26bba23","modified":1460380284000},{"_id":"themes/apollo/node_modules/http-signature/http_signing.md","hash":"945eb22661d1c43e547371ac8d354a4b761eab09","modified":1453759268000},{"_id":"themes/apollo/node_modules/inflight/.eslintrc","hash":"1f843c9ab12b748c1dc1a8492807d1b5a4d63660","modified":1412318451000},{"_id":"themes/apollo/node_modules/inflight/README.md","hash":"cabcd4da1794331188da1f8f864ea1aa0ca68657","modified":1412207810000},{"_id":"themes/apollo/node_modules/inflight/LICENSE","hash":"515ec4469197395143dd4bfe9b1bc4e0d9b6b12a","modified":1412207810000},{"_id":"themes/apollo/node_modules/inflight/inflight.js","hash":"be7331b58b1433b0fa179d7a99ad9aca50f9d573","modified":1412318830000},{"_id":"themes/apollo/node_modules/inflight/package.json","hash":"9714964637f04f861249efb11ecdc178efb068e1","modified":1460380283000},{"_id":"themes/apollo/node_modules/indent-string/index.js","hash":"1a88e38403d5119488e8e3568efe1f7b5738f551","modified":1437352719000},{"_id":"themes/apollo/node_modules/inflight/test.js","hash":"b063404038229fb650d55794be860bd5f74ca1f3","modified":1412318795000},{"_id":"themes/apollo/node_modules/indent-string/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/indent-string/package.json","hash":"fe2e19f40d11d9d516aab629813f8124f6eef738","modified":1460380282000},{"_id":"themes/apollo/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1376950172000},{"_id":"themes/apollo/node_modules/indent-string/readme.md","hash":"5b78316edc5fffbe1c442407a96e2087d2c47db1","modified":1437851704000},{"_id":"themes/apollo/node_modules/inherits/inherits.js","hash":"3146ed5f0e6053ad30398afdbd5a0d6a4133a4cb","modified":1368714177000},{"_id":"themes/apollo/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":1368714278000},{"_id":"themes/apollo/node_modules/inherits/inherits_browser.js","hash":"7c13eacf36e79e5e7dd257d80ec25846e4df7eb3","modified":1368715198000},{"_id":"themes/apollo/node_modules/inherits/package.json","hash":"9d8f622823098c24d21b23bd23f6c4a605ccb0b7","modified":1460380283000},{"_id":"themes/apollo/node_modules/ini/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911895000},{"_id":"themes/apollo/node_modules/inherits/test.js","hash":"ba3f458c9b47c1bcd3fdf5dd9289b7aa0ae90b1c","modified":1368715388000},{"_id":"themes/apollo/node_modules/ini/README.md","hash":"1997c778eb616617ba9d369f6a27828bf83af8b8","modified":1410851261000},{"_id":"themes/apollo/node_modules/ini/ini.js","hash":"361f1811be8059fe1e009db0b8805fb17046d4fb","modified":1423612669000},{"_id":"themes/apollo/node_modules/ini/package.json","hash":"932a90099484917594207b596aac298371f5c0ec","modified":1460380281000},{"_id":"themes/apollo/node_modules/interpret/CHANGELOG","hash":"f346cc0db101eb8658185918130fde821f1072bf","modified":1447886401000},{"_id":"themes/apollo/node_modules/interpret/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1420694208000},{"_id":"themes/apollo/node_modules/interpret/index.js","hash":"76fe7bbbb2b891a3e86e3c53f0e47990bbcd807a","modified":1447886273000},{"_id":"themes/apollo/node_modules/interpret/package.json","hash":"58da475d8a9a91a7fb0e020219c9964452b83b65","modified":1460380282000},{"_id":"themes/apollo/node_modules/interpret/README.md","hash":"d4c5c998fb84102a3d179ebf931c8260131281c8","modified":1447886273000},{"_id":"themes/apollo/node_modules/invert-kv/index.js","hash":"de8db0a1bda39e00bb4831788a8a52fb7c968e94","modified":1403813196000},{"_id":"themes/apollo/node_modules/invert-kv/readme.md","hash":"b50599e017388e5820ce7991ef8815c1cc334aa8","modified":1403813226000},{"_id":"themes/apollo/node_modules/invert-kv/package.json","hash":"28cf5bfb7817466a5eb0e1d8c90bc27324d45d8c","modified":1460380281000},{"_id":"themes/apollo/node_modules/is-absolute/LICENSE","hash":"2fd562ce132b37ad27a1d175dd68ebf886083d5c","modified":1425579512000},{"_id":"themes/apollo/node_modules/is-absolute/README.md","hash":"5de59a278858ef3370f68cf280a1fe8d190c3483","modified":1425579932000},{"_id":"themes/apollo/node_modules/is-absolute/index.js","hash":"52e1cd93c6c4a60fcd10d4d684c906fa5acf2272","modified":1425579798000},{"_id":"themes/apollo/node_modules/is-builtin-module/index.js","hash":"65a5abe8edf49455c359cdf6142534e8c2d8ce75","modified":1430754166000},{"_id":"themes/apollo/node_modules/is-absolute/package.json","hash":"84f71acdec76c48e32a73ff40b7928a700f66fec","modified":1460380282000},{"_id":"themes/apollo/node_modules/is-builtin-module/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/is-builtin-module/package.json","hash":"6b121b1e8d91ddbf8d9c0c0b6b44709becb7e84b","modified":1460380281000},{"_id":"themes/apollo/node_modules/is-builtin-module/readme.md","hash":"44b4718cee02b8402f61463e49ad452012e0b61e","modified":1430754402000},{"_id":"themes/apollo/node_modules/is-arrayish/.istanbul.yml","hash":"24082b12cb3200acec9ea0cb536ceebd5054da0d","modified":1440522010000},{"_id":"themes/apollo/node_modules/is-arrayish/.npmignore","hash":"ed562b110b79d75f57d1731f08882d7020aac45a","modified":1440522010000},{"_id":"themes/apollo/node_modules/is-arrayish/.editorconfig","hash":"1ab3c49e2db2133a92189f897310593ff089ecdf","modified":1440522010000},{"_id":"themes/apollo/node_modules/is-arrayish/.travis.yml","hash":"6f54a686b1b0f4531fbabc3409a86e150ea99f85","modified":1440625885000},{"_id":"themes/apollo/node_modules/is-arrayish/LICENSE","hash":"92605120ca7f929c96354540307a059bafe2e78a","modified":1440522010000},{"_id":"themes/apollo/node_modules/is-arrayish/README.md","hash":"a3cd377afa76023f030cb6b0ac78e02240e3e476","modified":1440522104000},{"_id":"themes/apollo/node_modules/is-arrayish/index.js","hash":"6f9d636aff36876efe7d1cefbbdee98bfcc28c98","modified":1441062121000},{"_id":"themes/apollo/node_modules/is-arrayish/package.json","hash":"19636825e052b68e77ce4f5ace93b6da518d46fe","modified":1460380283000},{"_id":"themes/apollo/node_modules/is-finite/index.js","hash":"fd55fe3079504f4cdefb03d31382e336ac220156","modified":1432155356000},{"_id":"themes/apollo/node_modules/is-finite/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/is-finite/package.json","hash":"6b96c6da6e095012255b7e8fd357d90fbbf07d74","modified":1460380282000},{"_id":"themes/apollo/node_modules/is-finite/readme.md","hash":"7c049efb3286daa8ea4aeaceb8aea797bdc8a182","modified":1407166471000},{"_id":"themes/apollo/node_modules/is-fullwidth-code-point/index.js","hash":"7647b9a016393c95e9694ff1dafb3e4ee66fd795","modified":1437083853000},{"_id":"themes/apollo/node_modules/is-fullwidth-code-point/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/is-fullwidth-code-point/readme.md","hash":"51b58cdc5cdf9b9e20396c9daaa411a7337280c3","modified":1437083960000},{"_id":"themes/apollo/node_modules/is-my-json-valid/.npmignore","hash":"1fedf869763716fdbe1101e24a0d2231d4ddfc7d","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-fullwidth-code-point/package.json","hash":"521cf96924cff37c3ccfcd25e92e2e32ce8396ac","modified":1460380282000},{"_id":"themes/apollo/node_modules/is-my-json-valid/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/LICENSE","hash":"a95ab3a4b0e4bd978897f09b3b430a449da20a08","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/README.md","hash":"f2703730d556b550b13e00597a8ccb2f43eb1941","modified":1456180252000},{"_id":"themes/apollo/node_modules/is-my-json-valid/example.js","hash":"cee9de4194e0c4ba372b5678983d6d701385d355","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/formats.js","hash":"2d511859d3d654f3bf604a47e13f98e9b1bc305c","modified":1453067668000},{"_id":"themes/apollo/node_modules/is-my-json-valid/package.json","hash":"bbebdf6eab17ac9b977d94a6de359c7a94a7d44b","modified":1460380285000},{"_id":"themes/apollo/node_modules/is-my-json-valid/index.js","hash":"6c62fa78f5375a9db47f9006b883e049ebe700bb","modified":1456180252000},{"_id":"themes/apollo/node_modules/is-my-json-valid/require.js","hash":"24081d202d91cdd0b4910b57dfd434ab41543b07","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-property/.npmignore","hash":"eb8c8804bfda6f6b62a7b34a0e7b709ed862a510","modified":1374156601000},{"_id":"themes/apollo/node_modules/is-property/LICENSE","hash":"50fe55ab192fa4860c14bd57bcec5d090904eb97","modified":1374156563000},{"_id":"themes/apollo/node_modules/is-property/README.md","hash":"dc4d53b5d6c1d1387fd41fb6bf3597d9642540a4","modified":1374156267000},{"_id":"themes/apollo/node_modules/is-property/package.json","hash":"4d4795135d29b7865d18a8f2c9221cc671d079e6","modified":1460380282000},{"_id":"themes/apollo/node_modules/is-relative/LICENSE-MIT","hash":"c934f50e6a16b26eefb57b253348ac2618e1d548","modified":1416205154000},{"_id":"themes/apollo/node_modules/is-property/is-property.js","hash":"d09cd64e2bcead412c4d3be1d95f76fe1e315794","modified":1419518893000},{"_id":"themes/apollo/node_modules/is-relative/README.md","hash":"ef83ec6ed76d193adff8c35cc80f3fce32951e6f","modified":1416205646000},{"_id":"themes/apollo/node_modules/is-typedarray/LICENSE.md","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1401649683000},{"_id":"themes/apollo/node_modules/is-typedarray/README.md","hash":"8f33b0dd445cfa2ab6712dee34df082f480a5a76","modified":1401649785000},{"_id":"themes/apollo/node_modules/is-relative/index.js","hash":"d25c6d281ae790e6d8ae6bd2331814f1234344ab","modified":1416205359000},{"_id":"themes/apollo/node_modules/is-relative/package.json","hash":"cf61f55ab2414b27b6965f8669a8e83b8ac0a48e","modified":1460380281000},{"_id":"themes/apollo/node_modules/is-typedarray/index.js","hash":"b7ff45ac41fdcb4bb75dd771d6cb9bfbd129e56d","modified":1431824601000},{"_id":"themes/apollo/node_modules/is-typedarray/package.json","hash":"9d6f852af858bba494538b182aa99ad113707db3","modified":1460380282000},{"_id":"themes/apollo/node_modules/is-typedarray/test.js","hash":"c3aa563061f8d086aaf066b389b0e811444e3913","modified":1401649839000},{"_id":"themes/apollo/node_modules/isexe/.npmignore","hash":"5c82cb364ccc42139031fc6519c138ef81f2df26","modified":1453008305000},{"_id":"themes/apollo/node_modules/isexe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1454992766000},{"_id":"themes/apollo/node_modules/isexe/README.md","hash":"59d02c0354fd7d5da52783976038003d940525bf","modified":1453773938000},{"_id":"themes/apollo/node_modules/isexe/access.js","hash":"b9e0d3355dd35037a45023b198664a230994e1fa","modified":1453771669000},{"_id":"themes/apollo/node_modules/isexe/index.js","hash":"3bf4b638355aae1a2d37ce7349aa4c85a69bd0f8","modified":1453771901000},{"_id":"themes/apollo/node_modules/isexe/mode.js","hash":"0ff34b943491989ff0c89b9fd88ab591cb39980b","modified":1453771822000},{"_id":"themes/apollo/node_modules/isexe/package.json","hash":"d4d56e1b258de3d95c8607941f31d83ddccc81b2","modified":1460380283000},{"_id":"themes/apollo/node_modules/isexe/windows.js","hash":"800422a4c5d1957e62da0cff8b1e990d0e1f5403","modified":1453773768000},{"_id":"themes/apollo/node_modules/isstream/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1396828238000},{"_id":"themes/apollo/node_modules/isstream/.npmignore","hash":"ecb39380a39d86a6861344abf98891016990e2c5","modified":1396757852000},{"_id":"themes/apollo/node_modules/isstream/.travis.yml","hash":"890d1669abc18b7c0541df1483b9f27c60063712","modified":1396829306000},{"_id":"themes/apollo/node_modules/isstream/LICENSE.md","hash":"3fc5bd6825a9d8fd53c0cd8de0bd16d1c1a7f37a","modified":1425687271000},{"_id":"themes/apollo/node_modules/isstream/README.md","hash":"0563c8dd8178c335de8d882a14c0408ba179789b","modified":1425687291000},{"_id":"themes/apollo/node_modules/isstream/isstream.js","hash":"db3d8708d100bdb66fd33e1eeb6d2b232016934b","modified":1396827239000},{"_id":"themes/apollo/node_modules/isstream/package.json","hash":"277334e560a703b01e59f6c03ca8620f098d365c","modified":1460380283000},{"_id":"themes/apollo/node_modules/jodid25519/.npmignore","hash":"1b7230afa85802664d24976363ffd9c7474e7591","modified":1445887357000},{"_id":"themes/apollo/node_modules/isstream/test.js","hash":"3c3c171729a3738bd73b12d311265c7fcfb2a9fa","modified":1396831146000},{"_id":"themes/apollo/node_modules/jodid25519/AUTHORS.md","hash":"cc3f12565134b1da757450b40b5f3fa80c7fc132","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/.travis.yml","hash":"d23fdefa0ecc6a5d79fc861fe6a058d8336ce51c","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/README.md","hash":"3a28ce7b2aa6b6343508cfe28eadec9733fd14e7","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/LICENSE","hash":"4fe6ded38ad123523792104dcf60f28badd905f2","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/almond.0","hash":"216d893df0f002babc23e63d4c98005db5e8104e","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/almond.1","hash":"157b7bc54f90865debe5b1f817a8c1155b580dd8","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/index.js","hash":"29e0b96fa095b35ecac9be6c2afde6c9b769e73b","modified":1445885964000},{"_id":"themes/apollo/node_modules/jodid25519/jsdoc.json","hash":"5a3782a2b7072783e0e5aa3b74d9c87c423818dc","modified":1445881497000},{"_id":"themes/apollo/node_modules/jodid25519/package.json","hash":"edf0420f4734e2de7e6602ce3d593c2a5341f9ed","modified":1460380284000},{"_id":"themes/apollo/node_modules/jsbn/.npmignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1446141602000},{"_id":"themes/apollo/node_modules/jsbn/LICENSE","hash":"d9b1b910dfea689402ffdb75f5467ec263f8480d","modified":1446141666000},{"_id":"themes/apollo/node_modules/jsbn/README.md","hash":"6db673c03e15b4e75f95e25ba87177799511ad0c","modified":1446141602000},{"_id":"themes/apollo/node_modules/jsbn/example.html","hash":"ec1f94b093e0f1457642f8647294be35d4af033f","modified":1446141602000},{"_id":"themes/apollo/node_modules/jsbn/example.js","hash":"ba7f33b1196eca41a007177372fe237ac7a85c1b","modified":1446141602000},{"_id":"themes/apollo/node_modules/jsbn/package.json","hash":"b39284b913b4de1faf658092b56383b2d9d74794","modified":1460380283000},{"_id":"themes/apollo/node_modules/js-base64/.npmignore","hash":"3d9b83469a219864d251f4d6316148aaccb90811","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/LICENSE.md","hash":"55bbeb2cb5fb210d5c3ec0f60c75ffd2e8134340","modified":1417899057000},{"_id":"themes/apollo/node_modules/jsbn/index.js","hash":"f53a89111c54f03ab39eab110c924b560b877051","modified":1446141602000},{"_id":"themes/apollo/node_modules/js-base64/.travis.yml","hash":"36d08aa45fdb034882c97011ab43f803fd9af076","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/README.md","hash":"fb1d22f0129aef3258b649e9ea6c1eac4d9bbac4","modified":1367824105000},{"_id":"themes/apollo/node_modules/js-base64/base64.html","hash":"51590d533a05fce77ee0473e9b6da3dc9a507b1e","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/base64_utf8","hash":"b1b53b930c74b332a85012725674494bbbcc416d","modified":1387683977000},{"_id":"themes/apollo/node_modules/js-base64/base64.js","hash":"2a277e5f3bbc8fca0b038d8da7b8467b150debe6","modified":1438308600000},{"_id":"themes/apollo/node_modules/js-base64/base64.min.js","hash":"b4cc42b73ecaaae097987e471bf7eebecc96ef2a","modified":1438308695000},{"_id":"themes/apollo/node_modules/js-base64/bower.json","hash":"f34a30cc0ca1a5b0818d98106999869247ff8099","modified":1438308624000},{"_id":"themes/apollo/node_modules/js-base64/package.js","hash":"f9351d7e58c0b8cb6ed6c2ec557fadc7377eee5b","modified":1396376126000},{"_id":"themes/apollo/node_modules/js-base64/package.json","hash":"025c7d4411f8c4871937d4d94af1bc22b5ef3935","modified":1460380284000},{"_id":"themes/apollo/node_modules/json-schema/README.md","hash":"9065e9ab354ce910706716a42584222674fe1470","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/package.json","hash":"654cebb0828b406311c3a370b31d5240fa5c8f86","modified":1460380285000},{"_id":"themes/apollo/node_modules/json-schema/draft-zyp-json-schema-04.xml","hash":"02845f4b0406bffb06ff5cb01eca43f492db6901","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-stringify-safe/.npmignore","hash":"454bf1af6e2932c514862b67b108ef4ad00d7c1a","modified":1431999690000},{"_id":"themes/apollo/node_modules/json-schema/draft-zyp-json-schema-03.xml","hash":"da15453583b019a448fae4b857fe29a583bc1a38","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-stringify-safe/CHANGELOG.md","hash":"d9b3407ce2eef8d2dadc6b2839a8b16b783eef47","modified":1431999690000},{"_id":"themes/apollo/node_modules/json-stringify-safe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999719000},{"_id":"themes/apollo/node_modules/json-stringify-safe/Makefile","hash":"589819e00a30573f50fa4a11ddb22fb45b372a65","modified":1431999690000},{"_id":"themes/apollo/node_modules/json-stringify-safe/README.md","hash":"a2972dd72d8ec7c8b1f229f7732f911ed721dbca","modified":1431999690000},{"_id":"themes/apollo/node_modules/json-stringify-safe/stringify.js","hash":"b36a3a8d0f794fae13dc8e1c93bd4a8cae311bf2","modified":1431999708000},{"_id":"themes/apollo/node_modules/json-stringify-safe/package.json","hash":"425392e0955679154e74dd7999183021d8e714c5","modified":1460380283000},{"_id":"themes/apollo/node_modules/isarray/README.md","hash":"34470c173ddf6ddfbf9683cf343e83cea1629049","modified":1369676403000},{"_id":"themes/apollo/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1369676355000},{"_id":"themes/apollo/node_modules/isarray/package.json","hash":"3a55f530353df01931c0f3d0ad7eaa2712cca1d0","modified":1460380282000},{"_id":"themes/apollo/node_modules/isarray/index.js","hash":"eec5f3c0d16211678cfc7c2d9c18bc4718adf700","modified":1369249661000},{"_id":"themes/apollo/node_modules/lcid/lcid.json","hash":"8fa5db38e0809fdbcdd19e59bb3377504612863e","modified":1426485054000},{"_id":"themes/apollo/node_modules/lcid/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/lcid/index.js","hash":"44bee35e89acd1a5d4f69588d68d0aab44ea3d2e","modified":1426489151000},{"_id":"themes/apollo/node_modules/lcid/package.json","hash":"7753465bcb57ec54dafc98baa277503fc753b48c","modified":1460380282000},{"_id":"themes/apollo/node_modules/lcid/readme.md","hash":"f8875f8dd5001202245c475d8e10a0ccb4d4552d","modified":1426488990000},{"_id":"themes/apollo/node_modules/jsonpointer/.travis.yml","hash":"3de069356f03416493077dd861d6ec6c26d61d7d","modified":1432672185000},{"_id":"themes/apollo/node_modules/jsonpointer/README.md","hash":"7b05e3bfb84beb3a5e7607912fc47ccc8d2b1e33","modified":1430458330000},{"_id":"themes/apollo/node_modules/jsonpointer/jsonpointer.js","hash":"cd510cab1d95a07efc733965dd2533a3fad50e51","modified":1432622187000},{"_id":"themes/apollo/node_modules/jsonpointer/package.json","hash":"e95d2acfb2a516c754f1b1943e746989869ea8a0","modified":1460380282000},{"_id":"themes/apollo/node_modules/jsonpointer/test.js","hash":"ac5befd353f47b170e2efececbf1ef6d82bc6ade","modified":1432622760000},{"_id":"themes/apollo/node_modules/liftoff/.jscsrc","hash":"bb18fe9931b141f6174659b77b6898c84ca4f775","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/.jshintrc","hash":"085e596856f62029041f22762b71d741f837b720","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/.npmignore","hash":"fc2bfae6bb51b296613b0adb9306f54786731272","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/README.md","hash":"73a7ca55f315020ea78384427b1c27b9c030c994","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/CHANGELOG","hash":"58ed94faac1d23b5bd3fa250ed807729f5a2b0af","modified":1458739733000},{"_id":"themes/apollo/node_modules/liftoff/.travis.yml","hash":"c180bed185c5c523beb16f80aad6a810fe53858a","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/index.js","hash":"543466ce0c1276797f11e696bec12d220e3feade","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/appveyor.yml","hash":"a63507d50d4ee32600053016c31ed2625b036b33","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/UPGRADING.md","hash":"32ba723415ab30d4f9f92a4bc3753a0f7c5b9cbd","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/package.json","hash":"6739f8ae1d7359433a45fcf87f1388d10ba2e80b","modified":1460380284000},{"_id":"themes/apollo/node_modules/is-utf8/is-utf8.js","hash":"a2882b28b048e22eb16505e19206e6c1cbf34eec","modified":1347540258000},{"_id":"themes/apollo/node_modules/is-utf8/README.md","hash":"9d91db7e709bb926bcb715a51456512a6369a92b","modified":1450497590000},{"_id":"themes/apollo/node_modules/is-utf8/LICENSE","hash":"c4d6d6cfd18041480abed5fef0e5e8b05a967b55","modified":1450496628000},{"_id":"themes/apollo/node_modules/load-json-file/package.json","hash":"8dbad8f6afa6fd041cbc6fdd1fe2364a18522cb0","modified":1460380282000},{"_id":"themes/apollo/node_modules/load-json-file/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/load-json-file/index.js","hash":"1b4d637a3e58f11db9b07de7092b8c49869a49c2","modified":1441175798000},{"_id":"themes/apollo/node_modules/is-utf8/package.json","hash":"bf926d9948400146d7994015ae4917655ccd168b","modified":1460380281000},{"_id":"themes/apollo/node_modules/jsprim/CHANGES.md","hash":"56da97f41e22a449194235ad13ee30a2f4758956","modified":1444953672000},{"_id":"themes/apollo/node_modules/jsprim/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1416249172000},{"_id":"themes/apollo/node_modules/load-json-file/readme.md","hash":"c1c5d059deb4994007355f2daa2716c2fe20986b","modified":1446990383000},{"_id":"themes/apollo/node_modules/jsprim/package.json","hash":"dd94f2a83ac60365095968f8789bc1153f5db3aa","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._basecopy/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1429199429000},{"_id":"themes/apollo/node_modules/jsprim/README.md","hash":"78fa58f9e0acaee38db00e4ff234394308cef93d","modified":1444856653000},{"_id":"themes/apollo/node_modules/lodash._basecopy/README.md","hash":"786db542ca95f1845bcdd7af61934b5f02887e85","modified":1429199429000},{"_id":"themes/apollo/node_modules/lodash/LICENSE.txt","hash":"1405d83ff498af3a9fc5bda1b076523e95c45904","modified":1427729364000},{"_id":"themes/apollo/node_modules/lodash._basecopy/package.json","hash":"be7000edc99554b2b05a2088a05db4e33b0f4a07","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash/README.md","hash":"dd442c502cd26ed6c47b83ab6fa0024c601ad346","modified":1427729993000},{"_id":"themes/apollo/node_modules/lodash._basecopy/index.js","hash":"702997f9c794b78732760c0295060618e1f50be0","modified":1429199429000},{"_id":"themes/apollo/node_modules/lodash/package.json","hash":"8c5b425a47e247893998b63284309db91fbcc1de","modified":1460380284000},{"_id":"themes/apollo/node_modules/lodash._basevalues/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1422285570000},{"_id":"themes/apollo/node_modules/lodash._basevalues/README.md","hash":"d25cdb94fec496ac27900fdd3be397510bffcb2c","modified":1422285570000},{"_id":"themes/apollo/node_modules/lodash._basevalues/index.js","hash":"f9ff8c1e6facb611859ef64a1c33b746a63ad610","modified":1422285570000},{"_id":"themes/apollo/node_modules/lodash._basevalues/package.json","hash":"dffd458f10e0c1c9ecd9e4a9075a5052e1b7006e","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._getnative/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._getnative/index.js","hash":"91d6c7694cf3ba08e5ebdbea561cbcfa42a38ae5","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._getnative/README.md","hash":"fdcaec98294e6ca31eefd3a3d390428d00622f10","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._reescape/README.md","hash":"ea8e5064060f7451d83cdb909ac756597e0e71ec","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._getnative/package.json","hash":"6a9b6d11ab4b9f66198104b7fd1dbf6fc33d1ad8","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._reescape/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._reescape/index.js","hash":"ea853f4ca91e570c1fa5776ca0ec5b8615801204","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._reescape/package.json","hash":"60714bdd41a49b65395fd9f46f85ea996ec0fa88","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._basetostring/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._basetostring/README.md","hash":"e075950489d6d73eeeacb4906e37b09e4f6cfe78","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._basetostring/index.js","hash":"835c23c6a3642d720f0ee0618c0e8861d8cb3134","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash._reevaluate/README.md","hash":"a1c06cbcaaf8e4a66f436e89730f4bf6f610c7d7","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._basetostring/package.json","hash":"d6e031dfa478c43aeeae33d5798bb097a2a92a15","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._reevaluate/index.js","hash":"8f6b32ed1d1a43c237a862bae975c23d3278558e","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._reevaluate/package.json","hash":"3eb18c92f0990236cc36a8002399af90c2b8dbfd","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._reevaluate/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._isiterateecall/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1432605162000},{"_id":"themes/apollo/node_modules/lodash._isiterateecall/README.md","hash":"30ea1b71da82533c1ae26d4fd497ff8d083fb126","modified":1432605162000},{"_id":"themes/apollo/node_modules/lodash._isiterateecall/package.json","hash":"c8380236a537f87fb48658efdcda5dc1ef66f99b","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._isiterateecall/index.js","hash":"9a98210c542168e84fcd35fa8bc5c32d20ccace2","modified":1432605162000},{"_id":"themes/apollo/node_modules/lodash._reinterpolate/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._reinterpolate/index.js","hash":"1bbf104a43916596a1930d31990fbf03e53a06db","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._reinterpolate/package.json","hash":"a833fc92b23ad8d57826b1b706dabc38f3e70f82","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash._reinterpolate/README.md","hash":"eec455672bad89c911a7ac713ba2ffe1dd461a30","modified":1423071018000},{"_id":"themes/apollo/node_modules/lodash._root/LICENSE","hash":"b8852beae60882e5254854d5282219df9c663ce5","modified":1455615051000},{"_id":"themes/apollo/node_modules/lodash._root/index.js","hash":"7e30dda1a03bf7a1837903aa8ed1909f352e097b","modified":1455615051000},{"_id":"themes/apollo/node_modules/lodash._root/README.md","hash":"0e89d947cb0c4bdf9aa46b6022ca4bdb0ca0084c","modified":1455615051000},{"_id":"themes/apollo/node_modules/lodash._root/package.json","hash":"a61adc06beb5702f0dceb2d08850123dc1d4f43e","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.isarguments/LICENSE","hash":"b8852beae60882e5254854d5282219df9c663ce5","modified":1456896472000},{"_id":"themes/apollo/node_modules/lodash.isarguments/README.md","hash":"b444cc8e74f17df73ecf1f129bb640ef0c7a4fed","modified":1456896472000},{"_id":"themes/apollo/node_modules/lodash.isarguments/package.json","hash":"cefeba2a44f786d76b503a3a6185d09a5afb3b28","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.isarguments/index.js","hash":"bf61413bcbe189b5bc4779c1194b9df54c64a3b5","modified":1456896472000},{"_id":"themes/apollo/node_modules/lodash.isarray/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.isarray/README.md","hash":"c233a7fd0e92bc6c9ee373385e6415fe0b2a8c2d","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.isarray/package.json","hash":"147a40af7ae8bf4962b8e477b60c3606cb7534ff","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.isarray/index.js","hash":"af91ed670c6bd1ddb6f969d00807f184e5a7de1e","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.pad/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.pad/README.md","hash":"da64794fbcb2b6bfaa87d49f3b0818697f4a540e","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.pad/package.json","hash":"0798871cd74fb75365ab77c7e002ff0153e6d435","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.pad/index.js","hash":"9077a714d2495ce95bb531db416249661b7b86f1","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padstart/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padstart/README.md","hash":"343a7c3cb5a12468590bd62dd1cfa3b977d0f927","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padstart/index.js","hash":"09ee50ea798b9cb1ec84c5ccdafb90b14d0b651c","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padstart/package.json","hash":"f6a1ccde7563776330373b41a8941d339971450f","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.padend/README.md","hash":"6b1360abbdb4b48ec7cbe8b9be002080afa00c4f","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padend/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.padend/index.js","hash":"2b99bbfe4f424c110d189f74fa64faedb7ea9506","modified":1459655333000},{"_id":"themes/apollo/node_modules/lodash.restparam/README.md","hash":"8986fcfd9c2701126d0e18de58b1434b43004d77","modified":1429199429000},{"_id":"themes/apollo/node_modules/lodash.padend/package.json","hash":"f2b50bfe3beb1b513d4b4069e3e720d890542af5","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.restparam/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1429199429000},{"_id":"themes/apollo/node_modules/lodash.restparam/index.js","hash":"de322640946f46abd54c470cff7c0687fbcc204a","modified":1429199429000},{"_id":"themes/apollo/node_modules/lodash.template/README.md","hash":"464d3522f72dede1ff769e88c6308b693a2976af","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.template/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.restparam/package.json","hash":"48c1da6884ceea004e14c12969980f6bf77025d7","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.template/index.js","hash":"ace4ba03f991b368fcac82f2df3a778cb415b927","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.templatesettings/README.md","hash":"c79c36894c04dcfc65739e160fc3bfa724426127","modified":1452682155000},{"_id":"themes/apollo/node_modules/lodash.templatesettings/LICENSE","hash":"3a1d08be6b4b07a0ec877adc0a9d2e238ff711f5","modified":1452682155000},{"_id":"themes/apollo/node_modules/lodash.template/package.json","hash":"ee048c8c3f28d62acd172b0186f0c34a1aecf457","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.templatesettings/index.js","hash":"36eb43127cb21c4de5959264619041b9e53ce0f7","modified":1452682155000},{"_id":"themes/apollo/node_modules/lodash.tostring/LICENSE","hash":"b8852beae60882e5254854d5282219df9c663ce5","modified":1456896472000},{"_id":"themes/apollo/node_modules/lodash.tostring/README.md","hash":"83759a1934b21f07529eacbe073ecdd3a2413557","modified":1456896472000},{"_id":"themes/apollo/node_modules/lodash.templatesettings/package.json","hash":"ec2d2188dc185723f027194aa8fd40c034aa2c86","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.tostring/index.js","hash":"4c10aeb7d500eb6c8ca72b9ce43a25c7155d8c86","modified":1456896472000},{"_id":"themes/apollo/node_modules/loud-rejection/api.js","hash":"4b67fe845d5e68986312959d6829e6523287c5e4","modified":1451400319000},{"_id":"themes/apollo/node_modules/lodash.tostring/package.json","hash":"339d15218bfb42b81ad1d9c4c26fa36afffbfdf8","modified":1460380282000},{"_id":"themes/apollo/node_modules/loud-rejection/index.js","hash":"1dd89a24330bee02d6b458af12039c85d2fe74d0","modified":1455803952000},{"_id":"themes/apollo/node_modules/loud-rejection/readme.md","hash":"e3fffde9782611dcbb462106dcadb3364ab8d713","modified":1447404783000},{"_id":"themes/apollo/node_modules/loud-rejection/package.json","hash":"07de9c281ba0866b2f13b43b6ac3ffc7c59460b5","modified":1460380283000},{"_id":"themes/apollo/node_modules/loud-rejection/register.js","hash":"673ef20653bfb9d74082e4543bc13abbc189a4c4","modified":1447404503000},{"_id":"themes/apollo/node_modules/loud-rejection/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/apollo/node_modules/map-obj/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/map-obj/package.json","hash":"1e7263e22a011cce5da111329e10bdae5ba48923","modified":1460380282000},{"_id":"themes/apollo/node_modules/map-obj/readme.md","hash":"fc853dc94647dc7096b79ce4fe6954c647f1cacb","modified":1430589743000},{"_id":"themes/apollo/node_modules/map-obj/index.js","hash":"fa95683437abe12eed3217e281bddf5f4938d72b","modified":1430589609000},{"_id":"themes/apollo/node_modules/lodash.keys/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.keys/README.md","hash":"fc9276fe48f866bdab524b6d0a74c0ce4f9d4080","modified":1435677344000},{"_id":"themes/apollo/node_modules/lodash.keys/package.json","hash":"3637c692e7bdd4b5dda6086220b52ffb673bc467","modified":1460380282000},{"_id":"themes/apollo/node_modules/lodash.keys/index.js","hash":"84908ab47bcf3df8d22d1fcaa6703c8424768019","modified":1435677344000},{"_id":"themes/apollo/node_modules/mime-db/README.md","hash":"1018078c0d9fd0331ca23ac5d97ace15596bf46c","modified":1449721722000},{"_id":"themes/apollo/node_modules/mime-db/index.js","hash":"31180f8d0ae079b1bee7ee03e77ea5323583eb06","modified":1411631388000},{"_id":"themes/apollo/node_modules/mime-db/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":1411631388000},{"_id":"themes/apollo/node_modules/mime-db/HISTORY.md","hash":"d1bb492efb205450ad3430dfb072c2aea37dc0fb","modified":1455558628000},{"_id":"themes/apollo/node_modules/mime-types/HISTORY.md","hash":"e99031ef66245a8b0473c1a4cd56e7eb640af2e1","modified":1455574470000},{"_id":"themes/apollo/node_modules/mime-db/package.json","hash":"cf4ca22a93404317172b0467394e27ecdbe93ffe","modified":1460380283000},{"_id":"themes/apollo/node_modules/mime-types/LICENSE","hash":"f027af3e61af3880fd7f7b8ba9452a85dd215738","modified":1455569104000},{"_id":"themes/apollo/node_modules/mime-types/package.json","hash":"47ca3422655823f441ae4908d25be604ba4f716c","modified":1460380282000},{"_id":"themes/apollo/node_modules/mime-types/index.js","hash":"d1983bb9d10cc678f693be62ef05e1b8c2638ef0","modified":1455569104000},{"_id":"themes/apollo/node_modules/mime-types/README.md","hash":"bdc1c75e9234d1d6fc56c819cec51f568be5c68b","modified":1455572366000},{"_id":"themes/apollo/node_modules/lodash.escape/LICENSE","hash":"3a1d08be6b4b07a0ec877adc0a9d2e238ff711f5","modified":1454898280000},{"_id":"themes/apollo/node_modules/lodash.escape/README.md","hash":"10f6329a563624bc7bb4220f2f3175695df7e346","modified":1454898280000},{"_id":"themes/apollo/node_modules/lodash.escape/package.json","hash":"d95a2c0bda1da5c030233ce5e39b76cdf869999d","modified":1460380282000},{"_id":"themes/apollo/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1438902274000},{"_id":"themes/apollo/node_modules/lodash.escape/index.js","hash":"5582280306cbb6851944f442ed3a37f3f1874333","modified":1454898280000},{"_id":"themes/apollo/node_modules/minimist/index.js","hash":"cfede1ccd2ee41f74022c002b5c6d05e65c482c0","modified":1440424576000},{"_id":"themes/apollo/node_modules/minimist/readme.markdown","hash":"067b8f01bd1fcf09a6418e3db4b323c8eb9ad479","modified":1438902274000},{"_id":"themes/apollo/node_modules/mkdirp/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1419626841000},{"_id":"themes/apollo/node_modules/minimist/package.json","hash":"bd70addb9b490b246b8a7e5c02db0e968a217348","modified":1460380285000},{"_id":"themes/apollo/node_modules/mkdirp/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1431568866000},{"_id":"themes/apollo/node_modules/mkdirp/index.js","hash":"e4aca996fb54ff20c3dad61f1fa7807fcb44409f","modified":1431570694000},{"_id":"themes/apollo/node_modules/mkdirp/package.json","hash":"92009cd4b8ca6fb69c55648a4569cfc54d859db5","modified":1460380285000},{"_id":"themes/apollo/node_modules/mkdirp/readme.markdown","hash":"e4ffd1099773d1e612dc9ecea76dbb791ef355f5","modified":1419626841000},{"_id":"themes/apollo/node_modules/ms/History.md","hash":"de70cd91b93a274872451d5dfb597b6a6f686284","modified":1429573121000},{"_id":"themes/apollo/node_modules/ms/.npmignore","hash":"926d49ad19526b22881b2cd6c86c0e2932412661","modified":1429572836000},{"_id":"themes/apollo/node_modules/ms/README.md","hash":"5c2f58a77f80869b968e1450639fb2ae64439f1b","modified":1429572836000},{"_id":"themes/apollo/node_modules/ms/LICENSE","hash":"06c5a8e25add90a402138ff3d78eb6524f2cc710","modified":1429572836000},{"_id":"themes/apollo/node_modules/ms/index.js","hash":"21867f756553abdaede5397a39c6d55931b353e3","modified":1429572968000},{"_id":"themes/apollo/node_modules/multipipe/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1410771763000},{"_id":"themes/apollo/node_modules/multipipe/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1410771763000},{"_id":"themes/apollo/node_modules/ms/package.json","hash":"af503fa159b14112793873e58bc863bf4439bf90","modified":1460380283000},{"_id":"themes/apollo/node_modules/multipipe/History.md","hash":"74f0e36649e1c382ec2d1f1332ffe7509ab9e0c8","modified":1411971507000},{"_id":"themes/apollo/node_modules/multipipe/Makefile","hash":"2e317bae466164014d133e62d5b1cc1566875c8d","modified":1411971507000},{"_id":"themes/apollo/node_modules/multipipe/Readme.md","hash":"5b3dc046e96e337b7405afd3ea58068ad815d70b","modified":1410771814000},{"_id":"themes/apollo/node_modules/multipipe/index.js","hash":"c819c462610c464620d33fca957f886bb7e00166","modified":1410775864000},{"_id":"themes/apollo/node_modules/multipipe/package.json","hash":"86856365ea45ce0a15b4a0b33b1eebb01961f36b","modified":1460380283000},{"_id":"themes/apollo/node_modules/meow/index.js","hash":"11f3c3145f07d3c3a80a6e9daae80bfa5f8a4ee3","modified":1451916886000},{"_id":"themes/apollo/node_modules/meow/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/meow/package.json","hash":"358d754e82c285ab50f26ab630f1d099d1a14462","modified":1460380282000},{"_id":"themes/apollo/node_modules/meow/readme.md","hash":"834c1565a5d866afd4a6f54e8c0bbeceab89a768","modified":1451916666000},{"_id":"themes/apollo/node_modules/minimatch/README.md","hash":"fb5bec4ab02467cdb76cdb552613ff0547402439","modified":1407793656000},{"_id":"themes/apollo/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/apollo/node_modules/minimatch/minimatch.js","hash":"16b28bcabd1eca778c2176d6c49330396907411e","modified":1437616284000},{"_id":"themes/apollo/node_modules/minimatch/package.json","hash":"e66d54ff280eb7c328c1a410f356b749e695e422","modified":1460380282000},{"_id":"themes/apollo/node_modules/lru-cache/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1323392699000},{"_id":"themes/apollo/node_modules/lru-cache/.travis.yml","hash":"ac2b64b93ab810be473f67745bd9f7d4c3e8e0ff","modified":1433355858000},{"_id":"themes/apollo/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/apollo/node_modules/lru-cache/CONTRIBUTORS","hash":"6a6e5148568ff15b4756ee478f0da581ea97fc01","modified":1385053079000},{"_id":"themes/apollo/node_modules/lru-cache/README.md","hash":"129fd032ba2ac7580e57e0d9988a4d06f1b344fd","modified":1448474798000},{"_id":"themes/apollo/node_modules/lru-cache/package.json","hash":"fef379c2d4eb76831c7b3ca6ba8fa0da55da50fa","modified":1460380284000},{"_id":"themes/apollo/node_modules/node-sass/LICENSE","hash":"1678b0204915acacebbea252fd7be1622cf93ea0","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/binding.gyp","hash":"e931172793a1fae449759a089d85488079c22df8","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/README.md","hash":"e29e2ea931f462b07edb61d5f70e5c023ed18db2","modified":1447231987000},{"_id":"themes/apollo/node_modules/node-sass/package.json","hash":"17ebd9675d605ffa776345a50786afd363413215","modified":1460380287000},{"_id":"themes/apollo/node_modules/node-uuid/.npmignore","hash":"e6d12ab502942c3b917fd1dcf8cb7e0b871849f2","modified":1447290111000},{"_id":"themes/apollo/node_modules/node-uuid/LICENSE.md","hash":"09bedf3eb387e2883ded96ee501d16262350c9cd","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/README.md","hash":"7ca0c673b27c3c4c50167b5077bb421711c2518b","modified":1447445668000},{"_id":"themes/apollo/node_modules/node-uuid/bower.json","hash":"6d521f86833c6d9a6a75af623529479fcf89f917","modified":1447446668000},{"_id":"themes/apollo/node_modules/node-uuid/component.json","hash":"7e1d6df157d7075438267019c90f5cb158b26983","modified":1447446668000},{"_id":"themes/apollo/node_modules/node-uuid/package.json","hash":"a950dce3e808f9fdb8ab538a8e231f94142a23c8","modified":1460380284000},{"_id":"themes/apollo/node_modules/nopt/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1447359143000},{"_id":"themes/apollo/node_modules/node-uuid/uuid.js","hash":"91f473812e7748b91d6adb32ac704c4f8cdea13a","modified":1447446491000},{"_id":"themes/apollo/node_modules/nopt/.travis.yml","hash":"f21fc484fc60c2a9504f37882653857441767fdd","modified":1447359143000},{"_id":"themes/apollo/node_modules/nopt/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1447359143000},{"_id":"themes/apollo/node_modules/nopt/package.json","hash":"518b917499ab99de3197f49a8d4a68c0d4e8f820","modified":1460380283000},{"_id":"themes/apollo/node_modules/nopt/README.md","hash":"dd491d80a00af3ba8c01730825f011eaf91c001b","modified":1447363130000},{"_id":"themes/apollo/node_modules/normalize-range/index.js","hash":"57355241f14b7b9e52dde6ab3ec2a4a15c2ccaf5","modified":1442039033000},{"_id":"themes/apollo/node_modules/normalize-range/license","hash":"76a1abf5ae34f3a0ccdeff35879f4b42c24c333e","modified":1442000580000},{"_id":"themes/apollo/node_modules/normalize-range/package.json","hash":"300bf36ccbaa6c2ede66e3f1d8cd1d7ce9e689bf","modified":1460380282000},{"_id":"themes/apollo/node_modules/normalize-range/readme.md","hash":"69dc17485a48507b77a20cd1a6797d0aaca8d3c6","modified":1442039033000},{"_id":"themes/apollo/node_modules/npmconf/.npmignore","hash":"d4a2f94dfa1de19b72d2cfec71dc5aaf9c310ef7","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999739000},{"_id":"themes/apollo/node_modules/npmconf/README.md","hash":"05d498792a5a33700503914ec2d77c63ba74b9ab","modified":1384904498000},{"_id":"themes/apollo/node_modules/npmconf/package.json","hash":"f316fe3dec1c0cfb03aeff8c3347fd1d84845644","modified":1460380285000},{"_id":"themes/apollo/node_modules/npmconf/npmconf.js","hash":"87969071cfe2aa4690615f4fcdf56c8c84556e3d","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/config-defs.js","hash":"452eb5eccc2a08ca08538a601933196d20c12d79","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmlog/.travis.yml","hash":"692b73f99fa80d99350c3ab674f8aec3e6a8d2da","modified":1452645460000},{"_id":"themes/apollo/node_modules/npmlog/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1444275719000},{"_id":"themes/apollo/node_modules/npmlog/example.js","hash":"a6f0d0a2735b42bab3b36afcdacea47000a9aa57","modified":1414722499000},{"_id":"themes/apollo/node_modules/npmlog/README.md","hash":"8bc40cfe4367b91fb624febb536fd4c81bf81e7b","modified":1425164767000},{"_id":"themes/apollo/node_modules/npmlog/log.js","hash":"bacacdedbb397cf67f5b42699db23b77dffd2927","modified":1458088415000},{"_id":"themes/apollo/node_modules/npmlog/package.json","hash":"3a29ba1630e45bdc2a39cf151887ec6d11587f29","modified":1460380284000},{"_id":"themes/apollo/node_modules/nan/.dntrc","hash":"c67bb04069ffd002cc43abf33d0b573436a13d11","modified":1444241269000},{"_id":"themes/apollo/node_modules/nan/CHANGELOG.md","hash":"18e936985db6f1305f1960c3b52afedb4de31c26","modified":1459265089000},{"_id":"themes/apollo/node_modules/nan/LICENSE.md","hash":"efb645e33e8b96f7fc3bf62f083d1d8f2d78fc79","modified":1452350917000},{"_id":"themes/apollo/node_modules/nan/appveyor.yml","hash":"fec84487904d69e902d98260d1b0bb93ddf59e10","modified":1452349051000},{"_id":"themes/apollo/node_modules/nan/include_dirs.js","hash":"cd38e47a4ea58e4b7b31355a1af480ccd04b568f","modified":1444241269000},{"_id":"themes/apollo/node_modules/nan/nan_callbacks.h","hash":"f589a9eec7ce1f1dd49c634e4e8e865a9d74b0e6","modified":1452350395000},{"_id":"themes/apollo/node_modules/nan/nan_callbacks_12_inl.h","hash":"ac058de8fd74c712fd465c4096486c8f7290ec24","modified":1452350388000},{"_id":"themes/apollo/node_modules/nan/nan_callbacks_pre_12_inl.h","hash":"ffb88f90c7bc7fec02e3e773b384e51a1b4cb063","modified":1459264849000},{"_id":"themes/apollo/node_modules/nan/nan_converters.h","hash":"34b76a47cc52016e84011ea44544f535564a20ea","modified":1452350406000},{"_id":"themes/apollo/node_modules/nan/nan_converters_pre_43_inl.h","hash":"7989a21608e3aa16ac75f57cfc266270133075a3","modified":1452350410000},{"_id":"themes/apollo/node_modules/nan/nan_converters_43_inl.h","hash":"315acfe32ba9e812a85c5f09e9a5d42f4acf8ca6","modified":1452350402000},{"_id":"themes/apollo/node_modules/nan/nan_implementation_12_inl.h","hash":"1da7e4b17c52b332eb416dcee9cbfe25a666fb9f","modified":1452350422000},{"_id":"themes/apollo/node_modules/nan/nan_implementation_pre_12_inl.h","hash":"28b3eb83a8c89fe05e76e2d54be313465c37d286","modified":1452350426000},{"_id":"themes/apollo/node_modules/nan/nan_maybe_43_inl.h","hash":"5c01c487730707e70cc9110d8f29658b22d0c3ff","modified":1452350430000},{"_id":"themes/apollo/node_modules/nan/nan_maybe_pre_43_inl.h","hash":"d754702112c40fe7a0a7e6f817df162685e28e18","modified":1452350434000},{"_id":"themes/apollo/node_modules/nan/nan_object_wrap.h","hash":"95518fbd2d92d8b81f10b304515b7f60015b886d","modified":1452350441000},{"_id":"themes/apollo/node_modules/nan/nan_new.h","hash":"fbb57235690d81756e70414710fc92aaa8dbaedb","modified":1452350437000},{"_id":"themes/apollo/node_modules/nan/nan_persistent_12_inl.h","hash":"2725049d9bda7b9d8dc1690c8dc72641cb0a5f70","modified":1452350445000},{"_id":"themes/apollo/node_modules/nan/nan_typedarray_contents.h","hash":"78b55f04c9f1969425b209271ad1869129c3973c","modified":1452350469000},{"_id":"themes/apollo/node_modules/nan/nan_persistent_pre_12_inl.h","hash":"e25a3c8e5ec7983ea397080c2ed87eb894cfc3d1","modified":1452350452000},{"_id":"themes/apollo/node_modules/nan/nan_string_bytes.h","hash":"bdf8bfb9e779171768a04ec6e9d1e074c10874e1","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/package.json","hash":"970489c99010d5748418a25c41a8ed3ec5d0df36","modified":1460380285000},{"_id":"themes/apollo/node_modules/node-gyp/.npmignore","hash":"4294259daadcf286671ee31713f1619f8b5dddfb","modified":1442917196000},{"_id":"themes/apollo/node_modules/node-gyp/.jshintrc","hash":"e5d7f84e7aea30920cae0a28d49f8b0684a4a6ed","modified":1441509988000},{"_id":"themes/apollo/node_modules/nan/nan_weak.h","hash":"50feae1dc8a5531acb17bcd8399485f819dfef07","modified":1452350474000},{"_id":"themes/apollo/node_modules/node-gyp/0001-gyp-always-install-into-PRODUCT_DIR.patch","hash":"8876d5693f9408a389d1ab649da038b52edbaa3d","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/0002-gyp-apply-https-codereview.chromium.org-11361103.patch","hash":"c9637e99148ea5a1acc3b92730a267b588cb5b91","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/0003-gyp-don-t-use-links-at-all-just-copy-the-files-inste.patch","hash":"ec41229eb4aa57e71fcb03779ac0b30347d784f4","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/CHANGELOG.md","hash":"6126e078b6509ab0554a8e661ded788be3210512","modified":1457114811000},{"_id":"themes/apollo/node_modules/node-gyp/History.md","hash":"6b443aa1ff106a9ea8719043aba51087e5668d59","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/LICENSE","hash":"29e2ec2d24a38c009dfb6f3c1b8d1b57e3ec492b","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/README.md","hash":"56bff6339ebce1c991043a0f7a2a7095399a4428","modified":1447697447000},{"_id":"themes/apollo/node_modules/node-gyp/addon.gypi","hash":"e402613cfc1c65fc8fa6ab95b26d1ea79158ee3e","modified":1452280762000},{"_id":"themes/apollo/node_modules/number-is-nan/index.js","hash":"f46fa63ddeeaf817837ade36c96a37045c36b5bf","modified":1432154213000},{"_id":"themes/apollo/node_modules/node-gyp/package.json","hash":"6989151ecb2cb3bcfdab01d9b37b9bcb0735b3a4","modified":1460380286000},{"_id":"themes/apollo/node_modules/number-is-nan/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/number-is-nan/package.json","hash":"512e3cce2c0131581b7be3e092946bf26bc1d775","modified":1460380282000},{"_id":"themes/apollo/node_modules/number-is-nan/readme.md","hash":"46f5a03a81186f67f4fac939be4b5a5a1079e64f","modified":1432154532000},{"_id":"themes/apollo/node_modules/oauth-sign/README.md","hash":"9f943ef5e4c1e530314bee287c8fd5b8addbc808","modified":1432536000000},{"_id":"themes/apollo/node_modules/oauth-sign/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1432536000000},{"_id":"themes/apollo/node_modules/oauth-sign/index.js","hash":"fb3d1f2193e77b18089fad077d3133143811f554","modified":1454224562000},{"_id":"themes/apollo/node_modules/oauth-sign/package.json","hash":"1551c0fd2efa3ca7858afbc14a3c21eeffdb739a","modified":1460380282000},{"_id":"themes/apollo/node_modules/oauth-sign/test.js","hash":"972d35362f1eb47ba9e12409a6d49ecc23e8a968","modified":1432809220000},{"_id":"themes/apollo/node_modules/normalize-package-data/.npmignore","hash":"ae4607005a13ef5aba5207eca8ea5b6e1eed011e","modified":1414472576000},{"_id":"themes/apollo/node_modules/normalize-package-data/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/AUTHORS","hash":"425c58e20600fdfbe4e8670550ca16eec6d8d7be","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/LICENSE","hash":"7051653ea4b19d78c1f0b7928d88e55628c332e4","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/package.json","hash":"3c94ed102f6042c698638f423827112b84c91c6e","modified":1460380285000},{"_id":"themes/apollo/node_modules/once/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430780985000},{"_id":"themes/apollo/node_modules/normalize-package-data/README.md","hash":"77a89d3dd66ef25a9369b4c303e8874edb08e576","modified":1446503131000},{"_id":"themes/apollo/node_modules/once/README.md","hash":"f980f2811a57fb0732e9fa9bc43c9e8a2d6b0011","modified":1382596021000},{"_id":"themes/apollo/node_modules/once/once.js","hash":"67e1e2cfe1a08a3cc9636382beab2e3cba80d9b6","modified":1448055900000},{"_id":"themes/apollo/node_modules/once/package.json","hash":"a76920452498c8ed279a8e00a0d07486883c54bc","modified":1460380282000},{"_id":"themes/apollo/node_modules/ordered-read-streams/.npmignore","hash":"d06e18168f0ce33d18704bb8aa50ae9e82671e50","modified":1389874915000},{"_id":"themes/apollo/node_modules/ordered-read-streams/.travis.yml","hash":"8335647eddbeeab76f07be405e926c0406e2bfd1","modified":1404202736000},{"_id":"themes/apollo/node_modules/ordered-read-streams/LICENSE","hash":"fa8847ebcbd827fcc30527f752fe4f0e11b7d419","modified":1389774919000},{"_id":"themes/apollo/node_modules/ordered-read-streams/README.md","hash":"44677fa7896e2bf2451ba46f94c8a34a9a3deeea","modified":1390035683000},{"_id":"themes/apollo/node_modules/ordered-read-streams/index.js","hash":"f6e941fadbed4b9ed53a6b7f8a9a87b091a2f1cf","modified":1412071217000},{"_id":"themes/apollo/node_modules/ordered-read-streams/package.json","hash":"2a63593583ff287f7094512409b022da6e125a90","modified":1460380283000},{"_id":"themes/apollo/node_modules/object-assign/index.js","hash":"5156750a8bdc0109eddfe098dc534e344afa263f","modified":1433426923000},{"_id":"themes/apollo/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/object-assign/package.json","hash":"87f059b525e6e67db1485568be551b91c4598d8f","modified":1460380282000},{"_id":"themes/apollo/node_modules/num2fraction/.npmignore","hash":"66efb57402a792a6070196a2893a69ecd4835414","modified":1420444293000},{"_id":"themes/apollo/node_modules/num2fraction/.editorconfig","hash":"002fc0a2fabd097b1f5ecc19eff2734d83b334f6","modified":1422338584000},{"_id":"themes/apollo/node_modules/object-assign/readme.md","hash":"237462a8f598833f49e666f62c48a753fe647047","modified":1414015686000},{"_id":"themes/apollo/node_modules/num2fraction/LICENSE","hash":"1afcb671f02a062b45500c5a351554834c03f716","modified":1420444293000},{"_id":"themes/apollo/node_modules/num2fraction/index.js","hash":"ae1822dfe9fc833a83ec2d529e60e6846b4d8a74","modified":1442195361000},{"_id":"themes/apollo/node_modules/num2fraction/README.md","hash":"5b72a3420009757d8c8fc69c30e358dc03b38613","modified":1442195423000},{"_id":"themes/apollo/node_modules/num2fraction/package.json","hash":"b8b656f798e57556cb1439929a5b55fd5581d87c","modified":1460380283000},{"_id":"themes/apollo/node_modules/orchestrator/LICENSE","hash":"c5054787291874eaa11342229b69ff07dcfe3078","modified":1395299431000},{"_id":"themes/apollo/node_modules/orchestrator/.npmignore","hash":"771fc7826497b61e63c815ba0544ac3e53bcf191","modified":1395299431000},{"_id":"themes/apollo/node_modules/orchestrator/README.md","hash":"0eea00f4b5b2ea908e22da300a2d0da2e75f14aa","modified":1404164304000},{"_id":"themes/apollo/node_modules/orchestrator/index.js","hash":"45cb69142cfc008238bc4d0d2ae2bc32fbebe89a","modified":1404164304000},{"_id":"themes/apollo/node_modules/orchestrator/package.json","hash":"70a930d241f07d5228b99bdf1956c380cd3e45ba","modified":1460380283000},{"_id":"themes/apollo/node_modules/os-locale/index.js","hash":"b0aa01d61dede1b2f87d5ed56318f83787551a07","modified":1441692137000},{"_id":"themes/apollo/node_modules/os-locale/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/os-locale/package.json","hash":"f2dff9707bfe40d8d70b4097e3dec209011f2440","modified":1460380282000},{"_id":"themes/apollo/node_modules/os-locale/readme.md","hash":"625c3415731f47406831239e3c2abf791df39d99","modified":1441692137000},{"_id":"themes/apollo/node_modules/os-homedir/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/os-homedir/index.js","hash":"d4e4abbe8e2a8169d6a52907152c2c80ec884745","modified":1437434714000},{"_id":"themes/apollo/node_modules/os-homedir/package.json","hash":"b55a1bd2ed3704eb3d12e3d3125c15dbfd92bfdc","modified":1460380282000},{"_id":"themes/apollo/node_modules/os-homedir/readme.md","hash":"134f2b052b6e5f56b631be2eded70f89d44cf381","modified":1434198180000},{"_id":"themes/apollo/node_modules/os-tmpdir/index.js","hash":"3dca1871fc952ae16fef3b6462e15bb53cdd5605","modified":1431734211000},{"_id":"themes/apollo/node_modules/os-tmpdir/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/os-tmpdir/package.json","hash":"96b79b1fcce986f255fb4664f7aa86184b19ccdb","modified":1460380282000},{"_id":"themes/apollo/node_modules/os-tmpdir/readme.md","hash":"7c85b55a50c48e86460f92e6d84373472d8d30cb","modified":1431734252000},{"_id":"themes/apollo/node_modules/os-shim/.editorconfig","hash":"a8a303dcaa471d2b3a2460f8cddeb26607b5d4d7","modified":1438904008000},{"_id":"themes/apollo/node_modules/os-shim/.npmignore","hash":"68215b1ba86c22413da643bb01adf519b58f4abc","modified":1438904008000},{"_id":"themes/apollo/node_modules/os-shim/LICENSE","hash":"27bbf494715ab733aabd390979a226ed3de633f5","modified":1438904008000},{"_id":"themes/apollo/node_modules/os-shim/Makefile","hash":"1a3d4deb966e08575b3a2bb6fc12ae1b239885c6","modified":1438904008000},{"_id":"themes/apollo/node_modules/os-shim/README.md","hash":"c6eb9294bfdca0cd441642aedc94710f3c03d9c5","modified":1438904161000},{"_id":"themes/apollo/node_modules/os-shim/.travis.yml","hash":"1ca50232ef14fcad8c07c08c4e157744ce378d16","modified":1438904008000},{"_id":"themes/apollo/node_modules/os-shim/package.json","hash":"c8fecb1cd756099cbdac9328c57e28b902e3907e","modified":1460380283000},{"_id":"themes/apollo/node_modules/parse-json/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/parse-json/index.js","hash":"db6c92c06bcd198f70bb1ef100bfdb35eeb5931e","modified":1441038086000},{"_id":"themes/apollo/node_modules/path-exists/index.js","hash":"f7ee42ce332afb4364f3314f35a3220f486a1f0a","modified":1441090809000},{"_id":"themes/apollo/node_modules/path-exists/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/parse-json/readme.md","hash":"de54a7bbb55d02431c53a8d56c38a566d70cec09","modified":1441038086000},{"_id":"themes/apollo/node_modules/parse-json/package.json","hash":"197071db4109c222deb8f413e294c79365e38e56","modified":1460380283000},{"_id":"themes/apollo/node_modules/path-exists/readme.md","hash":"188afff0b81831022bb33b705591f6a8db457037","modified":1441091083000},{"_id":"themes/apollo/node_modules/path-exists/package.json","hash":"771daa2cf024f0cd799ca892d9b7f731832ddb9c","modified":1460380282000},{"_id":"themes/apollo/node_modules/path-array/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1415745116000},{"_id":"themes/apollo/node_modules/path-array/.travis.yml","hash":"e6bd32b7a185fcab5e19edf7d1637e690ce4bafb","modified":1452815823000},{"_id":"themes/apollo/node_modules/path-array/History.md","hash":"97be346a56a9b5aa36cd8c282efaee1736126014","modified":1452816132000},{"_id":"themes/apollo/node_modules/path-array/README.md","hash":"fd0c5905377de6ec0cf42471ca585daec269bef1","modified":1415745537000},{"_id":"themes/apollo/node_modules/path-array/LICENSE","hash":"1b97027b6ab28c9a64556ec1d3d6948f88dd8630","modified":1452816109000},{"_id":"themes/apollo/node_modules/path-array/index.js","hash":"02a4f05ba7305d889cafd5c33fe7b604ba81af53","modified":1452815867000},{"_id":"themes/apollo/node_modules/path-array/package.json","hash":"daab8dda0c2191328ca4ea2b8f423b8a44cfb704","modified":1460380283000},{"_id":"themes/apollo/node_modules/path-is-absolute/index.js","hash":"71259da8cc05832088437dd2d385b7eee54eab71","modified":1424141850000},{"_id":"themes/apollo/node_modules/path-is-absolute/package.json","hash":"87b95504209bca90ce0357208f55e77ebbf31a66","modified":1460380282000},{"_id":"themes/apollo/node_modules/path-is-absolute/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/path-type/index.js","hash":"a61f13374d2775c261b9701928c670451deb4126","modified":1441355632000},{"_id":"themes/apollo/node_modules/path-type/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/path-type/package.json","hash":"3147df588dcd39b63bdcb3b05da87d34bb25ded8","modified":1460380282000},{"_id":"themes/apollo/node_modules/path-is-absolute/readme.md","hash":"bbe564e38bd40bd0f8c6f503d3064ebce4e6e87c","modified":1424141985000},{"_id":"themes/apollo/node_modules/path-type/readme.md","hash":"84fc8c2a8b81b94ac48caf806760417f00259120","modified":1441355228000},{"_id":"themes/apollo/node_modules/pify/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/pify/package.json","hash":"92d6375827fc072b829560f387320f4bb8e0731f","modified":1460380282000},{"_id":"themes/apollo/node_modules/pify/index.js","hash":"6565dcfd1aebfb8d13eb74b2ee9d6536cd4bcda2","modified":1445864677000},{"_id":"themes/apollo/node_modules/pinkie/index.js","hash":"4ed6d8988b13d2c29cfa99c99cedb43fa6b51ee7","modified":1454324862000},{"_id":"themes/apollo/node_modules/pify/readme.md","hash":"0a3dc5be43c41633baff9964712cc816c857b03d","modified":1445864979000},{"_id":"themes/apollo/node_modules/pinkie/package.json","hash":"81f69249ddf79ce8a1d47b97b595e850c96e2c44","modified":1460380282000},{"_id":"themes/apollo/node_modules/pinkie/license","hash":"91c700b5dac5967632cf497f1f3316352b1b45ce","modified":1454217969000},{"_id":"themes/apollo/node_modules/pinkie-promise/index.js","hash":"830ad9dad341dc74b12a7af106c9e97c07e44a02","modified":1460309821000},{"_id":"themes/apollo/node_modules/pinkie/readme.md","hash":"1673aa52b8f81f6ebf1c2e5ca0184a6f63522f78","modified":1454322504000},{"_id":"themes/apollo/node_modules/pinkie-promise/package.json","hash":"809989ec5864acd5aa1bdfd769e16951353e74bc","modified":1460380282000},{"_id":"themes/apollo/node_modules/pinkie-promise/license","hash":"91c700b5dac5967632cf497f1f3316352b1b45ce","modified":1460309821000},{"_id":"themes/apollo/node_modules/pinkie-promise/readme.md","hash":"450859283a97df6ee0918789a485d26786329eb1","modified":1460309821000},{"_id":"themes/apollo/node_modules/postcss/CHANGELOG.md","hash":"89081ae05ea19e9b70a30ef06cc09ab8746e492f","modified":1456942219000},{"_id":"themes/apollo/node_modules/postcss/LICENSE","hash":"0b4be858ebd79c7ec4f7ba4fbda0406e3f3e821f","modified":1456942223000},{"_id":"themes/apollo/node_modules/postcss/README.md","hash":"cdfcbd1295fb923524511b199c561ddc2aaa104e","modified":1456942223000},{"_id":"themes/apollo/node_modules/postcss-value-parser/LICENSE","hash":"b48370d4e2ba2d4321e65f73f7afad13efcbd867","modified":1455811355000},{"_id":"themes/apollo/node_modules/postcss/package.json","hash":"28246d70fbe942e4d8777a7266a33c16d269f55a","modified":1460380285000},{"_id":"themes/apollo/node_modules/postcss-value-parser/README.md","hash":"a0ceb62d80c40bff36d60c44e8bcf2fa69f8b9f4","modified":1455816959000},{"_id":"themes/apollo/node_modules/postcss-value-parser/package.json","hash":"7ee1146c89f188b0857756a2cc3acdb43f7cc978","modified":1460380283000},{"_id":"themes/apollo/node_modules/process-nextick-args/.travis.yml","hash":"f4a67b72445cea74c4c35acfd9bef7bb1f8276a4","modified":1449105044000},{"_id":"themes/apollo/node_modules/process-nextick-args/index.js","hash":"066a18ff5757235dbe5ea1a2c632946293dcff6f","modified":1449104960000},{"_id":"themes/apollo/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":1449008551000},{"_id":"themes/apollo/node_modules/process-nextick-args/package.json","hash":"71dab88882236b2848625ca21b347e69c415d3da","modified":1460380283000},{"_id":"themes/apollo/node_modules/process-nextick-args/readme.md","hash":"3eba0a30f0a115fd767a0c8c9761d60d1dc768c0","modified":1437048205000},{"_id":"themes/apollo/node_modules/process-nextick-args/test.js","hash":"279a062028d86a4ee0ab2ab800ecf7ca29f4905e","modified":1449008551000},{"_id":"themes/apollo/node_modules/proto-list/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432169906000},{"_id":"themes/apollo/node_modules/proto-list/README.md","hash":"5248feea5176e65835e6c5e29cf09b5b47d2c7d5","modified":1312690296000},{"_id":"themes/apollo/node_modules/proto-list/package.json","hash":"e14db73ff692b31960535bb655a148821e914d7a","modified":1460380282000},{"_id":"themes/apollo/node_modules/proto-list/proto-list.js","hash":"e5b281ebc299e11605b8177d407879ea36ed6525","modified":1402427448000},{"_id":"themes/apollo/node_modules/pseudomap/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1448659987000},{"_id":"themes/apollo/node_modules/pseudomap/README.md","hash":"93ca8dd88b562f1cd856143e500bdb679419e088","modified":1448749520000},{"_id":"themes/apollo/node_modules/pseudomap/map.js","hash":"f0d63208dec47fe1d9c69ab74fdf54298406dce4","modified":1451963009000},{"_id":"themes/apollo/node_modules/pseudomap/package.json","hash":"4dc8bbc71855402f8e40df7df91efd31eed08ced","modified":1460380283000},{"_id":"themes/apollo/node_modules/pseudomap/pseudomap.js","hash":"34cddc0bc6daaf6c7092d2659612969b8700d8fa","modified":1451963009000},{"_id":"themes/apollo/node_modules/osenv/.npmignore","hash":"47360b81ee1980d83d132e3abde7271d21de059a","modified":1425590976000},{"_id":"themes/apollo/node_modules/osenv/.travis.yml","hash":"f21fc484fc60c2a9504f37882653857441767fdd","modified":1433168710000},{"_id":"themes/apollo/node_modules/osenv/README.md","hash":"f62f968b504e2a53b9b089579ee7bbb55cfd4ba6","modified":1339980618000},{"_id":"themes/apollo/node_modules/osenv/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432106120000},{"_id":"themes/apollo/node_modules/osenv/osenv.js","hash":"9b8db8347dc3430dacf82cd3438c9acc88bf7c30","modified":1435618522000},{"_id":"themes/apollo/node_modules/osenv/package.json","hash":"30ef2681a801ecb22d96acefe86aaf5cb60082f6","modified":1460380283000},{"_id":"themes/apollo/node_modules/qs/.eslintignore","hash":"7b8fdc232fc9b1a8050da3c419dea3d23b5da9c5","modified":1450856430000},{"_id":"themes/apollo/node_modules/qs/.eslintrc","hash":"792135965d0bea8e0bebb9f3dbea34cd2e09badc","modified":1454565046000},{"_id":"themes/apollo/node_modules/osenv/x.tap","hash":"a46371dda39042e545cb911373563a0b5fbd9c09","modified":1433924692000},{"_id":"themes/apollo/node_modules/qs/.npmignore","hash":"09229b8d2f1d99ec4a5068fbe0e8e6b6ed13219b","modified":1450856430000},{"_id":"themes/apollo/node_modules/qs/LICENSE","hash":"ddf13f1b7345d730677237125bc2e46fbbfbbf32","modified":1450856430000},{"_id":"themes/apollo/node_modules/qs/CHANGELOG.md","hash":"285b2dc31fc2a21b017bc82f0e19c6236ab4f398","modified":1454565132000},{"_id":"themes/apollo/node_modules/qs/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1450856430000},{"_id":"themes/apollo/node_modules/qs/.travis.yml","hash":"ac56dc8a262e9ea13932f853697f995f3d55b486","modified":1451549432000},{"_id":"themes/apollo/node_modules/qs/bower.json","hash":"dd63a0f8766cf66f76d24dad9e26fa309ecb4ecb","modified":1454565144000},{"_id":"themes/apollo/node_modules/qs/package.json","hash":"fecd5acdc966aab6c04de30d177457b95f2f4f60","modified":1460380285000},{"_id":"themes/apollo/node_modules/qs/component.json","hash":"8cf3c0b8c3486360edea8314dd1333fc4ba62284","modified":1454565152000},{"_id":"themes/apollo/node_modules/qs/README.md","hash":"9d57cdff65ba49f961ad3805df133c282c4672e0","modified":1453069466000},{"_id":"themes/apollo/node_modules/read-pkg-up/index.js","hash":"af97811952cede51c92a3d38752bc37df9496222","modified":1441257916000},{"_id":"themes/apollo/node_modules/read-pkg-up/readme.md","hash":"f72451c180f747a98dfe5c774b4513152dd78410","modified":1441257728000},{"_id":"themes/apollo/node_modules/read-pkg-up/package.json","hash":"a4c27ebf2aadd4ba98fbf7a5a02652a78c4e6439","modified":1460380282000},{"_id":"themes/apollo/node_modules/read-pkg-up/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/readable-stream/README.md","hash":"c409783dc3fe9ee72cf5e36354daf9fe7b35b9eb","modified":1408530520000},{"_id":"themes/apollo/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1408530520000},{"_id":"themes/apollo/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1388359679000},{"_id":"themes/apollo/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1390625747000},{"_id":"themes/apollo/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1388359680000},{"_id":"themes/apollo/node_modules/readable-stream/float.patch","hash":"0ed071d69dc259955e754ae97bd937f1248ed9f3","modified":1408530520000},{"_id":"themes/apollo/node_modules/readable-stream/readable.js","hash":"4a4dafb729557bab29e5de7f9a9517db2b6da4cf","modified":1408530520000},{"_id":"themes/apollo/node_modules/readable-stream/package.json","hash":"1ea320a9a4d635865e0bb66ad75416e5f9ad70f7","modified":1460380284000},{"_id":"themes/apollo/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1388359680000},{"_id":"themes/apollo/node_modules/redent/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/apollo/node_modules/redent/index.js","hash":"9cc8db3f85eb6d2bbae14fb596b320f4cb0262b9","modified":1443523229000},{"_id":"themes/apollo/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1388359680000},{"_id":"themes/apollo/node_modules/redent/readme.md","hash":"94d53b271963b7a29c2638ae00f4a23d8a196578","modified":1443524028000},{"_id":"themes/apollo/node_modules/read-pkg/index.js","hash":"c3b08ea0ff9cb3008e88a67763b7979875a2fdf3","modified":1441446665000},{"_id":"themes/apollo/node_modules/read-pkg/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/redent/package.json","hash":"1513e3628e68cd779ce2166b91e48414d39de3ea","modified":1460380282000},{"_id":"themes/apollo/node_modules/read-pkg/readme.md","hash":"07a97a6f379c3f8b2fda78f2654d83e46667b554","modified":1441256093000},{"_id":"themes/apollo/node_modules/rechoir/.travis.yml","hash":"1f17a4a94128c1a328862c50ad91300e78e00c0a","modified":1437567068000},{"_id":"themes/apollo/node_modules/read-pkg/package.json","hash":"acf98512d664081eb3e66cdee482917db5d25175","modified":1460380282000},{"_id":"themes/apollo/node_modules/rechoir/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1437567068000},{"_id":"themes/apollo/node_modules/rechoir/LICENSE","hash":"5fffcfcf8973eb02ec996a531393c5be3ee7f860","modified":1437567068000},{"_id":"themes/apollo/node_modules/rechoir/index.js","hash":"d21c03ef26f2bc8780b7ad4233d6f5643874872c","modified":1437569604000},{"_id":"themes/apollo/node_modules/rechoir/README.md","hash":"710ac6d36458797c40c1fda9f87e7ac55f29b113","modified":1437567068000},{"_id":"themes/apollo/node_modules/rechoir/CHANGELOG","hash":"432fbc60af2b8734829ba3caeded57d297d8a649","modified":1437569684000},{"_id":"themes/apollo/node_modules/rechoir/package.json","hash":"8cb7226f0228ecab9af1cb598abaffee90fa27d9","modified":1460380283000},{"_id":"themes/apollo/node_modules/pretty-hrtime/.npmignore","hash":"418e4c5c61174833703000790bb4c7bf46b43588","modified":1382380769000},{"_id":"themes/apollo/node_modules/pretty-hrtime/LICENSE","hash":"ade17dc657a96aead0f3bd75c72972bc47464e99","modified":1381878647000},{"_id":"themes/apollo/node_modules/pretty-hrtime/.jshintignore","hash":"c928227309ad5ebb9498c0b1bf36ad02e17e0e54","modified":1443539739000},{"_id":"themes/apollo/node_modules/pretty-hrtime/README.md","hash":"095d22f6322a5d467b44868edc313101d56674e2","modified":1399356296000},{"_id":"themes/apollo/node_modules/pretty-hrtime/package.json","hash":"32bcb56c16df1ddba6084a93c6bd925b805047a6","modified":1460380283000},{"_id":"themes/apollo/node_modules/replace-ext/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1393359475000},{"_id":"themes/apollo/node_modules/pretty-hrtime/index.js","hash":"44f105492f187b54df9325c9bdbebb0bd45c1a7c","modified":1453254611000},{"_id":"themes/apollo/node_modules/replace-ext/README.md","hash":"dcf34bd35139f4f43d48bb8c57a37fd5531fe6f8","modified":1393363952000},{"_id":"themes/apollo/node_modules/replace-ext/index.js","hash":"24a418fe5d76f4b5c5d1a942136bc7c3b7fff951","modified":1393363489000},{"_id":"themes/apollo/node_modules/replace-ext/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1393359475000},{"_id":"themes/apollo/node_modules/replace-ext/.travis.yml","hash":"e8e6656511594029f87feeaa1b12ac875b664be9","modified":1393363594000},{"_id":"themes/apollo/node_modules/replace-ext/package.json","hash":"a883669170a647da5599367e1250a46f52dd9cd6","modified":1460380283000},{"_id":"themes/apollo/node_modules/repeating/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/repeating/package.json","hash":"b0406ecd4d6cd56a8d2b0a677c486497345b3cd0","modified":1460380282000},{"_id":"themes/apollo/node_modules/repeating/index.js","hash":"9a5382a64c2d9f06fe2225a44fa56c8a5ce568e3","modified":1440160126000},{"_id":"themes/apollo/node_modules/rimraf/bin.js","hash":"366b465d5a8637f94cea9366f505a25fc78c8a83","modified":1447980323000},{"_id":"themes/apollo/node_modules/rimraf/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999446000},{"_id":"themes/apollo/node_modules/rimraf/package.json","hash":"0980f114d5901b70308cd95cb05b40dbf671c1c0","modified":1460380282000},{"_id":"themes/apollo/node_modules/rimraf/README.md","hash":"fec5cb034f99088fb8ceec58b6de8ac5f5fc04e7","modified":1450896185000},{"_id":"themes/apollo/node_modules/repeating/readme.md","hash":"c8e915170549b848c98a6c693e3d41a2b019485c","modified":1440159412000},{"_id":"themes/apollo/node_modules/rimraf/rimraf.js","hash":"89cc0eff35f036fb58f37f3dc629a653c7828545","modified":1450812580000},{"_id":"themes/apollo/node_modules/sass-graph/.editorconfig","hash":"25587473e3057c30557d7e227e5cdf386a15be67","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/.jshintrc","hash":"97758b0aa326b3d2a06bc6bcf036fb7a790f6e66","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/.npmignore","hash":"32f8bb7a46dcd62ce12ce5722e79d6b062ce6d21","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/CHANGELOG.md","hash":"ab9713a86c42cf2bb86f5a1169e5bbe6a10f4d11","modified":1454293255000},{"_id":"themes/apollo/node_modules/sass-graph/.travis.yml","hash":"ddc132f9264aac3b1e5aa539c0daa692b107387f","modified":1454036248000},{"_id":"themes/apollo/node_modules/sass-graph/package.json","hash":"00a4d09baf8a1361dca031f1c19d1b60f08aa3e1","modified":1460380285000},{"_id":"themes/apollo/node_modules/sass-graph/parse-imports.js","hash":"53db9f3ba0cc5f3950c6b6624fc8fea8d6a20754","modified":1439339085000},{"_id":"themes/apollo/node_modules/sass-graph/readme.md","hash":"52fd34ebe52464f97698c7d19b6065ff8abd168e","modified":1430718059000},{"_id":"themes/apollo/node_modules/sass-graph/sass-graph.js","hash":"809254f06dcb1c9b9fba79caa8428ab1edc528de","modified":1454293183000},{"_id":"themes/apollo/node_modules/semver/.npmignore","hash":"813df6cd387f277bac3c7b84c9e508d472d072a8","modified":1433132148000},{"_id":"themes/apollo/node_modules/semver/.travis.yml","hash":"79213a95749ddb02aac8146f88c2e9ee705bec84","modified":1432938130000},{"_id":"themes/apollo/node_modules/semver/Makefile","hash":"e9b7280e7df59fe4a51e916cc7a19932df5f3b8c","modified":1410475074000},{"_id":"themes/apollo/node_modules/semver/README.md","hash":"7c9938adb35b0fe903e4d7ca89af5a402b6a71c3","modified":1423771405000},{"_id":"themes/apollo/node_modules/semver/foot.js.txt","hash":"a210931a10640cd3c4f9f3883fd42886c9f0fc6e","modified":1410475074000},{"_id":"themes/apollo/node_modules/semver/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430799955000},{"_id":"themes/apollo/node_modules/semver/head.js.txt","hash":"ec4c757e2124b6d1afb89d1b65db9285fa20a197","modified":1410475074000},{"_id":"themes/apollo/node_modules/semver/package.json","hash":"dd8bf75643b7b9c891f287d5553867073960bace","modified":1460380285000},{"_id":"themes/apollo/node_modules/semver/semver.browser.js.gz","hash":"5df122cc3a808b730e6817455109ee3582ef7bcf","modified":1432938336000},{"_id":"themes/apollo/node_modules/semver/semver.browser.js","hash":"53c7d0eee4b85f0c23f295303f93ba8c1e359c06","modified":1432938335000},{"_id":"themes/apollo/node_modules/semver/semver.js","hash":"08f06ef90ff1b9c457a98cd199ae3493dcdb168e","modified":1432937893000},{"_id":"themes/apollo/node_modules/semver/semver.min.js.gz","hash":"20f0ecc934c59b62f27a54044e16aa53a462dda2","modified":1432938336000},{"_id":"themes/apollo/node_modules/semver/semver.min.js","hash":"4fe500d8f0c2ce2b019c9631a1c8944128e718f8","modified":1432938336000},{"_id":"themes/apollo/node_modules/resolve/.travis.yml","hash":"475f49f2ac7ca71a18a511fe8549491952a94a71","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/index.js","hash":"be810586bfc1a359d636dc6608b9840fb9bf04b2","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/package.json","hash":"9dd9dc70daf01f61360b890150917a277204cd1e","modified":1460380286000},{"_id":"themes/apollo/node_modules/resolve/readme.markdown","hash":"5e2ba030c890821bdd36e9f92a9c6c7d265076fe","modified":1441654384000},{"_id":"themes/apollo/node_modules/request/.npmignore","hash":"e166b7eaa69b4c766b5de9a8310665f53afa242f","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/.eslintrc","hash":"9f54f4d683f7d050b3a7cb8a30a2f002053aba0d","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/CONTRIBUTING.md","hash":"b41c03933c727ed6409d7164ecdd474664d1bf27","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/.travis.yml","hash":"01c62e2d7e5959f4db43f60b9706c5a4f060b8fc","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/CHANGELOG.md","hash":"edad2ab442d482e67a50bd4b5ff4af09a5fe9999","modified":1459850749000},{"_id":"themes/apollo/node_modules/request/index.js","hash":"6b96d838b3fae1c1d3fd963613b6465cd788e8c4","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/README.md","hash":"cd263f8b22270fbf9945d0a920602cbf32131a17","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/package.json","hash":"86e8e30350958eadd438aeda2054e48b6c7bbefc","modified":1460380285000},{"_id":"themes/apollo/node_modules/sigmund/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432106334000},{"_id":"themes/apollo/node_modules/sigmund/bench.js","hash":"7f512661bb09413fa3c814f89fdf58b157f08e63","modified":1344873467000},{"_id":"themes/apollo/node_modules/sigmund/README.md","hash":"6007650d6a1dc24c4dc57409e7611b6998d244aa","modified":1401638608000},{"_id":"themes/apollo/node_modules/request/request.js","hash":"f66591905e809c8885f811b30c67f3b9ce7447ab","modified":1459234696000},{"_id":"themes/apollo/node_modules/sigmund/package.json","hash":"60fbbd8779a805d725fb42d61317710eed592887","modified":1460380283000},{"_id":"themes/apollo/node_modules/sigmund/sigmund.js","hash":"7575ead5bf4fbb3eed15ead87c050cc8e306d446","modified":1344873467000},{"_id":"themes/apollo/node_modules/signal-exit/.npmignore","hash":"7c040b8fad49e3e5add67298470ab2fc85372443","modified":1431758371000},{"_id":"themes/apollo/node_modules/signal-exit/LICENSE.txt","hash":"039fa81eb89fc5c892f5ce2d22ee6ac0a8503880","modified":1431758522000},{"_id":"themes/apollo/node_modules/signal-exit/.travis.yml","hash":"c0b55846436583e8b8eb4f0c7a546d4d69e279ca","modified":1432136228000},{"_id":"themes/apollo/node_modules/signal-exit/README.md","hash":"3e64bed48033650cc444b39f4b07e693242c70a1","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/index.js","hash":"ea3c4fcfc37727c7934c7e59771129abc599fd43","modified":1432533530000},{"_id":"themes/apollo/node_modules/signal-exit/package.json","hash":"2c41f96ed81686c191768b3cb24722edbebdc870","modified":1460380285000},{"_id":"themes/apollo/node_modules/signal-exit/signals.js","hash":"26fc07dce7fcd84250733d36ce8088a90f3972cd","modified":1432533530000},{"_id":"themes/apollo/node_modules/sntp/.npmignore","hash":"ea5a6d3bfaa388a6dbf7be84ef42c1a51dd7c416","modified":1406958770000},{"_id":"themes/apollo/node_modules/sntp/.travis.yml","hash":"888093e360115d50a60614c9ed3a3db5b60b9059","modified":1406958770000},{"_id":"themes/apollo/node_modules/sntp/Makefile","hash":"23079c0b043b0fd2f037fa6272e36d2562425c6d","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/LICENSE","hash":"1583807686100eb3d8287b4e4627818f002aabaf","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/README.md","hash":"5b5b1348b73a5ba7293f5924937015c6b6350b6d","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/package.json","hash":"3a2f07fe7eaecf5d2268469f122e175904338e5a","modified":1460380284000},{"_id":"themes/apollo/node_modules/sntp/index.js","hash":"fbc929bb3b85e76c25fc52743d325d9f36fb3643","modified":1409946595000},{"_id":"themes/apollo/node_modules/source-map/README.md","hash":"e7af49fa4cfabfb543897a77c16436c6d39173fb","modified":1443049533000},{"_id":"themes/apollo/node_modules/source-map/package.json","hash":"1fe49b33277e538f76e16bc86127944f5901528d","modified":1460380285000},{"_id":"themes/apollo/node_modules/sparkles/LICENSE","hash":"de40e364b1016b13d3888c8a778cae31652bc20c","modified":1418089655000},{"_id":"themes/apollo/node_modules/sparkles/README.md","hash":"4a8831ffc453075948809e7cece0804eb3db9cfa","modified":1441670229000},{"_id":"themes/apollo/node_modules/source-map/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1441897559000},{"_id":"themes/apollo/node_modules/sparkles/index.js","hash":"d2c69a4e0796cdad292832ccc45829e6b980e129","modified":1441669482000},{"_id":"themes/apollo/node_modules/spawn-sync/.npmignore","hash":"11ffaf4ed0b0a9c092534b653873e75f438680bb","modified":1389407811000},{"_id":"themes/apollo/node_modules/spawn-sync/.travis.yml","hash":"58cd288286bbe6bffc69752c4020bc11d21347a4","modified":1451833372000},{"_id":"themes/apollo/node_modules/sparkles/package.json","hash":"07966e4fdcaf396a5ccd0023712996b03193c06c","modified":1460380282000},{"_id":"themes/apollo/node_modules/spawn-sync/LICENSE","hash":"c10025d9f88d74d08d60f8e092ac3e038ce180c4","modified":1389407581000},{"_id":"themes/apollo/node_modules/spawn-sync/appveyor.yml","hash":"ddb4ba9c9860208bcfc182ee0486916119b63b71","modified":1423659022000},{"_id":"themes/apollo/node_modules/spawn-sync/index.js","hash":"7e5b000a13fd103df52f976089cc61c761d82138","modified":1423658684000},{"_id":"themes/apollo/node_modules/spawn-sync/README.md","hash":"faea2f20e2631a2f4765fd703267befbc0ec1cb8","modified":1451833372000},{"_id":"themes/apollo/node_modules/spawn-sync/package.json","hash":"b06361a465c70dd841d3674b07b9813f5cf8c25c","modified":1460380284000},{"_id":"themes/apollo/node_modules/spawn-sync/postinstall.js","hash":"c378048db6126097fa2b5338a9b5dc0566cb8f07","modified":1451833372000},{"_id":"themes/apollo/node_modules/spdx-correct/README.md","hash":"9b2ea7f8291e2ca4dc5317fcaa4a59ff77c7a2a0","modified":1445878436000},{"_id":"themes/apollo/node_modules/spdx-correct/LICENSE","hash":"4f40525bc84d44e0b6c9e05ce08c392a2c7dc6a9","modified":1445878498000},{"_id":"themes/apollo/node_modules/spdx-correct/package.json","hash":"51ee310f0593c5b2bcf77d4e59b19d11221ba03a","modified":1460380282000},{"_id":"themes/apollo/node_modules/spdx-correct/index.js","hash":"cf31002227253d14b73046d85a7376b3c75e4614","modified":1445878436000},{"_id":"themes/apollo/node_modules/spdx-exceptions/README.md","hash":"4950756856c1b19ecec46a98890f121158110899","modified":1446664040000},{"_id":"themes/apollo/node_modules/spdx-exceptions/package.json","hash":"fcfce008c6ca6ed9ea20c9ca5d02e684b715a8ec","modified":1460380281000},{"_id":"themes/apollo/node_modules/spdx-exceptions/index.json","hash":"2c99f743cdf6a2d2aad42273a00ef7609312aadc","modified":1446664115000},{"_id":"themes/apollo/node_modules/spdx-expression-parse/LICENSE","hash":"ffb5445875b44987ad670d09d3759415a5c18f0a","modified":1448404606000},{"_id":"themes/apollo/node_modules/spdx-expression-parse/index.js","hash":"14c665864ce1d29d6d7f871198a868f62b334d50","modified":1448404606000},{"_id":"themes/apollo/node_modules/spdx-expression-parse/package.json","hash":"3665b9bc750abfc6c579839d141d2f7bc7f72eb0","modified":1460380282000},{"_id":"themes/apollo/node_modules/spdx-expression-parse/README.md","hash":"0bbf772c5986df1c0610486a19d9a62fa7888024","modified":1448404606000},{"_id":"themes/apollo/node_modules/spdx-license-ids/LICENSE","hash":"ff007ce11f3ff7964f1a5b04202c4e95b5c82c85","modified":1439793376000},{"_id":"themes/apollo/node_modules/spdx-license-ids/README.md","hash":"71127f5c6b2e041dacede8c88ebfafb7bbb2ded5","modified":1439793376000},{"_id":"themes/apollo/node_modules/spdx-license-ids/package.json","hash":"6ccab3c7db359e86aad2e592b3ebbb4c026bd802","modified":1460380282000},{"_id":"themes/apollo/node_modules/spdx-expression-parse/parser.generated.js","hash":"70393d3c2de551fea93635caeac838f73b7e56cf","modified":1448404650000},{"_id":"themes/apollo/node_modules/spdx-license-ids/spdx-license-ids.json","hash":"992aa9a1448be47c900045ffff162fe639903173","modified":1460030078000},{"_id":"themes/apollo/node_modules/sshpk/.travis.yml","hash":"286cbefa23a26e34bd86101557fb887e6ad355bc","modified":1447121364000},{"_id":"themes/apollo/node_modules/sshpk/.npmignore","hash":"695019f4a886543f630c962200d822a468757eb0","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/package.json","hash":"78b532a3d60fbaa74eba46e84ee4b3de5aac78ce","modified":1460380285000},{"_id":"themes/apollo/node_modules/string-width/index.js","hash":"3b72f8ef719467f447cdacb4779f2f460443b63e","modified":1437355827000},{"_id":"themes/apollo/node_modules/sshpk/README.md","hash":"7c00acdc8e5bf0eca47a16aa33c8fa17202fa4bb","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1446856544000},{"_id":"themes/apollo/node_modules/string-width/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/string-width/package.json","hash":"03c73c891be6f706077a49ae95d9a7de961644fa","modified":1460380282000},{"_id":"themes/apollo/node_modules/string-width/readme.md","hash":"d725c5663e7b4814b7cccaf68c311d83bdc05bc5","modified":1437341713000},{"_id":"themes/apollo/node_modules/sequencify/.npmignore","hash":"8d28d31afc4b92498d8be67e229df80477f85600","modified":1387783026000},{"_id":"themes/apollo/node_modules/sequencify/.travis.yml","hash":"ed2a9b234e4ea2f3d1d597e023386f8fd2dbe025","modified":1387783026000},{"_id":"themes/apollo/node_modules/sequencify/LICENSE","hash":"ade17dc657a96aead0f3bd75c72972bc47464e99","modified":1387783026000},{"_id":"themes/apollo/node_modules/sequencify/README.md","hash":"bbd3575ed62ef70678141c76fc439c3ba32aa0d7","modified":1387783026000},{"_id":"themes/apollo/node_modules/sequencify/index.js","hash":"83d3fec92f6915b5c701c6542c2b9d92dcd2b651","modified":1387783026000},{"_id":"themes/apollo/node_modules/sequencify/package.json","hash":"c94e5c11f7d61578c1a703f5687065c1296036e9","modified":1460380283000},{"_id":"themes/apollo/node_modules/string_decoder/.npmignore","hash":"fc05bac99247f420fd3eee41f17afeb48f06a76e","modified":1392198673000},{"_id":"themes/apollo/node_modules/string_decoder/LICENSE","hash":"8344f8cf34d06153cd7ffc797c070e00d69eb442","modified":1390012773000},{"_id":"themes/apollo/node_modules/string_decoder/README.md","hash":"c8dac065c0a3043936a7c07ea1d698234c3ad159","modified":1390012773000},{"_id":"themes/apollo/node_modules/string_decoder/package.json","hash":"f92478bf9b6495d1742f50132ca4b241f6df1c87","modified":1460380282000},{"_id":"themes/apollo/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1424597013000},{"_id":"themes/apollo/node_modules/string_decoder/index.js","hash":"91f40da3177881cf70b87520444b755e1d9592ec","modified":1408767880000},{"_id":"themes/apollo/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1424597013000},{"_id":"themes/apollo/node_modules/strip-ansi/package.json","hash":"a2073b378a69f943357a4c49202d717ec300841e","modified":1460380282000},{"_id":"themes/apollo/node_modules/stringstream/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1340796033000},{"_id":"themes/apollo/node_modules/stringstream/.npmignore","hash":"e31bf1a44ac82728f64fe63d5fc691f3111103e4","modified":1340414943000},{"_id":"themes/apollo/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1456056884000},{"_id":"themes/apollo/node_modules/stringstream/example.js","hash":"17a98e07a319edf8fbeeea49d83515304922b1b4","modified":1361939998000},{"_id":"themes/apollo/node_modules/stringstream/README.md","hash":"33c7843dec1919a17daad5a5ae2fb06d54018b38","modified":1358765250000},{"_id":"themes/apollo/node_modules/stringstream/LICENSE.txt","hash":"e957fbece098eddf6df809165d5e73c2c1b2e10a","modified":1445815621000},{"_id":"themes/apollo/node_modules/stringstream/package.json","hash":"6009aaba07bcebe101e0578519f6795155371452","modified":1460380283000},{"_id":"themes/apollo/node_modules/stringstream/stringstream.js","hash":"400fe756da898736fe0642a709c7f88e21fda352","modified":1363491475000},{"_id":"themes/apollo/node_modules/strip-bom/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/strip-bom/index.js","hash":"a51c5fa1cdfa6534d6a2873b5f2f0994574af6f7","modified":1435582949000},{"_id":"themes/apollo/node_modules/strip-indent/cli.js","hash":"aef33a307f851bb25b1bb7efbe24089df85cf7c8","modified":1407937346000},{"_id":"themes/apollo/node_modules/strip-bom/package.json","hash":"7d093717ac28a0a37c1f3aca2654e2d2042dc382","modified":1460380282000},{"_id":"themes/apollo/node_modules/strip-bom/readme.md","hash":"f7fe88ef200b48769bcbf27e47eec8968f62ff74","modified":1435583499000},{"_id":"themes/apollo/node_modules/strip-indent/index.js","hash":"dc4f6ac692f8c755e3beb4672e43745c7f453bca","modified":1407937164000},{"_id":"themes/apollo/node_modules/strip-indent/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/strip-indent/package.json","hash":"dacc51bc53bfbbc0d39cc5e18bdfd228fae753e3","modified":1460380282000},{"_id":"themes/apollo/node_modules/supports-color/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/supports-color/package.json","hash":"855bdcdceb1639da40d9875bf2c17ab2fb4151b5","modified":1460380282000},{"_id":"themes/apollo/node_modules/supports-color/index.js","hash":"669e4e82e32796eacb16a314bb3db270fb1d8572","modified":1435362323000},{"_id":"themes/apollo/node_modules/strip-indent/readme.md","hash":"1e953769e18b5a3315b916cc7bd4131539b99917","modified":1407937477000},{"_id":"themes/apollo/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1407491422000},{"_id":"themes/apollo/node_modules/supports-color/readme.md","hash":"a0227e37af9ebe9e998782cf0a1eb75338d68f8e","modified":1435704929000},{"_id":"themes/apollo/node_modules/through2/LICENSE","hash":"9111ee4142f0ea90481a6805bfdf840f6e5213d9","modified":1375332374000},{"_id":"themes/apollo/node_modules/through2/README.md","hash":"28048470a1f6ddcc8813608d9e049312d03d3c89","modified":1454928361000},{"_id":"themes/apollo/node_modules/through2/package.json","hash":"4c45cfc3fa3d80ae27b10be94e5d673e059e9dfb","modified":1460380282000},{"_id":"themes/apollo/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1407797378000},{"_id":"themes/apollo/node_modules/tildify/index.js","hash":"191de0aaf0d3a56e13b660b06001973db8851217","modified":1443967952000},{"_id":"themes/apollo/node_modules/tildify/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/tildify/readme.md","hash":"b38687d2eda5f94bcf24293b07757f76f76e3e68","modified":1434199886000},{"_id":"themes/apollo/node_modules/tildify/package.json","hash":"07f101004c3e8ef9cef0663f5f268eadddbbb325","modified":1460380282000},{"_id":"themes/apollo/node_modules/stream-consume/README.md","hash":"f67943616b0a8bdcea87eff159f1b1298d0543e6","modified":1405909560000},{"_id":"themes/apollo/node_modules/stream-consume/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1405911629000},{"_id":"themes/apollo/node_modules/stream-consume/index.js","hash":"f5c1698f0f3f924e2ac3b58a9a7b0b0f8a16489e","modified":1405910218000},{"_id":"themes/apollo/node_modules/stream-consume/package.json","hash":"28ecc4d4bd0c1b27cbddfbcd6c5f56c9e7d8e053","modified":1460380282000},{"_id":"themes/apollo/node_modules/trim-newlines/index.js","hash":"96a6d5ab5921b363425c3006f163b5e7c1febdd8","modified":1443517660000},{"_id":"themes/apollo/node_modules/trim-newlines/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/apollo/node_modules/trim-newlines/package.json","hash":"afc7a89a2d15093643739df2166fb6f01025801c","modified":1460380282000},{"_id":"themes/apollo/node_modules/trim-newlines/readme.md","hash":"b892a9a5efc16665a659e3dcc8a97b3f018ce22e","modified":1443518567000},{"_id":"themes/apollo/node_modules/tunnel-agent/.jshintrc","hash":"e78d848775b16fcf550e4476776af31e347e3631","modified":1446013763000},{"_id":"themes/apollo/node_modules/tunnel-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1446013763000},{"_id":"themes/apollo/node_modules/tunnel-agent/README.md","hash":"fab5bff0eba532373f36d827d9775105d64ff719","modified":1446013763000},{"_id":"themes/apollo/node_modules/tunnel-agent/package.json","hash":"cd2bc8dc460c04cc9e596fc1fa922038795465c2","modified":1460380282000},{"_id":"themes/apollo/node_modules/time-stamp/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1429924803000},{"_id":"themes/apollo/node_modules/time-stamp/README.md","hash":"682f32afbeba615eb264c159ccc32d0b14a16480","modified":1460014030000},{"_id":"themes/apollo/node_modules/tunnel-agent/index.js","hash":"e9320bd906e55558d9ba2569f76e92899da8744f","modified":1449585048000},{"_id":"themes/apollo/node_modules/time-stamp/package.json","hash":"7053ab5b2775e68ae7e064b3109b1d1b67360045","modified":1460380282000},{"_id":"themes/apollo/node_modules/time-stamp/index.js","hash":"ea98a1f550737e1e7f6d27b9e1c13a3c19e6b0bb","modified":1449256133000},{"_id":"themes/apollo/node_modules/tough-cookie/LICENSE","hash":"d453b8d6be98bbb6cff7074794f5776ff3a17115","modified":1443808008000},{"_id":"themes/apollo/node_modules/tough-cookie/README.md","hash":"72dd4e35da08b98d01237a80b788ae1aa189de87","modified":1444173105000},{"_id":"themes/apollo/node_modules/tough-cookie/package.json","hash":"e1d902dbeed2baa7db83c86306280a8b974aa455","modified":1460380284000},{"_id":"themes/apollo/node_modules/typedarray/LICENSE","hash":"c2b6e9dfdcb944a46af4f9b42ff1f3543a2aacce","modified":1386646884000},{"_id":"themes/apollo/node_modules/typedarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1386647103000},{"_id":"themes/apollo/node_modules/typedarray/readme.markdown","hash":"c3eb3ac1ff7b8322da590b4eeb33920ea2b75419","modified":1400295138000},{"_id":"themes/apollo/node_modules/tweetnacl/.npmignore","hash":"11c8e36af35ec98e1a2d7eddf45646dcb6653169","modified":1442499307000},{"_id":"themes/apollo/node_modules/typedarray/package.json","hash":"ca71cdd53fe584ef3745dba77f068d500b622ce9","modified":1460380283000},{"_id":"themes/apollo/node_modules/typedarray/index.js","hash":"5d96e918bcecc108565675881bb7aeb15a2c5c92","modified":1386892059000},{"_id":"themes/apollo/node_modules/tweetnacl/COPYING.txt","hash":"92d8cef4ad2ad4c50c8741cad9dfd4a3f1ecb14d","modified":1456349123000},{"_id":"themes/apollo/node_modules/tweetnacl/README.md","hash":"09170855430281ee68bb75895077aa55d777b053","modified":1458304892000},{"_id":"themes/apollo/node_modules/tweetnacl/CHANGELOG.md","hash":"1d5290965ca2f4b840087ff8ad622c8a16f9c051","modified":1456360460000},{"_id":"themes/apollo/node_modules/tweetnacl/nacl-fast.js","hash":"b8caf62487ca1fcba5ed9e47571bdff0806b8fc1","modified":1459224350000},{"_id":"themes/apollo/node_modules/tweetnacl/nacl.min.js","hash":"807244ced1f262b7ffcf43d5ce8e9c3d17d96ba2","modified":1459224359000},{"_id":"themes/apollo/node_modules/tweetnacl/nacl.js","hash":"523fe36259524a0f35d056416a18de5ae96027a3","modified":1458303774000},{"_id":"themes/apollo/node_modules/tweetnacl/nacl-fast.min.js","hash":"cc7ddf7bd4bdb2d0999c18f08f02cec0a2344ed8","modified":1459224360000},{"_id":"themes/apollo/node_modules/tweetnacl/package.json","hash":"9c0791e938cd3a87d9eaa7fc22ea79d83b55d011","modified":1460380284000},{"_id":"themes/apollo/node_modules/uid-number/LICENSE","hash":"515ec4469197395143dd4bfe9b1bc4e0d9b6b12a","modified":1392662379000},{"_id":"themes/apollo/node_modules/uid-number/README.md","hash":"01146a7d333f05da63e9341243280743fdf67dfd","modified":1330396426000},{"_id":"themes/apollo/node_modules/uid-number/get-uid-gid.js","hash":"5a4786dc076636cab9a0741a162b7e02cdce52c6","modified":1374791681000},{"_id":"themes/apollo/node_modules/uid-number/package.json","hash":"c39c83349a2d78bb9578218367aab0f89b2da5b2","modified":1460380282000},{"_id":"themes/apollo/node_modules/uid-number/uid-number.js","hash":"d74f20e05a15f7f3670e4d24c5e0cdabeca0d0dc","modified":1392911855000},{"_id":"themes/apollo/node_modules/unique-stream/.npmignore","hash":"3b37e94f94c4c7c5498c53588ffb349abf30c362","modified":1373608229000},{"_id":"themes/apollo/node_modules/unique-stream/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1399980154000},{"_id":"themes/apollo/node_modules/unique-stream/LICENSE","hash":"aed8639d1e328e0c90c1b02ffa3aa200a6723941","modified":1399438031000},{"_id":"themes/apollo/node_modules/user-home/cli.js","hash":"5df51f1f8552b61704a808793c129196b5efeb68","modified":1421171004000},{"_id":"themes/apollo/node_modules/unique-stream/README.md","hash":"1912b76f0633a158b35e03cc294b692b30ae0e4b","modified":1379342846000},{"_id":"themes/apollo/node_modules/unique-stream/package.json","hash":"12fb6ea82f5d59991f64f644e5fe6636d9637e91","modified":1460380283000},{"_id":"themes/apollo/node_modules/unique-stream/index.js","hash":"9f57f8825948f923b1af2da468f931ca508d1212","modified":1379343007000},{"_id":"themes/apollo/node_modules/user-home/index.js","hash":"b2a6d6a8ba1e694a9e90ac4b4fb75551ee36e9ae","modified":1421171068000},{"_id":"themes/apollo/node_modules/user-home/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/user-home/package.json","hash":"761440b45cee401f837a2419aacb5fa617dd0294","modified":1460380282000},{"_id":"themes/apollo/node_modules/user-home/readme.md","hash":"28f7677b9f32e00be0f653f4d90d324f90abf8d6","modified":1421171092000},{"_id":"themes/apollo/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1444243047000},{"_id":"themes/apollo/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1416945941000},{"_id":"themes/apollo/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1416945941000},{"_id":"themes/apollo/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1444242970000},{"_id":"themes/apollo/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1416945941000},{"_id":"themes/apollo/node_modules/util-deprecate/package.json","hash":"885d0e2ee9d3f0d4eef2c8f6c09ceba57ab8fdb6","modified":1460380283000},{"_id":"themes/apollo/node_modules/v8flags/.npmignore","hash":"251be89148de3375f6b8dcfb73f43d95d2d3f961","modified":1448883600000},{"_id":"themes/apollo/node_modules/v8flags/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1448883600000},{"_id":"themes/apollo/node_modules/v8flags/README.md","hash":"d35fc15f2e683b0d1ba5f51e857af1e5a911ce0d","modified":1450726885000},{"_id":"themes/apollo/node_modules/v8flags/index.js","hash":"09e5a5ffc0535b077bcf9193040372b3701f41d4","modified":1448941178000},{"_id":"themes/apollo/node_modules/v8flags/package.json","hash":"d3f84febf65db34550edd218f952a50a5bb8cfed","modified":1460380282000},{"_id":"themes/apollo/node_modules/tar/.npmignore","hash":"f19e99dcce22204397cb6bc004257aac195af0d1","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/.travis.yml","hash":"cf940a5f03d954b69516c498e23fe30aabfee819","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/LICENSE","hash":"c9f8d7fc9275e87bc85f85317ff575f5e0080cfa","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/README.md","hash":"195deb7aea0e3da7c225cfad650c8bfb533e9d83","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/package.json","hash":"57bce954f52bcd92f860c68586f31ea915e334ae","modified":1460380285000},{"_id":"themes/apollo/node_modules/tar/tar.js","hash":"9c3fa4f5bbdad4447d71b65858c8a4fda101a04f","modified":1441849626000},{"_id":"themes/apollo/node_modules/validate-npm-package-license/README.md","hash":"50310cc432940ac01fbd9475ec530f9958cc4ebc","modified":1440372749000},{"_id":"themes/apollo/node_modules/validate-npm-package-license/index.js","hash":"13e84b8072f2208d449c441f75b4280301b6b135","modified":1440372893000},{"_id":"themes/apollo/node_modules/validate-npm-package-license/LICENSE","hash":"2df421fdc1dfa2e8411f36e4067e80a88cdb880a","modified":1440372517000},{"_id":"themes/apollo/node_modules/validate-npm-package-license/package.json","hash":"a70ed579f398c50bf0f1b2b7dbcff0ff786720c9","modified":1460380282000},{"_id":"themes/apollo/node_modules/verror/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/Makefile","hash":"89b6506d72bcdd045b63921d0b754227f824c4f1","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/README.md","hash":"94a2a13d3e722a3950176fa8ed55a1e7a7fd9d14","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/jsl.node.conf","hash":"c9a618ebefdabda69fcf47f17406c254f7f07f9f","modified":1360175300000},{"_id":"themes/apollo/node_modules/vinyl/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1405745814000},{"_id":"themes/apollo/node_modules/verror/package.json","hash":"119163b5d00f251608c01ae2c0426188e1e6471b","modified":1460380284000},{"_id":"themes/apollo/node_modules/vinyl/package.json","hash":"fa1edc220449411d2b19953f6117191607beaa37","modified":1460380283000},{"_id":"themes/apollo/node_modules/vinyl/README.md","hash":"d22c55dc5272505627e335eb4e92213dfb198272","modified":1441239496000},{"_id":"themes/apollo/node_modules/vinyl-fs/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1442714754000},{"_id":"themes/apollo/node_modules/vinyl/index.js","hash":"3b73bc040e0af748d7a0ae44ca1a67b039b68053","modified":1441239391000},{"_id":"themes/apollo/node_modules/vinyl-fs/index.js","hash":"a0195a031d266279be036f41f381cb1d95c3ac7e","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/README.md","hash":"35411b005d5406978383599acf3bd3b678ab9e1a","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/package.json","hash":"713b7e629e872401b10ba989a2ebd8524edbc570","modified":1460380284000},{"_id":"themes/apollo/node_modules/vinyl-sourcemaps-apply/.jshintrc","hash":"da34e4589e93f899c9519e6ff8b089ac9a9d6776","modified":1404310633000},{"_id":"themes/apollo/node_modules/vinyl-sourcemaps-apply/.npmignore","hash":"cf4e2dcaa760ff6f7520fd032ce44574e2970e54","modified":1404310633000},{"_id":"themes/apollo/node_modules/vinyl-sourcemaps-apply/README.md","hash":"783b1baa455da4a9577597ff6f9be5932ce8508d","modified":1404310633000},{"_id":"themes/apollo/node_modules/vinyl-sourcemaps-apply/package.json","hash":"e38309b9b004357d08cec7adef97fc76b126cf8d","modified":1460380282000},{"_id":"themes/apollo/node_modules/vinyl-sourcemaps-apply/index.js","hash":"bde4dfd6df28d3b58fc078452faff6f5b2180c9b","modified":1451238940000},{"_id":"themes/apollo/node_modules/which/.npmignore","hash":"7ff43cb474c7722cc95456d53a7bd2c9b83abe14","modified":1453427263000},{"_id":"themes/apollo/node_modules/which/.travis.yml","hash":"c1171ee2da557a6c7766a6ee625d03c2284f8880","modified":1444240710000},{"_id":"themes/apollo/node_modules/which/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911659000},{"_id":"themes/apollo/node_modules/which/README.md","hash":"6269a83ac37a211a4f54a0b6d00ca5dfc3e14eaa","modified":1444245523000},{"_id":"themes/apollo/node_modules/which/package.json","hash":"85b30b07903915f4e7fdd6bad00b9461efe4ad0d","modified":1460380284000},{"_id":"themes/apollo/node_modules/window-size/cli.js","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1447614663000},{"_id":"themes/apollo/node_modules/which/which.js","hash":"d9d7123fa336b2f8769184299b61d70d2f8d6a1e","modified":1453851478000},{"_id":"themes/apollo/node_modules/window-size/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1447615356000},{"_id":"themes/apollo/node_modules/window-size/README.md","hash":"c286863d0378b310abed728a9425b4d00f2027a1","modified":1447615597000},{"_id":"themes/apollo/node_modules/window-size/index.js","hash":"a6e4427986c2372b10f86c12b4521dff04b3cb52","modified":1447614663000},{"_id":"themes/apollo/node_modules/window-size/package.json","hash":"ef2cb4a9fd13831b01eff03407f082e8102592a1","modified":1460380282000},{"_id":"themes/apollo/node_modules/wrap-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1448990839000},{"_id":"themes/apollo/node_modules/wrap-ansi/index.js","hash":"ed9c0328c71a7788d2e8b0bf5122ff2975e69a9d","modified":1448990839000},{"_id":"themes/apollo/node_modules/wrap-ansi/package.json","hash":"4f4c56aeb3033570393e08d3a2fff75b029f4809","modified":1460380282000},{"_id":"themes/apollo/node_modules/wrap-ansi/readme.md","hash":"a5e54f33d345d03fb99a267ffecf5b99c37b5502","modified":1448990839000},{"_id":"themes/apollo/node_modules/wrappy/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1411081212000},{"_id":"themes/apollo/node_modules/wrappy/package.json","hash":"7fdc5ef4b882e7433bea9d43db24465ca2d35497","modified":1460380282000},{"_id":"themes/apollo/node_modules/wrappy/README.md","hash":"582d7139d169b0fc0b1014f2372a0aa26a52cfb8","modified":1411080623000},{"_id":"themes/apollo/node_modules/wrappy/wrappy.js","hash":"7d5c1c908664b3df4a9b72400a126652ba0dd905","modified":1411082022000},{"_id":"themes/apollo/node_modules/xtend/.jshintrc","hash":"da24cac8e0e7f15e3b4ee6944741e01d53f9056e","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/LICENCE","hash":"c563ca2a6d330b98c2ca9473a0299c4a689bf6b8","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/Makefile","hash":"bf249732a0985e13f60552c8a9d6c3894c8fbb44","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/README.md","hash":"d7d6f2f31071911d99fef109646867a0b325c8a3","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/mutable.js","hash":"0b00bff9bc925c6c258ef4afb77e7f50640e6555","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/test.js","hash":"3b51ee9fb4c95c82be0bdde62dddb31f4c18e648","modified":1446502746000},{"_id":"themes/apollo/node_modules/xtend/package.json","hash":"86c69ecaee5c1f31726f3c3ee5ddc63dbc0e4f55","modified":1460380283000},{"_id":"themes/apollo/node_modules/xtend/immutable.js","hash":"3c1de57f8d038e3ebc9e1ab278fe2f683866079c","modified":1446502746000},{"_id":"themes/apollo/node_modules/y18n/LICENSE","hash":"d1e0173a0697ade86e242be697a030918b770336","modified":1458190892000},{"_id":"themes/apollo/node_modules/y18n/package.json","hash":"af76bd1f7624ce91e5a2e1ba987f71d9e6e85fe8","modified":1460380282000},{"_id":"themes/apollo/node_modules/y18n/index.js","hash":"abb180b94096f6824676f2d1ca30376f25451a49","modified":1458190892000},{"_id":"themes/apollo/node_modules/y18n/README.md","hash":"27de96420d32db9e8a1ff0be8aa965761bce4c0b","modified":1458190892000},{"_id":"themes/apollo/node_modules/yallist/.npmignore","hash":"813df6cd387f277bac3c7b84c9e508d472d072a8","modified":1450425693000},{"_id":"themes/apollo/node_modules/yallist/.travis.yml","hash":"5ea83451ab4f7f1edca243cbe7dbcf14a9594d0b","modified":1450430717000},{"_id":"themes/apollo/node_modules/yallist/CONTRIBUTING.md","hash":"1ea00170c91f88b58f67fc747d452ff2a33db34a","modified":1450425693000},{"_id":"themes/apollo/node_modules/yallist/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1450425977000},{"_id":"themes/apollo/node_modules/yallist/README.md","hash":"930460a06c3414c2dceeeca378fbe0057779fab5","modified":1450554690000},{"_id":"themes/apollo/node_modules/yallist/package.json","hash":"b955bc4516322b4d073d23b8941e901d5acfe58c","modified":1460380283000},{"_id":"themes/apollo/node_modules/yallist/yallist.js","hash":"c8c1b4dff11391bb315acbed47e63e4c0968346c","modified":1450554767000},{"_id":"themes/apollo/node_modules/yargs/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1425539189000},{"_id":"themes/apollo/node_modules/yargs/completion.sh.hbs","hash":"527538bb86ffeeeeaaf6bde7782035bbc3532e35","modified":1435036458000},{"_id":"themes/apollo/node_modules/yargs/README.md","hash":"d3b40f4632f942e4a5de69d44553fe93fcb59490","modified":1452491870000},{"_id":"themes/apollo/node_modules/yargs/CHANGELOG.md","hash":"d9196286c174d7a5b43f399e594b8cecc9fd2fca","modified":1452841946000},{"_id":"themes/apollo/node_modules/yargs/index.js","hash":"5e89ce55ed93617db2fe557e36d4d7b7f6d4bad3","modified":1452491890000},{"_id":"themes/apollo/node_modules/yargs/package.json","hash":"16ebe56b2643a3f4f9bea3791bde158b864eff3a","modified":1460380285000},{"_id":"themes/apollo/node_modules/nan/nan.h","hash":"776a5ebab3bf0922abbd3b98288bad37cd60153f","modified":1459265140000},{"_id":"themes/apollo/node_modules/spawn-sync/test/test-empty.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1423094219000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"ca28d83359000c6b50751f7cbb0e4441ee5b793c","modified":1460383750000},{"_id":"themes/apollo/.git/objects/03/0d6772219129a93be398755d89b03ebafb4557","hash":"50eb74f7cb3f1ee971a50e9758bc65f8adda8bff","modified":1453518037000},{"_id":"themes/apollo/.git/objects/04/ee524544e5b442666ad0149d555181d5f40c69","hash":"1cd7023245c8ac40a1d4d9ec06bcd84c43634478","modified":1460029512000},{"_id":"themes/apollo/.git/objects/02/b050cacfd4e52a898d8e3a20e544026f452171","hash":"76a8e7462869a6ea532d2f8d3de2b0286c780f52","modified":1453518037000},{"_id":"themes/apollo/.git/objects/02/8c95dd438ad824ab9b893534a8841508e7fa36","hash":"cd906b9c92848cf6ad80db35d6923923fe3f880f","modified":1460110812000},{"_id":"themes/apollo/.git/objects/06/7cb6dca902a4e35ac76e3bfb72332bfd2b2e40","hash":"5d8aff83edcd41f06c59e6a060937754b4f11bee","modified":1453518370000},{"_id":"themes/apollo/.git/objects/01/482c23b2dd9f199ca1df425e6c30cd97d091ec","hash":"208d5d23d2b040f49d19e8960048a24c6b7dfde5","modified":1453518037000},{"_id":"themes/apollo/.git/objects/0a/233c743a97c821a453214be420fc3946db5443","hash":"47ed2047141725c4ac276daea9b74278fce7592e","modified":1453518028000},{"_id":"themes/apollo/.git/objects/06/db0405039d0a04cb72855e14baa27afb84edc2","hash":"13885112c608aa5d4f6ba3f5ddd603013a474f78","modified":1453443598000},{"_id":"themes/apollo/.git/objects/08/8a33b90d2dbe888cac053260f99bcdab71b905","hash":"cdc9e04e53ce0be2918c7182e5b93a2f7c81b4f2","modified":1458127080000},{"_id":"themes/apollo/.git/objects/07/a62a646daa07b1d04447bed740dfbe803ead4f","hash":"39523413daff5d128df2a8f860efe9058e380ebd","modified":1453443598000},{"_id":"themes/apollo/.git/objects/0a/d6a455a2fc67348530e1624cf3d80c44fa0246","hash":"4b6650f1d8c04e5d7358d299802b7998b4dfc63a","modified":1455281539000},{"_id":"themes/apollo/.git/objects/0d/0bb63759c57a61e0a7fc4e7d1d252a71de117f","hash":"80c7892c93f2ddb7cefabe194158a654505edd10","modified":1457095344000},{"_id":"themes/apollo/.git/objects/10/e27bac5628824f1859539046ea8c8cec2d858c","hash":"94748bf43ebf05cfa12bc2db3b55ef97f3f999e5","modified":1453443619000},{"_id":"themes/apollo/.git/objects/0c/2c54a2c1f214b83f45d389cf2d13e3982d7b70","hash":"7205eb7317fa21c751817851cea146fada8949e5","modified":1455281520000},{"_id":"themes/apollo/.git/objects/0a/f0c2e9b2d58ebb0d36cd96bc8a1b758883874a","hash":"d29519d8880d1e48350ca34bba1e959cb6b2eff9","modified":1460110812000},{"_id":"themes/apollo/.git/objects/0c/dfa23685b5adb99837c82a9fe52c8bbddc53c6","hash":"e92b04cc8d2dfe11def05cf8e0ea3f6e6f3c0711","modified":1457781428000},{"_id":"themes/apollo/.git/objects/16/bdeab6c93001b2cf87f41467958a4635020e74","hash":"982907c6203ee6d20c9e59c30814b1443e5a2d46","modified":1460110812000},{"_id":"themes/apollo/.git/objects/12/7162557c72e0c70bf2c1214bc416a9d0d664e3","hash":"c8602e9609a6efce82ce6c9ae7a117bbbb184d0d","modified":1455350763000},{"_id":"themes/apollo/.git/objects/13/9652608a56b84f3be9a4cc0113c802f2b3274e","hash":"80282a046680337c3b6be753b9daba614da04ae7","modified":1455024433000},{"_id":"themes/apollo/.git/objects/10/cd9115ddbdea588dec84d0fb9636599cee9dd9","hash":"20e4b9610e79d09f83d14669bc35c3062bcc8c94","modified":1455026237000},{"_id":"themes/apollo/.git/objects/1c/4368fc17c9c895d3005855c02424d6db08d2e3","hash":"0afb0081c4673254ae858a19afb50c3858c02a87","modified":1455026237000},{"_id":"themes/apollo/.git/objects/1c/53654ca8c90d2715737edf403eda2ff5f1374b","hash":"5071938fbd3935b460913039e8666643d2595e4a","modified":1453518028000},{"_id":"themes/apollo/.git/objects/14/486153115c8ef1b79c19de2d4fae2a6f280eea","hash":"4f3fbcc4d1cdf579a468689830681175a6433fd6","modified":1455282400000},{"_id":"themes/apollo/.git/objects/1c/9d80bfd1d76b2f2b7b4791908b6660aa23bed0","hash":"50de38dfd29b1bcc166f0ef0932b0eeea56c1e2e","modified":1459046025000},{"_id":"themes/apollo/.git/objects/14/c42d02cdb6b44dc22804a32cc1da54942fcf7b","hash":"d4c38e835a2be717e8f4a752bd7bd577d56c70ec","modified":1460383741000},{"_id":"themes/apollo/.git/objects/1a/3049a4b88ef4caa7acbc5678453c40cbb31d40","hash":"c36af2c6ad2f0151fda6a95bbee1a403980c9e93","modified":1453443598000},{"_id":"themes/apollo/.git/objects/21/46c1c5e2c6342d85c67201502bba67fafe1912","hash":"91977314caa0ae528b8d48ec6cb0f8af35e4ed11","modified":1455350794000},{"_id":"themes/apollo/.git/objects/1a/68221d381e02103670bcb60afac81c7fa2480c","hash":"cfb973a74b70031facfb56ceb8c2c1a139b35b37","modified":1455024433000},{"_id":"themes/apollo/.git/objects/1c/914a036eb26b4ff2e3b3d8dcd0c1a27457cccc","hash":"6f2542eac2144791d679c7c15db24f4fca7bc91d","modified":1455026237000},{"_id":"themes/apollo/.git/objects/25/3a287c0b7934026ddd14fbd7a3dae39185ed26","hash":"827ce29749bbb18ca31fbf52488a6b078fa575e4","modified":1453443598000},{"_id":"themes/apollo/.git/objects/26/5521cf7a80ed889332fe1763111b0da174f252","hash":"fb28928cde1a90ad6ee2975753d11b10b2005767","modified":1456291887000},{"_id":"themes/apollo/.git/objects/1a/7324f95675a237b5ad9886b42bf4ffbb2a318e","hash":"dde5202ac4345dc7bd7d8f94e321900514a240d2","modified":1457886985000},{"_id":"themes/apollo/.git/objects/26/80ba6298c4dd25a9536a11bd73a5252ce10b1c","hash":"0b0a347284f3ba2d1ec3d8d4a233c1ed5acbacc2","modified":1454329014000},{"_id":"themes/apollo/.git/objects/27/2d9fd265861327a52ccb3c4cd5a11263bb4c5c","hash":"882b6ab37010b74734a15b2d766bb3c4de9e800b","modified":1455281520000},{"_id":"themes/apollo/.git/objects/1a/c861a7bf6b7f142332418db70cc36d4fb6dbd5","hash":"a57db6851c900abbae66d400f461888121fbc3e8","modified":1459046714000},{"_id":"themes/apollo/.git/objects/27/c35e4c78af8899886f0ed6df84902e433bcc2b","hash":"d44f3dac6fb277da747709c0be573400d26a6928","modified":1453518377000},{"_id":"themes/apollo/.git/objects/1b/0c071301a9b635b12e17d0c6c86462d45529f5","hash":"d19511469f29b6da368179e64290bc45ea4f506e","modified":1455026237000},{"_id":"themes/apollo/.git/objects/28/7aa59f1d0c15bdfbdbd2e82d839312456f0989","hash":"471a81f04b1fad478c1c95661bce789a2431820a","modified":1460172995000},{"_id":"themes/apollo/.git/objects/20/dd307e41db492ef4cea1c6e3161d426fef1d01","hash":"4b6a289cc236d48ef80526f0b8e0fadec518eea7","modified":1460303312000},{"_id":"themes/apollo/.git/objects/2f/36e9ea5460dd80a37f9173b7c94e2ae04c9468","hash":"baa3d1cdcd9b650edbd307cbf24651def778b15f","modified":1455351740000},{"_id":"themes/apollo/.git/objects/29/2285cfb0ad345bf6e4705cd9d9451eb4679939","hash":"83b89a41ca239b209509be02d7f106e58dca3dd0","modified":1455686010000},{"_id":"themes/apollo/.git/objects/29/5b6924504e0f91f1d76b4339d08a1469837783","hash":"02b99c5028c95c686ebb192cf79717ca2fbdd6e7","modified":1455281539000},{"_id":"themes/apollo/.git/objects/2f/457014c676d620038f44ec5d12aaebc12bf5b1","hash":"18fc38b66ab8d8b9a7e101d9eac5a48c4214bc1d","modified":1453518377000},{"_id":"themes/apollo/.git/objects/29/deffd949eec09bd8f4abf98ffd32ac1bba9b5c","hash":"66a1cf48cf1c1fa9f2e0ed310faeb3f95af686ff","modified":1456291837000},{"_id":"themes/apollo/.git/objects/2d/cca157a1b40dad058b5c85e96461b010dff430","hash":"42d581e65674331f55cf987c74224eed17911f66","modified":1453443619000},{"_id":"themes/apollo/.git/objects/2f/c66d872f32e7c08b9d95761d24c505c47bde1d","hash":"d17aa91966aecd83b20c25db36aa242b9a9eef4c","modified":1459046714000},{"_id":"themes/apollo/.git/objects/32/548d8182235ef5ec6a887793d3e738551daf6d","hash":"5e64d579d66506bbee35dd704904cd7560c1695e","modified":1460303730000},{"_id":"themes/apollo/.git/objects/36/d6a6f5c6a81cac01f14a056c7c2ba37f3a202f","hash":"3b445c1f39e78498c1adef66d18949ee2028e8a4","modified":1453519810000},{"_id":"themes/apollo/.git/objects/2f/7d93d73793791d0a690b0d72416ce7354f76eb","hash":"b6e3a2a3d9ea588fbb21244252b97ddedc036b5a","modified":1459269822000},{"_id":"themes/apollo/.git/objects/32/af978b529633b67c1a48a17c57c741c8fd0575","hash":"7ff92e7db6ff49a31c3b3f741555aa1c8767b04b","modified":1457095334000},{"_id":"themes/apollo/.git/objects/33/2d65eb97ca01a6f3e12a07e2e57467f90d3f46","hash":"d2f6cf1e85d6bf095c4460d3f079963003668cab","modified":1453443598000},{"_id":"themes/apollo/.git/objects/37/5a69b64bdc41fcc957790aad7667a73a6686a9","hash":"edaf0d173020b2343460ce16d780fb4f701de444","modified":1454329014000},{"_id":"themes/apollo/.git/objects/33/d483c9c1719d419d4dbe9392626ac2150cd224","hash":"a34ed4da1569fc4cbb948e6a70139823847ee26f","modified":1460172995000},{"_id":"themes/apollo/.git/objects/2b/930eeb6091eeb270517d5fdb90f97e8ca5f5c9","hash":"2e53a3ceac52ff18f2e849590352d4424641f731","modified":1459046025000},{"_id":"themes/apollo/.git/objects/30/2be782b4250f5158bc0de95f8ec2bd78900db7","hash":"0d332397f5aa7f0b6d1d1f9c67df10c1ac8d5d84","modified":1460383750000},{"_id":"themes/apollo/.git/objects/30/47f6687c36e383bec1f93284d4aa0b5ed62202","hash":"92ffa8423284fed76d4934794d6ac1cddfe92322","modified":1455024433000},{"_id":"themes/apollo/.git/objects/30/5e6330af88d85605706b5cb6006add00ae7d43","hash":"6217395abca542debf477500fa2adf79fc87a715","modified":1455686010000},{"_id":"themes/apollo/.git/objects/30/7d42002dcf552015e3f87b0023df719f47e7ca","hash":"f54f48a34a388c7ab9b916e61d14d7178263a6be","modified":1453519433000},{"_id":"themes/apollo/.git/objects/30/b5d7a244b86df60a5baaeafcd46ec6bf7761f5","hash":"967474415b7c3d5fcfb2dcf1e44fc1f1885203d1","modified":1455026237000},{"_id":"themes/apollo/.git/objects/3b/8d6313c2bc57d6309a4116f33b9635a2716fca","hash":"e8b5086acffb00a5a3b154fd833a4cd15b516e77","modified":1460130150000},{"_id":"themes/apollo/.git/objects/3b/8ee33afc7fdffd2c03d122c8ae506119028181","hash":"f021b1cbeb3a77a0a9c32fe633689d084d48286a","modified":1455351717000},{"_id":"themes/apollo/.git/objects/3a/040d56289b003271decfc698b0557aa9880c7f","hash":"8e55da081b3bccd8146eefbc2bfab48a06bc249b","modified":1459065188000},{"_id":"themes/apollo/.git/objects/44/a8af1f51a15139f267f612289fd0255383da54","hash":"a7593886302c211c597d60e85f0e6f1d37294e57","modified":1453518037000},{"_id":"themes/apollo/.git/objects/46/192dc80415845d02b9774fa32190dade1234fd","hash":"7960f64ad3e80cb3b8adb5b56eda294763a03178","modified":1458127080000},{"_id":"themes/apollo/.git/objects/46/53fc3c83c870e1ce90c2e3c251412ec89e7c94","hash":"77a46754ad3cd4eb6299c0f54cc508b2399156c0","modified":1455281520000},{"_id":"themes/apollo/.git/objects/2a/821d02e3c06ac97560423caa125e7dd8a87500","hash":"1a65f305c59fd79817fc0bca1e165af0c79a7cf0","modified":1455507402000},{"_id":"themes/apollo/.git/objects/4a/75149c91b74ffab49c0b7abf9fd81f29e05871","hash":"41d1f7a4a00e6cfa7dfddae7a63bd2f001397cbb","modified":1455281520000},{"_id":"themes/apollo/.git/objects/48/4262e69de9aca36ff91585183fb8d9c8bf096f","hash":"a8501be50b670f6a229927ec4ea7dbbbc8691885","modified":1455507402000},{"_id":"themes/apollo/.git/objects/48/844a868cd0f0fa6cc12beafd783a1f8e876900","hash":"f7764198f74fb3537c0ddadef6ab1401c2200adb","modified":1455282400000},{"_id":"themes/apollo/.git/objects/43/c56c9e37abe92ed428bfb2a24336311039a9fd","hash":"428670b0b7c10dab31e84be83514fe9abd43e9ac","modified":1457781358000},{"_id":"themes/apollo/.git/objects/3d/a629ddeabfb55026808ca10c76146b043cb89c","hash":"ba3218568b8d44d09cd7ad1a86f0f3287b6d5386","modified":1459065188000},{"_id":"themes/apollo/.git/objects/4d/651db31322dda2e0b6f8e11fe08e1b65fadb92","hash":"7e034d10314bafe1b3154092bbe502cb34cfba89","modified":1460029529000},{"_id":"themes/apollo/.git/objects/46/c9bef2c708b2d0751714ab9196b269f08347d7","hash":"cb817a804f672c4950eabae3c1595ea0ae4270ba","modified":1460303304000},{"_id":"themes/apollo/.git/objects/4e/48fc394134cd2717c1b0f325b8a8a1dfb5f0eb","hash":"af9a8aa9f552465fc2b85a15b96b6c7b0fdb201d","modified":1459046025000},{"_id":"themes/apollo/.git/objects/4e/4054399fa1390ede0d468bde9e9e9b16e6984c","hash":"b95e2fe997ef2349afe0fb92ef77e2eef043ae7d","modified":1460029529000},{"_id":"themes/apollo/.git/objects/4f/a24e8da62d92ee00bd57581b9b919e5064106f","hash":"d1412e5364e48d2fc019a47c131bb77d4475b02c","modified":1453518377000},{"_id":"themes/apollo/.git/objects/50/1ee2675a1643a882119027717077355a126bcf","hash":"09f1e8f7fbb6181d6e48c078a72c6b04e1ff304e","modified":1460303312000},{"_id":"themes/apollo/.git/objects/50/2368ec4bbe125ec6f5c87a56241712b167872f","hash":"cc3cd3ab59c3e5201816f7574af4c235a2db9ee2","modified":1453518370000},{"_id":"themes/apollo/.git/objects/3f/2f41cd1c7f0d2f0c409f1b6dac08b64ffa6285","hash":"2eb5c94f2f5189f04adf4627922e599dc45a33f2","modified":1455507402000},{"_id":"themes/apollo/.git/objects/4b/0942042c7c882aee536d80f6f2f814d2f4281d","hash":"5fe85b0ba025d8a7241cc062b1d5816f4bfe7644","modified":1459046714000},{"_id":"themes/apollo/.git/objects/4b/e7902c7245121065b12728bd5da6ef9f9b5611","hash":"61239b05a25af47964c8ef851faa70abc0c53023","modified":1453443619000},{"_id":"themes/apollo/.git/objects/4b/3d18bd09b2f8f3caed37a2bb811c1b1cd98007","hash":"41d433881d27902d1eaafdb12cef08a7cd5ac8a8","modified":1453373049000},{"_id":"themes/apollo/.git/objects/4c/38094167799244e329870cba4ee2eb4cf872c0","hash":"0c60ab759046eeabc166a5ba67e486cc5ecf2229","modified":1459046714000},{"_id":"themes/apollo/.git/objects/54/eaa69082a790ca378ac5c1b3bbde5a31713ee9","hash":"89ed80b2277dbf6adb37679282f7db67e77da0bf","modified":1457781428000},{"_id":"themes/apollo/.git/objects/54/f742448bf232e12a191e0abd896f6892abe8ac","hash":"cc0a959852628e851c606c703f151a310a2add33","modified":1453443619000},{"_id":"themes/apollo/.git/objects/56/9d6d861bd90acba4ec1dcf7e77149d0dcbe854","hash":"ed2b0e1eb4c201f20e0a14e246f6f99128aff3f2","modified":1457781406000},{"_id":"themes/apollo/.git/objects/56/f0a64dba8b458ab87fca09077227b5a3ef0c48","hash":"8e421e0f545706d2471dd26cd230ec9f932a82fe","modified":1455281539000},{"_id":"themes/apollo/.git/objects/38/095f064bf8584fcb398bc116778c0f20391058","hash":"eaddd3fbf244492d728b268c06f3ab4948052ef5","modified":1459046025000},{"_id":"themes/apollo/.git/objects/38/a89fa219fc6583a8afdc4721ea8df850821590","hash":"fb4048affd67e5b0c3f751f1211f1a50b8f5c08f","modified":1456291887000},{"_id":"themes/apollo/.git/objects/51/b94d65ce880d7e3c4d8690ed130c84ff8aae51","hash":"a7a1f07ed6608a5a44905bc56e905ba9df335b10","modified":1453443598000},{"_id":"themes/apollo/.git/objects/51/e84fcbb71da72a9fe9f5f822387b09a524fd5b","hash":"cb3669e5bc4eeffcaef960df848709c839e12a5a","modified":1453519795000},{"_id":"themes/apollo/.git/objects/5a/0c978a13c9dcfaedbcf405d81ecccd11a380e8","hash":"7c2c7fcdcec3c67a36551b51c407d34300faa264","modified":1458817405000},{"_id":"themes/apollo/.git/objects/5a/871832e1124679ace43faf4c9afe18cdbc38ce","hash":"0f325ca0e431ce0b8fa0dd4185e9b3b629a87826","modified":1455282400000},{"_id":"themes/apollo/.git/objects/5a/ae3cbd56d7e9145ec14142a6ca08fc39588006","hash":"0c71558e6ae7f40583c20a149a67d19269976b54","modified":1455026210000},{"_id":"themes/apollo/.git/objects/5a/e7a895dc3fccc87dc0ed2f165c48b4a4d7f3f1","hash":"d6780e1cba023dfc049952534946b345ac635ccd","modified":1453443619000},{"_id":"themes/apollo/.git/objects/5b/42ebfa2c678da613a8173e302a5b7a52ac14e3","hash":"2fb4c39d6dc8e84ddc398f70ac17dddff5b55650","modified":1460172995000},{"_id":"themes/apollo/.git/objects/52/72bc5639fb56794e90ef5ed915916926a813e3","hash":"01a5d1d1ac6b0c2e99b1a72052c8b78a924e5b45","modified":1455351740000},{"_id":"themes/apollo/.git/objects/52/81e3ae8cf786c2c992de436d176359b5ca1627","hash":"7262ae230e9eb2f34e92a063624c1070506a5c4b","modified":1454329057000},{"_id":"themes/apollo/.git/objects/57/ba709cfb821d2eac33df099f3c2d71dba19df1","hash":"5bde3f25f527e66b25b58d01144823cf2ff8dae8","modified":1455026237000},{"_id":"themes/apollo/.git/objects/58/3be46b13220fe7e92f466b37bd806297890b9f","hash":"f7fb5f05143927e9ec02d6398aa2a81527e2282e","modified":1458127080000},{"_id":"themes/apollo/.git/objects/61/8961e713671c2c84099c4f83bfe94cb83755ef","hash":"e818e75afbbc3d1179fe41f5d6e41a885b7da386","modified":1453518370000},{"_id":"themes/apollo/.git/objects/5a/7ee22e1cb7382d61570508c1e5ada074db140e","hash":"9f4860069dc54f3fcfee306740c8e8ef00adc71c","modified":1459086259000},{"_id":"themes/apollo/.git/objects/58/f12908667aa77f878682394af8d88f1d0d93e5","hash":"01da12004134f32a1c120aaaea26d26007c5764b","modified":1460303314000},{"_id":"themes/apollo/.git/objects/60/c620499811f9e1951814d8f3d1adb50e420235","hash":"5f0aabe03a1af0f4c9d7343334673485b3a3c518","modified":1457095344000},{"_id":"themes/apollo/.git/objects/60/eae56e7da15f08f545e83e8030535834e75657","hash":"cfb126b8009cfeeceee4b10a0f625e83ca954a75","modified":1453518028000},{"_id":"themes/apollo/.git/objects/62/a5c0cbf9ee423587089bdd45cc23678304bab3","hash":"37d900e2e9bc9f04b040c8835229e2711e0410e0","modified":1455351740000},{"_id":"themes/apollo/.git/objects/5f/5544d253009ec3517b8d585f17706ae4aa960c","hash":"5d3844156751e90866ee297377179e8e738477a4","modified":1455281520000},{"_id":"themes/apollo/.git/objects/5f/be66baa9e24f2eb2773bed83d294c619a42115","hash":"eb63501ba491c54108ff820be4bbca695f1148ed","modified":1460303312000},{"_id":"themes/apollo/.git/objects/5d/c6dbc9a9807e489b7d112b4d268d43e5df6df4","hash":"05e18f4dd1e07729fde6ffb7fb02c0a7fdc4b5a3","modified":1460130150000},{"_id":"themes/apollo/.git/objects/6c/06b722ce492f4ab6b4c19c999a88f3def2eb88","hash":"d1eff721dfa43776ca64908f2834c342b2c599e2","modified":1453443619000},{"_id":"themes/apollo/.git/objects/6c/2222c83e37ccc165ec25fdc41bab7a0403cbf5","hash":"b7599083dfeff2befe9e4d53a4f1fd6c364b4c7a","modified":1460303312000},{"_id":"themes/apollo/.git/objects/6c/cf87a89af3f4baba86acf58e44045fb747dee1","hash":"41c8fa261a3962faa0c6f194abb4da9708de6579","modified":1460303312000},{"_id":"themes/apollo/.git/objects/6e/8ba515a19ac9e1cb2d3f4e4ce9bb2d13a41385","hash":"68b528fc73c4f6f23b0cf265c7a1a6932f0ec702","modified":1454329014000},{"_id":"themes/apollo/.git/objects/6c/f5ddf95bf3a027783c8479646a7ee1f1cac42d","hash":"fbc0c0bd3b6cf04ccd1b6b7decbc4b191cab5132","modified":1457095344000},{"_id":"themes/apollo/.git/objects/6e/bcd0fee42dbd9780e55468bdd4c850e82628e1","hash":"6257cd509d7d9dd0638bd2e8dc60c04e3edc4ff8","modified":1460383750000},{"_id":"themes/apollo/.git/objects/6f/122cad61611357fb8c5259228512a4dcefb19d","hash":"a274b06e19683385de55289345492364685e6030","modified":1453518028000},{"_id":"themes/apollo/.git/objects/6f/d263604677cc3d05a9d51094b424ce37888365","hash":"b937d79e4ebe2bc7382580ccd699aeaedd2506ac","modified":1455355776000},{"_id":"themes/apollo/.git/objects/6f/200b87a49b92beeb464e97c473ea792b1761c5","hash":"40d08ab00c514ad2a25742b938e13979624f122d","modified":1460029529000},{"_id":"themes/apollo/.git/objects/6b/d43e43eb811f8c47819ac894f352d8cdd56042","hash":"30657252d65a930579fd2d8209eb16b8fe5683eb","modified":1455281539000},{"_id":"themes/apollo/.git/objects/66/3f99ac08394e7e1e19539f66fb7980271cbb22","hash":"2216a30d6d140b9f6bb4744e4f3964e5cdd458e4","modified":1458817422000},{"_id":"themes/apollo/.git/objects/6a/979309528db772e12c490341a7d1c57dd00125","hash":"96091f5fa811ca61ba5b3b9f7e3876c257e88465","modified":1460172988000},{"_id":"themes/apollo/.git/objects/6a/313d4b3963dcb0e259402b6bb2ab58f11ce9e3","hash":"95e29fd8bd2e798db64420c4a58d1b9f9f315e2d","modified":1455686002000},{"_id":"themes/apollo/.git/objects/70/7937dcab1db8fa02fa7020290e45ab69ddf178","hash":"e5a9755a62815bab4435b8cffc47126343e19dfb","modified":1460303312000},{"_id":"themes/apollo/.git/objects/70/a6b0526067bbe5695f31b999e70a4dfbd94569","hash":"9c1e1649ec8b75ac01e53b2757f603fbf6022edb","modified":1453443598000},{"_id":"themes/apollo/.git/objects/71/d9c86e4b6e5d1aff9336575769ae664d12ed34","hash":"4590a8a12ca88dada82a51546550af4100716eca","modified":1460110800000},{"_id":"themes/apollo/.git/objects/71/e2ed1f42e893eddd5fc685288296773cf71456","hash":"1f0a81033aaf6e7ec3b2c635cd6ad4ce56972de6","modified":1453519810000},{"_id":"themes/apollo/.git/objects/73/28ab79f61e9b4067d91f26643d662cf4862671","hash":"8d7bb39ec8a924f2912b30da1df83f98a193dd6f","modified":1460029529000},{"_id":"themes/apollo/.git/objects/74/ce00479b0b8dfe2322e0fc124497e60ecc1ca6","hash":"b0f1680af7ae50a0319ee81bfe9d7053492bd30d","modified":1455026237000},{"_id":"themes/apollo/.git/objects/75/7ab3147391dc15b104847bcec9a4fbb6470b4e","hash":"30cf5351695412cfe1cba671c84cfc11a033403b","modified":1453519409000},{"_id":"themes/apollo/.git/objects/75/c79372b8b56969ae4511feabfd735cb7d2a242","hash":"a7374b430f2fbe176c859399972b33e08b247508","modified":1460110812000},{"_id":"themes/apollo/.git/objects/75/d25e111337dc191d022aa25c704e780da2400d","hash":"af9953c3f46ac6ca5c8c3f2ce153a76f14296a5c","modified":1459046714000},{"_id":"themes/apollo/.git/objects/78/e267b84885e74d3d71a9aab9bce5d34d7e4b7c","hash":"7a486883ffd8c95878e3a3a46c0711f2af188443","modified":1455507402000},{"_id":"themes/apollo/.git/objects/75/efa31881513b8672b39158a6c3cdda887440b3","hash":"d077bc86b5556a2c02f08722a9f18bd1b42bd715","modified":1453443598000},{"_id":"themes/apollo/.git/objects/79/6c13caba5cbab441beae2c6eaf8fd312e9d5e8","hash":"ead74bb001fc9add8f85e9f24dfc5134320c6b94","modified":1457781358000},{"_id":"themes/apollo/.git/objects/77/9df5453d2c457dac17501311895e3217bce516","hash":"1ea94cc51cde8ca7848606d836f6491ca5ecfc4a","modified":1459269822000},{"_id":"themes/apollo/.git/objects/7e/252bdd2ff1fd1e0d39af3fc78897411e7fd27d","hash":"73db67db77ce0a256fbc5891ea87269276d86c99","modified":1460110800000},{"_id":"themes/apollo/.git/objects/7e/e7a4cf6ff38736960154f57a654cf83a4a03e2","hash":"4bdb974ac3bdc81099fe8e675ff4cbda41ebe6e6","modified":1460303312000},{"_id":"themes/apollo/.git/objects/5c/1dae8ad30247f7223f60f3558425bcbc492b23","hash":"2c5580d9bc93d52a950b144860e2d647a2e451db","modified":1456291887000},{"_id":"themes/apollo/.git/objects/7d/a9f4010b597f63f29ea7c4596b4c68478ef8c3","hash":"e703e14fe80dcd85e075aafd30bdd6c0c7b9438e","modified":1453443619000},{"_id":"themes/apollo/.git/objects/81/a2e26e18a01edd666c4adfb8f371c86fd6c36b","hash":"262dee3b4c733a22ca01caadde64b4c39de9628e","modified":1455024433000},{"_id":"themes/apollo/.git/objects/81/b3cb9e833991231971263b3f586c6a52cc4ebf","hash":"20ea348edd253cbc23c57011349edbeb10b628d7","modified":1455026237000},{"_id":"themes/apollo/.git/objects/83/eecd18b966daddf3feab1c06519dc02d559a48","hash":"b7819cadb76ab6b850a6d3aa46328a2907129627","modified":1460303730000},{"_id":"themes/apollo/.git/objects/85/5f976b7a4f2e13eb415aab1b2ec36057996d50","hash":"0043a690e8db1f14bb4c9e8007f857568b240007","modified":1459269804000},{"_id":"themes/apollo/.git/objects/87/086a49f9f7d6c1d4a843e0fa647a8f048915ab","hash":"75c052a73a2998cd510935de7470045225dbfc4f","modified":1455350763000},{"_id":"themes/apollo/.git/objects/88/2fe903eee42fa945674d7b90515d816c345d4f","hash":"42b72494c30af1be5aceeb0472a3f729a3eac266","modified":1453443619000},{"_id":"themes/apollo/.git/objects/8b/d93cfa2e00cf03de8e7b2467bca8438eb8b940","hash":"7a33b5036f702cadf9861ca591d64cbabf353408","modified":1458127080000},{"_id":"themes/apollo/.git/objects/6d/bec89ef91e5604eb484aeda2b94be74c012efb","hash":"b57ffc80dcd50d048a63d4f1c657b9c0de6d2d5a","modified":1454329057000},{"_id":"themes/apollo/.git/objects/8b/e730b6234ab7ed518b1eda4cfaa55022503c6a","hash":"8df139446a524345a5be405fec8df006d1add2fc","modified":1453518028000},{"_id":"themes/apollo/.git/objects/8d/3b000469ed323cf0cd4fef09e2982756f1da8e","hash":"7663ccce3a59bd3a7801580ee2c6f1e370cc2f91","modified":1453443598000},{"_id":"themes/apollo/.git/objects/7d/4e1f1b283f0cbb3632f27dfc30a63c8c89f1e1","hash":"83bc3de285e9d6b12f0206df7f858dbfe0ebee8d","modified":1455686002000},{"_id":"themes/apollo/.git/objects/8f/5158af9510813324d40501ea49c530041ca2c5","hash":"d9eefeb5b769ec355da3ceb7c9f176c22d9e4c9f","modified":1453519433000},{"_id":"themes/apollo/.git/objects/90/303a909b280d205feb6d817b2939a347a566af","hash":"0aeff59923e0e30aef57e8c0c10fafc41e68fc1c","modified":1453519433000},{"_id":"themes/apollo/.git/objects/82/d4093f80ae0a7ad2038cb1d119600101fefb82","hash":"c26acc079c7acd9b237d7ab634175d057572ce23","modified":1460303312000},{"_id":"themes/apollo/.git/objects/90/5a00e9b9f24c402ddda63674d126aea07ac82e","hash":"df0fc758f2c0fbf884334bd3617a293fc03db45f","modified":1460172995000},{"_id":"themes/apollo/.git/objects/86/520e71758d9cccdc145e1806b340f770051cf3","hash":"676a6020861d43b59ba7a316eac1df683efd51c0","modified":1460383750000},{"_id":"themes/apollo/.git/objects/86/6c98f11d582625cd5ae95b165f0e2fd78a9514","hash":"126c6465faa86971438232d4dba45e24f882bcc7","modified":1460303748000},{"_id":"themes/apollo/.git/objects/86/d6c9233c29acc7d38fe3ec25af45e367f076a5","hash":"552834a7fad887c7f81579e56198b3b774e97194","modified":1455024433000},{"_id":"themes/apollo/.git/objects/86/ff06fa620864ca3b531651670d27eca1a5e844","hash":"8edfb559407fe09123fb440a213a3b36e1eec58d","modified":1460303748000},{"_id":"themes/apollo/.git/objects/91/948d2e6011705fc76cd79eff547103a5e5fda3","hash":"01a2fd62ac4262bcb3da5a3718caba03af597ca8","modified":1455281539000},{"_id":"themes/apollo/.git/objects/91/ce839001cc6fbc72c8af6a73d2470437e411dd","hash":"da62e62cf7b03e6345f4c461fb76d8a9f6fa0758","modified":1455282400000},{"_id":"themes/apollo/.git/objects/93/70a912bf1b3fc5953a227d501f9ab1a1ad5085","hash":"1939c03becd3b8c0e4e356f412c14578f51bbbd9","modified":1460303284000},{"_id":"themes/apollo/.git/objects/95/66b624b15c83f467d4112edc3042612a050b34","hash":"6d4885f7935bc21ad41cd1a1757a9c287b76646f","modified":1459086144000},{"_id":"themes/apollo/.git/objects/92/4a99829e7c874a0dd3ed46c4860dcff3e84e39","hash":"36df77570acf94c4b5b1f96d3acc7cd1043503fd","modified":1456291887000},{"_id":"themes/apollo/.git/objects/95/6c13aeedbb5a26c7bc051b7c437a48b5b4f2a8","hash":"a75167762a6855a6a8de55a17287951b57459cc4","modified":1453518037000},{"_id":"themes/apollo/.git/objects/95/8074fd35666bc91e08b1962e239f2e87960d22","hash":"15130ce66d5f1ce61932339c2495a731eb80ab7d","modified":1453373049000},{"_id":"themes/apollo/.git/objects/96/df4001641eeed5aafb87b419de01ce0c73db3c","hash":"a15819bb1d4e549c8b63e69ad8a72acf55c46095","modified":1453519409000},{"_id":"themes/apollo/.git/objects/96/e26e85e1a9dc9896475ddce694eacedcdd98a6","hash":"3772bd9545745efdbe16e98e38804f6a321deb70","modified":1459046714000},{"_id":"themes/apollo/.git/objects/9a/35b9eb0662339e332080814c3c113fd3050f05","hash":"f4dc78554052814a36a8862f211ed30f706293f7","modified":1459046025000},{"_id":"themes/apollo/.git/objects/9a/ef27bb79178f3352ca6dc73075155878b881db","hash":"43449cbd080b9f530d372712b3e41ff22afb1636","modified":1456291887000},{"_id":"themes/apollo/.git/objects/9b/09c351b41e51b99b04c74143c4e2738ee5f9b1","hash":"b716590b68c585779b21f7c6aa4fad76515c866b","modified":1455026237000},{"_id":"themes/apollo/.git/objects/9c/da76fbface8cb9505ec35af39992269a2a7810","hash":"79160453a1be5c30fd6529731340f426fa8db83a","modified":1460303748000},{"_id":"themes/apollo/.git/objects/9d/5008544469ba31cb16a7e3f0bae8a643a92509","hash":"abdce7b13030f2aba9e52280290f25ac85da26da","modified":1457095334000},{"_id":"themes/apollo/.git/objects/94/cb296f600f8abde77824c630a08ba20fdfdcc5","hash":"0a0e70242c6ebde94a5ebbd8e2b7b8d901ece370","modified":1453519409000},{"_id":"themes/apollo/.git/objects/9e/0b2e6c67a80397bcdde72154e3bb85970eec58","hash":"92230232e38cfd24c2031d73fc6d303713430eba","modified":1457781359000},{"_id":"themes/apollo/.git/objects/9e/4ecb8899e8946c0dc16f71e46685d7b2d284d2","hash":"37c5691f2deed535b7ab1d9a53a1a085e6a856d7","modified":1453519409000},{"_id":"themes/apollo/.git/objects/9e/9cee6805830aed94674719fce53daf3f9be931","hash":"05d202ee1452a4313771ed327dcfc851d8c71a4b","modified":1458127080000},{"_id":"themes/apollo/.git/objects/9f/6478904e6bddc78aa5c97a610ce367f291fe99","hash":"3f6b873ce77beec8b7f288debda880f23cb9143f","modified":1460029529000},{"_id":"themes/apollo/.git/objects/9f/8392e95148bac33778d0f15dbaff660c45f995","hash":"568d6033ca156a8118edbc03438248fc9d7c1b15","modified":1457781428000},{"_id":"themes/apollo/.git/objects/9f/e262fbbebe9115590ff65fac359ecc092bd728","hash":"a38a9677271833f200a689fb7cd64e0b0245f15b","modified":1455507402000},{"_id":"themes/apollo/.git/objects/a2/bd5c788637d09375daf45561c339d19051f5f9","hash":"7ce9cc847d22105bc8c09b8494a6b354f6d49b75","modified":1458817422000},{"_id":"themes/apollo/.git/objects/87/13ea82148071bcef690be8aa794375b2e6a709","hash":"3977210f832ea92a87107deaf6dd394948573cc1","modified":1459269822000},{"_id":"themes/apollo/.git/objects/a2/001401b2368bd428849180d81c40030e47476d","hash":"da45e97308841e6e838ab62c270ced245568703a","modified":1454329057000},{"_id":"themes/apollo/.git/objects/a0/baf7cc2ebf3fa2754e56fe192f1b0378408c0e","hash":"5e4f719870dcfa4aebd564059ca70b32541dbde5","modified":1454329014000},{"_id":"themes/apollo/.git/objects/a0/b7cb8872d861dae68e468e10c3217e51c8723d","hash":"e12412c4f771324f8a938b48189ce74054e8e683","modified":1460383750000},{"_id":"themes/apollo/.git/objects/97/fa747f33f33e6510fab7b2206dd233b985136e","hash":"ac17130754de5237a5fd0819749d60d7d9efe72b","modified":1460383741000},{"_id":"themes/apollo/.git/objects/91/f9bb8663dfa926d322ecf6153158bad8f75c58","hash":"fbf29bbded1be6b8f959ea84033c9c44b722a62c","modified":1455355776000},{"_id":"themes/apollo/.git/objects/a4/c07bf133a40143cce965af429c0e32de411bb1","hash":"7c1d1cc779cd0b37349d95ad0af79e5ce5c5fd41","modified":1453518037000},{"_id":"themes/apollo/.git/objects/a6/28d1dcd8de01cf5ec8e64af935f92fc5dfd455","hash":"c2f4837803b1f6f212d4b50c96c7d45244018650","modified":1455686010000},{"_id":"themes/apollo/.git/objects/a6/ec8791cd9825b9b5a6b9c0a0fdf4ced05378bc","hash":"8b2d6fbcffa74ed3fd7955f52db6111804144e90","modified":1459065177000},{"_id":"themes/apollo/.git/objects/a6/fc2abcd0c13dd3f3fbc8526293902651e884cd","hash":"8793902a1272a4c9d63757d0ce9a23a2daff1e2c","modified":1459046025000},{"_id":"themes/apollo/.git/objects/aa/ae7f2f9df0c5101fdd726fc5fc74c3df920493","hash":"34036e868711ba927c2848d6655d53d53d5a39fc","modified":1453443598000},{"_id":"themes/apollo/.git/objects/aa/b3c3f92308cd861c2280ea74d08ca5d714506e","hash":"d6fa584526560f0d48387fa6e96a3eb857c6bce7","modified":1459269822000},{"_id":"themes/apollo/.git/objects/a8/3ae0b91da02a59d3cb573765d5015819f2313f","hash":"4e574555738b10222a9d98427e0d8bc4beef0902","modified":1455024433000},{"_id":"themes/apollo/.git/objects/ac/96fb8a0dbd498a8aad029a3cb2b2cdba4cb5d7","hash":"a7000ae703ae7c36c52bdb5e8db6d29ae96751d2","modified":1453443598000},{"_id":"themes/apollo/.git/objects/b0/08ae713c75a18050f88332e371ec28ffefa455","hash":"ea3204734a6178c24a2bb31fa104a8c06a4c5c61","modified":1455351740000},{"_id":"themes/apollo/.git/objects/a3/2c72a43efaf6ddc58cbb41798c9c6792be750a","hash":"2bf72255e2be00b287a0643d65e14d01c1c54fc1","modified":1460110812000},{"_id":"themes/apollo/.git/objects/a3/cb301adc98bf7bd7553447b66785c94218758d","hash":"514a77124b90025bc6103b335bcbae85bdfb203e","modified":1458817422000},{"_id":"themes/apollo/.git/objects/b0/276179894ee59df99c3962b9c3e46697dc9a91","hash":"f7f977266246dca9f40c6f3525a4ca9ed1374006","modified":1460110812000},{"_id":"themes/apollo/.git/objects/ad/d62193639f6b4decce57f319b0b3448743701b","hash":"f7c51725f02f20a860b971588d619896ae1ac8c3","modified":1458127066000},{"_id":"themes/apollo/.git/objects/af/9128f9df6bdc45fbf4ce1145f937b9a5983431","hash":"2e4ce7b0f1f2090218716864e945206b4bc9ea50","modified":1459046706000},{"_id":"themes/apollo/.git/objects/b3/8ec8bc7fb25f144ac8f16421a361977327b91b","hash":"4d1b7e744f0564bbb0af6c47b9729411733b2f8d","modified":1460303312000},{"_id":"themes/apollo/.git/objects/b3/cc34e396dcd8bc1039603cb4e84717f3b80111","hash":"324445184ae3df06b0fd490513ef0282f60c6a38","modified":1460029512000},{"_id":"themes/apollo/.git/objects/b2/80328f4c7ec60a62a00deb6fa39b052629198e","hash":"fbd3ead99949d720a0e24ca800aa26aa2c26a978","modified":1459046714000},{"_id":"themes/apollo/.git/objects/b6/c7085e5c3128a11557b8cc3bd86f5c8606fc28","hash":"99a9e88bd9f576d7f5b96854667c206970b96b53","modified":1455350794000},{"_id":"themes/apollo/.git/objects/b6/747ccb7c2c29dd2b9fa97433db56c7c942c414","hash":"37d17cd9a3a6fdbf678ee793cbc234fd9ded19a9","modified":1460172988000},{"_id":"themes/apollo/.git/objects/b4/98ecfdaefc6d472786f9152b4fbb8f9c34914a","hash":"c1836f8001b59daf9a71bf8f65c0626a698b527c","modified":1453518028000},{"_id":"themes/apollo/.git/objects/b7/0e99efd7dc0d8c226f26294447b79536086d0f","hash":"095e12af41401cec9ce2c54173105fce1d41102c","modified":1460303312000},{"_id":"themes/apollo/.git/objects/b9/4949561226f8df1306fbe9dc4130a68401c16c","hash":"423cda24b90654861432e541139f81db77a14080","modified":1455282400000},{"_id":"themes/apollo/.git/objects/b8/61c4b811db1c572c405d019c85a0c7ca8dc268","hash":"05bc67d038598d012d9cb66eee58f116fa975c77","modified":1460110812000},{"_id":"themes/apollo/.git/objects/b9/ddbf20bac80487427438dc7273c02b82389e87","hash":"f640360cf9397fc9a5dd0e67564308a9eb4a5586","modified":1454329014000},{"_id":"themes/apollo/.git/objects/b1/9275e9e74167348dd6222608c4f42d865b3c40","hash":"b514f2aecd060ff33f6716fb9c4bd3f07eb7b770","modified":1455355776000},{"_id":"themes/apollo/.git/objects/a1/40e7aa4be5829650918d58be8a6a5be3801549","hash":"e223d21161ebd7a5b665acb0032a191204ab9a0f","modified":1460303748000},{"_id":"themes/apollo/.git/objects/ba/445d8d6fbff4dcb43954129985b60cfaf0cb5e","hash":"ad722cf64471cd8f597991a5d15ceeaec521995c","modified":1459086212000},{"_id":"themes/apollo/.git/objects/be/3a5360abc2ed80a0e84dd77930684a6bd00961","hash":"e97c16cf143fb0d95703a1d5716815981acfcaa9","modified":1457095344000},{"_id":"themes/apollo/.git/objects/a1/5bd371ff9fb37cc57fb57fcec772e91f91ae37","hash":"fe0f0eaa88021d20026a0dc28c5a3f6f259c062b","modified":1455024433000},{"_id":"themes/apollo/.git/objects/b1/ecdeba68e4938bc3e165f0dedc2bb85df8d2c7","hash":"32326b8f27ac6a72c4b8927f0b1f6786c65e73ef","modified":1460029512000},{"_id":"themes/apollo/.git/objects/bf/7cca0b663b13897e6feaa2d1cb90aff5db29cf","hash":"64bd5c1418941872064258ba1d1b7d457c9c45f0","modified":1455350794000},{"_id":"themes/apollo/.git/objects/c2/a63af49241e32499b7047642edb72896c324c3","hash":"48e423a7239dc38c3553563e9270acfd210148fb","modified":1453519433000},{"_id":"themes/apollo/.git/objects/c0/3db76bfd0315363f0e6f52cab2de9c0f9495ea","hash":"4859b21428282ab46d28095c48528e9119476838","modified":1455282378000},{"_id":"themes/apollo/.git/objects/c4/049dd0f3e425c6c600a07e0e1a455bbd8d7861","hash":"1878f4b8aad0a74f99dde3406fe2f8aa103df316","modified":1460172995000},{"_id":"themes/apollo/.git/objects/c3/93639cc411a28df0c5558c5ef928f1003f572b","hash":"2820a27fa5f166bb430d81e40feca29e0f17d4e9","modified":1455507402000},{"_id":"themes/apollo/.git/objects/c4/8fc84d442754536f20f580667d42b9c312ce00","hash":"148afda5df5a8ac49ff22d23f9a577265fcf3e7a","modified":1456291887000},{"_id":"themes/apollo/.git/objects/c6/0b5500007b0b06e220219b63e2e025059def35","hash":"87a3980497af0eb3ec0684917f3f658c12485cda","modified":1459046714000},{"_id":"themes/apollo/.git/objects/c6/52f151b4315cfdfbbbc82926b34d244aee1285","hash":"25017020492cd6c957aea4f49acb6d5059cb0454","modified":1453443598000},{"_id":"themes/apollo/.git/objects/c7/06fb96da334e549731e49b97b5111aceb7d5db","hash":"d768c51db84234d125a72952b3dd467835f094b6","modified":1455281520000},{"_id":"themes/apollo/.git/objects/c6/5ffb4e93c8cfe4a71c83ceab76013c4c4e2b3a","hash":"89af1efe06762df34b5865388c55f3bfac48a8c8","modified":1458817422000},{"_id":"themes/apollo/.git/objects/c7/a0c585f816d5280a02d3b7715059cac631a383","hash":"a9bdc1def4c2142d60a7217e8e62e97ce348c462","modified":1455507402000},{"_id":"themes/apollo/.git/objects/c8/bab5c0388a0f74bdd2e5694008601e2594507e","hash":"28965285c594bc74e1ddd23c67360b6eed08f234","modified":1459046025000},{"_id":"themes/apollo/.git/objects/c9/26527444b205589e95eaf473d348d147fc931a","hash":"1cc2aca574fca9971597325075f5e78e63d65a91","modified":1460303748000},{"_id":"themes/apollo/.git/objects/cb/09de82419d68fd44f8b525171441402c7f9385","hash":"7629eac9d7ab4e97080e1c99cbab464cf1e7adc8","modified":1453518028000},{"_id":"themes/apollo/.git/objects/cb/5f73a8995e727dc99ebce7e2c46109dddf9aa3","hash":"0b91414279173096c80b1bd527df7bd1ed67d444","modified":1455281539000},{"_id":"themes/apollo/.git/objects/cc/6adb36078f5ce2ed9fe13f6163085b3c58ef50","hash":"8758c390775450a0e25739134abe645e6aed5315","modified":1459269804000},{"_id":"themes/apollo/.git/objects/cc/ebac228183762b103e3d95def27920b59e3cec","hash":"1709b3634d7621c1bdca34c8b3b225a0682a8230","modified":1455281539000},{"_id":"themes/apollo/.git/objects/cd/b6b87c5e714280aff69fe1d9168f96d26fc6e0","hash":"62f7154469baf832e47373e8e1c29cf0dde43965","modified":1453519433000},{"_id":"themes/apollo/.git/objects/ce/03104fc5b6637dc0e73707ce073d5fb7d132d0","hash":"7d19ebf824903ec3619cec9e829fb42206de2187","modified":1460110800000},{"_id":"themes/apollo/.git/objects/b1/aabb2e0db5b2e11565132964f5efe77833dec4","hash":"096feaee7308db21ee4c48ec6c326b0394cbba61","modified":1455686002000},{"_id":"themes/apollo/.git/objects/c5/7b46cad23f93889e456e5fcb39f3f760575ab1","hash":"eea79b22f2be58e188a141ddfa776d68c2abb9d1","modified":1455507402000},{"_id":"themes/apollo/.git/objects/d0/0d1a9058e4b380e1437483567e5c27772bfa28","hash":"530b5e87d2c0aa93d0f0ee1e4c99a2ed6f5d9d14","modified":1457886985000},{"_id":"themes/apollo/.git/objects/ce/13ed6107ed7de95cc852abae4f9e86171535ef","hash":"561692878ee4432f89553cddee6e31edba8716f2","modified":1453373060000},{"_id":"themes/apollo/.git/objects/d0/827c3bda0d34f4959911faf5f8b4f5564522bc","hash":"e26bc0017e3a8309a51ee3a5cc0a2468e9e73bc3","modified":1453373049000},{"_id":"themes/apollo/.git/objects/d0/7bf5fc12549904665ab4d2f8f1990c670c8d2e","hash":"d58e684b61bde8e2d71d52daccc888c9667e7484","modified":1457781406000},{"_id":"themes/apollo/.git/objects/cf/3f4d9ad9a53294495c3fa1a36483eab1d7e876","hash":"f89d3f60fb1439def3181f50097c84bade077b4e","modified":1460383750000},{"_id":"themes/apollo/.git/objects/d0/9de66c52d7e3eccbc909f86e96919c54ce78ff","hash":"2cc6d52c00bb92d7f030c35dfa22235fd4caef91","modified":1455024433000},{"_id":"themes/apollo/.git/objects/d2/c3fd83cb4973fda67e9fb85bd6aba845b8e00f","hash":"67d456b406fb6b4fce01569641f3f1b6934d0b0f","modified":1460172988000},{"_id":"themes/apollo/.git/objects/d3/8ea7f3bf83a8850a27b38e36a0f15361dd5c03","hash":"3e2ceba369319346ec26cd706b8ad587417dab07","modified":1453443619000},{"_id":"themes/apollo/.git/objects/d1/35d53051d3c08cef1f23e194f919f44ed32e1e","hash":"4f0ac9f4330958243bbaef65cb76cb7a56d401a4","modified":1460303312000},{"_id":"themes/apollo/.git/objects/d3/dc3c3b84c3b9be662304d885afdab2da3b6311","hash":"578d192a6aa91ff7e0dde2349ad745f9aeb3138a","modified":1457781358000},{"_id":"themes/apollo/.git/objects/d1/8f5c11dc87f221ff38b0b6043e995024f76567","hash":"cbb43ba4fe4769d73fed52d3ea882f26e5f2348d","modified":1459046706000},{"_id":"themes/apollo/.git/objects/d4/998a4971dfb5f76dfdde4849ae29dbafb5fe77","hash":"8d0b6bfc4f345ccda3782553f7ae514e4cab1bba","modified":1455686010000},{"_id":"themes/apollo/.git/objects/db/9e71aff505e39af7b35a9996336d2336e38385","hash":"7a9a5f80cfa89c1dbb5622454b07fc91c498d514","modified":1460303312000},{"_id":"themes/apollo/.git/objects/d5/aca99220ff5da756aff2fda85b6e11469e5ffd","hash":"79972856eb5173366a3c1f9cd98534cedf3a9809","modified":1455282378000},{"_id":"themes/apollo/.git/objects/dc/1a3a3de453fb5a592a9045f89f2bd50d45bf98","hash":"413d251e283b4480e0e4711842494884f15d466e","modified":1455350763000},{"_id":"themes/apollo/.git/objects/d1/bd2c3e1bd3a68f0a9a8afde3f93c64f09d7327","hash":"03222d6bbee16dd09f7ec459e5e20d872214bb7c","modified":1460110800000},{"_id":"themes/apollo/.git/objects/dc/5614c1c23f5db667cc47f58249296de00d8e69","hash":"69f78dd36f88f614efdf482e2674ad166de4353b","modified":1453373060000},{"_id":"themes/apollo/.git/objects/db/5992131ebb0ef88c584f9047362570ebd7d3c3","hash":"0c869e35fb390a83be76dccd56d279ebe858968c","modified":1459269822000},{"_id":"themes/apollo/.git/objects/db/c17dd20c2a6694b5a265463b856ef097e3a240","hash":"6ed243309d891fb95b75c82fccb7bea731786032","modified":1455686010000},{"_id":"themes/apollo/.git/objects/df/09979e8ae6f9b804860042cbd618398b0e0789","hash":"35be80203ba270e4dec52419c074ddb760ab9b33","modified":1453443598000},{"_id":"themes/apollo/.git/objects/e0/55945f8d9953cee3d0b63fddff752e550d0761","hash":"7b24cd45b6a7c7e6279a8143d582e6a1d0745a39","modified":1455024433000},{"_id":"themes/apollo/.git/objects/e0/b0eeb8616613c28968fb3a08102495ccf746fe","hash":"cc7b547ea21a7992a9b8008fac53d7f51eef42a2","modified":1455351740000},{"_id":"themes/apollo/.git/objects/e1/81de8fc7f24463b9df7b1b5aa3556f94950be3","hash":"1dab10f0ae8f01779019516e4ffa9b0534bd6330","modified":1459086259000},{"_id":"themes/apollo/.git/objects/e1/a3c2c30a22e722bd8ca2eca0ffc997589202f5","hash":"caf14adb640d4e84585612a86a70ea4ae5ca2c76","modified":1460303312000},{"_id":"themes/apollo/.git/objects/e3/7c5531bd977a558f191f56f37dd2851bcf9ae9","hash":"4dad516baf10ecf4401bdcc9e9fec7a704d0f0da","modified":1460110800000},{"_id":"themes/apollo/.git/objects/e4/10f0f655aa52b5b6ca89bedc10690b85f64268","hash":"227d2f55dad9769e14c96af6c85f03bb47480dc8","modified":1455026237000},{"_id":"themes/apollo/.git/objects/e5/cce7acc55481dcc7484257164fd64f101e41d8","hash":"ddeba24494dbc50c53a459195cc76fc51b166e64","modified":1457781428000},{"_id":"themes/apollo/.git/objects/e9/57abfeb7079ae479f55e85cb2382c136d1b3b4","hash":"559e4b1236defbcdf82cdd602a3d16f3b1930097","modified":1460303748000},{"_id":"themes/apollo/.git/objects/e4/dabf701420c30fcffcdf24e1c89bca9717bc30","hash":"321dff8974b943a82ee7e06efdd12ff131e08987","modified":1459086259000},{"_id":"themes/apollo/.git/objects/e9/ae5dd8fb996717a9b8a7dd052259952286e565","hash":"7387169893c3b0680fba47bd354135d8374f79bd","modified":1455350794000},{"_id":"themes/apollo/.git/objects/ea/09ae9b8cfc4aeb7afbd7355dbe40b5780f9444","hash":"d37614b2f8a60aa982da930f35d745eee3f855d2","modified":1459065177000},{"_id":"themes/apollo/.git/objects/e9/d969f85bbc32de0ae638c87d99a91353d02214","hash":"1ea80584aa9658d87a48511c64091dbcfdf1ef2c","modified":1455355776000},{"_id":"themes/apollo/.git/objects/ea/206b354a54636a6e8cdc071e42f32a430037b0","hash":"bcc98418f08d2c067340fa996e27d0e305f22799","modified":1459046714000},{"_id":"themes/apollo/.git/objects/eb/2d5d89fe4a0a05bb37dedda673acd0118ade6e","hash":"7c102ee870da6a7a9ae75cdff677fe7337cd54f7","modified":1455351717000},{"_id":"themes/apollo/.git/objects/df/0421f519bcae6c08d99a73425efb00a95f7da6","hash":"cd03a0fdb7cd2a1a19f41ec37ada032c353b1cfa","modified":1459086144000},{"_id":"themes/apollo/.git/objects/ec/5d041d0a7597ecde07939c645ef4d46154c23e","hash":"79694785325cd926837fe27d560ebabf5fe94a70","modified":1455351740000},{"_id":"themes/apollo/.git/objects/d6/7a4bef60824a3dac0862530dbf9a39849827d1","hash":"79974c078c9ace573b9a4d73f37ba339ef666c2e","modified":1457886985000},{"_id":"themes/apollo/.git/objects/ed/0a30b567c3d55c1f4d9ad63484ce1ad4ecb3ff","hash":"0d855c29ea62d518ca11ccfe25e9a1ec9ff4aa94","modified":1459086259000},{"_id":"themes/apollo/.git/objects/ef/91f5d1311051b8df4558df8aab0d6b6ac56cd0","hash":"68923ffe4dde16d1301a8e2e058278ef15c2c743","modified":1460172995000},{"_id":"themes/apollo/.git/objects/ed/3726ff283daaa9d39a998e1da7677adc9cd274","hash":"b230e70e129bb8322e449578e73724c3039264a8","modified":1458817422000},{"_id":"themes/apollo/.git/objects/ee/8bdc39cf7e63e008d71f0869bd4178da19ee72","hash":"cc80c0ea68ff04d125bf71d34e1b8c433cb16c08","modified":1453443598000},{"_id":"themes/apollo/.git/objects/ef/e89471caabbb16ddf9c5ef76ef9672c74b6df3","hash":"1764415a419d52e3c5cbe564687497f445d24fe0","modified":1459086259000},{"_id":"themes/apollo/.git/objects/f0/feb6f1a8c5299ecad38d33b685af91bc62d453","hash":"111482aef1904b1e050b2240a66fbd68bff364b8","modified":1454329057000},{"_id":"themes/apollo/.git/objects/f0/f0651f47ab8a4c22d6b752f5f14f85d99ccdee","hash":"ab49353b1c582bd483100664210dfdfa0768741f","modified":1457095344000},{"_id":"themes/apollo/.git/objects/f1/09a4f7d2fafb1f4f058db9de857c10fc06d9b6","hash":"1360568ad4f60be9a4e611384da9284eacf7fd2f","modified":1455350763000},{"_id":"themes/apollo/.git/objects/f1/fdb81a5fd132965579474858d3df6a7746bdf9","hash":"8ec933f5f3ce5d49ab017a7af9d251a9d3fdbfbe","modified":1460383750000},{"_id":"themes/apollo/.git/objects/f2/750bffb9216b1477d76e728567326da09d5925","hash":"b9491ec83f9f107a571c9bd9ce551b14d8bfc7e6","modified":1460110812000},{"_id":"themes/apollo/.git/objects/f2/b9298e4e1b3c0097ff331265387d90be5a5daf","hash":"9f8bf8a5daeb6251674bba9a2b3e22392b8962da","modified":1455686010000},{"_id":"themes/apollo/.git/objects/f3/017439128b6d6a5dce74f2a5ac08b64032d86a","hash":"91166d45a94804086b4c0d2cc02ca6e1695f6b55","modified":1460303312000},{"_id":"themes/apollo/.git/objects/f5/3c5deed833e42d0c9d515ac64a441e273eb58c","hash":"be52a8e928ed906d0d2ecb78fc027afb0f40b3e2","modified":1456291837000},{"_id":"themes/apollo/.git/objects/f3/736fd1378ac24bdb60647860e118968f3fdf3f","hash":"f4914fa54e455e43b0cd55d73aaafb2e4fa23e49","modified":1458127080000},{"_id":"themes/apollo/.git/objects/f5/a4f957010a12fbcb9e0acfad90b955f5a83c33","hash":"6a07c6146cffbd8b9fc1c268dadc25d733e20d67","modified":1455282400000},{"_id":"themes/apollo/.git/objects/f6/ef33eef62d9b6646455e360d703e3b1d8361ec","hash":"4f6924c0edba627d7ec223f6af1707938136c4d4","modified":1455281520000},{"_id":"themes/apollo/.git/objects/f9/6fe122d786438fd7e6689399bcc17237bf3adb","hash":"8190c0960d24b46853392b8c8f0d8fd2d9a85bca","modified":1460130088000},{"_id":"themes/apollo/.git/objects/f6/fa8e1b3d1b64f536955ba3202f3273af1b3d08","hash":"01857a0346c7692d545039867261ec8e0652b984","modified":1459046714000},{"_id":"themes/apollo/.git/objects/fb/116e1f3b71072d6dca0039421e2c6e5a009997","hash":"efd2b3431d2981bad5719c6c07b443e9eb465083","modified":1458817405000},{"_id":"themes/apollo/.git/objects/f9/ef38f8be9e88c73a7a90c8cab4d9cbf2a784a4","hash":"9b998979bdfa91a35f4d476343a1762ad7c2b2d5","modified":1455281520000},{"_id":"themes/apollo/.git/objects/fc/becd49018b5effd317c68387ab230c207b77b5","hash":"dc272348e4f875cee2dbb7324800f47d514f462b","modified":1460303304000},{"_id":"themes/apollo/.git/objects/fd/621a7e460815e587c6ce5fca9d9f4c63095f3a","hash":"01927064fa96bdebab61e92f801e656ae1523649","modified":1453443619000},{"_id":"themes/apollo/.git/objects/fd/ecab5daf63065021402978def71f2a701bd4f6","hash":"988a6c0e82916328190420a25d6362cb45d3aa55","modified":1457095344000},{"_id":"themes/apollo/.git/objects/fe/243b050ad108ee7c20792540c23fb24c758470","hash":"72b7012018cc1ada4415ba55321db5e39969743f","modified":1453443598000},{"_id":"themes/apollo/.git/objects/fa/6a386cd62466d6c76edbf7799ef184e6e973d6","hash":"58aea64a5c849353b550e24dcc61a39d794ff473","modified":1459086259000},{"_id":"themes/apollo/.git/objects/fa/65a5b919ffce454c8781a72f3725c875022f0e","hash":"a91a0d773266087e5c6a3de8982d420341bba6f3","modified":1460303312000},{"_id":"themes/apollo/.git/objects/ff/0ecc6e1193ee46dc6e7d9dae068b2cbe09733c","hash":"add013c8a7095ee9dd3f96a41444b98bf8ecd2c4","modified":1455281539000},{"_id":"themes/apollo/.git/objects/ff/4c413fadd099310c614ea0856885b6bcb5ea96","hash":"72330f5a2bc19652268831981ec6849e07e4c08a","modified":1459269822000},{"_id":"themes/apollo/.git/objects/fe/939fbb64e57916440031dd9f0f3b6d12b7171d","hash":"395b053084da73da99ec91eebcdbc443b68deb2f","modified":1455024433000},{"_id":"themes/apollo/.git/objects/ff/be03825d842ee6b578d9c796f4e1420528e41d","hash":"278444922545ac43c693effd111b9bd7ed089a97","modified":1457781329000},{"_id":"themes/apollo/.git/objects/e8/fa1e77b4e2a507ac79ed00f4ebc3b4793b9226","hash":"9bdf1239fa484b6bfddb31e099cb268ef0384616","modified":1458817422000},{"_id":"themes/apollo/.git/objects/pack/pack-7cf4d21c6325dc4bb95bb09837f66b70097ec5f3.idx","hash":"91fc0757e978799c6e7d92168cc307a3955c7c1d","modified":1453369844000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"187315928040112ac5b9b2c0c6b2f406cf45813b","modified":1460379798000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"7fc843c37a4dbf9f6e70770398841a73465ec642","modified":1453427473000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"7ef0046f9633fac2e41a78784abbcf61f580302a","modified":1459086070000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1453420389000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1459046025000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"a260196a1aa96a729ff0d80a734b840f5fbf6678","modified":1460172855000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1460040186000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1453369844000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"01a2327ac7f06e83b0451c3cc01507e4c415c041","modified":1461380717000},{"_id":"themes/apollo/node_modules/ansi/examples/cursorPosition.js","hash":"e4d4c5f329672a2b8e58047f56765a59502699c4","modified":1442006415000},{"_id":"themes/apollo/node_modules/ansi/lib/ansi.js","hash":"eac25e4f75b684ce56d7091d60fe4fb7bf26e8b2","modified":1442006415000},{"_id":"themes/apollo/node_modules/ansi/lib/newlines.js","hash":"9bfaff398370f329734fb275c5f0d7733d76918b","modified":1426184022000},{"_id":"themes/apollo/node_modules/archy/examples/beep.js","hash":"8435f1fda19336c06418aea99d1836bbcf362ce8","modified":1331245333000},{"_id":"themes/apollo/node_modules/archy/examples/multi_line.js","hash":"2baa09f9f176e625247f9894ac770fb9c6e1c24c","modified":1331245206000},{"_id":"themes/apollo/node_modules/archy/test/beep.js","hash":"1bb3df7693cf4dbd198bd3fc91e0c6e3dd82083c","modified":1355733808000},{"_id":"themes/apollo/node_modules/archy/test/non_unicode.js","hash":"b19a7e7ace40af5c5b4c8ff3508c7fdc642e3c2c","modified":1355733824000},{"_id":"themes/apollo/node_modules/archy/test/multi_line.js","hash":"6892fde2a90917b678e035caec80443460a18973","modified":1355733816000},{"_id":"themes/apollo/node_modules/asn1/lib/index.js","hash":"cbff145d47fb41eb1262f012a7024e7b0e527d6c","modified":1401981220000},{"_id":"themes/apollo/node_modules/async/dist/async.min.js","hash":"487f1a1adb0bf6b00233edb64e64f2fb305ce5a3","modified":1452211452000},{"_id":"themes/apollo/node_modules/async/dist/async.js","hash":"a410bed1e8c6a19be68101c293ff66c4961076ae","modified":1452211451000},{"_id":"themes/apollo/node_modules/async-foreach/test/foreach_test.js","hash":"25fd2fe3d214384f8bd683717c2e51f6d25f73fa","modified":1321548462000},{"_id":"themes/apollo/node_modules/async-foreach/dist/ba-foreach.js","hash":"d63fdab80cc8ce5dbe79ce75a47252e2139abac2","modified":1326250238000},{"_id":"themes/apollo/node_modules/async-foreach/lib/foreach.js","hash":"2e647d5ff5498f33fd8c220f9999a00cd9d1d7b3","modified":1326249886000},{"_id":"themes/apollo/node_modules/async-foreach/dist/ba-foreach.min.js","hash":"249c5cd52beeeeebb2e91497c7afb72cd1f45599","modified":1326250238000},{"_id":"themes/apollo/node_modules/async/lib/async.js","hash":"a410bed1e8c6a19be68101c293ff66c4961076ae","modified":1452207555000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/brackets.js","hash":"462b8cfaf85866c83e0c127a11b081dfa75b0b71","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/autoprefixer.js","hash":"df34b8c1f5bebf283df698cb4481205f2bb8d162","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/browsers.js","hash":"3bc33c414900fd20547598c35acc59051ecca55c","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/at-rule.js","hash":"240918aa36f47b12b5de5378ee8ed498c9899e65","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/declaration.js","hash":"31aa72f0547fb6effc5690abcfaf16f352f30d5d","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/prefixer.js","hash":"f0b359e6a11f0464dcc19ed07d519bd9b0f52181","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/old-selector.js","hash":"3512a4a58c60d1d43d75292b33731c3f6b6fef95","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/info.js","hash":"018b0ead3564279e17fcb8f6688596b9fc74e9fc","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/prefixes.js","hash":"9f4b067d70bfbea8c4fd68011506aab891a1077b","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/resolution.js","hash":"e640d6cd8c1669b84d028e02e969a85e82a56833","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/selector.js","hash":"788dde55f1fdae606be9fec7634fa6a6c031088e","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/processor.js","hash":"86991e8c2ff71ec696e32cc26754a1834d8a6837","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/supports.js","hash":"ebdbee146514ad2c447a60de3210a20f362de92b","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/utils.js","hash":"bb951ef447097663525f941dc69f3adb0279320a","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/transition.js","hash":"b3dce0e152d3bbb1c91fbf36971fcbab90e1dbbe","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/value.js","hash":"013e5c1535b2a8029790799ab93cf9b5ddaf4043","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/data/prefixes.js","hash":"15a3b496089eb69fd7acdbd79fdc6f7089b0b69c","modified":1459623888000},{"_id":"themes/apollo/node_modules/are-we-there-yet/test/tracker.js","hash":"dc823d6be26c54f325e1254726a4a537b751105f","modified":1454114609000},{"_id":"themes/apollo/node_modules/are-we-there-yet/test/trackergroup.js","hash":"06f75844e51431a987de704b98b8664ca71915d2","modified":1458083474000},{"_id":"themes/apollo/node_modules/are-we-there-yet/test/trackerstream.js","hash":"ac0f104f1043d861f66e97c7d65b8fb90b93e6bb","modified":1454113947000},{"_id":"themes/apollo/node_modules/balanced-match/test/balanced.js","hash":"706b6e79b2c13f0fed4d25706b63bbeec17c3600","modified":1448714230000},{"_id":"themes/apollo/node_modules/block-stream/bench/block-stream-pause.js","hash":"67df5f7f0f8ad86ee6fdddbe6bea1aa28c6ac6eb","modified":1318903909000},{"_id":"themes/apollo/node_modules/block-stream/bench/block-stream.js","hash":"42821f2fe9db3e4d0f9c51f5a9f7b20423a418fd","modified":1318896987000},{"_id":"themes/apollo/node_modules/block-stream/bench/dropper-pause.js","hash":"982774d6076efbbd7b20cd8ae1adbe84223da254","modified":1318903105000},{"_id":"themes/apollo/node_modules/block-stream/bench/dropper.js","hash":"dd1925e4c2ace4e86d1d1f2c9bff66b425b7e0b7","modified":1318897004000},{"_id":"themes/apollo/node_modules/block-stream/test/basic.js","hash":"278c9b462db9ef2c6f9815ffc97764cf3be7ab48","modified":1317959661000},{"_id":"themes/apollo/node_modules/block-stream/test/nopad-thorough.js","hash":"ff5f326b21707010825647d3ff6f0f28efbaa308","modified":1320791299000},{"_id":"themes/apollo/node_modules/block-stream/test/nopad.js","hash":"353fea96f0c506e06114d9480a4feb5d5b397d07","modified":1318891657000},{"_id":"themes/apollo/node_modules/block-stream/test/pause-resume.js","hash":"dc1f099b749cf4c0e93b55ea6f378d8d89012977","modified":1320791299000},{"_id":"themes/apollo/node_modules/block-stream/test/thorough.js","hash":"e1b1f164bcdb11255e32d11a8a80cc7f60d27edf","modified":1320791299000},{"_id":"themes/apollo/node_modules/block-stream/test/two-stream.js","hash":"2d8e79865c92715133159a698d36b57176d6eb2b","modified":1340227457000},{"_id":"themes/apollo/node_modules/bl/test/test.js","hash":"078dd45753c62f6411ab48fe217959731b0e40dd","modified":1455246137000},{"_id":"themes/apollo/node_modules/boom/images/boom.png","hash":"126fe71d237c4939338507417d5f5e172773be3e","modified":1407506005000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/old-value.js","hash":"083920f2c684482632eb07af6a2b901081d55668","modified":1459623888000},{"_id":"themes/apollo/node_modules/boom/test/index.js","hash":"62d76a920212e160acf6894f1ee3e981e6aaa8b1","modified":1446232305000},{"_id":"themes/apollo/.git/objects/df/62450148e8d8f220235e3e458afdc622f2d0ce","hash":"4b0ff7e4a3714c0b3de112da9e3938d09c4bcea4","modified":1460029529000},{"_id":"themes/apollo/node_modules/boom/lib/index.js","hash":"a894f6f39fc0bf0f8a82a420d8a2a5018e9dcdbe","modified":1446232305000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AD.json","hash":"cc3b2f2d1dc292f50d2ceb0abb04105b401cbd18","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AE.json","hash":"a65a806e9692014236d04a44ad6fca3e7c150314","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AF.json","hash":"a9026e0218e502102a948765792a9ea0faf0be60","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AG.json","hash":"054f7b1f2b0eef824d22e54c538e9eedeb4770b0","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AI.json","hash":"6e6ce77367f0a2129521b967d61d61e9d231410c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AN.json","hash":"41aff227cce33ab1b35001289c7ba41f67b88b3c","modified":1460000736000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AM.json","hash":"ab36ba7515bcbdfab108a29266d1b45a90d882a4","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AL.json","hash":"b64aa0900ea64d25d8cbe5923dcc6fb3989335e5","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AO.json","hash":"9ec53766d43a03fce9d468de3c65d17b918e6146","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AR.json","hash":"3a62d81ae3c4bc7bf0008ee408eae5016f1c44e2","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AS.json","hash":"65e41b3f013fa81dd7ce68c150c7d100a645761f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AT.json","hash":"d68622ef8303644f12eb7c3de9b44406e734d2cf","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AU.json","hash":"411b2948f74894aa26122ee819fe89847fdf2ab1","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AW.json","hash":"c4c2a5315c3f9fa2a32f77a3c42b1e2cad610720","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AX.json","hash":"134cbfecf8176627e62a4af9de7a3c21fc085082","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BA.json","hash":"ea9269f982b54d8bf9e5e024d65fd0052f5cb33e","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/AZ.json","hash":"7e6e4129d10eb872905dc12060624c3068e47689","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BB.json","hash":"4d8d43cbe6a31753adaa2ce5bb4ae356f3877177","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BE.json","hash":"e715074d70857b50413d293c5fd9ebad9308a921","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BG.json","hash":"3ca0b49247d7df67f227028153118422167a224c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BF.json","hash":"bb1ca32341a0bb7db06b42c8b83ad46228549efa","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BD.json","hash":"ad35fc7ef0966c7c573469b1c87ccc0487ab5eb7","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BH.json","hash":"87f8a8fd6061df224fa96ed27adcf1c08b6945f0","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BJ.json","hash":"df2ea7806edf7f9582b8ba6dd2b6bbe8a9f270c4","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BI.json","hash":"2fd6384ba2bfbe14d990499b481bda9a1b43ea59","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BN.json","hash":"f34f7519b879fd788bf58f6cfb1bd24b811e0b2f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BM.json","hash":"b49501bad45673957f6f0da1b41b556db275306e","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BO.json","hash":"63ac0223923a2bb31567a4f86aeb3ced54c78011","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BR.json","hash":"9976d5a1fb61a9714a2fc319bd5eceeb88cbad29","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BT.json","hash":"51d6369352667a1fc354d131b1f45895211faa72","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BS.json","hash":"f3dc347b65c3c9cd8d611fa49781f39a9f4f0997","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BW.json","hash":"ede20a80a8c90d38a6e0c05cf8a19ca2a1bcb01a","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BY.json","hash":"6b80ccb9ed39a64b3a12efcdbe4e7269a2361058","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/BZ.json","hash":"f4fa9a2ffa46e1779211eb20fdf680a34a685750","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CD.json","hash":"fff373466d59e6c59cd03de8412fa4536aa5df83","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CA.json","hash":"3f5aa0d811dc6bc9fb9409882a8df45967bb529a","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CF.json","hash":"686b356ad34e2545e2542ac0531b80ed37a17729","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CH.json","hash":"47859e56ee7f90f3a197ab1b2f33dbeb60a5a8dd","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CG.json","hash":"f7e28c5c45d01eb96f7594da9332a11b2c7c8101","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CI.json","hash":"b6b867a0163c63f8c1733ab347e5d41503096065","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CK.json","hash":"04c17c504255711fad62907e33ee91314fa0f6b6","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CL.json","hash":"fa3610950174cda3aaa9aa520680209629e13d85","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CM.json","hash":"56cf3ac3e2a3aea28aadf4dc31ec84a696bb6978","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CN.json","hash":"a1cf1ad37d39c3aa683d53f05680a360b71d605b","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CO.json","hash":"83b9d2d60ee4d53ae4c90d2b77a259d7f1beef61","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CR.json","hash":"ef423b704a615bbc8a9853a2cfe6cf74276a710c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CU.json","hash":"4f8116f322fdfe8ae15453eb34cb46eb48856cbe","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CV.json","hash":"78eeae5937485bb42cbfbf46037ca39fafb1dbec","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CX.json","hash":"055e868168d18995417468dd25a2934ed5d174a9","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CZ.json","hash":"9c4486484f793c3796c4b5b2d8238aa248197549","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/CY.json","hash":"99b941cd47dd3a1372c26330f346b4015705ce2f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DE.json","hash":"6c1b91094457ede91ad4d275c0f7c95cfcf0fb07","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DJ.json","hash":"09d382f7e34b8dfc4fb0d2414e13cae90732a1ae","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DK.json","hash":"d7b6dc86356e8790c7ec8093c80e91ccbb585901","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DM.json","hash":"9fd147fa77874a7d703fcd0f1ed905cfa59d613d","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DO.json","hash":"1d7c89470a449650f5dfc59177d93e63cb2f6d8c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/DZ.json","hash":"cb2b178614c6d74f17f59792e9c20ea05c6f24d2","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/EE.json","hash":"d6cecee704ba1c280cff1e2add7c6b5d4070ff08","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/EC.json","hash":"e419efdf49efeb4ef0aac7501e950a7b257f7f80","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/EG.json","hash":"ad1e6e1bb31d54cbd2bfd14813928268257b950a","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ER.json","hash":"0cc738318f7f04ec2243c92150313b5024f9dd0f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ES.json","hash":"9656b7f111f96e5202f97a25be969acda0fb52a4","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ET.json","hash":"218ea1481e497f11fb34f97dd5756585f9b2b952","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FI.json","hash":"4d887c83dbe7b5c731ce86ef110af9aa99e72f22","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FJ.json","hash":"233560c9d327ee7681b154cb3ec06b955063f75b","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FK.json","hash":"41c4c3ebdcd4763a3e3a72852308cc0da245a6ac","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FO.json","hash":"49977e79e22dcb88ba5fbd58a0db77789544a5b5","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FM.json","hash":"77fd4b337bc3119b0e3f96514828d1148f52c4b0","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/FR.json","hash":"1d8ce42aff307a973c8212b15152e6c433667295","modified":1459620234000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GA.json","hash":"7d888e2acf82a36c150e1ab23cc12f522ca7b1c1","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GB.json","hash":"dee33f113c24b0c560e6692d29db7aa44feea5eb","modified":1459620198000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GD.json","hash":"b921c7c8d77323c8c7cbf97e4047c2bc57856272","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GF.json","hash":"af3c74deeb1a1311548efa39f53204ea98397d86","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GE.json","hash":"2cfe2d98faae775ccda9f03a45ac18457332afbf","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GH.json","hash":"ccc13e7ff1f76478a4123ab69c537bc397eb84a2","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GG.json","hash":"a6c7d2b85a449aee6a8b58eca8e5a708b2497421","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GL.json","hash":"1366fdbb054e5277a311903a4ad3a1878ab4d786","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GI.json","hash":"8652c1040da677001642ada9a7fdde7dfc8fc5bb","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GN.json","hash":"b6582016b4063c00cb0c0eaef60a4ab335dc8b07","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GP.json","hash":"d8bd3300bb330b998d122a69ec0f7fc6f728a7a1","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GQ.json","hash":"5d1414b840a7cce291c43009142fdcda1a29d162","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GR.json","hash":"563ecc84cdd8a36de2eeab502cee0025793472f9","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GM.json","hash":"0942a98c40641fdd65a23065ea0cc45958c9dfa6","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GU.json","hash":"f3616118fed2a5be20d425a29bb9561c48ffca70","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GT.json","hash":"c4e2e636a9718df5ba48d66c61c0cd5f407265dd","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/HK.json","hash":"3ba516d5edec060015e81ca0b9f2025cd987b732","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GW.json","hash":"796a2e501925bc805201543a1b696c87f39a24f7","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/GY.json","hash":"2359de54825e276ed7d5cf6b19a6ee28297afa48","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/HN.json","hash":"36bc465f29beabac3223b66312e28f5c0ae2630d","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/HR.json","hash":"675697ebf77cc9a673082270402ea297346f2d50","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/HT.json","hash":"658962f6427a324b4e7c743631d9e451031eda03","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/HU.json","hash":"c40cc72ad99a2fe30bcf2f71eda29ed8cdfa28a0","modified":1459620482000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ID.json","hash":"733ae361a63fe83ab8f4496a6eb4e7b672fa8905","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IL.json","hash":"62765153ea22805f59f989e0c52be44a6aeb1b6f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IE.json","hash":"fe6d42a3385abd4156f31545c8285985fbad7bde","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IM.json","hash":"f4a75f2130afd912dd4e0567378fa7aa3bfc553a","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IN.json","hash":"6cbb4317fb0e6993c8a18ef4a383403d5001563c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IQ.json","hash":"6ae16414bd1354ce2936b49dbc0ae1322957da6c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IS.json","hash":"3f055d69b3eff386db5f8b473395a726b6fcfc9c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IR.json","hash":"d771f7de61708738233ce2648a2ff186d606b41a","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/JE.json","hash":"b3ed02d2da4b6ed4eadbbcee70d7c095a97c71b9","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/IT.json","hash":"94dbe489b00bad0e7f620ad0035bad45686a4569","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/JO.json","hash":"99a80d48ac85dadb565bac7c58c6368409ccf6c3","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/JM.json","hash":"ae1d8ad028de79e1e8c9364ed8e65bb0f9a67e21","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/JP.json","hash":"8d4fc8f8ac41a7c3ae15cc2628b687919728f18b","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KE.json","hash":"1ef67b59707255cd5a9fb2262df489c0b13620b2","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KG.json","hash":"f16dc4f981888dcaf4ed200c4b177c8f2a9d6e8c","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KH.json","hash":"2efda7fc99387cb99c23ac7a76e846b8cf80bb8f","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KM.json","hash":"3d9ff135d5e5789e66fa3180e0ddf498d5d2e7ee","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KI.json","hash":"05db1905c4c5169a09114b3723355188ee7a111c","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KN.json","hash":"a77494d9f5aba7b9c77598f79206f89946be047b","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KP.json","hash":"f2a178d7bd8cda9e7d6d02aece8908e324b3a523","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KR.json","hash":"9c3c5d849f74de88d0e4f0756581cc4cca55fcfe","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KY.json","hash":"4da807db37906a329004513ec6a07f5daba290df","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KW.json","hash":"1ca4b8e5407d4530f61f9214db3df358ba148545","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/KZ.json","hash":"d7840435c8cca15266a70b4f0731834a547eeaf1","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LA.json","hash":"d9d6dcd8b811b9c09be8eb628313a23db4bb9073","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LB.json","hash":"383aa5af207d29bd21a6a59d4884c58844f2cbed","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LC.json","hash":"95e8e4f9933dece97f0952564074b04bc011b14a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LI.json","hash":"f37e1aae97bd7675fca0bcfc3b9bbbe6efb837e3","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LK.json","hash":"ddc1442330115a7ecee8e8086657c04d7626fbbe","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LR.json","hash":"52fa6d751de1eed2b1a9785feeecfdb58808b1b0","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LS.json","hash":"e4ea97ac32618767c68870960209bad14a88f5b1","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LT.json","hash":"ce584528add36a608e24d1e84999ac3e1335601f","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LU.json","hash":"2ed232a39b9aa96bc26349b8fb74d0adf8037d23","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LY.json","hash":"a9e5a70afed8d04bb3e000c3e2fc362cbf170f40","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/LV.json","hash":"33e8aa0c3237864562fec66b59bd21affbfdaa2f","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MA.json","hash":"5632c9ddbabfc3624d6a3f5acab80b8511400539","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MD.json","hash":"1b4161cb7d4738bbdc09b96c88a2ae184e5592a8","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MC.json","hash":"395b24e10f5960414d1bac6fdcbe0ea041dae902","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ME.json","hash":"edb6fea9c72d861f40b8537a9b639e4dd26c04b2","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MG.json","hash":"a3f09105e5ddde78686f3395fe387b6c5080e804","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MH.json","hash":"980bf471333c862ad5dced25f93380cab8d450ba","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ML.json","hash":"5d39300ac2a70701fa98e8f996f4a472b420b31e","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MK.json","hash":"75d45b9397f9c1ce8823026ca9da2f2773e7a6ef","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MM.json","hash":"e3238d6e52722fd8fa74039c34b5fa25a40928e7","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MP.json","hash":"5e80fc37b49cc7b35ae475d48c3211e0ae405aa9","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MQ.json","hash":"8c3d7d1d3d059c21890399d3ba8a81c5047cde57","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MN.json","hash":"2a36af4f7e4881ba8eaac4e32aff2ff755cf154f","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MO.json","hash":"df3a0e9e9fc3a479cddb7a898fb7c6828aa20cbc","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MS.json","hash":"bdd8ff1bc963b10866c688af9f205476d11dc421","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MT.json","hash":"0e6e59e6e59074355a54673ec17dd50e44061b9c","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MR.json","hash":"670ced7f1b139b09b8d457d5e3fc9e8c3a71298c","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MU.json","hash":"897f99ea8fca226e0fe4a51b38bea4a86730b579","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MV.json","hash":"4b9b3b3872508da67ae932df23c95db1765147ad","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MW.json","hash":"5e2ba4112202b2215fa81d6e8b055341b685499f","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MX.json","hash":"2a60a3e597a421ac144c18de7298f8b891465e61","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MY.json","hash":"f04301f33acf0789447f7d38992d3383cdd76057","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/MZ.json","hash":"f0efa4b77362e1309d9cca229a78cacee02b1540","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NC.json","hash":"a406f9ab9f2f61f6dc476f342f70141991a4bc3e","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NA.json","hash":"8e70bbf079db3ba86d60309e13b484f9c8edb797","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NE.json","hash":"13d38d11a651f8891cedc8029bde92bce46464a8","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NG.json","hash":"5fad244c5ced16bb74e2ae4f99db74593fe3404c","modified":1459620290000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NF.json","hash":"8411af6d9cef4116bdebf051a73068a612031f69","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NI.json","hash":"03fe76c49a92e919fd6a975800b813bfc40315d0","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NL.json","hash":"658d422643da0da7ed8dd6fe938ee8b2bbf67c23","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NP.json","hash":"62333d8766b71128bef93ed9c80012483b84a635","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NO.json","hash":"900bc0d54cd59ce3b973e86252691b4f1e47a255","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NU.json","hash":"41f77601cbb69685811bacd28917878a430f68d2","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NR.json","hash":"536b8d99affcd524a846ab79c377a04aa37007a9","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/NZ.json","hash":"e6c60f76f3ac8cc410be5232b07dc3334cc08583","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/OM.json","hash":"64cca7b4d59b8658570007c20525ece3cf0017fb","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PA.json","hash":"92cae7a68be75f213b2bb92e46170d8253e20e11","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PE.json","hash":"5ed578cdca614c3aa11c93d2c1e994c471c8b00f","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PF.json","hash":"233652a151491d8690f622c6d3c0145b0527e4ae","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PH.json","hash":"6f60aecc4b1c9c62bed46a4abde9b1f40609dc2e","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PG.json","hash":"9f4c094bb4f06220b12de736b28e596370cea8a1","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PK.json","hash":"447a3d66e72b1db9226025f269bb3e3c8abe96fc","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PL.json","hash":"978350e7d8ff2111525df36d825f2315ebd1dbcb","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PN.json","hash":"bfa65e694ed16dbddf5d997640268cbdac4296c0","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PM.json","hash":"5e7d890d5b6970c336f8324ab567450396cf55ff","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PR.json","hash":"13698747a8f5e6fec875ed18f8af7a0b8bcc9486","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PS.json","hash":"7f19762bc9e86766ed6169bf93fe6a943254227a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PW.json","hash":"cc170fa79e79f97d6f824cc26d71e015d6afb545","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PT.json","hash":"e796c25635a501f6cc7a9090bd8a00b6833cd1f8","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/PY.json","hash":"ed884c65d89f16ff8a5a811c1c2f63b491e39183","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/QA.json","hash":"8ffb2bedc1914535875d5053c65b7449c544c9a5","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/RE.json","hash":"70164197074a38c6053d83ce3daefafe891bb458","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/RS.json","hash":"616936ea7a79b3576efe5e92f7b149a6c01fd68a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/RO.json","hash":"2f246b1186783d24311e83401488e917356d0c48","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/RU.json","hash":"76e23dea9543821923b0f1d09f76a0aea17184ff","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/RW.json","hash":"014d5f501ad932f174a563911baf9a809ec100d5","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SA.json","hash":"3fc2c0b7e92d6e13949e4e54ee3dc8232801ae57","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SB.json","hash":"070f55719749040dddb5cc2381d4f2bf32b3f977","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SC.json","hash":"f2ba26ca47879bdff2da863770322665dc96fc3c","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SD.json","hash":"a025da923a186cb3fe877b610877aabae32090f2","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SE.json","hash":"7711f13b50472458ee698c186e036f6848e21a09","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SG.json","hash":"3828b042d8eedd601c833bcbe4866ce4c7fc4a65","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SH.json","hash":"0087c80d641ac217f925e871ab4b98dbab0adb63","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SI.json","hash":"93e86c73dd3b1d00a8121547a741eb5f8225048b","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SL.json","hash":"f5adcfd3bd7c76d3f75ab36c18fc592842a133ce","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SK.json","hash":"15048d3f0ae595b8f503b19ae1e7e9b0b3ac0346","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SM.json","hash":"def997b220f4d3de2e5c2c14464c82c84d930ac8","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SN.json","hash":"dc75f0bb197a8199db47949c642516d4d8dd8772","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SR.json","hash":"a88edecee9717d224d13010fbb4590ad97b48a7f","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ST.json","hash":"846c3b9ccc1c153f7a6f4fa2cdd4d1e183f43f03","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SO.json","hash":"6af835196376e7103d95c0b5fb2b6b59f62311d4","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SV.json","hash":"9294c186d1cf5c7390a923d683c3c7b51f9af8eb","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SY.json","hash":"7fc47509ee1cd4d6f9f6b0f5c036a6dc0444d140","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/SZ.json","hash":"74315fa018b82702e381ed887df1923cb11872db","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TC.json","hash":"9a915ec4a8785ba00c14df866352e56e20304989","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TD.json","hash":"e9e20b824caf726ee31d74e925f954246e200df8","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TG.json","hash":"d57f6ba0a474bf18157c58bc50fc6408c56aa11b","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TH.json","hash":"01d75258e2e86b0b8b86bfeaefb60c07f18c291c","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TJ.json","hash":"14e9b7bffc67bede71a0158e56500edb77644dce","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TK.json","hash":"bc14b91d11fc769dd5f3565614076eedf3ee6c4a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TL.json","hash":"3e7901577fa59536c4227d7a1647601a52278d9b","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TM.json","hash":"810ec0b3dc210591bdd1930c867fc7a0c866b069","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TO.json","hash":"19f1bba0a2f9c120404c5ea087bfe1bde2b91f70","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TN.json","hash":"f6162c5e020e1e81c25b23b3a68e41047e7ae0ed","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TR.json","hash":"204262deaed28724edc7f0df8a0922a959540c92","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TT.json","hash":"e8b85e23d4cf85f0c4d16fa9c146ce51ee5fdb0c","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TV.json","hash":"7885d2a298272d12dafa17343954d1304c4f34c5","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TW.json","hash":"d3f46d94047c141dd19e52f79e915fa6267ce43a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/TZ.json","hash":"37d44dea23719dc774720b0f2559d5f0661f3e88","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/UA.json","hash":"083c6055d7a536f0505cc0e8dadebe66835548ab","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/US.json","hash":"467f4c404e4d65282517584b23d86d591e3d7db5","modified":1459620168000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/UY.json","hash":"16fa42ebbed7a9b6a06e8305bc0cee721d28ce94","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/UG.json","hash":"3fe79b7afba45edd4f33b0c5faddf8571b50618a","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/UZ.json","hash":"f791d5a468037c65431ea1f755fef0c5083c3a00","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VA.json","hash":"9e556a0c5474c5315fed8766eef494277d18d0ce","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VC.json","hash":"418d4f473b02508c2b2058a55612795362ac9afb","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VE.json","hash":"7231da2fe05d3bf1ea3e7ee61cf0f01e121f93f5","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VG.json","hash":"3393d53fd0cd26d643779f895761eadc2cbb8205","modified":1459620630000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VI.json","hash":"33f0d408a74320d57ea3292623e9bc6be2dbc041","modified":1459620646000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VN.json","hash":"799188b62711f466027d8a7ecc217781bb925b8b","modified":1459620646000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/VU.json","hash":"6b07547f68f14ff7782aa84a186bf1b5279027c9","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/WF.json","hash":"082a8f5207c62c29e1f3a7655f0c1c09880d2652","modified":1459620646000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/WS.json","hash":"b2251e6c5f748e890265770c90f84809062fc281","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/YE.json","hash":"e1c7bca10ea892db741836a958acdb2a4bcf3e74","modified":1459620658000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/YT.json","hash":"83dc25bdecb2ff764c1614ee58a422b68b9d6174","modified":1459620632000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ZA.json","hash":"5c2efa31c1da5189bbf7f3f76ce375d253495d24","modified":1459620644000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ZM.json","hash":"32e2c3c7d21d436c3e554135fefa1257ed15e4b8","modified":1459620658000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/ZW.json","hash":"e000efc3b8f186d97c7cbeb2c811610fb7337489","modified":1459620658000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-af.json","hash":"b0d9173e49a4131a3c4ff13ac502edfd3107971b","modified":1459620688000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-eu.json","hash":"f3532012d40649c79f363db0f3da4f3b9b7b4005","modified":1459620754000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-an.json","hash":"7f616689a1080487c418557f2519b80dc4830cd3","modified":1459620710000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-na.json","hash":"d5e0b49afab4a3f212b7b939677fae08cc44aae8","modified":1459620776000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-as.json","hash":"d2529ebe0f68b9b226a7712cbed46634984e7f63","modified":1459620732000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-oc.json","hash":"d8019dfedc7f3c7199a26861eb390431d064b069","modified":1459620798000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-ww.json","hash":"e37c5d2d465f59aeb6e15b787a4fc4be1df089db","modified":1459620666000},{"_id":"themes/apollo/node_modules/caniuse-db/region-usage-json/alt-sa.json","hash":"1c75e0129c12d56a593579a61b63236de894da26","modified":1459620820000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/aac.json","hash":"5db88a27d84ef09325d78843acb1a101ca2b9d3a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/addeventlistener.json","hash":"4a258f39841902f4b8ed47cb3ceed5e85e8b4c7d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ac3-ec3.json","hash":"551d59f5f65af0af4c955ed069354aee3f0b839c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ambient-light.json","hash":"e627d160234e1ee9a88ad9e5845d9ef2a5968c14","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/apng.json","hash":"d515358e845ce676c941fbe9065abfb7725e520d","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/arrow-functions.json","hash":"4a2d28fd845e4a8840e0e4f2e0049996eec54129","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/asmjs.json","hash":"f570278f20a42b9573b4ad8926e55be3afb41813","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/atob-btoa.json","hash":"0584ef2e663fe7e21b3d22739582843239759288","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/audio-api.json","hash":"406fe41c1619f6e7939cdefa2d7358746f6fb4b8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/audio.json","hash":"5a74de67d97d34ce39bcf182ae28ae32b24b7e0a","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/audiotracks.json","hash":"87ef90af2d28344399bbcc915b10dc9a3fc0fe26","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/autofocus.json","hash":"a576eea91d32c03e3970f7b98c6eabb35332fb50","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/background-attachment.json","hash":"d0644aaf242f864904dcf28e499295af48655693","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/background-img-opts.json","hash":"76bc06d24b724e41faccbc1d8ef7ab266973f45b","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/background-position-x-y.json","hash":"62ec0accb9d84314a7de9f5f426331580d0f5bb8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/battery-status.json","hash":"b86397d4555f829a3045c7ca3733bdf4496f152e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/beacon.json","hash":"9d08512af642bb63bf8d31a434db53ac6227dcd2","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/blobbuilder.json","hash":"77d26d1ab738b5b3edf2a2219bce83a7a88fde59","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/bloburls.json","hash":"697a91609f0c5b53a4863670eb9cdba88543a102","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/border-image.json","hash":"06f47814482b0eb87b563ddda0bea2bd3ce3a725","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/border-radius.json","hash":"6e1bc9ebc6cb586d8a4851cf04f31ea27fd1738b","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/brotli.json","hash":"e5966b9c49f0f40c03c36889c27a4af9548ff39e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/broadcastchannel.json","hash":"c90a375c26cd27d63a82f3c94c5b9834b00c2b51","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/calc.json","hash":"c86133f17ed0e0a3a652315ef828bfd79c196399","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/canvas-blending.json","hash":"fb6acbd8959f5f85cab6aa03b252c3be6a39ee53","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/canvas-text.json","hash":"f2684c7a666c08a13e4491090a0796bacfb45f4b","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/canvas.json","hash":"54c3ff73c5803179277fadffbb4c9957198dd6d0","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/classlist.json","hash":"f481f4fbf4b78e3850a7ae86157c0aaa8e1a84c6","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/client-hints-dpr-width-viewport.json","hash":"4a4bd515e4c13ec53b1d082f3cbcbad8f7c04551","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/clipboard.json","hash":"4f37621e1ad7ae8d7cc218e8340960d7864cf956","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/channel-messaging.json","hash":"f0dcd4d4972c49db0cd0c43912a2b126b15d48de","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/const.json","hash":"ae2d297c67c7162fe7bcd90e4a2547c2f5e8b344","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/contentsecuritypolicy.json","hash":"84773d313dbe7d94b1379e0dfda15d7055dc80dd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/console-basic.json","hash":"bcdc3b61e30627455d73a80b578b9f5d2ef4abf5","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/contenteditable.json","hash":"f99a7e2bd66139b4668ce8ddcf812ae65d176d9b","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/contentsecuritypolicy2.json","hash":"b2fa28107afd79e583cbb337470a5a16488d3ce2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/cors.json","hash":"8d336b225c83e44df5a7db3156e92ee06f895222","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/cryptography.json","hash":"83f380186798dbe607fb9f6bd772cbcd24eba1bc","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-all.json","hash":"814e5c6a769287a312b33dac442fb1169ead6c3b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-animation.json","hash":"69a12f8ae3171171355c33e80ce3cc980237b2c9","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-appearance.json","hash":"55d76d9f2d8dc4d12e5dae0379cfae61ae1f6a99","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-at-counter-style.json","hash":"eb5c9ab20e0040198d0daa89cfb946f896360cbd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-backdrop-filter.json","hash":"ad982910efc98c79a64575277fa86a7f316a98ed","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-backgroundblendmode.json","hash":"4087546a3fe7bfa82c6c2dad8702929ea2b425d8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-background-offsets.json","hash":"ca84730e92c7a5ccd0d76cdf4d7de9434b579bf3","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-boxdecorationbreak.json","hash":"e940c8634b6d189c0d4a4978de38212b3d32e867","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-boxshadow.json","hash":"28f0e25ff3b13e2830d9c27503163364b603c919","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-canvas.json","hash":"18c7fb1e5b2b266b3dbd56d171f0240cbb88927c","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-case-insensitive.json","hash":"4a6ddd0bc7530ecd6acb3e797347d5a921807ac7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-counters.json","hash":"bb63fc079ce18c4ae8258d5d1bfc99c758379609","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-clip-path.json","hash":"bbe79280a34cabd4844be8a75a0c6d8aac68657f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-crisp-edges.json","hash":"ceb44293828213c79542f114927a07fe77e21469","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-cross-fade.json","hash":"56589e9a9541d4e15dd096b20e5a08d73599f130","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-default-pseudo.json","hash":"e204f7d6dcfc70d71a94440f2e9a60fb2f56ac52","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-deviceadaptation.json","hash":"7122ba7bd95411b186afd396bf1c06069e6769a8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-element-function.json","hash":"38d932a01a1a5f34e6cf079066d51154180c7c6c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-exclusions.json","hash":"311cc0f5337b6447db85de725fb5f4df4f39af70","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-featurequeries.json","hash":"e0238fe16eeb60e303b8db5e57a03306d1bc5838","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-filter-function.json","hash":"1cd2f95bf302b2fc17bde23539081cb7ec3e1fcf","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-filters.json","hash":"2978610eed9ecda2414ecc277127f9abab2541c5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-first-letter.json","hash":"ffe1f41148fde638f34245bf6b9c93f7e1165dbe","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-fixed.json","hash":"b300e22b6c0dc6ea126c2f915432a20653c713bf","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-font-stretch.json","hash":"7e99a217c23d477f1be067bde9f9f77e5c4f1224","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-gencontent.json","hash":"5bc2032c2a22a3a10d580fb85b7851fff582c994","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-gradients.json","hash":"6302c72203f57db98816f0ee9c3d93fec85cf38d","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-grid.json","hash":"fd4d83f47b1b57d93f3bb6d5d677b34dc5039969","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-hyphens.json","hash":"ba6fa06092d137c8df6a385679ccd3db2fbeea65","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-image-orientation.json","hash":"476a18f203f983b6914c73aeb3065b7a0205ff14","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-image-set.json","hash":"bc473b744de68b92ea6819018a154ca5a70fdf50","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-in-out-of-range.json","hash":"d1f1ac20d9e5d0f81a88ef81bbf471fd5a4218c7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-indeterminate-pseudo.json","hash":"c2c79156a75aa98e15486b7eb01802c7aca605ff","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-initial-value.json","hash":"714b34c10832532434419bca358314a81846ac2b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-line-clamp.json","hash":"fd8cb9e1244688513b099c043564c499aa6fe8b0","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-letter-spacing.json","hash":"7f19c32030864e167d5cd5a5dd5261b6af3603ca","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-logical-props.json","hash":"54cc2b3369bfb66dcba8eabe44c9309cccc6dd0e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-masks.json","hash":"b783de55e9ffb1e7455200654ab5737b31bb7390","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-media-interaction.json","hash":"60bb62e2baed401f536b81b43393db663956dbdd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-matches-pseudo.json","hash":"4cf2409641a64b839c4e101234aad44ccce96a88","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-media-resolution.json","hash":"96491ad0c33df7b7af0f0d975594f0bbf1f1bcb3","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-media-scripting.json","hash":"ddbbabdfba361b81999e43b70aa6d26b41589687","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-mediaqueries.json","hash":"a3445f526040e6c37d38303e362e7e54ec95e082","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-mixblendmode.json","hash":"cf4e5c9c333221f2f87b930a187538153ed7e134","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-motion-paths.json","hash":"246b3238d8cea4daa8beffa75798efe5fa555f4c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-nth-child-of.json","hash":"c00812476fb13ae363dcbc3cff77c3490b807cd7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-optional-pseudo.json","hash":"942e3ff8bce18d42a80a1d1a36f28ee37cc40b7d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-opacity.json","hash":"fe0d8ce09153e9f083f4a775dd21a74e9a0b0307","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-page-break.json","hash":"2297054b8154dabe2c70c6ef974c9d6c995c5f57","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-placeholder-shown.json","hash":"a624971d44b29eff86baaae7bf6d999e0fe9a8d9","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-placeholder.json","hash":"98cddf92f0b82c76964781d676ebc5a76b07cddf","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-read-only-write.json","hash":"35601ceab3a3b9f10b28529e6fdf095c40900f74","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-reflections.json","hash":"1853f3b7a5d97b366a81bdee1be1fa1f8f5f4151","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-regions.json","hash":"731d64e064324856862c21a7ee0c495fa76683be","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-repeating-gradients.json","hash":"355cee5fbe633a0b310fcc655aa66b803acf386f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-resize.json","hash":"09e90a5820108e904e84c06e1a631e3bf8b912f7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-revert-value.json","hash":"b282e98de05e04a9484089be154b3c57d861c626","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-scroll-behavior.json","hash":"46bf91ab157e1da4c584604a288ea2eb42e48e55","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-sel2.json","hash":"5096404968aa1ff200b21269334c6938277fad16","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-scrollbar.json","hash":"1f188ddbd7cbd2651d7ccc53b7f43d54c534b9a0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-sel3.json","hash":"bc32830f5d15a98fe55b4eef48e2cf0494abefcf","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-selection.json","hash":"14065252033f714c7d6ac03e02340fec8b65f3c0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-shapes.json","hash":"fbfed43428d15cc84a94af6e1de729a9930ad6e5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-snappoints.json","hash":"f1e7b36ed84e04b7bc90ef94f6d4243cd6342ed1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-sticky.json","hash":"216f6a6d489581c296527866b8d7a8c3854aeb07","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-supports-api.json","hash":"6dc353e0e37f6de50d6a9178b5d335659ab689be","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-table.json","hash":"b4d9a1059899bf20dc2e39918a4a80a09cd7f868","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-text-align-last.json","hash":"6409450036588518386ad273ac75d3261d991539","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-text-justify.json","hash":"2f2c8c75289abbbc39157863d49af1a59cceae91","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-text-spacing.json","hash":"acf2427004c8287eb45d140ab3f0e932c2643b54","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-textshadow.json","hash":"1e5fb6bec6c14f268c6f5819d0645895076fd0c1","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-touch-action.json","hash":"b9b1b0b54c771d90b85a83e563f3a7869dac8839","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-transitions.json","hash":"5ab99d08d7893c08809daf3cb0cdf7626af3f23d","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-unset-value.json","hash":"3f5a617637301d4fdfdc7253eda884905ba26db2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-variables.json","hash":"90ecc5d2f6401f3b24002c245a68d9dbeee155a8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-widows-orphans.json","hash":"606e9a65e18b7bc97a5ae754be5bae143fa75148","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-writing-mode.json","hash":"2f12d1b2edb77ac5dc63d807123d257e40af27da","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css-zoom.json","hash":"b2f6c4f3e8d70166f8bdd7814ff31df65abcaa15","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-boxsizing.json","hash":"fa655d497e047dcfc2f18afed5b1a616fcbef932","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-colors.json","hash":"14d5fcb40d233660dd323004edb08b5ad6a930f8","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-cursors-newer.json","hash":"fdb99c9042a452fed052290bd6b44918a36040f0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-cursors.json","hash":"7f4bf05364b07db9dd6308b42609c254d5f0b503","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-cursors-grab.json","hash":"264dec76b805fc1cf2e432bdd232232e9bdd9916","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/css3-tabsize.json","hash":"ce14c65ff56009f03c3ad9f33e13c07d32881f1d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/currentcolor.json","hash":"10030e5feeaf071caa5e77a05378025556f464d4","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/custom-elements.json","hash":"09a76b45b90828cf0c7054532ee6b079560fc705","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/customevent.json","hash":"cf7fc3c575960d1b8ff0d288247d78d1e6faea33","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/datalist.json","hash":"409f1f1a3dbf79561440b0e197819423e49fa84a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/dataset.json","hash":"b527ba72a5ce7ee3bc6202dae9d28ea4253a7b38","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/details.json","hash":"febd51a022c3e2f201a6dcc84a059370e78ecbe5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/datauri.json","hash":"3dc0bb4d49e9ae1a6f3a712ec8daf804d4fe2624","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/deviceorientation.json","hash":"6c46081b38d741b209da6223f923ff1b19309189","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/devicepixelratio.json","hash":"16818ab2123380fb6aa55b9a55ccce9cd541df65","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/dialog.json","hash":"02bec68cba4a18f6513514127537b943c25e3a99","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/dispatchevent.json","hash":"7fa68946bfe281d6a9b446e35c5da6bb02704052","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/document-execcommand.json","hash":"9ca9858b45b1f2b1e6da01de8c546be5f65afcab","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/documenthead.json","hash":"c34e3e1cb2d8e95c62bdc381a2ec84e89531c249","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/dom-range.json","hash":"b11e33d8ac7dbe26382a61e7a214180aeec324aa","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/domcontentloaded.json","hash":"a4fd469c10b2ffb2c0dd121d0e8f32be921de883","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/domfocusin-domfocusout-events.json","hash":"1e45802c8d963595a22afcc02eef143a022351bd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/download.json","hash":"6e023094dcdd2742673c9c714721ccdb61de8d73","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/dragndrop.json","hash":"cffec649a8b260836e2f5dc6d21e703267b67c60","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/element-closest.json","hash":"8d697d010db081628a7fef21abbc32c29770b804","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/es5.json","hash":"cad37f8b8e7f217a4f261f090aff16ca871fdddc","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/eventsource.json","hash":"019204e32305fcacf54b34c0459969e1fd1a6bbc","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/es6-number.json","hash":"0de276815693b89afef1cd8fb42f9e4692dd67c3","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/fetch.json","hash":"5312fc18c23b2aff8967ff40323e97fbf87fa422","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/fieldset-disabled.json","hash":"fe4fe264b595a7a0d8592715c414a494ee6e0da5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/eot.json","hash":"53fcd54aab81faea55c8ef8f00a68c39f187ff43","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/fileapi.json","hash":"198f7a3aa71836873cd4d8a296d064f311d838b1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/filereader.json","hash":"5ce474818bd517599d00e95fe4302c072a6fc17c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/filesystem.json","hash":"55a709942060a2a8355cf86763e9a2a2992c57e1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/flac.json","hash":"5dbd3a302de6913da1689dc2b0a3377b8e43b1c5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/focusin-focusout-events.json","hash":"3606a506097a751f2a501efed2c07f66b96e35e8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/flexbox.json","hash":"ab5163ce8642017aeab1c4418d0e155f9a5bb754","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-feature.json","hash":"d275da87877250f51670d74694a3c9d98d258353","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-kerning.json","hash":"f97b630557d426b155a2b32c2b4996bf2633b40f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-loading.json","hash":"57d654a1cf664745110d8e1e6b7caea6337fadf2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-size-adjust.json","hash":"a61d054c652139f888a6e4e620b11365f5d0266f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-smooth.json","hash":"d8376388728ea7c68fa16fdaf8fe14cd2137bb5a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-variant-alternates.json","hash":"86541adb4be2488ee608519db3055cb9617237d0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/font-unicode-range.json","hash":"c6fb28ebf4f2688ab73a733ab1d840929b5dacd2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/fontface.json","hash":"85a5d15666a7627bf5fb7f4e7f58f4a13f99fb28","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/form-attribute.json","hash":"fd73a8e45358c0c9481988839910f87d38b6c53f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/form-validation.json","hash":"cba3187d30c488f3d8ee2b15307806ac158c9d5b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/fullscreen.json","hash":"988b8537770ff9456c284b5f16d0b4d3169ab96c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/forms.json","hash":"58ebabe3ddb1a13284a909d61750e79d704cda41","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/gamepad.json","hash":"b88f72a4ff9b4df91f0fc8d8a9006e6ba764ac98","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/geolocation.json","hash":"2c4d290555be0383b55dc5854cc3878d2d042cd9","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/getboundingclientrect.json","hash":"cbea0ffb0f7d797d71e1028bbaf57b14f4e86ddb","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/getcomputedstyle.json","hash":"875d4310da877d86e6b2f5ea87b718df0cde326e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/getelementsbyclassname.json","hash":"48aa4311f5fc2346e8732157c47829096d0abc23","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/getrandomvalues.json","hash":"413d1032786a1ec58237f266a199584c821acfc9","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/hashchange.json","hash":"6d0d8aa6867361e0d78059f5ac9c7316f8697bd1","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/hidden.json","hash":"0e54c08545949e9c08aefa37199f054aa9e46129","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/high-resolution-time.json","hash":"7607f070b3f2ec2fab372ce8b04ee54773a8ff86","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/html5semantic.json","hash":"703b049d9b1645a9d5266db7149440e77dcc0e4f","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/history.json","hash":"09b7495511f09f923d53733f99b97a47aed94916","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/http2.json","hash":"6f3d4827c117693cfafda560ad959ccb1e83c0f5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/iframe-sandbox.json","hash":"929d1251ea861271d276d4b2c7ad88fbda0326bc","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/iframe-srcdoc.json","hash":"6cb9f4322a5cb39f24f9260f90c60808232b7334","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/iframe-seamless.json","hash":"85956a0b0b20776417f7b7d4aa9a757f2dcf66bb","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ime.json","hash":"820653a02c5c5334f9056506edaed7138ae3793b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/imports.json","hash":"92afcd0a34d4f9626c5282e31fba2a7f2f976f9d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/indexeddb.json","hash":"5e208a7106aae579a685a0c81a1e0a9635a11cba","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/inline-block.json","hash":"bc204ee699107264d99e7756bcc75fc97aec4bce","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/innertext.json","hash":"ef299e38a70f463f5efa104813a47cd2424af40b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-autocomplete-onoff.json","hash":"b3bc7e5169686494c5b919040cde34c81ca2f792","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-color.json","hash":"3ef1cbcba8022f3591d8509b4412691876e76ca7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-datetime.json","hash":"2b57522e8bc10bd07a2b2c6999ed009a946c4fc4","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-email-tel-url.json","hash":"8f734203e2cc99f63335b98c0774beaa5f6103d7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-event.json","hash":"3399ec8db53d684fa295df0d5eedc73f3835c146","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-file-accept.json","hash":"5bae48bb6133dd952d88089023c01e928026794b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-file-multiple.json","hash":"3c80272c933da860968b8c2e34a451b942691038","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-minlength.json","hash":"9d3ec5b6a777788c6a8f3499e3a45f6f754012c1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-number.json","hash":"424b935933530cb7ac7aa76bab719f4078e05147","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-pattern.json","hash":"b5c4c1f9eeec393a404e8d97c030818b4eb938d5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-placeholder.json","hash":"d561413c4a1a87da5547515a98b87522dc7fd896","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-range.json","hash":"cd28e53ef08f0b820129b9e0f25156584e7c0e2a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/input-search.json","hash":"1bba3ff5f22c3ba879306e46044acf22f7a5b4c2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/insertadjacenthtml.json","hash":"18102afd06f6edbdefbb6f77d78d09a5f65085da","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/internationalization.json","hash":"1b6709e9a43a27f661da5978fff6226bebc70716","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/intrinsic-width.json","hash":"350244b02290ec12a845a0a32591687c6488d5fe","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/jpeg2000.json","hash":"fb74b54617d0bc1cf5a0322cce83b978667968e1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/jpegxr.json","hash":"576a5d1f0f0b5683108650291133ce09275f1c0e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/json.json","hash":"9855fce57588ecd368ed171d01c174d401c3d066","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/kerning-pairs-ligatures.json","hash":"477987f2280f67d45099af44b4c3d5258c328734","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-charcode.json","hash":"fc9ab31b0d45f7c8e96bb8db28792cc0c07261f0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-code.json","hash":"f629230428ca47367cc1ec30bb3e69ca5c05d584","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-getmodifierstate.json","hash":"ac91a22fca5322b4a3ddef06420e0a764ec83018","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-key.json","hash":"baba97417b7b422081b4444389b96f0864bf5fc4","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-location.json","hash":"aebca8d88b4797f1f813095d7190e77fc347310c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/keyboardevent-which.json","hash":"968ab55145ddd7a792ae7dacb32fe9eea98e6b7d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/lazyload.json","hash":"a16bff688d9d282c1f72a13047f55c949607e6ca","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/let.json","hash":"6eeb183d2dafb583857e8a35627c245d3e413bc8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-icon-png.json","hash":"a9acf2000b7900a1311bde95277146c3dc740582","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-icon-svg.json","hash":"6b3b7c3f5793e1083229af154ff23bfe3c4357aa","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-rel-dns-prefetch.json","hash":"7b15d89cef32d922e4f4a26d18498eadcd2f2cf0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-rel-preconnect.json","hash":"c73a5a5e1e43952fd122dbf89bcc5991f3f22553","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-rel-prefetch.json","hash":"a48f5a0e7c16b068a9707593061c0eccd2ad73ef","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-rel-preload.json","hash":"68797d1f4888ae39678800f7aa9bdb65675432ae","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/link-rel-prerender.json","hash":"f525b615c0c92af24b4670f9ba4768b7a99915a2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/matchesselector.json","hash":"b0514cae64611650ec35fe70ad9a7a15891489f0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/matchmedia.json","hash":"46f993365e364016696ad707c34ccd316d483af8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/mathml.json","hash":"95ae1d1005b2123b0e9288b7f4eac6b8f23fe39c","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/maxlength.json","hash":"b2bed1418d88525b0df36b45aff5ec4ea15d2455","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/media-attribute.json","hash":"3adc412daf709c5336331ff12b6e5a55b129befb","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/mediasource.json","hash":"4a3523fb9c7a2d695b4a6b88e1f9c993dc44a7d0","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/menu.json","hash":"1c41abd0db49587a87f5de17e17f9ba9c38ba191","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/meter.json","hash":"ca311beea81d7e5920788a652d4651ecd7c704d6","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/midi.json","hash":"167c0329e5335624331f23c24b364e06018bd0d8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/minmaxwh.json","hash":"61874f1440d50198456f3671269a3e8c400e8e95","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/mp3.json","hash":"94772085f35b4d98907e499abbf705e1c7d99c12","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/mpeg4.json","hash":"e4d053b5b4c195e994dd26b20cc5730681382287","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/multibackgrounds.json","hash":"e076493c6840e3af7a4ec1b73f19099306c0f2a0","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/multicolumn.json","hash":"81a84501cef76cf21c82cf3a3b49a2179bccaa24","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/mutationobserver.json","hash":"73d68aa3afac5931ffe9b68e42abca494761687e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/namevalue-storage.json","hash":"30421f300df8b6d166841deb4b57e74af6d8ee48","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/nav-timing.json","hash":"dfa53908f99a5a57dd096f3c83c1c7a698786d1d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/notifications.json","hash":"dd2adc6f3306d22f70720dda68e00c7ad8294665","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/netinfo.json","hash":"2730279438c7ae8ced0490b710000dfd19b99f88","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/object-fit.json","hash":"a144e5f3b35152e74d205233eff96a151793d354","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/objectrtc.json","hash":"e744dac2e7d98e8282075c611451a8d18248e0d1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/object-observe.json","hash":"d3917e618493d630f18285a0e1cdb7a183619385","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/offline-apps.json","hash":"723c4830889baef673822d20053695f437037ea3","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ogv.json","hash":"b704ea4a3fcd8d109ef09f3f31b3a8ed59e7a299","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ogg-vorbis.json","hash":"afb08c9ce1d6369aedab96548a1d738184c863dc","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/online-status.json","hash":"a06ccb21ca25ef79a6793dbdab131f3326f48b3d","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ol-reversed.json","hash":"5dae878fc325faefd2881faca5555a2704fedbdf","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/outline.json","hash":"e9a3e771858c762e17cfd569b17b80570f24d659","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/opus.json","hash":"4e0d91f15a18433b3602e43492f97109a2eec494","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/page-transition-events.json","hash":"a2d5c2dc7c2709e8690e071a293f55621c682ea5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/pagevisibility.json","hash":"2fe07ee06afa93e3715fb5005f27f9b06c71d6dd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/permissions-api.json","hash":"294679268cef29d0e385184e393c66a850b7d8b1","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/png-alpha.json","hash":"c3e682390dacd9eac95ebc598af4498e450cf701","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/picture.json","hash":"630323e5cb64c216e3365afb2bf79a3db7c9f3a4","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/pointer-events.json","hash":"ffc47204f81ff494bf87c6d0f7b0cfd54ab72470","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/pointer.json","hash":"702d8c49653b0c61671dc95247d175eadda5aa01","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/pointerlock.json","hash":"e2f7575b7b3a042923efbe809ab496098e8e493f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/progress.json","hash":"a58e7b462305b99e2c26db39ead28df1a209f447","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/promises.json","hash":"bfd70a6ec619f92bc5c1a651e9c7e351f7cc7abf","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/publickeypinning.json","hash":"dc75115dc0bc46aab05bc7f795ad6087a46a68d8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/proxy.json","hash":"214122cd1fe1b0a034d867721653fd9c0b0f4ae8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/proximity.json","hash":"72fe5c7db817df5231d8f6c0201e0efb54828099","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/push-api.json","hash":"e5c1e38db3924e840949e92616f4693ce4901635","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/queryselector.json","hash":"473cafefc3558ca880b319e6daa6e4ba4b5911f2","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/referrer-policy.json","hash":"a6911e33596f93f370cb0106333e2db430e8408a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/registerprotocolhandler.json","hash":"6cb94d4bbd0d6067b41657fe309e307afc4c2e65","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/rel-noopener.json","hash":"97d78c3fc0609a2c79a04e7e4f06c063999c0ea2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/rellist.json","hash":"e7b6b7b88bc08291688f59e84011ff0efa53ff83","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/rem.json","hash":"06a7963e8dfb008d973f0444d9637a72e367da7d","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/resource-timing.json","hash":"96e1441d095f06b06c17accae054752459c97f09","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/rest-parameters.json","hash":"9f97805052bfb0d4c2d5ee764032b9a7886a8a60","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/requestanimationframe.json","hash":"7e54602c110b010da7ecc90b24fb900ae4f6b041","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/rtcpeerconnection.json","hash":"2f4fde05aceb80555dc1f15ddf3949b725ae019a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ruby.json","hash":"8872e83e2787215402b24674fefa080402d36322","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/screen-orientation.json","hash":"ea6d20564b249d8fafd55813758dcc464c0fcfc8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/script-async.json","hash":"a8797522dc65883f62785600c36af05bf09ff185","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/script-defer.json","hash":"da05a430e0da866a5c1545af5246f88279190727","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/scrollintoview.json","hash":"eb64c2d8beec7b236a3dfd62fe56644b9afd2040","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/serviceworkers.json","hash":"c863d6e2cbb11c3c8ef583f8a58bef1bf783ebc7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/shadowdom.json","hash":"b8a6ab484b5e63c65519d67806618cb72b4dae14","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/setimmediate.json","hash":"81521bf8beef83a3642fc83e4c04f183af0e7c55","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/spdy.json","hash":"77ca3acc7348ae2fcf979e69c5ef23074dde2c65","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/sni.json","hash":"5fdcd70df1cefb9549de67e3ba16f0d20fb151c5","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/sharedworkers.json","hash":"7d45f30ee3cd6b69f009461ff62df91bb60065b4","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/speech-recognition.json","hash":"1dca5a91f1b374ec18f23b53fb683733747f64d7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/speech-synthesis.json","hash":"11ee8485c92c4e20024062d0a6ac03479aeabe3a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/spellcheck-attribute.json","hash":"dba44504a8ea3a35a8d725d99faacc6e4565ba1a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/srcset.json","hash":"0206350efc9f7a8aa0388c429e7b2cf611ea6bc6","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/sql-storage.json","hash":"37675b68873ed44878e75d7cf5db8e7bc7ce63f7","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/stricttransportsecurity.json","hash":"2c34ec88a7c3379f759e55ca5dbe771e7b1cdbcd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/stream.json","hash":"08226566b9c31ab0f50a0a1a0d61b8d706cd2828","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-css.json","hash":"4a9863b7e66d0acdfc230ca779f4bb2270424ee0","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/style-scoped.json","hash":"fc2e9372fab9f02c89fb44fcfe44be1486e7c2ad","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/subresource-integrity.json","hash":"17d5d229b705fbb28a7a5da9fc0ab0ebaca8369a","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-fonts.json","hash":"49488f676e4ce4963a4945f43b69c7ff9f6635ea","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-html.json","hash":"228301eac69ffbe4ca26dccfe8b2010c7825de02","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-filters.json","hash":"677d6a16a453a413b5f45e00c58b41c51bc700e0","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-fragment.json","hash":"3edc10103639551b2dd547a7f793c886b60a1aea","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-smil.json","hash":"023ee4d54e7498fbeae32578762f8be85d02a184","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-html5.json","hash":"034a0eadea6b7c26e97eb2ba3c8e70ea747034f8","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg.json","hash":"13b522dae43a28845fd5e8f9eeccda1efc799ba7","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/svg-img.json","hash":"3ad63b7e00d7abc9aee2b13c95c65ba027eb0c90","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/template.json","hash":"550abfdfa593bb9a4e39787909397c6528ae28a7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/text-emphasis.json","hash":"847ce78de30cf55a1278756f9bdacd429f40a0ea","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/testfeat.json","hash":"00685140128c5265f38a96d85a018213698576fd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/text-decoration.json","hash":"e85f8f4d7db3f025e2b6b34a4420357492797fd6","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/text-overflow.json","hash":"e11868c87f2663f5383e806015d3ddfc627b02f4","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/text-size-adjust.json","hash":"d169bcc8d6e474241ae24f87c22306f5fecda530","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/text-stroke.json","hash":"4589cee1f65641d3faa6412c647fae801764c9a8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/touch.json","hash":"52f3759cce571e1ec41dd98ab683166dae4c58ef","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/textcontent.json","hash":"5559bec34b6e7fae94f059ff66f7a32c11a85c4f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/transforms3d.json","hash":"5a2e6e41a75b380c4096bfce8fbca76e5b0dc785","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/transforms2d.json","hash":"6ea20c70d4a333ebe170dde099424837d7692755","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/typedarrays.json","hash":"0a0b0e409eeb701595a1e98d93b721187d9fa7b7","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/ttf.json","hash":"2fcbd1e59666994518d8cd0e427e6d4527d0b050","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/upgradeinsecurerequests.json","hash":"c78906319abe712d00a783f5fc0f65724478f8f5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/u2f.json","hash":"d886842437725d27ef6ef6b52fed00f07b7a891f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/use-strict.json","hash":"920f44761d21a8f62377183f1416b6b7b51b3086","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/user-select-none.json","hash":"020e244a6baa899591ba8c85ddb9b9745e5faca5","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/user-timing.json","hash":"6847e552c90624894e0dd625ed94ea9eee73383e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/vibration.json","hash":"c278ac1b9740a1f92de2a425d4116eaf9d0f6fbd","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/video.json","hash":"cb8f2ee23019a797bc380e414702dd936122c83a","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/videotracks.json","hash":"b26276f541582ed3821437719f0b1cfb0a32ed7e","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/viewport-units.json","hash":"b8a4159a3c521af38f837173172bd5e13cff2e91","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/wai-aria.json","hash":"c0219c8db977a406ebf919b50db2706e175c3f21","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/wbr-element.json","hash":"7058b2ab155a9013292b3f8296d2efc44a120a2c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/wav.json","hash":"2a8751e20aabdaf8a6a53aaf3021b6375a3395be","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/web-animation.json","hash":"c89bb5a61bc67b5d51db3c78c0d20374392532ab","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/web-bluetooth.json","hash":"138f63ab39c7db635dea93db433088d72c567b26","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/webm.json","hash":"c4c2af8072b07b29c88a61daf0a2e955414ebca8","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/webgl.json","hash":"9df22256b7ec23a41d7e5a2f7ac545d69b4de4aa","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/webp.json","hash":"b85d1d676a41cdaddc46e4968fa7b56cc9b77d3c","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/websockets.json","hash":"3baac4c62c876686a2e0a9539d72288301a51953","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/webvtt.json","hash":"70490d639f840a206b697f8c429067b32c3b7e77","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/will-change.json","hash":"9dbdd16b9d0d83032741031f48246001a9594399","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/webworkers.json","hash":"32350a1c8d2b669d068c7cbfc35c1d3f4400137b","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/woff.json","hash":"f2d0dcd96d19e81a789e7c9b3175f355391ed9c5","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/word-break.json","hash":"418afd3c218d1e4409048f7374b75abfb5358efa","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/woff2.json","hash":"a40553d2ca93270729641bea5d9931733fe6748b","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/wordwrap.json","hash":"029b4afd26bc9af5ff8b963a87c42fcd4e9779f6","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/xhtml.json","hash":"619e2aaca59012f82dcd3c2dbc51f25c86c8cd6f","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/x-doc-messaging.json","hash":"a4ec6cd6ea0787e0d8a08d1f83369d0eb8a08e0d","modified":1459997114000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/xhr2.json","hash":"c5acd93c7089f4e3045348fb1fd002c65b2a3be2","modified":1459997116000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/xhtmlsmil.json","hash":"6a60908bb9ff33558f42e87a8297e41c499dc4f8","modified":1459997116000},{"_id":"themes/apollo/node_modules/combined-stream/lib/combined_stream.js","hash":"5d3a85a28a463dc2949fbb974919598e00183d24","modified":1434294512000},{"_id":"themes/apollo/node_modules/concat-map/example/map.js","hash":"022a614b8d9f5ccb67b6ce1f478b1efd7aff298e","modified":1339124034000},{"_id":"themes/apollo/node_modules/caniuse-db/features-json/xml-serializer.json","hash":"741cf32d0f9e92ed3e6c172b8960fe6b4a7750e7","modified":1459997116000},{"_id":"themes/apollo/node_modules/concat-map/test/map.js","hash":"162cce32c23628192cef64924a1ce768af399a4b","modified":1354099176000},{"_id":"themes/apollo/node_modules/convert-source-map/example/comment-to-json.js","hash":"30fccca5501c0861640583b435b77cadef7dcc60","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/test/map-file-comment.js","hash":"e85945565a2c907b34069f7b1253225cc1182b6a","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/test/comment-regex.js","hash":"91e0d3e653332b36433f3766df1c5b44b6effd6a","modified":1431931459000},{"_id":"themes/apollo/node_modules/convert-source-map/test/convert-source-map.js","hash":"4b2dbb77b1797b6b87f07369ff9ca503bdb2c452","modified":1456506683000},{"_id":"themes/apollo/node_modules/cross-spawn-async/lib/enoent.js","hash":"b3170593c65fcb4a812dfb14cb4e91eceed3c211","modified":1435867320000},{"_id":"themes/apollo/node_modules/cross-spawn-async/lib/parse.js","hash":"4fdb805e03cc7da69e2d3446aaf9d4386ebe3bff","modified":1459980370000},{"_id":"themes/apollo/node_modules/cross-spawn-async/lib/resolveCommand.js","hash":"467e00f4fbdddf1c27b32aff33ef83678b34c0d4","modified":1437516546000},{"_id":"themes/apollo/node_modules/cryptiles/lib/index.js","hash":"e5c479d1d0966b82298d86669aaa5ed4bcee4fb7","modified":1441778892000},{"_id":"themes/apollo/node_modules/dashdash/etc/dashdash.bash_completion.in","hash":"cbb2d2c1c856735b5555384080853f896aac9c61","modified":1453144686000},{"_id":"themes/apollo/node_modules/config-chain/test/broken.js","hash":"f007669017b938d756d21142a4e0f54cb9a3dad3","modified":1453089250000},{"_id":"themes/apollo/node_modules/dashdash/lib/dashdash.js","hash":"0398a1a799416107c41d667c3d397a60e740fada","modified":1455248872000},{"_id":"themes/apollo/node_modules/cryptiles/test/index.js","hash":"c4d4151097d486ade0ee21bfd91297dafda16e88","modified":1441778892000},{"_id":"themes/apollo/node_modules/config-chain/test/broken.json","hash":"c969f40a411d934515791f8e6804200a016ae2aa","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/find-file.js","hash":"62fb5c59e5d5ada37fe8cf140b4a9075f15a108e","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/env.js","hash":"f292ae2cb5ee1c0ac4d20add75b02de780003289","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/chain-class.js","hash":"34b79653b037c7d8346c1a92ba15cc54fe717c40","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/get.js","hash":"ccb0124431350b46e3f8dec6c0e0091996cb1672","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/ignore-unfound-file.js","hash":"b6dd15493dbe2b3489ca2558c4b55580f01e6045","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/ini.js","hash":"0fdab26b646fe19332c5f7d70df2f973248304eb","modified":1453089250000},{"_id":"themes/apollo/node_modules/config-chain/test/save.js","hash":"02542bfc54b92bb51df682de992f2e294a77face","modified":1453089250000},{"_id":"themes/apollo/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/apollo/node_modules/dateformat/bin/cli.js","hash":"74dbf2e8c6bbc317d1a64d8eea3aa3ae694cac94","modified":1417082792000},{"_id":"themes/apollo/node_modules/d/test/index.js","hash":"88af91ac55c0ed98d16202e426963ab614490a2e","modified":1382535812000},{"_id":"themes/apollo/node_modules/d/test/auto-bind.js","hash":"1c004fc15dcbaf48ad290e3237d5a8d5a8189a0a","modified":1398351476000},{"_id":"themes/apollo/node_modules/d/test/lazy.js","hash":"3a0bbc72a80cb89666b9f4d8792b0b0a6bbfd894","modified":1398351481000},{"_id":"themes/apollo/node_modules/dateformat/test/test_dayofweek.js","hash":"a0846cc0fd1f2bf40fcae2c9dbcc1a5f40fd9dc2","modified":1447915155000},{"_id":"themes/apollo/node_modules/dateformat/test/test_formats.js","hash":"13c8077c6b2020f12bb1369bb0fc1a28af71ddc7","modified":1447915155000},{"_id":"themes/apollo/node_modules/dateformat/test/test_isoutcdatetime.js","hash":"14b08455f24a7e29d8d832d7c5d1b626df20c6b8","modified":1447915155000},{"_id":"themes/apollo/node_modules/dateformat/lib/dateformat.js","hash":"2dc621400a74d68b3d76d433e2a562a82178f1b0","modified":1447915155000},{"_id":"themes/apollo/node_modules/delayed-stream/lib/delayed_stream.js","hash":"097ab12e3837896d11d3f1d2c7a891d177b493c4","modified":1430160544000},{"_id":"themes/apollo/node_modules/delegates/test/index.js","hash":"f1c8ec4cfea947c03d8dd7c2ce43e7e878794284","modified":1450122923000},{"_id":"themes/apollo/node_modules/deprecated/test/field.js","hash":"499b43fec46cfd33a5e7e6594296643224c324af","modified":1390539005000},{"_id":"themes/apollo/node_modules/deprecated/test/method.js","hash":"3ed58f8b49f0bfff2895fc14cf198d5c0e340e3e","modified":1390538713000},{"_id":"themes/apollo/node_modules/ecc-jsbn/lib/LICENSE-jsbn","hash":"4f94910918b5e57f3e55c7387f43b0d6293a4319","modified":1394075812000},{"_id":"themes/apollo/node_modules/ecc-jsbn/lib/ec.js","hash":"d9a60c831fe91bd2c62ff3e3c9675b0379ef504c","modified":1448288163000},{"_id":"themes/apollo/node_modules/ecc-jsbn/lib/sec.js","hash":"b1632526290dfddc063f05ac6ed29cc40bd9e221","modified":1448288300000},{"_id":"themes/apollo/node_modules/duplexer2/test/tests.js","hash":"a5c00419a5e228b8e09691f40d13c3a25cf00c9f","modified":1398042537000},{"_id":"themes/apollo/node_modules/es5-ext/array/_is-extensible.js","hash":"727d1cf63f544ff6ded98967021140d7c0fe0b1f","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/_sub-array-dummy-safe.js","hash":"b38cff7c200b3b2e8ee3c609f4399a8b24b04d5f","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/_sub-array-dummy.js","hash":"96e3c4045b64ad2111931888ae54b3ec8d3e70b0","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/index.js","hash":"99a36e4a5c406264f2c15787d3dadb7282195821","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/is-plain-array.js","hash":"0860af627c200a95e4e2dd2e8d74684ff4ee1204","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/generate.js","hash":"a4e6bb04c3d10ce321e26abe9c4ac11caffe7063","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/to-array.js","hash":"7a0f713c15188942af38c5d9df3e2fe62b4e5e80","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/valid-array.js","hash":"78fe4e362e4647bff7c885e078ded638624f1ac7","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/_define-length.js","hash":"130307bc7e79f62bc015bcea331c211990dd77f5","modified":1439568886000},{"_id":"themes/apollo/node_modules/es5-ext/function/constant.js","hash":"89bb0c7a31f3bb6e4c1605fb0e887e95a76ff5bc","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/identity.js","hash":"e7278c38ce087b84af6bee7de092ad07c41ea8fa","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/index.js","hash":"50535f5a2210d29c8eac00510dc932d8b945a51e","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/invoke.js","hash":"36a74b22e74bf9403151d5f7caa4a2955bbfcc0c","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/is-arguments.js","hash":"a83f6c2188e660055148e37cb96c16b8556af4bc","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/is-function.js","hash":"29d6d345406b9fa6e4e169a5e23ebb9eb2efc3bd","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/noop.js","hash":"75d76dfb3fd2e4e6ed27912f71663f7a0adb518f","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/function/valid-function.js","hash":"dc1ae9d98d36f0adf627686893811e12cae9d3b1","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/function/pluck.js","hash":"5f1559ad4c21a7b1a8fcb4b793e125e0bd962829","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/boolean/index.js","hash":"dd1225f4e65c8d32fdfbb0b2818bf3bf4a426c5e","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/boolean/is-boolean.js","hash":"261103b2ccf3810127dc5878c5c1ca941591376c","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/index.js","hash":"8cf2a9cc310c0761030cef97a5320b96773f3c54","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/is-date.js","hash":"1dcbf7a8870c6d08faa21cf6e842f1468d35625b","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/valid-date.js","hash":"da036b11fe0b4d6fdea660f71e3aad0c8cb663b3","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/custom.js","hash":"84e3ceb1f4628e744261db9793c92760f3332105","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/index.js","hash":"7a0fae579abd5b7d61df174b78a99cd0d993ef24","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/is-error.js","hash":"856c653e54da44826aa979075896aeb032d1f100","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/valid-error.js","hash":"323c9b184f0ddc39e8b7de9419f221e825cb04dd","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/iterable/for-each.js","hash":"9c6f5f7b1ba29411b995e64c3036d03e43c40913","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/iterable/index.js","hash":"4d923949530115c534620e76538dd5e2b128a001","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/iterable/validate-object.js","hash":"c0eaf838c5139d1e4f278f24cd70666971012df2","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/iterable/validate.js","hash":"90680df2628095b1609d295c032bc2579991bbdd","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/iterable/is.js","hash":"033166636690e9b8e059f9413b55850166e6ec8d","modified":1443792273000},{"_id":"themes/apollo/node_modules/es5-ext/number/index.js","hash":"d7f6059550af9cdab8a661d4b7c353afe439c9ee","modified":1442828179000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-natural.js","hash":"c477ada0e0891a01ae3fa673ecd676facdafbd08","modified":1449840466000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-number.js","hash":"3ff1bee824882917639ab17760d214f94792d57c","modified":1448531600000},{"_id":"themes/apollo/node_modules/es5-ext/number/to-integer.js","hash":"11154d16fb5351f3b36e30ce9c0665d652921e6c","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/to-pos-integer.js","hash":"f1b6262dc473f15c63b29a2a36c05c64efacb62c","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/_pack-ieee754.js","hash":"15c6e6e1ce2b6117a3f1e4fd1d4e4b27429b0088","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/number/to-uint32.js","hash":"0501182b2bb4947902ea3f9db1be1195810f5c24","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/_unpack-ieee754.js","hash":"7f6bcb4db0fa107514e6649b7df88e9f10153029","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/index.js","hash":"8f54518243ce96820910e90e339a7ad09e771878","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/escape.js","hash":"78c92f54bc5ad2283be9ec123d963d12d4c1dfcf","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/index.js","hash":"4c7e149557df59dca6c53623411282ef6afe13e4","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/valid-reg-exp.js","hash":"0a051b15c63b921ff5cd606db3f9894a1d352a2d","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/is-reg-exp.js","hash":"86ce813aec0fad68199c37fc44dc3d79ccda7df4","modified":1435238761000},{"_id":"themes/apollo/node_modules/es6-iterator/#/chain.js","hash":"b418df7f0fad89332e42bb163a5ade017514652a","modified":1435238773000},{"_id":"themes/apollo/node_modules/es5-ext/object/_iterate.js","hash":"a4491c210253cb29845be6934ad478b3b8260005","modified":1442408758000},{"_id":"themes/apollo/node_modules/es5-ext/object/compact.js","hash":"305211d52c99ec0aeefa8a6505d40d06d3d8357b","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/clear.js","hash":"a8572f2b873cb521faf04a29890c839a686035f4","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/copy-deep.js","hash":"f28a95146c0ab67e45b4024354b85a46d2045919","modified":1437052953000},{"_id":"themes/apollo/node_modules/es5-ext/object/compare.js","hash":"4f9cae99a6b92d255f46aa04ce0f8b208d1d48d5","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/copy.js","hash":"9c6f7c5345b1eb0e422f489b09caac5a083fd431","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/create.js","hash":"83ff168e5a891d57112837435d3e03fb0702d37d","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/count.js","hash":"d6b1fb75349c57a2e575b6857b2547346fee37c0","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/ensure-natural-number.js","hash":"4469f72459deef3536731523dc2192c9766321d3","modified":1448532536000},{"_id":"themes/apollo/node_modules/es5-ext/object/ensure-natural-number-value.js","hash":"f8062a719668cbf4d5b646d35130a13b8edca107","modified":1448532545000},{"_id":"themes/apollo/node_modules/es5-ext/object/every.js","hash":"18ba6205d5157e42e7571112366a7daf76bd04bd","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/eq.js","hash":"c857b371419bfd29a314054e6b31d163018cc9bc","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/find-key.js","hash":"ef6fcc9023af6f91a0240a62f7913d5c0ffcc78e","modified":1442408949000},{"_id":"themes/apollo/node_modules/es5-ext/object/filter.js","hash":"43bb91ecad5f0fc305604beb1814795bb970a758","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/find.js","hash":"a4613185565cb6de02b9b3ed7fee6dfda17cf23d","modified":1442409074000},{"_id":"themes/apollo/node_modules/es5-ext/object/first-key.js","hash":"3be30aeb612fc2cbecc1d6735da9cbcb05e0904e","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/for-each.js","hash":"a87eaa09f263195df679a7fe117251fc59b7ed35","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/flatten.js","hash":"42deb83f753f02939c849bb90196e46894a9bc81","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/get-property-names.js","hash":"67750d7fdc42b13721637364d3065ca58b63f9de","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/index.js","hash":"c909dff4999314d532790efdf4139b6ff1cfc364","modified":1449840708000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-array-like.js","hash":"eb0a845f64f8ca29e61cf161e4ac565f86c179f3","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-callable.js","hash":"9aeadd96c5bfe0f8c06dd4704fcdbc7fc3132a66","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-copy-deep.js","hash":"41df8576b546421474b7e12b61154111c609127a","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-empty.js","hash":"363fe76c6153121233cc5cb51f5278d4f5caacbc","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-copy.js","hash":"4a8107b44275f004acfc43cf52d2e44188a9a02a","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-number-value.js","hash":"90580156774ca955093cb1cf16b64a65f725ef88","modified":1449840543000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-plain-object.js","hash":"4c5524aecffb555c6c216df5972692e28a72f04a","modified":1436267736000},{"_id":"themes/apollo/node_modules/es5-ext/object/is-object.js","hash":"9f7d1889f669b1d5b1572bb3275b4130f924d989","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/is.js","hash":"5d58d94b5b68aeda31069077bd71da236b1caa0d","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/key-of.js","hash":"0e5360891a6996f5e313bb3e81244343fc508717","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/map-keys.js","hash":"4f9dd73aa1875d7b06b03867bd201e62da76800b","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/map.js","hash":"bd8a1ec49ada3d56c213dc0cb32c368729208a6d","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/mixin-prototypes.js","hash":"20527dbfb0989adc6654e044490ce7b87e4ecccf","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/mixin.js","hash":"06f8745c10c79d73a5ff47a1aeaadab70a8c6ea7","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/primitive-set.js","hash":"c7861686733c069dea4d637cf91e501e72c0f6be","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/normalize-options.js","hash":"94e533a1cf546ccdd606c9440a4cda1ddfd7cf98","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/safe-traverse.js","hash":"a1fcd3c7aa5a52ac25699fcb78b316349ef4fa52","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/serialize.js","hash":"5d3635414008817d0929450f2e5ac89901e8dfab","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/some.js","hash":"f59a9e5303f3fd20e2411a4c944dab8fe4dcf706","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/to-array.js","hash":"8a730cfff55e4462773ca10a19cdcb134d5062ba","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/valid-callable.js","hash":"4d538ad59112f47d68c0a026baff2132e524ef9f","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/unserialize.js","hash":"cc0a029c1e37c1450a9d66d9d60cd277839dcb25","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/valid-value.js","hash":"ee1e0176f8ac4f4cace8b5c0ce76266e69a3d895","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/valid-object.js","hash":"d5f1871db3f1b097477b9c3f8460262113db8994","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/validate-array-like-object.js","hash":"4d0fdaad83860dd2fa882a8c35b7de49e661f513","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/validate-stringifiable-value.js","hash":"62c2ea3eab6639277f8e6c3c13f4bb006da1c4e2","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/validate-array-like.js","hash":"5f87b21733eb3c4d7f96d95a3ca3588fa77236bf","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/validate-stringifiable.js","hash":"fade44e1d9a11d4effb7a16d81a553cabef157a6","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/string/format-method.js","hash":"b6ecc43057f0e51b616bc7e9a10d3c23ca4710dd","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/index.js","hash":"b9fb1c16738c0c6b4e48ee260c761e8398bbf7af","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/is-string.js","hash":"833a65149d37ca04017faf3468f68d90ade4ba3b","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/random-uniq.js","hash":"b6718084b8d668e133ac730df61ea66ae84c19d6","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/__tad.js","hash":"6cb8d974a39988e173fc31eab4251f8ad5a661de","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/global.js","hash":"e5cd5ef25df978c99b7843ed2be2b099890e91cb","modified":1435238764000},{"_id":"themes/apollo/node_modules/es6-iterator/test/array.js","hash":"4d5318788d5b42a9af6d096af89b2cf7953688be","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/for-of.js","hash":"48e338e2ca7be125ad089f369a55cd8884132eb4","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/get.js","hash":"20ddc3d1e7f1f490b79d2a27f0787ec41ca02ada","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/index.js","hash":"a497bf6d4903cdec5b2ff06e05f18f51c25e833a","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/is-iterable.js","hash":"d79e52f9a01bd11183e858a248d460551a4d7af0","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/string.js","hash":"3096c3806e247b58a340d50dd68253826dbeb55d","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-iterator/test/valid-iterable.js","hash":"e20bc3368b865d0ba4ba7da1fcd7f773bdd3f7ff","modified":1435238779000},{"_id":"themes/apollo/node_modules/es6-symbol/test/implement.js","hash":"1524ee089e4187c3341a2c7c555a3b4b37eac6c2","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/is-implemented.js","hash":"7d9652d0f8a57a2e9b6222fad7dac406f1322176","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/index.js","hash":"e9f4993e74351e8b5ab4de09953652b0c317dfbd","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/is-native-implemented.js","hash":"fe4a3b2ce71ede9640d151fb7e5b0899dc328dfa","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/is-symbol.js","hash":"0532e040a59809a53f3b41f9c1660c5dc30a4858","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/polyfill.js","hash":"fe2d487281bfecf59b8f291ead7f9d97e42c1197","modified":1435238798000},{"_id":"themes/apollo/node_modules/es6-symbol/test/validate-symbol.js","hash":"1a27412f53e0a3c74297920d8ac340e819e4e280","modified":1435238798000},{"_id":"themes/apollo/node_modules/extsprintf/lib/extsprintf.js","hash":"cfe80b99a5d428a0f357ae11e0a067c46ebdbb2c","modified":1360175237000},{"_id":"themes/apollo/node_modules/extsprintf/examples/simple.js","hash":"5e7b4892b3625f689d9dcb5fd2e43140f21d66a4","modified":1360175237000},{"_id":"themes/apollo/node_modules/flagged-respawn/test/index.js","hash":"b142e964c2eab417572e2680649354cf9832ad7e","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/lib/reorder.js","hash":"2def067b12e5529f98344938921b9df6cb2bcb10","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/lib/respawn.js","hash":"818951b6fd0569ea5bf82acefa9b505deaa15604","modified":1458636135000},{"_id":"themes/apollo/node_modules/fstream/examples/filter-pipe.js","hash":"a5b494a4fe5738f5b2c7a3df3d3e7c9685e8cafb","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/examples/reader.js","hash":"9d828670e866e34dc8212c564403f78c98558c80","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/examples/pipe.js","hash":"ff0ea1e9b09953cd0e96420f419e65a9fe3f598b","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/examples/symlink-write.js","hash":"a795df07387ef7c89d4d5afb33722f11b68dcdfd","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/collect.js","hash":"c0841dcb15eb7f67ad9699e8db89e5241e892bcb","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/dir-reader.js","hash":"72161bd3e3576549f5f9dc7970aaaa09bc764737","modified":1441845533000},{"_id":"themes/apollo/node_modules/fstream/lib/file-reader.js","hash":"2b6f5039d467b080fb92abb57a673ec97877e9c7","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/dir-writer.js","hash":"3746846974dbbdf325f8d15ea8ca0d012fa5dcc2","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/file-writer.js","hash":"f4e66be6242777e3c38564125ab626edbca1f3a3","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/get-type.js","hash":"ef95fa07f3c5af2226d74feb0f66fb87df5e288c","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/link-reader.js","hash":"e9f6cc283c032c5c21768d76ff48651f8169b530","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/link-writer.js","hash":"74b0816529379a9ffa93c1ab866d7399c63eb136","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/proxy-writer.js","hash":"ba51acb8e3b5277c510cf9f97fb3d07f0567f3a4","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/proxy-reader.js","hash":"1b24a353bd457db6a84dfde4feecf0a9367f15d9","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/reader.js","hash":"323979daecbf47fba50278e908c2f77c3eef52bc","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/socket-reader.js","hash":"11296e436392e54d4b2018c524c580f794b00486","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/writer.js","hash":"580eff911f66640c7caed30bcfa224ac91c9496d","modified":1441844311000},{"_id":"themes/apollo/node_modules/fstream/lib/abstract.js","hash":"237e8d46b8a6087e7b9b46fd14537cf6f26b79ce","modified":1441844311000},{"_id":"themes/apollo/node_modules/findup-sync/lib/findup-sync.js","hash":"df66bc1a3a731584882ef507e80b5a75fdf8c185","modified":1442281864000},{"_id":"themes/apollo/node_modules/form-data/lib/browser.js","hash":"917325358c1a3c40dc7c955264a1d4d74dc73ff1","modified":1451424476000},{"_id":"themes/apollo/node_modules/form-data/lib/populate.js","hash":"9dd4fc7be303bc7cba2bc94255d8cfcbde69db9d","modified":1440082319000},{"_id":"themes/apollo/node_modules/form-data/lib/form_data.js","hash":"896f6c6fbb1374dbefb85d995431adf8f42c5e3f","modified":1458030267000},{"_id":"themes/apollo/node_modules/gaze/lib/gaze.js","hash":"6d876f2962c16afe6fd951263b67dd710bb5d594","modified":1444075943000},{"_id":"themes/apollo/node_modules/gaze/lib/helper.js","hash":"0acbbb5e935285414eb1fc27b7d3e7a9810fa6eb","modified":1444075561000},{"_id":"themes/apollo/node_modules/gauge/test/progress-bar.js","hash":"a1feb803ea2772dd73d37aaf3f1cf0432eac0447","modified":1455832954000},{"_id":"themes/apollo/node_modules/glob-watcher/test/main.js","hash":"5b53a8ee5ccf9edacf55025a523722dae8021f81","modified":1397537692000},{"_id":"themes/apollo/node_modules/globule/lib/globule.js","hash":"618ff718047feb15254e5cf24ce5af4fd6dc1812","modified":1365709870000},{"_id":"themes/apollo/node_modules/globule/test/globule_test.js","hash":"4564e9adeb6bb1e1e67da9dc664a574d282de006","modified":1365707547000},{"_id":"themes/apollo/node_modules/gulp-util/lib/combine.js","hash":"50bc26edf62345096a7d672ea00787e0ec90af2f","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/PluginError.js","hash":"b09ef348b7db6c5c018038593c41a6501dec44c6","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/buffer.js","hash":"ec8db5cdded403af89dd6b0079f310ccdd168d13","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/env.js","hash":"d0dcb852c1c28a46a706a826519c4c85f36e28a5","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/isBuffer.js","hash":"fb914232a9ca134b8b6522c33c894b843db29941","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/isStream.js","hash":"b745b237603da7529c86cfe508e516329f83c396","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/noop.js","hash":"bba61e09e07b7ae3bc2bc8fb5dfbdf3bd7c334fd","modified":1440739656000},{"_id":"themes/apollo/node_modules/gulp-util/lib/log.js","hash":"b6ac2e9706245d5c2bde51400d8a8b97c13c0293","modified":1445310390000},{"_id":"themes/apollo/node_modules/gulp-util/lib/template.js","hash":"fc11b01b78971821c651e8033fd48082697a9be4","modified":1441922306000},{"_id":"themes/apollo/node_modules/har-validator/bin/har-validator","hash":"702b45900cba1bd2ee74c4df1a5b51db0aeab0d7","modified":1448373288000},{"_id":"themes/apollo/node_modules/has-unicode/test/index.js","hash":"454a09bb55fe15de1bc72daa3bd91d5e13a169ce","modified":1448499521000},{"_id":"themes/apollo/node_modules/hawk/dist/client.js","hash":"78e967c19bffde7606b06c595c41e83cde6c0d53","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/example/usage.js","hash":"9c61ce5a46828c4c26b93e06141dbee8679c33a2","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/lib/crypto.js","hash":"06d65d9f325d49f11a0bf223dc683648f6fac977","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/lib/browser.js","hash":"d4f08ffcfa0012fdb1a304d0fdda5586cf959af3","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/lib/index.js","hash":"64f1cfdf834d8d679d020071124865b83a6cae72","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/lib/client.js","hash":"781eb260241b46515df2f2f009969a772aa9dbcc","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/lib/utils.js","hash":"befb760ea6a14654fcce187b2b790f8292b404b2","modified":1453400406000},{"_id":"themes/apollo/node_modules/har-validator/lib/async.js","hash":"864f1787c6e6521d6495d337d7894d844dba24b6","modified":1448373288000},{"_id":"themes/apollo/node_modules/hawk/lib/server.js","hash":"ecde371bb849aa221cd138ba993f5fb19fff160e","modified":1453400406000},{"_id":"themes/apollo/node_modules/har-validator/lib/error.js","hash":"e08730fe6ce867fea7b32e8e7c6f9266b7fce592","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/index.js","hash":"099021ac86914964d97afb35a9594e29c136bd0e","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/runner.js","hash":"c0c49bddac013682d52bfff6065cceae67474fb2","modified":1448373288000},{"_id":"themes/apollo/node_modules/hawk/images/hawk.png","hash":"756c85c7133e66dc5c119c47081f7f890d046f77","modified":1447968927000},{"_id":"themes/apollo/node_modules/hawk/test/crypto.js","hash":"222fe636eb910e343a0dd0db76224fac92a47647","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/test/browser.js","hash":"fda1c8242cc48078540c30464da1d36a64d223a6","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/test/client.js","hash":"fabb1388ee6f94ffe25870f2152d1a46c480dde3","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/test/index.js","hash":"9e790c1104e148298687c0ed87fd48ee14a943a4","modified":1453400406000},{"_id":"themes/apollo/node_modules/gulp/bin/gulp.js","hash":"6febf2868b92a817f55f40172cc25b742da27e5e","modified":1454273747000},{"_id":"themes/apollo/node_modules/hawk/test/readme.js","hash":"e8743507f0a6c8d261e1d037e8aadc11cda3ac82","modified":1453400406000},{"_id":"themes/apollo/node_modules/hawk/test/server.js","hash":"45a0a16ecee59114ad2765a73af25443125278ba","modified":1453400406000},{"_id":"themes/apollo/node_modules/gulp/completion/bash","hash":"8df2671db648b408b7df9bab678012580d31fc32","modified":1454273747000},{"_id":"themes/apollo/node_modules/hawk/test/utils.js","hash":"042ec97613b298b257e409d54eeca7a84ef3f84b","modified":1453400406000},{"_id":"themes/apollo/node_modules/gulp/completion/README.md","hash":"62a12a981d8835b4479ef84dc44d756306595e85","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/completion/powershell","hash":"a9c154397cd0a2a704118ad38c8fd9c3d9096934","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/completion/fish","hash":"8135f5476a88fffc0dfb8923ec75948145044953","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/completion/zsh","hash":"d485e8a1b831c5086d28bb75909a220d019d1621","modified":1454273747000},{"_id":"themes/apollo/node_modules/hawk/test/uri.js","hash":"a7037450a234ee97c7bce23dc5c2f295fcddbd47","modified":1453400406000},{"_id":"themes/apollo/node_modules/gulp/lib/taskTree.js","hash":"f7eed3da988aede6c53aa9183dee7d541140748e","modified":1454273747000},{"_id":"themes/apollo/node_modules/gulp/lib/completion.js","hash":"9fbbb6da615c65fd887c6e8134496d15bc6f3078","modified":1454273747000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/basic.js","hash":"5d2a444b065b67a0be376883e3e7b671c9da78c5","modified":1428454391000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/bitbucket-https-with-embedded-auth.js","hash":"c6b289231e13710f0b7e3ea43d5dc84792db870f","modified":1428773458000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/gist.js","hash":"d3cf859d9e0d851bd95ce7ff6c90a9c246052505","modified":1428648278000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/bitbucket.js","hash":"28df683deef64173a19d39f4909fe1f63f15450a","modified":1428556703000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/github.js","hash":"27014346dab67846bbeefa3f85d2f7961b073056","modified":1428556703000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/https-with-inline-auth.js","hash":"a848cb586c224638588f1ad11bc6b0082e153e38","modified":1428647148000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/gitlab.js","hash":"e71ac863c90a74a697aba26399bf6661f7269b94","modified":1428556703000},{"_id":"themes/apollo/node_modules/hoek/images/hoek.png","hash":"61fce871b635b32957b3c8c4e3c523eb2b2ac58f","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/lib/escape.js","hash":"5ccf43b55ca0fbbc307a91235127af5601bd1187","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/lib/index.js","hash":"cfd3b556015082fc786d83c3e85ade81f448aafb","modified":1442857232000},{"_id":"themes/apollo/node_modules/hoek/test/escaper.js","hash":"206886beb62a1d9d907b3838b20eb2037826167a","modified":1441988248000},{"_id":"themes/apollo/node_modules/http-signature/lib/index.js","hash":"996c8efa1d7896034c980e498bec866824662d52","modified":1444858648000},{"_id":"themes/apollo/node_modules/http-signature/lib/parser.js","hash":"c47fbe5cb6f1be3c5a5d62f9085273f3403ff401","modified":1444858648000},{"_id":"themes/apollo/node_modules/http-signature/lib/signer.js","hash":"5e312acbe0c57117dad754fa369a36dca4569bbd","modified":1453759272000},{"_id":"themes/apollo/node_modules/http-signature/lib/utils.js","hash":"dce96d033869c424854178ae71991fe39b7c58b5","modified":1444858648000},{"_id":"themes/apollo/node_modules/http-signature/lib/verify.js","hash":"f0603457d003b72d484d608b266566e771644438","modified":1447890069000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema.js","hash":"c5ef8e3da495a6ca1c7cc9dd0cb8d8c415dcc245","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/misc.js","hash":"b87118a5e1a59dad1e6c7cc97d3f21f1791affcc","modified":1455779973000},{"_id":"themes/apollo/node_modules/isexe/test/basic.js","hash":"bbcbe17965674921369eb7036d112a99763d2c79","modified":1454133595000},{"_id":"themes/apollo/node_modules/jodid25519/lib/dh.js","hash":"e9a0561e419e956f953570d7121e65c84fa72488","modified":1446502968000},{"_id":"themes/apollo/node_modules/jodid25519/lib/core.js","hash":"55894ff0a71a08de470029f7689b3967c2ce9233","modified":1446502968000},{"_id":"themes/apollo/node_modules/jodid25519/lib/curve255.js","hash":"fdc3f9501dbda3945b6478cecaab0b0e1ecd2d63","modified":1446502968000},{"_id":"themes/apollo/node_modules/jodid25519/lib/eddsa.js","hash":"bacec5f12e7d5303cee9b0493e22b3743a19ef1e","modified":1446502968000},{"_id":"themes/apollo/node_modules/jodid25519/lib/utils.js","hash":"5b4e9a60c9f4758bf714e52f9064df0d33fd019a","modified":1446502968000},{"_id":"themes/apollo/node_modules/js-base64/old/base64-1.7.js","hash":"add7fa2249d35907c1a563c69e988d67f4f31191","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/test/dankogai.js","hash":"c29521d5d34be7d49de6538100369395a1d8dab6","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/test/es5.js","hash":"e59341bd3ad5a7bd14b9fa9e07de3c2ae3594643","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/test/index.html","hash":"15bad528a03c8bedfc0d3e639e182cf928da27c4","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/test/large.js","hash":"7ef172dfca5f7b5e338d11107c806e4dfa086e95","modified":1365425592000},{"_id":"themes/apollo/node_modules/js-base64/test/yoshinoya.js","hash":"ccf15415070404cdabd7e5d0afd701ded1b1fd6e","modified":1365425592000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/hyper-schema","hash":"552aaa9921cbeb19c2c9b485e64965f7a98e22fc","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/json-ref","hash":"9f121cedcda14cbdd55e2fd80a96e289d9a1f2f9","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/links","hash":"5f1601142843a6028beb35cef8b851413a4dfa91","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/schema","hash":"4b500e66b7c4a36bc4d3ff6da089d6228c54f94c","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-04/links","hash":"92cd269ccdfe3f3bc673205133cb9940afa465c4","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-04/hyper-schema","hash":"362194bf4c6690db17b848c1a796ef747bf7a6c1","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-04/schema","hash":"7a6839ef21cf49fd6bdc687be7dbfbb92c97ac7c","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-00/hyper-schema","hash":"a5972bcc99abc4936ff350f116a69390f8ac99e8","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-00/json-ref","hash":"b5f7e93c3edc2eb501e913441ddfdeef0c04386a","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-00/links","hash":"490c91fb104a16a76290377797a5411d21379614","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-00/schema","hash":"253c4fcfccaf49023c10a1a92d81cc3d21344e8a","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/lib/links.js","hash":"9d0d0289e4dd2840778b88834f17bad854b013b5","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/lib/validate.js","hash":"97195ad80d4a217293a8bc240ee44c0c89a7fe79","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-01/hyper-schema","hash":"51802f7884c813fe2a002776aa97a440c7442d9a","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-01/json-ref","hash":"2132a5a9319f8bf190040b49150e005e0916ed22","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-01/links","hash":"09b2131c15d754a61a1baf1158a8e6c73644287f","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-01/schema","hash":"10942d74811e1e16425e6219b0ba808b493321ab","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-02/hyper-schema","hash":"117eb70efaa120edeb97caa6ca7e53eae8f761e2","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-02/json-ref","hash":"31b76b211e24e56b0ff5ae3ba739835039cd96b8","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-02/links","hash":"f8a835ea08959ceca9682cf1c30df6d5cf9ff033","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-02/schema","hash":"ba84a3e7e9332328db986a1123084f2a6dba57f7","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/test/tests.js","hash":"f3f322d2cec777f57df41b071818a05e97d35f2a","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-stringify-safe/test/stringify_test.js","hash":"4760401b04513ae7eb79fff0e1239a9947a8af78","modified":1431999690000},{"_id":"themes/apollo/node_modules/isarray/build/build.js","hash":"711567b86256a86ed22bd637c35786d13e0f73b3","modified":1369676297000},{"_id":"themes/apollo/node_modules/json-stringify-safe/test/mocha.opts","hash":"98216b4fbc2e0c1c17ee946b02272a26fcc1f4c1","modified":1431999690000},{"_id":"themes/apollo/node_modules/liftoff/lib/build_config_name.js","hash":"3283cf779e3ad756b710a2c617273ee0508ba850","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/lib/find_cwd.js","hash":"6b801187337e161c0679c49aec6bd82772d23650","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/lib/parse_options.js","hash":"6d6d65bbd16f1adbcd880367301b4c3f878f7f09","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/lib/file_search.js","hash":"c6ea43a5d84183d36c0fd40f622e96ed00319dae","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/lib/silent_require.js","hash":"b6384ce85576382e6b7c38be5a570607abe4977d","modified":1458739161000},{"_id":"themes/apollo/node_modules/liftoff/lib/find_config.js","hash":"0d676969eeb307616a43cce750906ee40d41ffec","modified":1458739161000},{"_id":"themes/apollo/node_modules/jsprim/lib/jsprim.js","hash":"b6fb3f70d3ba7ce276c625e0dd5cb7dfb0af67d1","modified":1444953536000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.compat.min.js","hash":"c13a20ea314c9ac4ad3e1777e2e28005aad0b092","modified":1427729433000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.underscore.min.js","hash":"27c1f9f657ba13277ef48b5cb425c75ea69ff20b","modified":1427729433000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.min.js","hash":"3400d1295b3f94d65c3dd30f338298c22f50b817","modified":1427729433000},{"_id":"themes/apollo/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/all_bool.js","hash":"d5f1721995050d6d9de35c56222e578d6a2a8b5e","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/bool.js","hash":"a0ef26a085e4d5530ea59880049cf7aeeaf9bead","modified":1438902415000},{"_id":"themes/apollo/node_modules/minimist/test/dash.js","hash":"0fe20783b683b525cb3ff6872474ac6fd89a8b63","modified":1438902274000},{"_id":"themes/apollo/node_modules/mime-db/db.json","hash":"e939c0dbc4ece9e04a3a36bcab40a544d32d7ad5","modified":1455558380000},{"_id":"themes/apollo/node_modules/minimist/test/default_bool.js","hash":"71da47b49e90b77c88caccb077c1bcfb555399f1","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/dotted.js","hash":"edbda6ea34cff9e7dc3fe1953b72eca2f955cda9","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/kv_short.js","hash":"e87208f3f2695b7de0c27e234bc4810cd6d49b8e","modified":1440424577000},{"_id":"themes/apollo/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/num.js","hash":"6a52983a855113284f2aa9633876c1adf3710463","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/parse.js","hash":"a9672d89e1623b05aed85a4b4afcfec7fbaa359c","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/parse_modified.js","hash":"310215056f588e8c04e92f0cf6337ca28a8e0d78","modified":1438902274000},{"_id":"themes/apollo/node_modules/mkdirp/bin/cmd.js","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1419626841000},{"_id":"themes/apollo/node_modules/minimist/test/stop_early.js","hash":"dc728f383a53ce9e44c9c1c21360bb7ad71d6205","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/unknown.js","hash":"b55d1e1d6ff269730e4578a108f4c340e70da262","modified":1438902274000},{"_id":"themes/apollo/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1438902274000},{"_id":"themes/apollo/node_modules/mkdirp/bin/usage.txt","hash":"682ca66d4def0ba4af814be4e6363eff5fcede0d","modified":1419626841000},{"_id":"themes/apollo/node_modules/mkdirp/examples/pow.js","hash":"6d34dfc0f5f17a971dee0f5ba40eba5219bdd803","modified":1419626841000},{"_id":"themes/apollo/node_modules/mkdirp/test/chmod.js","hash":"ee02690748279a5bad6179dd3feeb66a48d330c8","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/mkdirp.js","hash":"628f2dbd4137f64e69454708ba513870b85af4c8","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/clobber.js","hash":"4d00dc55c23f21600adbceb6760587b3ca861626","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/opts_fs.js","hash":"8dd756971f7443eb340b846acee0c17cbadbcb87","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/opts_fs_sync.js","hash":"0f949a29099c6206e617d6e9e39cb3a41d0daab4","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/perm_sync.js","hash":"1759536f89220a608a3987a3038cbaaa0e7458ac","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/perm.js","hash":"11382491d90f70fce17e9d183765c343c7870c3c","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/race.js","hash":"237f49a5262bc2c668653897e8cc1af8eaa5bd89","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/rel.js","hash":"2488c0b77bc0419a4646c7d0bcfaaef5651995a5","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/return.js","hash":"dc2bf5dd5eff2e6a914fc1f731f50ac887ef9d31","modified":1419626841000},{"_id":"themes/apollo/node_modules/mkdirp/test/return_sync.js","hash":"ef9a789aeb65bafbbb7bceb048dc33ec24a41e3b","modified":1419626841000},{"_id":"themes/apollo/node_modules/mkdirp/test/root.js","hash":"b034b5fdf0da3932263437d9d52b53642a2b40ad","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/sync.js","hash":"22a3775a59d8994c368e5574ba8ffbe19c8b8648","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/umask.js","hash":"d08a2f100ddc37e563e548fd9f7730599009824c","modified":1431568795000},{"_id":"themes/apollo/node_modules/mkdirp/test/umask_sync.js","hash":"917a95e95427eecd9a0cb7807e0ab6ab3c653fcc","modified":1431568795000},{"_id":"themes/apollo/node_modules/multipipe/test/multipipe.js","hash":"c531b074f8cbeac2d4e8cc85f7d26864dba314bc","modified":1411971507000},{"_id":"themes/apollo/node_modules/lru-cache/lib/lru-cache.js","hash":"d4091806568fef3089f4522f09d5976d91912dd4","modified":1448475000000},{"_id":"themes/apollo/node_modules/lru-cache/test/basic.js","hash":"caffd5539b398fb1f369ed259c14dc4d00eda244","modified":1448474452000},{"_id":"themes/apollo/node_modules/lru-cache/test/memory-leak.js","hash":"5b5690f4e32c4d2fc501e7f408fdcfd25f8b4e3a","modified":1435688444000},{"_id":"themes/apollo/node_modules/node-sass/bin/node-sass","hash":"637e7399f64bbf0e819987c2198123792dfb2045","modified":1447231540000},{"_id":"themes/apollo/node_modules/lru-cache/test/foreach.js","hash":"5493ce987892f9c740837c36acd5240d9cf93644","modified":1448413217000},{"_id":"themes/apollo/node_modules/node-sass/lib/extensions.js","hash":"6625a87fbc4492b971ef5b383e9098ff63d7e9e6","modified":1447231540000},{"_id":"themes/apollo/node_modules/lru-cache/test/serialize.js","hash":"6383a06c3f56cce6eb364b66f2301eea00db5828","modified":1448474452000},{"_id":"themes/apollo/node_modules/node-sass/lib/render.js","hash":"1d2bec70e6b328cde34056735735928c852935d3","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/lib/index.js","hash":"c2f48482ac50aca057327d4a6e5eb8c101961627","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/scripts/build.js","hash":"e92fa420f3c1baf6f5b1de0a37ff534015c7fce2","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/scripts/coverage.js","hash":"89208120e8ada3fced6f86aafc5f84ca527ccac1","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/scripts/install.js","hash":"074416a488ea47150226cf920986c2f4fad81c6b","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-uuid/benchmark/README.md","hash":"783d814c48583b086ffd8b701a53844f799e7d0d","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/benchmark/bench.gnu","hash":"26bd5d465f2588f4ebda09b9aa28f3fecffb9f4a","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/bin/uuid","hash":"cc4874ec4258ffff8b743227a3619f895941b563","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/benchmark/bench.sh","hash":"3f8daeb462ad5609c63fb8915efc4fa870a8fde5","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/benchmark/benchmark-native.c","hash":"8d999ba3178ae2683a7ed30b9ff115fe9d9f41bd","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/benchmark/benchmark.js","hash":"82dfd78c7f35bd52a84259e9afc36018f41bf58e","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-sass/src/binding.cpp","hash":"fde76bc5a41b6f49ca31df0e1dba56ef2f020719","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/create_string.cpp","hash":"9578220d13449a66f49b267417c7fe15ca49f9a7","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/callback_bridge.h","hash":"c584c91cda288457d1d7c9fc47f172716e371cb4","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/create_string.h","hash":"a3360fda6250570ce49895da9f74f64025fc7b03","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/custom_function_bridge.cpp","hash":"2cb9c9b8ae24c5bf8d883c6a62ca686c4867a541","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/custom_function_bridge.h","hash":"fb9c783ff54334da2b15f8304b9e7d38cceb3a79","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/custom_importer_bridge.cpp","hash":"2ac2f61e4a71be348e3bf368a121ef07310922ac","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/custom_importer_bridge.h","hash":"93af40feb85f2ad004cdbd471017246d4b00538f","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_context_wrapper.cpp","hash":"43f0bae87ba1c508d1b806402868cbf7e3093821","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_context_wrapper.h","hash":"b842131bf82e83047a8bfb5859affcaece08422a","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass.gyp","hash":"4f1df3c70d11cbb8e2e82469a21a24d9aeefeac4","modified":1447231540000},{"_id":"themes/apollo/node_modules/nopt/bin/nopt.js","hash":"f2a561712df0e004c712bfd6c9b0fdc70cc26e8e","modified":1447359143000},{"_id":"themes/apollo/node_modules/node-uuid/test/compare_v1.js","hash":"ac9c80da67f4b232b0aff05c4160deda00dda2e6","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/test/test.html","hash":"287decf793ae25e5cffda0f5a118a41ccf54fca0","modified":1425583776000},{"_id":"themes/apollo/node_modules/node-uuid/test/test.js","hash":"bd765f9091cfd101f0679e45330ce04a62266453","modified":1447291212000},{"_id":"themes/apollo/node_modules/nopt/lib/nopt.js","hash":"d3dcdbce19312c5473deb7e38672a2d5e034af79","modified":1447364058000},{"_id":"themes/apollo/node_modules/nopt/test/basic.js","hash":"83220640df8cb4211523fca22cdbf9d1094d07ee","modified":1447364293000},{"_id":"themes/apollo/node_modules/nopt/examples/my-program.js","hash":"de3d4a6a7f350fd6846d3ae06334d1fafffc7054","modified":1447359143000},{"_id":"themes/apollo/node_modules/npmconf/test/00-setup.js","hash":"882d3dc1fddb1aea4813826b72dd624218b40f88","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/basic.js","hash":"15975904ceafb28146cc3234cbd457085be2f2c6","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/certfile.js","hash":"74f13d2371957c7ac898ad1d314c2f814aec0db4","modified":1404232147000},{"_id":"themes/apollo/node_modules/npmconf/test/builtin.js","hash":"43723f58bd176a792a21bd12beede08a4ac75f76","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/credentials.js","hash":"049eaf88374564d44c7b245a4d972e7955bec0d4","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/project.js","hash":"f8734437e658b7a96b1fb14b861aede1e4ddfacf","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/save.js","hash":"3320bac9e4502a2c3046a5bf011d59b25905e766","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/semver-tag.js","hash":"a0bde0c2e4d4fd577779a9d85b4bc54f7a43d070","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmlog/.nyc_output/64998.json","hash":"8aad72e8ccb670af5fddfaae05cf61a51c41a1a6","modified":1458084891000},{"_id":"themes/apollo/node_modules/npmlog/.nyc_output/64996.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1458084891000},{"_id":"themes/apollo/node_modules/npmconf/lib/find-prefix.js","hash":"a30917e412237df9f37b75f00ba52d9a5806be0c","modified":1400019293000},{"_id":"themes/apollo/node_modules/npmlog/.nyc_output/65000.json","hash":"90918e327cc367428caa5ba7506f87a9e2dd60d8","modified":1458084891000},{"_id":"themes/apollo/node_modules/npmconf/lib/get-credentials-by-uri.js","hash":"5a11accc134f6bccea4d6fd3e4e9d8a26918241f","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/lib/load-cafile.js","hash":"fe086ba94b300c398dfb359bd8870112cc37dd3e","modified":1404234606000},{"_id":"themes/apollo/node_modules/npmconf/lib/load-prefix.js","hash":"df9ff2aba108493cd41d33aa558d206caea1fc3b","modified":1404232147000},{"_id":"themes/apollo/node_modules/npmconf/lib/load-uid.js","hash":"842498e1d0dee0dd45f98b91c914ca4b64de813b","modified":1400023506000},{"_id":"themes/apollo/node_modules/npmconf/lib/nerf-dart.js","hash":"72f6b6c313b56be468c7872235a29897ffbc6dbe","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/lib/set-credentials-by-uri.js","hash":"d1b79b2f2ca0ac3743ebe8b9c4aab5e4095461f0","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/lib/set-user.js","hash":"cdb3de9b80edabefb4b55e364569ef465c5e40a9","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmlog/test/basic.js","hash":"8499ebd31b6852088e74c54d19ecfb915ed51db5","modified":1452645460000},{"_id":"themes/apollo/node_modules/nan/doc/asyncworker.md","hash":"d08c62b641082ffdd635f7048201f975730a3223","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/.build.sh","hash":"b0f618e8e13d67bbe76b421f1320aa79fd663fca","modified":1452349051000},{"_id":"themes/apollo/node_modules/npmlog/test/progress.js","hash":"ae863ed4456354d41189f3ce0deb9f88cce1ed0a","modified":1458088415000},{"_id":"themes/apollo/node_modules/nan/doc/buffers.md","hash":"379d606e2e03de0cbe5ca3f28d6267b59da7986e","modified":1444248499000},{"_id":"themes/apollo/node_modules/nan/doc/converters.md","hash":"87a44ab8436a0a2c5ca5878fb0e3b40d067c3d9c","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/callback.md","hash":"ffe38c04228985bece1442a891793cd3b438e625","modified":1444248499000},{"_id":"themes/apollo/node_modules/nan/doc/errors.md","hash":"1eacf4e82465545bdc5b7def1cf0ab27b003b03d","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/maybe_types.md","hash":"545e51098bce1a351784d1f9cca9f19f93302929","modified":1452349062000},{"_id":"themes/apollo/node_modules/nan/doc/methods.md","hash":"450accc8b6aacc34146c4021a1edcddd6c5faefb","modified":1452349051000},{"_id":"themes/apollo/node_modules/nan/doc/node_misc.md","hash":"a6e668fb8cb18a5a2d2f32b6b2db2a7284d614f7","modified":1452349051000},{"_id":"themes/apollo/node_modules/nan/doc/new.md","hash":"342778da9fdf2393a7de91a922e8d89d1baf7568","modified":1444248499000},{"_id":"themes/apollo/node_modules/nan/doc/object_wrappers.md","hash":"562c6b37edc2d16c36f231aedce4d5ea427c074e","modified":1452349051000},{"_id":"themes/apollo/node_modules/nan/doc/scopes.md","hash":"1ec6947eaa9b7cd384129c826e4048ab8920b2a6","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/script.md","hash":"5b150c97506b154aa270e8ba2fd4c01a8f631236","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/persistent.md","hash":"43a25f5b31914f9fc6e8ecaa15b8064790f96e9f","modified":1444248499000},{"_id":"themes/apollo/node_modules/nan/doc/string_bytes.md","hash":"f2d9b8259c38fc4fe88f1f1324273481ac0d328e","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/doc/v8_misc.md","hash":"a31716bd78f1fac323a714e3108ddf6be1a32d44","modified":1452349051000},{"_id":"themes/apollo/node_modules/nan/doc/v8_internals.md","hash":"0d417bca198f1700d7b3d866c23355dd0eb328ed","modified":1444248499000},{"_id":"themes/apollo/node_modules/nan/tools/package.json","hash":"c8b6de0212f33be85f01aea1581791bd14aa2a73","modified":1444243260000},{"_id":"themes/apollo/node_modules/nan/tools/1to2.js","hash":"e37a19a2f75556de8756befc2a3fc5a3d5bbd3fe","modified":1452350885000},{"_id":"themes/apollo/node_modules/nan/tools/README.md","hash":"a5103d8b2150ba5fd2736fbb6fd2a2a819596244","modified":1444243260000},{"_id":"themes/apollo/node_modules/node-gyp/bin/node-gyp.js","hash":"1ff34646635921971502632a4fcb1ebcaa199866","modified":1441510208000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/AUTHORS","hash":"d0e5a4b44624f46f39d260c8dba38fa7c92616a6","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/.npmignore","hash":"b0acf915c54d2c6ef53be580ed2045225a3b02d8","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/LICENSE","hash":"bf937839a52f92d28bffa571afddea9457590135","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/DEPS","hash":"41ce810363b73010fad61b2aa1a3ee26f75da966","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/PRESUBMIT.py","hash":"581507692ebe13106e1dc8ffe09d8da0aac58183","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/OWNERS","hash":"b462aee1c6c401b3c709a746e9400677c2ffbeb2","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/codereview.settings","hash":"4ba57626280b6695ced1cffac8cebe51e6783bb5","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/gyp","hash":"eedffc4ec86c7a01539fd6487780f1fbffdbfdee","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/gyp.bat","hash":"2aba80f0187605b8eaca0015060d5cb06a50cf31","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/gyp_main.py","hash":"6e523092ba3228c46f6a1ef9596e2b87ccb96e8f","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/gyptest.py","hash":"8898e88a69354cbc4f7bc36c6fc4b16ceeb88314","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/setup.py","hash":"d9ba6706d23bd3748a604c4be0e471db0ed783a9","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/lib/build.js","hash":"c8dab87e58bb20775159ef9d7b2ef92df30a253a","modified":1447867413000},{"_id":"themes/apollo/node_modules/node-gyp/lib/clean.js","hash":"4a7840810ff55e27ac57da4c932afeb052b64f9f","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/lib/find-node-directory.js","hash":"d6940ee990578ed9dd0e1e0f60e6c37e0fefc4f3","modified":1447867413000},{"_id":"themes/apollo/node_modules/node-gyp/lib/configure.js","hash":"8571ee7f2e0e826e98a6f3cc7831e7e0b7663362","modified":1448373973000},{"_id":"themes/apollo/node_modules/node-gyp/lib/install.js","hash":"1f792afb4392f667222b43d8cc2c5b61db24edee","modified":1449752899000},{"_id":"themes/apollo/node_modules/node-gyp/lib/list.js","hash":"544e50b19ff85499b8ae920ee7c577a47162c13e","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/lib/node-gyp.js","hash":"38bf3d32b105c9e4a407689c9fb9919d3890d9ef","modified":1454417623000},{"_id":"themes/apollo/node_modules/node-gyp/lib/rebuild.js","hash":"f63b682adfde4636ddf1d78bd44a5b6d00d3be11","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/lib/process-release.js","hash":"3d9a35b23df38e739ab05364131e6a9a927a1620","modified":1457114811000},{"_id":"themes/apollo/node_modules/node-gyp/lib/remove.js","hash":"ec59ef23b3e76c1c5328ba9d921e3cf5d4619b0b","modified":1442917196000},{"_id":"themes/apollo/node_modules/node-gyp/src/win_delay_load_hook.c","hash":"35bdffb3132f52a4384e44db4f34a46eee1880f4","modified":1448450691000},{"_id":"themes/apollo/node_modules/node-gyp/test/docker.sh","hash":"597cf702514e1a4dbce50cf23fa1bf874fefd778","modified":1457114811000},{"_id":"themes/apollo/node_modules/node-gyp/test/test-download.js","hash":"d2b1ac7a25f9e356445e7f4d36329d2705d9d91a","modified":1449752899000},{"_id":"themes/apollo/node_modules/node-gyp/test/simple-proxy.js","hash":"5c92660c944841ab4e6e0d45e86d913fff9bebc5","modified":1442917196000},{"_id":"themes/apollo/node_modules/node-gyp/test/test-find-node-directory.js","hash":"8379c36994141a24aafb7ff67c7735f9856ab3be","modified":1447867413000},{"_id":"themes/apollo/node_modules/node-gyp/test/test-find-python.js","hash":"b0eb0028c283c22e279b1e7008d2e8ff37ac864b","modified":1448373578000},{"_id":"themes/apollo/node_modules/node-gyp/test/test-options.js","hash":"88780f4f2e3b825f3bdcf63fa4a2c21787ee1ebd","modified":1447956625000},{"_id":"themes/apollo/node_modules/node-gyp/test/test-process-release.js","hash":"4bd47d24f745633c91d9fcdfe539d0b203b1ac28","modified":1457114811000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/extract_description.js","hash":"1461754e50fbc41a07c9901c0134dd0fcd5d23c5","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/make_warning.js","hash":"05365fa27673c928d41ddc3bc829dde8d3596aac","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/normalize.js","hash":"3b6f9fc8cdae8bf70a958c23c19ff90f744a66ed","modified":1446502955000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/fixer.js","hash":"2af9dc00857295406683526e96bf38429006c693","modified":1446503165000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/safe_format.js","hash":"8de801866f2130d179c58a80859de373d0902efb","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/typos.json","hash":"ac98f675a2997b8e9aa20d2c4fbd0b463559b27d","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/lib/warning_messages.json","hash":"7de7cefb0162febf4b6d90f620f7d76a481cc3bd","modified":1446502955000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/basic.js","hash":"8367f23d974a7a4f1dd03fa22a141ce4ade51590","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/consistency.js","hash":"fc1f758f59c05d4ec43c43a74f3a084feb1e7ab0","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/dependencies.js","hash":"4134afc1df993ec221f41505a8e0c73d123045e8","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/normalize.js","hash":"98f92b75714b5baea6fa1c541b52f07c7d58d9da","modified":1446503172000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/mixedcase-names.js","hash":"9c5f50310cec52a4de1df83bfb65c3a4e7968316","modified":1446502955000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/normalize.js~","hash":"d4f3c2b546298e8cf44b82c038e49387a3246d17","modified":1446061759000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/github-urls.js","hash":"481bb4a3511d5212568e98746d11cff569217574","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/scripts.js","hash":"8594ad3aa2dc1856b4fb3c71181816d834a85600","modified":1446502955000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/strict.js","hash":"e39e97d200df0b9c1259a81c961b3b83fbba8f69","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/typo.js","hash":"2e8459e57ddf199b9f8317991943a66d535a364c","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/scoped.js","hash":"1aaeba84eba166e0f79728d7210c8341816768dc","modified":1446503165000},{"_id":"themes/apollo/node_modules/ordered-read-streams/test/main.js","hash":"6e33a77658db30fdcca90c688a857fe3c95d74b3","modified":1390065149000},{"_id":"themes/apollo/node_modules/orchestrator/lib/runTask.js","hash":"50f560d4b1f758c0f37d33d9eb60541a15fe75ae","modified":1406012903000},{"_id":"themes/apollo/node_modules/os-shim/lib/os.js","hash":"0f769e2d0d3d4e1303313b57c5c4816ee18bf630","modified":1438904009000},{"_id":"themes/apollo/node_modules/os-shim/test/osSpec.js","hash":"0baaab3e97486e430648ae7ceb9a358ec9a982cb","modified":1438904009000},{"_id":"themes/apollo/node_modules/parse-json/vendor/parse.js","hash":"b7f1be3c267dfd856fe8b3877cca1621c14bca27","modified":1440511563000},{"_id":"themes/apollo/node_modules/parse-json/vendor/unicode.js","hash":"4cb780a918311cbc4d1c7ab08b1611b29c51b4a7","modified":1423609182000},{"_id":"themes/apollo/node_modules/path-array/test/test.js","hash":"d4437b1c20d00566d43130f730eee400edc362b8","modified":1415745451000},{"_id":"themes/apollo/node_modules/postcss/d.ts/at-rule.d.ts","hash":"2cc739112cd574522a48c5b08fa55a7442172b1b","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/comment.d.ts","hash":"f466746f5f3aceac7011a1fdd9a1a74a93299afc","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/container.d.ts","hash":"9a00c34b7c4508ae8a300b06968cfd6080aac95e","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/css-syntax-error.d.ts","hash":"bf7bfb1a80dbdd070bb4ece2bb0d2583f265da1a","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/declaration.d.ts","hash":"5f18d895e64891a22e784fdb54959bdb9cb35eb8","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/input.d.ts","hash":"0dc8bd45ae71da1ae69c9c54b67abde3120bb5bb","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/lazy-result.d.ts","hash":"c6c0f6203ea7af03d6606cc9ab26b948b86c26a7","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/list.d.ts","hash":"517aba674455dc169a9fad22a6d8dd72f5d96cb5","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/map-generator.d.ts","hash":"59842de6c92452be50cbfebac5feb06f8bd840e1","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/node.d.ts","hash":"1573f48052ae6852cf8bf87e27e97583f6b2382f","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/parser.d.ts","hash":"a72ed0e403d8ddddffdd89a564e0c3e764f7871f","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/parse.d.ts","hash":"9fcde692344aa928cbc8c9050be365e8e0d8af59","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/processor.d.ts","hash":"a851019c9627eab7a6fede8a6111ca21ae72e03d","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/postcss.d.ts","hash":"093f3d92e7f20e6f63ff64eb5bd6f1c625dc7271","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/result.d.ts","hash":"ea1ba8ee8e7ba2075cff868a8aeb06b575751b0c","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/previous-map.d.ts","hash":"5fb895d74ef121d147bdffdeaadb63e2e3bfa8af","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/root.d.ts","hash":"50b45f7304f14969b3b681e2f5f15c61a6506c75","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/rule.d.ts","hash":"56ac306904634209fe5f517a9f2e0b5799a6cc56","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/vendor.d.ts","hash":"5da2590497142892d9529c82665bf4155c7e607c","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/stringifier.d.ts","hash":"7eca8489217c95879c53b2a602d48e55d489d227","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/stringify.d.ts","hash":"0006382204d47501f75bae10f5b48d1f816578d8","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/warn-once.d.ts","hash":"aeabbd34fbd99d5ac8764d803734d070e6fd6f1b","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/warning.d.ts","hash":"c7fe645148e24bc9f72c3d52d1bb601c905e33b9","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/d.ts/tokenize.d.ts","hash":"f7e84b2efcb1ad429a3638a7f56fd8e33864eee7","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/docs/source-maps.md","hash":"c7f2f6aa841201b53e114e98abaea7f622d52dd5","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/docs/syntax.md","hash":"06e385cbc649dc8d417084007267433929f80a3e","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/docs/plugins.md","hash":"6681f11aa66ffc95b35f00f76911d0de37a251e6","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/docs/writing-a-plugin.md","hash":"618653cf4eb720bae66464f1ac183c1b8c229d6f","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss-value-parser/lib/index.js","hash":"ea2f7855b5b2b45fa6452cad4f042d337d37cecd","modified":1455811986000},{"_id":"themes/apollo/node_modules/postcss/docs/api.md","hash":"cdfd2183f4d787f8146a3a406e3e8b1e25e45c31","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss-value-parser/lib/parse.js","hash":"49fc5e45e9ca4166c628ddac669739e008e44f87","modified":1455812326000},{"_id":"themes/apollo/node_modules/postcss-value-parser/lib/stringify.js","hash":"d8b4df451f47c5ea91a6533abace58f48c7965ab","modified":1455816959000},{"_id":"themes/apollo/node_modules/postcss-value-parser/lib/unit.js","hash":"7d7cfd699ba6337c1db202ae44088f02bbc8983e","modified":1455812555000},{"_id":"themes/apollo/node_modules/postcss-value-parser/lib/walk.js","hash":"202c62eb04975af57a492e25543d9945257dfd4e","modified":1455811355000},{"_id":"themes/apollo/node_modules/postcss/lib/at-rule.js","hash":"d9f06aaf8813e563a1840dc77f160c6188fa28d6","modified":1456942221000},{"_id":"themes/apollo/node_modules/postcss/lib/comment.js","hash":"a83850aed0822d0d604a8b4c877000225ca37f40","modified":1456942223000},{"_id":"themes/apollo/node_modules/postcss/lib/css-syntax-error.js","hash":"56ae51b9dfe39d643ac86ce34a1fa45d9fd8ce4b","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/container.js","hash":"3757329c610364407eefc3ff3dbc9538bd92caf2","modified":1456942223000},{"_id":"themes/apollo/node_modules/postcss/lib/declaration.js","hash":"1cf8cc98df6009aa586cb718409c9897425fe111","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/input.js","hash":"b0402abad7e9930a4f02064dacbdde63c8ed5b4e","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/list.js","hash":"80eede1269e2858ecbc5ac445be00dce123c3b67","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/lazy-result.js","hash":"39fdf7bdf825ea7036ec06a19a6274e24409eb19","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/map-generator.js","hash":"9608674a67d9447fe69ae99bef35b138fec7a1bf","modified":1456942224000},{"_id":"themes/apollo/node_modules/postcss/lib/node.js","hash":"f6e311ed8768a765bab578cade3cdae0d1b18eeb","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/parse.js","hash":"3c414761d9db211b2c3c559613bb6a0b9007bbc8","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/parser.js","hash":"189530f6f414fee452e1714eba6da3eead9a06d8","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/postcss.js","hash":"a949375ad50558723f428950bb48667c79cb32fa","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/previous-map.js","hash":"bfce98982c532466372090277fe12cca16d12d3a","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/result.js","hash":"250649fc51a6e45f07f7291f8337d062ca98bcb4","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/processor.js","hash":"83b18d85bfbb075139932795e279235daf79446e","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/root.js","hash":"2106d9303a903ffdcff19680c07bd9080286a9e2","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/rule.js","hash":"c2490636584c21233bf8ebc6dbd44c776128c3df","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/stringifier.js","hash":"35ecaab3405942c7e113475bd59bcc3299720859","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/stringify.js","hash":"2b3c1121a1520b8632e07e24a13723c59b50cad3","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/vendor.js","hash":"8cd2f377ae524fcfc73aa81b9c6aad0c20f52736","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/tokenize.js","hash":"a41d33e1316900da688459af3455ce10a925da60","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/lib/warn-once.js","hash":"20579abdabd9a48a65cc9a6b8e20c2b8fd6d2f05","modified":1456942225000},{"_id":"themes/apollo/node_modules/proto-list/test/basic.js","hash":"55897fe0340c7d4559585a656faed42038dc969e","modified":1402427411000},{"_id":"themes/apollo/node_modules/postcss/lib/warning.js","hash":"5d4e3c67d11a036c9d0701aadd8e853df7045df7","modified":1456942225000},{"_id":"themes/apollo/node_modules/pseudomap/test/basic.js","hash":"dccd686c9c0f397d56318e99c89fa29fe4db84c2","modified":1448663157000},{"_id":"themes/apollo/node_modules/osenv/test/unix.js","hash":"d19b391769597d66de38a13f0fa62ce2c3447b8a","modified":1425590976000},{"_id":"themes/apollo/node_modules/osenv/test/windows.js","hash":"dd4d9181342cc461fb89cebdcc09309d208b717a","modified":1433168737000},{"_id":"themes/apollo/node_modules/qs/lib/index.js","hash":"227523195233e42a48c20f75a1ae350c6bcc5b47","modified":1453052046000},{"_id":"themes/apollo/node_modules/qs/dist/qs.js","hash":"60cd92865753d081909e1f144ca3c7f2776764ee","modified":1454565581000},{"_id":"themes/apollo/node_modules/qs/lib/parse.js","hash":"f85546c13d4cae0f65b3bb3693cc92e18636abe3","modified":1454476108000},{"_id":"themes/apollo/node_modules/qs/lib/stringify.js","hash":"13ad633bc102f2e839bec988fe2df187db87e6d8","modified":1454565046000},{"_id":"themes/apollo/node_modules/qs/lib/utils.js","hash":"b4614510e0a35009a95de16f2f7a19dc8bbf9265","modified":1454476108000},{"_id":"themes/apollo/node_modules/qs/test/index.js","hash":"3d9a66ca5549d2dd32f6a56c4ba0472498fb68a8","modified":1450861863000},{"_id":"themes/apollo/node_modules/qs/test/parse.js","hash":"b7041aee47eca551b475d405957a019e61296bf5","modified":1454476108000},{"_id":"themes/apollo/node_modules/qs/test/stringify.js","hash":"f8d811cab7f0d9749da66599ff94d7b438b095b6","modified":1454565046000},{"_id":"themes/apollo/node_modules/qs/test/utils.js","hash":"5f25e2ef762a18cff8719d88a1748840c1626d89","modified":1454476108000},{"_id":"themes/apollo/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1408532090000},{"_id":"themes/apollo/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1408532090000},{"_id":"themes/apollo/node_modules/readable-stream/lib/_stream_readable.js","hash":"d8753b22761edd53c7e36c6f79704e747fe77d20","modified":1408532090000},{"_id":"themes/apollo/node_modules/readable-stream/lib/_stream_transform.js","hash":"1a99f4c8363c8703aec10d9bcff0586d64be7fe5","modified":1408532090000},{"_id":"themes/apollo/node_modules/readable-stream/lib/_stream_writable.js","hash":"916ef7a43bcabf95090be69b0231a10ec67f6921","modified":1408532090000},{"_id":"themes/apollo/node_modules/rechoir/lib/extension.js","hash":"6391f6545abbe4366b151bd1ed04d7920d303697","modified":1437567224000},{"_id":"themes/apollo/node_modules/rechoir/lib/register.js","hash":"ba2fb2759ab7c5d8a5cfcc042f53440fbf36e6f3","modified":1437567068000},{"_id":"themes/apollo/node_modules/rechoir/lib/normalize.js","hash":"8d8d46c6e77c6f08136bed31b1d88971341fc841","modified":1437567068000},{"_id":"themes/apollo/node_modules/replace-ext/test/main.js","hash":"c2a1bb4a9e9d6972268d50adea27170c56156da0","modified":1393363682000},{"_id":"themes/apollo/node_modules/sass-graph/bin/sassgraph","hash":"983e1581a6c68c99ccca85cb709081aa9a79c01c","modified":1430718059000},{"_id":"themes/apollo/node_modules/semver/bin/semver","hash":"95e0a5fdac7ea5824aff144c4416ca4a31b2ea6f","modified":1413420141000},{"_id":"themes/apollo/node_modules/sass-graph/test/test.js","hash":"440ddf9caa8892b3a179eecf501dd396bc59b819","modified":1454293183000},{"_id":"themes/apollo/node_modules/sass-graph/test/test.parse-imports.js","hash":"12443ec72bcc955990c7f49699b1ed6164d4681a","modified":1430718017000},{"_id":"themes/apollo/node_modules/semver/test/amd.js","hash":"ccad9d5517ed6d00ca48b4bc8771ec6760b3a4c9","modified":1371509390000},{"_id":"themes/apollo/node_modules/semver/test/big-numbers.js","hash":"872ac0774f3f343ccfd02ca284c07fa075cdce62","modified":1427475356000},{"_id":"themes/apollo/node_modules/semver/test/clean.js","hash":"7a88bbd0388d1e2eede4a8dd9a9ba6210d7a39e9","modified":1412103158000},{"_id":"themes/apollo/node_modules/semver/test/gtr.js","hash":"7359784e6c5e19855b9e32a2ef93f4df3a6d9d17","modified":1412119384000},{"_id":"themes/apollo/node_modules/semver/test/index.js","hash":"cea38436e24a1bc57347b06eda0d761dba49f732","modified":1432937866000},{"_id":"themes/apollo/node_modules/semver/test/ltr.js","hash":"69d7e8e5a76df2dd0928837fb929093bafe2fd1f","modified":1432937866000},{"_id":"themes/apollo/node_modules/semver/test/major-minor-patch.js","hash":"c0f36d7d593f43792b7e0bea967ee138168300e6","modified":1423771405000},{"_id":"themes/apollo/node_modules/semver/test/no-module.js","hash":"c542818ea235b00c16f83f88924a6ffacee07d9d","modified":1410475074000},{"_id":"themes/apollo/node_modules/resolve/example/async.js","hash":"81b7d65bc2d3329697cf4847822849f4590915af","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/example/sync.js","hash":"a81c28a9a2473e0f63d7feed93029349f7a447b9","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/lib/async.js","hash":"9ff056e44b6ebbf43a88410d8b2f1e3accb3e330","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/lib/caller.js","hash":"18d495659a2e6c4b36bbaa1b4d2bbcd89867117a","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/lib/core.js","hash":"d014ea3be8eae21507b66222110b070dd31cf351","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/lib/core.json","hash":"47ea3eee70b112a68fe6191072c1504378d3bbf7","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/lib/node-modules-paths.js","hash":"e21592de851ebe7f26fbadab1a35f868a2c63965","modified":1453598718000},{"_id":"themes/apollo/node_modules/resolve/lib/sync.js","hash":"538a24292f34a594cf1b263284fcf574df1cd408","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/dotdot.js","hash":"20900f96fdfaa2a8845f376560e0aca4b07bb80e","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/faulty_basedir.js","hash":"1dad49c92585795bc49796a3a19616d0a7cdc4f6","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/filter.js","hash":"d6094902c110b029e3b3a8b5a711e2e5d14a6546","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/filter_sync.js","hash":"a1c927d406a881f499e830e894bcd887e0bdd4a9","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/mock.js","hash":"f07cae76fe6144ebce0534734f688dda0f8644bc","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/mock_sync.js","hash":"56676bf99dd20c33751d537741487f18116e1f16","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/module_dir.js","hash":"7b5651424e6b17dc983d97dbb5e6f84944a2297a","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/node_path.js","hash":"418200a128045517eb7d5161341443ef26d29822","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/nonstring.js","hash":"c1920b5d3e4d206e92cfaece68057d926a59fb78","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter.js","hash":"2c354a71b3e699b001b21a9f2b77ce46153f8d6b","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/precedence.js","hash":"367a49e4b83e4b0a2f66647cebc7a1a9a2763626","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver.js","hash":"6f1cec85d2e80c408302436c08e5f7da1187836e","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver_sync.js","hash":"c4cb1bed29e27394d4d947fad23a36d3d75d81b1","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/core.js","hash":"ea67c8d03f00b2fb5036c53cf0dbb2bd739a1970","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/subdirs.js","hash":"f3c7f34593422d07cd1a31d0ef8eb2292cb13de7","modified":1441654384000},{"_id":"themes/apollo/node_modules/request/lib/cookies.js","hash":"0b2a641d706209af1f92176a507f382e06b44379","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/auth.js","hash":"56bdda40a7df68f69c68cd256258017783e70d12","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/getProxyFromURI.js","hash":"2e7c16e357f885401208174ad1f341b084965253","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/helpers.js","hash":"5fb7966b0c3aad3bf2054efc3d0605a32ef7d48b","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/multipart.js","hash":"66acc47cab8b774688502be7752501e4a44d3cda","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/oauth.js","hash":"8663a55221a216cc32d655f83086979ae9e666a9","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/querystring.js","hash":"b78be4d88327f11499fbf86610d0612d803b1ff4","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/redirect.js","hash":"08b710fe22cf8e28b2fecdcaaadb76923361299b","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/tunnel.js","hash":"97336f00dd29c7fdad5550e9ae4daf57d587d034","modified":1459234696000},{"_id":"themes/apollo/node_modules/request/lib/har.js","hash":"a4b894d836e3bd947a5d8afffec04128bf934fe5","modified":1459234696000},{"_id":"themes/apollo/node_modules/sigmund/test/basic.js","hash":"6424a3fd17afb57e34890c0c330ead99ceb5af25","modified":1344873467000},{"_id":"themes/apollo/node_modules/signal-exit/test/all-integration-test.js","hash":"9600bc9cb2a9a43a0543d1c10cf71d9afec8d12f","modified":1432533129000},{"_id":"themes/apollo/node_modules/signal-exit/test/multi-exit.js","hash":"c0098d44dd476cab502008d4eab56f210e07fb4d","modified":1432533530000},{"_id":"themes/apollo/node_modules/signal-exit/test/signal-exit-test.js","hash":"e019b8f95aa8b8c843a04cb12836f7522fb653c8","modified":1432521683000},{"_id":"themes/apollo/node_modules/sntp/examples/offset.js","hash":"5b78885677fd2f0eae4c2fb6c04c2d6e2f39bf49","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/examples/time.js","hash":"9a7e69f5ee15afc381ce433cfa867bff405ca81d","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/lib/index.js","hash":"eeed7222493e633069fe267f915f7d13b12df094","modified":1409946595000},{"_id":"themes/apollo/node_modules/sntp/test/index.js","hash":"bc5aae767cff3fcd90a9a4b2d6ec0e6fea66988f","modified":1409946595000},{"_id":"themes/apollo/node_modules/source-map/dist/source-map.min.js","hash":"5bc8311d5d3cd21b4bf6d38701b99e7294384e0b","modified":1445614125000},{"_id":"themes/apollo/node_modules/source-map/lib/array-set.js","hash":"945d47956af4c9f3ff95c8f6dfdd383e9fa23972","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/base64.js","hash":"83ce429caf5d76227dda997c73b30fa9552d2d13","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/base64-vlq.js","hash":"2e6197d07b07abfd74c46fc220c88e58ee7baa99","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/quick-sort.js","hash":"c25073542f5ad5755c664d65af1684aa66415075","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/mapping-list.js","hash":"17e364789b08b9b87db48ea521b09c9ae884970f","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/source-node.js","hash":"f6d672869e17ef8a264334d85b5173ed69bcc470","modified":1443048085000},{"_id":"themes/apollo/node_modules/source-map/lib/source-map-consumer.js","hash":"fb7610ba4404d7b5fe7e3fb42e42402b0687cb5e","modified":1443048395000},{"_id":"themes/apollo/node_modules/source-map/lib/util.js","hash":"042c5279946065bec52f117660ca3fb060f813b2","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/source-map-generator.js","hash":"eec10cda9ff1826c2d25b074a983ebed2a480a26","modified":1441897559000},{"_id":"themes/apollo/node_modules/source-map/lib/binary-search.js","hash":"6fd9fb92539f4fe447bcfb02f3ddb9575e42be53","modified":1441897559000},{"_id":"themes/apollo/node_modules/spawn-sync/lib/spawn-sync.js","hash":"608284f0f984e545456783e51bc37877dcce7d8c","modified":1451833372000},{"_id":"themes/apollo/node_modules/spawn-sync/lib/worker.js","hash":"c14bece4fe41e229e5eb39fe3737080401ba0d38","modified":1451833372000},{"_id":"themes/apollo/node_modules/spawn-sync/test/test-spawn-fail.js","hash":"5d267c2f1d77c3b0f0d1b35997382a50018f6248","modified":1418838986000},{"_id":"themes/apollo/node_modules/spawn-sync/test/index.js","hash":"35cb05532fafe7d71e91b3a181f08bd9b93d67e5","modified":1451833372000},{"_id":"themes/apollo/node_modules/spawn-sync/test/test-spawn.js","hash":"9365b8d948edc19cf562963d06b9c38186e336e3","modified":1389407457000},{"_id":"themes/apollo/node_modules/spawn-sync/test/test-spawn-timeout.js","hash":"73fb8fde314042fd997436efa6a475a994e9db49","modified":1421301961000},{"_id":"themes/apollo/node_modules/sshpk/bin/sshpk-conv","hash":"fea08967162027695aed134d117056a5b789d188","modified":1452039039000},{"_id":"themes/apollo/node_modules/sshpk/bin/sshpk-sign","hash":"e187df199ed0e1c1d782f679b4742df047919854","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/lib/ed-compat.js","hash":"a05999a5907f0027ba834b8ee4e819380a5108ea","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/lib/dhe.js","hash":"de6f67e80ebce95a5272c75afcf05ea84ac45b3b","modified":1449005123000},{"_id":"themes/apollo/node_modules/sshpk/lib/algs.js","hash":"95cac832aaaa1d70d2a18bd42559a147dafbf11b","modified":1446856544000},{"_id":"themes/apollo/node_modules/sshpk/lib/errors.js","hash":"94532c1445e72de790269b42a85741ac597c37e4","modified":1446856544000},{"_id":"themes/apollo/node_modules/sshpk/lib/index.js","hash":"1e6da7fba9b778c1791755723fb286b3d72d8b97","modified":1446856544000},{"_id":"themes/apollo/node_modules/sshpk/lib/fingerprint.js","hash":"1d34b04f4b70508da86cbc87a4a4c16206189930","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/key.js","hash":"fa8bce41330b09c7cda81be71b15772a57590eab","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/lib/private-key.js","hash":"a2d90ebfebf92206b78fba754ea43af97ac80841","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/ssh-buffer.js","hash":"e0a58a30c41e44e08e098467384b56a33f7c3213","modified":1452039039000},{"_id":"themes/apollo/node_modules/sshpk/lib/utils.js","hash":"9dcea6ff1a1026a57b235f4608fc08480efa05fb","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/signature.js","hash":"9ca03d95eded537101b3b7e9f0537f3cb5e0217b","modified":1447889453000},{"_id":"themes/apollo/node_modules/stream-consume/test/tests.js","hash":"29526367d73a53fc7b16fbba3a160ffe75726a75","modified":1405911548000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/memstore.js","hash":"ecd6269063fe718d5b46d4127ff9d12065660a90","modified":1433972674000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/pathMatch.js","hash":"3d403b8aad536db9e97eef4915eb01ef53405323","modified":1432572908000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/permuteDomain.js","hash":"700be205b7d0d3b4c4f442b7dc1b3299d47bf55d","modified":1432572908000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/store.js","hash":"bcce2205e56bb588b4e6cfcd48a34610a5eccf82","modified":1433972674000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/cookie.js","hash":"ac5f4f53137c1a065d446eb96dfc724d14bd57ee","modified":1457558394000},{"_id":"themes/apollo/node_modules/typedarray/example/tarray.js","hash":"2586ece42108d56cd07ac4a74f77c55c2ac886f6","modified":1386646587000},{"_id":"themes/apollo/node_modules/typedarray/test/tarray.js","hash":"6a61121e85e22cb1a7f4add55aef97d450e3583a","modified":1386631816000},{"_id":"themes/apollo/node_modules/unique-stream/test/index.js","hash":"76236d024585134039fe5a66e381a0bc9e3eaa31","modified":1379343519000},{"_id":"themes/apollo/node_modules/tar/examples/extracter.js","hash":"5d8e2fc93644c2ca104784eeaf20ace3beaefbe2","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/examples/packer.js","hash":"0ac22b0e315bab4f3f2868dfb042284f1e2ddcbe","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/examples/reader.js","hash":"cfad58596007c29f55e81c3f2ef0cbeb36fe405d","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/00-setup-fixtures.js","hash":"478d75b7e2f9f7e1ff2f67de28bc200dfec2f954","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/cb-never-called-1.0.1.tgz","hash":"905212798798b872f044c27b121a89f9dc6acc36","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/dir-normalization.js","hash":"69f737fb6122594c3ece01ed496bf1993b8bb1aa","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/error-on-broken.js","hash":"f25a0ce92dae3c121813eeb92c030a89f4c7ac25","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/dir-normalization.tar","hash":"a639e5983c0f19acf71640690805db289c615f0a","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/extract-move.js","hash":"671800188ee6ae088149cf3d397baba1ac7922bf","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/extract.js","hash":"17def7f8737eb5c57e01c216cd8e0dca06ce5d7e","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/fixtures.tgz","hash":"da2704914886317b2cb3d72f320ce260d9cab255","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/header.js","hash":"12629717346691f14ad95ac6eee7e6ce77b54f12","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/parse-discard.js","hash":"8a179a875af81c7591861cdb84421fad4a4bbf8b","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/pack-no-proprietary.js","hash":"c36cb44365b2464abf06e7544e1c8c24aca83165","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/parse.js","hash":"6308611e1f2a1c0e5861e880a6933e3df3a166b5","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/zz-cleanup.js","hash":"1974a7ab552f18e6b80a0b49e54d11ce79c48793","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/entry-writer.js","hash":"f9b75bb753e430b2230368ed08eb72593974cb01","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/test/pack.js","hash":"88dcf40d91cde99fd8fff61da7afa64bddca0125","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/buffer-entry.js","hash":"b35d31f896a337c570f9c190eeb47ec9856363e5","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/entry.js","hash":"c2bd4992c618912cd4f97a24ad2a08abb3cb1c2b","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/extended-header.js","hash":"2c7ddebe2574be81d74108f93eeb82bba51b6ce5","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/extract.js","hash":"e129e091bf774bd55306c83b236fc6a88439bad5","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/extended-header-writer.js","hash":"b0de18dcef271e4155ce5ea54fe338d2ea30454f","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/global-header-writer.js","hash":"290abcd884f307f01b5976f64513ada8123d369e","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/header.js","hash":"df2b7d40396b1196c12ac98f5edd71dfc82f0784","modified":1441849626000},{"_id":"themes/apollo/node_modules/tar/lib/pack.js","hash":"a947d14daaeb9da1200effbbae8e1dd546bcafbb","modified":1441849626000},{"_id":"themes/apollo/node_modules/verror/examples/levels-werror.js","hash":"e6d95f8c3af86fe246ef883197c28df6b4884eb6","modified":1360175300000},{"_id":"themes/apollo/node_modules/tar/lib/parse.js","hash":"2b111ca0c4d1cc9b3774de8b173c780992f06481","modified":1441849626000},{"_id":"themes/apollo/node_modules/verror/examples/varargs.js","hash":"67c7570a5aa82ca71690b558a3f3d1d321a7508c","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/examples/werror.js","hash":"10e842ef7ad2e6901398304c963c6ef1f44efcca","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/examples/verror.js","hash":"8513abb6a724947494c7513adfa27d76931488d6","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/examples/levels-verror.js","hash":"f8e7f3d3dbce6e61b53ea2a49a63111d156cf18e","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/lib/verror.js","hash":"def5538e73a39e2d14388970751c55e55f9b06fd","modified":1360175300000},{"_id":"themes/apollo/node_modules/verror/tests/tst.inherit.js","hash":"298dabcdd9eff7081ee06a2b87e1118651190c9c","modified":1360175394000},{"_id":"themes/apollo/node_modules/verror/tests/tst.verror.js","hash":"947c77e0a31ea025d156d9323d8a7283bf87871a","modified":1360175300000},{"_id":"themes/apollo/node_modules/vinyl/lib/cloneBuffer.js","hash":"434a91be54da878952c3128a9b47cf6521268426","modified":1409296013000},{"_id":"themes/apollo/node_modules/vinyl/lib/inspectStream.js","hash":"7ee432c397a0d55d6a7ec0c60550819f016652cb","modified":1409296013000},{"_id":"themes/apollo/node_modules/vinyl/lib/isBuffer.js","hash":"aefbbd2bd806d061500533727e9867be7e2b861b","modified":1438723554000},{"_id":"themes/apollo/node_modules/verror/tests/tst.werror.js","hash":"6b4007d450a8dfb9311ad86f44e3a7817fdeca53","modified":1360175420000},{"_id":"themes/apollo/node_modules/vinyl/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1409296013000},{"_id":"themes/apollo/node_modules/vinyl/lib/isStream.js","hash":"fe040abc25abf6b00173ebc661da4c52960b5e69","modified":1387591573000},{"_id":"themes/apollo/node_modules/which/bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1444242830000},{"_id":"themes/apollo/node_modules/which/test/bin.js","hash":"1546e3e71b83ac38f4f7dd9990ba6a30b59c6f83","modified":1444242894000},{"_id":"themes/apollo/node_modules/which/test/basic.js","hash":"165bfb79858936736967e16f0ca936da4cac0c57","modified":1453774317000},{"_id":"themes/apollo/node_modules/which/test/windows.js","hash":"52b52021508ec575e4c72c026fd6b4fb3b519bb5","modified":1453427910000},{"_id":"themes/apollo/node_modules/wrappy/test/basic.js","hash":"be9621bb5c8a73660c26c049805cfdfd8adb5b3c","modified":1411082093000},{"_id":"themes/apollo/node_modules/yallist/test/basic.js","hash":"2a5fec5750c0e572b0766b765630c84c7d0e38bc","modified":1450554731000},{"_id":"themes/apollo/node_modules/yargs/lib/completion.js","hash":"c6b42f85a1b277af518e874c85ad8a3372cc215a","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/lib/parser.js","hash":"44da675b52d65faab5ad8419771fad5a102447a6","modified":1452838315000},{"_id":"themes/apollo/node_modules/yargs/lib/tokenize-arg-string.js","hash":"09a8af7dac77372a3eaafacce18da57e65e787a6","modified":1452491870000},{"_id":"themes/apollo/node_modules/yargs/lib/validation.js","hash":"83412c0cd901237d7d91380ee84880eadb4fda33","modified":1439059377000},{"_id":"themes/apollo/node_modules/yargs/locales/en.json","hash":"f7f3d8d7a8a8367bb6aeed19cc850f598b5c8464","modified":1439528555000},{"_id":"themes/apollo/node_modules/yargs/lib/usage.js","hash":"bd4f76268f9d093a88d9fa04dc3b4b62bcef5f80","modified":1452491870000},{"_id":"themes/apollo/node_modules/yargs/locales/de.json","hash":"ffcb949051e2a24feb3411a3e9e438b6dfbc41cd","modified":1440020119000},{"_id":"themes/apollo/node_modules/yargs/locales/es.json","hash":"e0496c4ff926a1c72141bf12fcea5feb1b5c6ac9","modified":1439528555000},{"_id":"themes/apollo/node_modules/yargs/locales/id.json","hash":"33f77c9fb11ac72f4d56e1c2f97ecf6436a69768","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/fr.json","hash":"b1750db0f960b4041d335f3bda2f79ab52b21f49","modified":1439528555000},{"_id":"themes/apollo/node_modules/yargs/locales/ja.json","hash":"3c7babc2acca76784bd1e0521bc1793ddeec7bf8","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/ko.json","hash":"8c8c8efd420b8cfd0f46ea54e7bc863473cafde9","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/nb.json","hash":"e59b7beb20a18b9d1ab8bcec6076870f609475af","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/pirate.json","hash":"36c58937b254ae548d9c5bde0b686f5b51e7eccc","modified":1439528555000},{"_id":"themes/apollo/node_modules/yargs/locales/pl.json","hash":"34a0e25894873eded51e616b93f18f77c7b83f46","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/pt.json","hash":"156d95fc019083afcdfc0ded0eafbcdd466a3cf3","modified":1439529106000},{"_id":"themes/apollo/node_modules/yargs/locales/pt_BR.json","hash":"a8f5b2dc5e9e8a6b30231b63c1e6c67b5ac8e42e","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/zh.json","hash":"7b7c12fc6a41516254f336dd14bcc23752091288","modified":1449111809000},{"_id":"themes/apollo/node_modules/yargs/locales/tr.json","hash":"33ed2f793625641a85ea6efd5aaa062c7fae8e13","modified":1449111809000},{"_id":"themes/apollo/node_modules/hawk/images/logo.png","hash":"7b9844914960e180d2f243d74a50f2b4fa23fbdb","modified":1447968927000},{"_id":"themes/apollo/node_modules/hoek/test/modules/ignore.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/test/index.js","hash":"f9112be27168572ac86d62b7abfdfbf94661c8b6","modified":1442857555000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/package.json","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1400025206000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/mug.coffee","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/mug.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/source-map/dist/source-map.js","hash":"55c2813fa36324399eae49a35fbbf71e79b59f23","modified":1445614125000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"cf23e3cf90785318212053b2e1be44a31a3f7085","modified":1460383750000},{"_id":"source/img/flexbox-container.png","hash":"6145f4dfb2fe53e03157cc873140284e9c3b6332","modified":1460440267000},{"_id":"themes/apollo/.git/refs/remotes/origin/master","hash":"ca28d83359000c6b50751f7cbb0e4441ee5b793c","modified":1460383820000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1453369844000},{"_id":"themes/apollo/.git/objects/pack/pack-7cf4d21c6325dc4bb95bb09837f66b70097ec5f3.pack","hash":"37ce0ebf9146d728fb983a11c648721b343e81d5","modified":1453443598000},{"_id":"themes/apollo/node_modules/ansi/examples/progress/index.js","hash":"24cdce431211efc73ae6cc61aba05a6c3e8c29f7","modified":1426184022000},{"_id":"themes/apollo/node_modules/ansi/examples/beep/index.js","hash":"aab8b4f5c513d02b3be10dfc4c73c93e16c042e3","modified":1426184022000},{"_id":"themes/apollo/node_modules/ansi/examples/clear/index.js","hash":"7b00443efe706b7ac20e843515087b4b379d5e16","modified":1426184022000},{"_id":"themes/apollo/node_modules/asn1/lib/ber/errors.js","hash":"556bbb1b810ede9292493a70ad9a8644e5c4fb7a","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/lib/ber/index.js","hash":"1ab39535ed24903d0f9e2a4bf74333702842080b","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/lib/ber/types.js","hash":"8a41886747dc1f7cde7e4e5cb60e1a3b8a4c813c","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/lib/ber/reader.js","hash":"3cfcdc9225bb43dd8413dc3f1f05d4fcd32d0b30","modified":1443646115000},{"_id":"themes/apollo/node_modules/asn1/lib/ber/writer.js","hash":"bdad4a0bb12fb5f91b789329fc4e4a45ecf87e64","modified":1443646115000},{"_id":"themes/apollo/node_modules/asn1/tst/ber/reader.test.js","hash":"de84b2d7317393c6e6a0cdef04bfbff82ba78237","modified":1401981220000},{"_id":"themes/apollo/node_modules/asn1/tst/ber/writer.test.js","hash":"59892680384339812688163b346d12cc05e979fd","modified":1401981220000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/background-size.js","hash":"1ae587b05d7f0b2910933545b51f549df927a982","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/align-self.js","hash":"4c99d3713fc7feaefd961a789f94f1bd8d6c55c1","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/align-items.js","hash":"2cafebfb941352f6cf8e70e83e41051962456fc3","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/align-content.js","hash":"ff4ed2d1b4be6162e4590b6cb11a83c93519c057","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/block-logical.js","hash":"bfa60779fd5e75cc5ccb7b2a464e5c0c1a94d99d","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/border-image.js","hash":"c6e74838cfa4985b232ef3af928ed44c0ca488fe","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/break-props.js","hash":"7496f21d0a03ab7bf257f2ff9a372e72fd720723","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/border-radius.js","hash":"2361907705fcd4dfaa45722abb6d6a4f66c0bcb6","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/cross-fade.js","hash":"a64eef61934b3d410f9cd50582b1a0c44f83c00e","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/display-flex.js","hash":"d28333be85b4dc29cf9e533011cc8c0f9c1e29a6","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/display-grid.js","hash":"d80d431744da51a17ea7bf3c2a359b31bc921df8","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/fill.js","hash":"e6d606549ec68f2c0b0edab4bb2bb9e33496256f","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/filter-value.js","hash":"89446f819d34412d657b3ebb6bea630417d024c8","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/filter.js","hash":"68f5c4dd1ef028f69ef0b6849f7af839310e6224","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-basis.js","hash":"ce1c0cfa6b3415bf6d7130207fe078227c142918","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-direction.js","hash":"dc8b98f26f8bc8af926ddd78de96ce896cc0c147","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-flow.js","hash":"496f72908259679d0493491328927fff416e7cde","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-grow.js","hash":"103b5436087a553bd5e104148729862e8b1a5c04","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-shrink.js","hash":"d1b71073d7b061237e3ccfde36cc440651e19d84","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-spec.js","hash":"bf77b28d6f8662b72f4ff6c50b3e8805203e291e","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-values.js","hash":"2efd89cd3591fe58121dbffd63d0cefd497a66ac","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex.js","hash":"311f63ac1b370abdb5554f4b8561f5a2d1b3d2ac","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/flex-wrap.js","hash":"49f0426d45f7a2e61f558c56c9459a861ef39246","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/fullscreen.js","hash":"b9a8054f1ec83be10e2cfc57b83ae3e5f68fb26e","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/gradient.js","hash":"1c4e2c92ebebcc6647dd07d00e48a7c1db2a31d6","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/grid-end.js","hash":"695dcea4da5badd52070142d2e77dcbe0b95ef6b","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/grid-row-align.js","hash":"70464116dd7c1420de01c80e8c1432a0a0a5b438","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/grid-start.js","hash":"7dfbb40a2ce7d9285196f870e5e195d788e8d4d8","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/grid-template.js","hash":"a9b2e9fac9d19be42fc22bfc89b399ec519c9194","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/image-rendering.js","hash":"dd8bf38bd3d4bb1b061d0f77bda49bc2eda4f73c","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/image-set.js","hash":"07629dab22579d7ad5ca5f0f2c4d065f86b2171a","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/inline-logical.js","hash":"0e537ab50ae67a4e97c7d257324cbd89260d8d23","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/justify-content.js","hash":"5d0a690a0f1f422a6c15d1d2c342253f7e5cabc1","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/justify-items.js","hash":"2de11575745374791fcf8593624e1ad9a9e12d2b","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/mask-border.js","hash":"4efb207a473c4f5d8a72f65e7817393c69fd7fc0","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/order.js","hash":"87f02851da7fcced7664423dcb70424ebaf73066","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/pixelated.js","hash":"3d31a57459362f49d8d1f49fb98de1981b1cc296","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/placeholder.js","hash":"7c887ec2b7f41581eb2895d5b35006aafc722411","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/text-emphasis-position.js","hash":"b708b1c745b2eedf37418eb9b3937e8d8fb387d8","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/transform-decl.js","hash":"8147b17b8ec03131a837dcc476698768771dae83","modified":1459623888000},{"_id":"themes/apollo/node_modules/autoprefixer/lib/hacks/writing-mode.js","hash":"ad4d59cb106a7d3a70441533e162192e6797ece3","modified":1459623888000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/package.json","hash":"1b427a1101bdb295c399b3dbe28b922d10072152","modified":1460380283000},{"_id":"themes/apollo/node_modules/bl/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1433891361000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/.travis.yml","hash":"f4f8520976704e518fbf4dfd0327c9c85897cbc1","modified":1457790108000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/.zuul.yml","hash":"0af73c9b9845d91872644251c6d7ae945205e868","modified":1442671065000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/README.md","hash":"91831f48f5af8150b55e5dc8611b71885ed5591e","modified":1457876227000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1433891361000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1433891361000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/package.json","hash":"e3d82a6977c40bdccd6b0a20898455d717ebedd0","modified":1460380284000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1433891361000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/readable.js","hash":"f68ae09e1cfcd9f75f8d43cb82724b3dee5d9251","modified":1434936362000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1433891361000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1433891361000},{"_id":"themes/apollo/node_modules/aws4/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/apollo/node_modules/aws4/node_modules/lru-cache/package.json","hash":"594cd4666996bb2cb776910c24699b6afcae2c14","modified":1460380282000},{"_id":"themes/apollo/node_modules/aws4/node_modules/lru-cache/README.md","hash":"ddf09419a6e0e9df96d90de752d48d54b4089eba","modified":1458666118000},{"_id":"themes/apollo/node_modules/are-we-there-yet/test/lib/test-event.js","hash":"789f7de8bbd4c357d114287391de03ae2c572ebb","modified":1454113848000},{"_id":"themes/apollo/node_modules/convert-source-map/test/fixtures/map-file-comment-double-slash.css","hash":"9b6f2928e5776468396073a872aefddb90903d38","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/test/fixtures/map-file-comment-inline.css","hash":"348825abb6fbf07ae01dbab6cba8d00e92f3258d","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/test/fixtures/map-file-comment.css.map","hash":"5228c8f885528d91f3bd43d4305681dba4e5aaf4","modified":1424357445000},{"_id":"themes/apollo/node_modules/convert-source-map/test/fixtures/map-file-comment.css","hash":"8b4de18027d175bec543b85a0b110acdbb6c93e5","modified":1424357445000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/package.json","hash":"78ebc4ebae13f201a338974a66798327af46ec09","modified":1460380283000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/.travis.yml","hash":"f4f8520976704e518fbf4dfd0327c9c85897cbc1","modified":1457790108000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/.zuul.yml","hash":"0af73c9b9845d91872644251c6d7ae945205e868","modified":1442671065000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/README.md","hash":"91831f48f5af8150b55e5dc8611b71885ed5591e","modified":1457876227000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/package.json","hash":"ee17dcfe1a01721a49b4683baabd2e567b70a832","modified":1460380284000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/readable.js","hash":"f68ae09e1cfcd9f75f8d43cb82724b3dee5d9251","modified":1434936362000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1433891361000},{"_id":"themes/apollo/node_modules/cross-spawn-async/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/apollo/node_modules/cross-spawn-async/node_modules/lru-cache/README.md","hash":"ddf09419a6e0e9df96d90de752d48d54b4089eba","modified":1458666118000},{"_id":"themes/apollo/node_modules/cross-spawn-async/node_modules/lru-cache/package.json","hash":"0c6fecad3b2cc4894086f1546542cb6e0904585a","modified":1460380282000},{"_id":"themes/apollo/node_modules/cross-spawn-async/lib/util/mixIn.js","hash":"914c5b810cbfcbc574bea268700ed3b003852071","modified":1435839161000},{"_id":"themes/apollo/node_modules/dashdash/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/apollo/node_modules/dashdash/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/apollo/node_modules/dashdash/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/apollo/node_modules/dashdash/node_modules/assert-plus/package.json","hash":"48870bec1a617e68a859c947ab8db21e94c48f55","modified":1460380282000},{"_id":"themes/apollo/node_modules/dashdash/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/apollo/node_modules/dateformat/test/weekofyear/test_weekofyear.js","hash":"349f414ec587f90e920fe8e9a11f55b188e5ff2e","modified":1447915155000},{"_id":"themes/apollo/node_modules/dateformat/test/weekofyear/test_weekofyear.sh","hash":"6438e2c97d0c17982bc3c191f71eeab1e47b36d9","modified":1447915155000},{"_id":"themes/apollo/node_modules/es5-ext/array/from/is-implemented.js","hash":"e381f52aef62ee8f55bd4daf227f97bc7a23b672","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/from/index.js","hash":"8c00f9cd862af30d49460a3c081601da28d8ca0b","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/from/implement.js","hash":"abfe621dae18663cbfaeccc88a6f01c03d55f63c","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/from/shim.js","hash":"c82939d9e6b12b5e53387f95285a36c9a83d8f09","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/curry.js","hash":"212c7ecc22be383ea927afbcbd81e6d07c4633e9","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/copy.js","hash":"edc3368e79a0836cf5a6a24d02dec6222111826c","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/compose.js","hash":"7f75c5364dacc043ce1d22cd19e8379cf6325713","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/index.js","hash":"c1fa21674a23bfd9b7631b63b5466899f76adde6","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/lock.js","hash":"707f8207ecb691d0e36d76b6d0b5ffe6ee984ca1","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/not.js","hash":"a5ce13ae9da364c894b5a0fdc761b50adc0e608a","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/partial.js","hash":"2dba3a94c09064ea4f534899ec316fec1f07ae42","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/to-string-tokens.js","hash":"306b2c7851a62d1c357084a67dc7995c9a51ce0d","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/function/#/spread.js","hash":"ebda44d8705b9f9917f8bd0cc2e986beaab4a58c","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/copy.js","hash":"f7e35e4f0df55c87c859466e461eab3df6e190f0","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/floor-day.js","hash":"906701c49647d06d19f47096ca62ab7930a62ba7","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/floor-month.js","hash":"4bf5135d42c0640c6dd2b69887594383756e09c9","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/days-in-month.js","hash":"b30c6637c9d868d3d6e2f0388d141df6cfea59db","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/format.js","hash":"f621d4e0a831f38f53a5ed6d01a2d8336afd4526","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/floor-year.js","hash":"074860b858e0f4a6fd57788c9690f5e15f0c6610","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/date/#/index.js","hash":"3f760ce3700381bd8ee8071942279ce412b7325d","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/#/throw.js","hash":"7e615072b9a593dfc429b775d1232bc55e5d55e6","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/error/#/index.js","hash":"724d3c7a6c0b8e9726334649ab4d64457b58b987","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/number/#/index.js","hash":"e80036e8f1a12a30e9adf0d397c03f2224abddff","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/#/pad.js","hash":"c3a26abc4b7a49e185b2f5f1d1d021a52894ca1d","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/epsilon/is-implemented.js","hash":"1d765672a3b48048cbaaa14a880b38a4af873914","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/epsilon/index.js","hash":"beb6bc3ed645d7af22951f1a03d9a5dd73b681d7","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-finite/index.js","hash":"91de1be2c7d9c8da29004ef804fbe7b38e4feff9","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/epsilon/implement.js","hash":"bbd80e1a58cefe7a1cb25b4bf63eb6a0a568dcd6","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-finite/implement.js","hash":"4cec0e54148b64271f52d31e897bfff618e83c83","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-finite/is-implemented.js","hash":"bb455c11b7e8bf89a151318f72775bb79d305f6b","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-integer/implement.js","hash":"d5a504cdd6b42f294cf018a1b5fa7e385dd7f1e2","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-finite/shim.js","hash":"0bd79f706f98dc7b7e54b27d3942c955f1c80f5d","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-nan/implement.js","hash":"8fd6b5ccf53e3840fea87f16224491a2300a047f","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-integer/shim.js","hash":"8c0ac3b532fdd8f471639d9a804862c286f6fcf5","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-integer/is-implemented.js","hash":"5f656dd82a7cc85266be2ae8902fa8599ff48fdf","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-integer/index.js","hash":"fba720bd9faa7e0c426d5b70f55a565430069856","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-nan/index.js","hash":"d33b7c8bd4c7d0a8f4de0403626bacc882e5620b","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-safe-integer/implement.js","hash":"97f936d2d5e1426805dc094098ed8e8ec62a0153","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-nan/is-implemented.js","hash":"593c6d7c5c8dee8955c5207465898736c3cd42a2","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-nan/shim.js","hash":"fbe62b51e77d2d2cb90fc6f7638c3efb7ee2ae0e","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-safe-integer/index.js","hash":"55ba3a796c7194124bc45bafbbd3b5f9a9468e05","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-safe-integer/is-implemented.js","hash":"a70d67b57e41577905eed0a54b38d54f3fbd95c0","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/max-safe-integer/implement.js","hash":"95b5d54e5002ad001edacf18eb4dd14880fdedee","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/max-safe-integer/index.js","hash":"25a28b4b4ad3d5399fa0a5aec5b7ea7424a31029","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/is-safe-integer/shim.js","hash":"638843716e61e1bc577f63b0016280a1a605008c","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/max-safe-integer/is-implemented.js","hash":"710b5fe3f31f108338493ee8f2ebb6dd3513b362","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/min-safe-integer/index.js","hash":"be3009c043df23f89d63ac76fdb2ab9ba956fc5d","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/min-safe-integer/implement.js","hash":"78afee138367454080b989f85d0ab50ca6c1c4d3","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/number/min-safe-integer/is-implemented.js","hash":"d709f66e8224f2047b13bad0f61d1de8ba12b955","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/asinh/implement.js","hash":"a43621453a5d108260af7d0881f361f53e2fd0d5","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/asinh/index.js","hash":"f8875b1b3bfd35e400838cec4cedfef0d1bc863f","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/asinh/is-implemented.js","hash":"b041a63dc769656ae468f412b4a22775ebf53763","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/asinh/shim.js","hash":"abf557c706f6ce1086926dec82bbf7102b5f69eb","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/atanh/is-implemented.js","hash":"7dd0214bcbf4b91cf8102aa47391a5e5508fd4ee","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/atanh/index.js","hash":"856f902903e01a090d5f30e592b1cc449005a968","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/atanh/implement.js","hash":"8bb8d6839eb234eec355ef76d9d47bca3f7e4c4e","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/atanh/shim.js","hash":"236cb37f32aea97179b6461e8d0586b129684a44","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/acosh/implement.js","hash":"b78f26ed64643487d8d4ac10eb8dbc5f572b370c","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/acosh/index.js","hash":"c4bd8186a7b0e2876448306838754610b19f3d0e","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/acosh/is-implemented.js","hash":"5720195118a380bba17f805007c8b475e3c4092c","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/acosh/shim.js","hash":"f5be8b9dd3772a6f846d8b0348f4b7447d099881","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cbrt/implement.js","hash":"cb27294c16faeefef2964083fd1b2b8d09f35346","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cbrt/index.js","hash":"3e79c3bcd08f07a860bc674c108fe3aaab035380","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cbrt/is-implemented.js","hash":"43e2fa59b0d83a59964f31e6cace90dc9d659e65","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/clz32/implement.js","hash":"257d9642707ac898f811b3bb5be0fe0a7a8bc1b8","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cbrt/shim.js","hash":"52c8bb0e5d921400cc2d26666579ea93d36957e4","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/clz32/index.js","hash":"fa3cab0b64e0bec4150f4f457229ce4fbc384e74","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/clz32/is-implemented.js","hash":"2773df0890f5e9682353a0204493180d80843139","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/clz32/shim.js","hash":"5fa3fe0e4378743d08d370648768ed4b44c18a3e","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cosh/implement.js","hash":"1f03958c62e2ccd376cb2e6272fdda157f427e23","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cosh/is-implemented.js","hash":"c9f4835eb67547c7a54ae0dff9bba272379c2df2","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cosh/shim.js","hash":"08e0460070a339829b3ff57a54bcddd349539101","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/cosh/index.js","hash":"f05acb6b1a6cee52095a735f8ae31dc2a24ad10e","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/expm1/implement.js","hash":"3fb14f95cc2ae6f4f88ff7697a824a176295c032","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/expm1/is-implemented.js","hash":"9cb1b300a153cea035b0ec8b722ec2b501fcdd2a","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/fround/implement.js","hash":"45295118da0f2f7800f737a9545fe3475ec6ac52","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/expm1/shim.js","hash":"9aac953d69cb912bd15e843fa8d40178b8a57a6a","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/expm1/index.js","hash":"8d736240340d65c0341970b70863ec98f4ce7bb2","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/fround/index.js","hash":"297e7fb63e675052d233f7e0ff7ed89a2de7349f","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/imul/implement.js","hash":"93a4e47c6e3df72fab0369e0d0b5919566f8c1d1","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/fround/shim.js","hash":"e3bcb862fe66c591a2c85ace845e2ec4af6d2512","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/fround/is-implemented.js","hash":"7d9771951eb740f9eeb354096b029d35471aef9a","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/imul/index.js","hash":"114e69b668c81f94b57d35a1c1f70f8f3ffb77c3","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/imul/is-implemented.js","hash":"a319ecacebb17d3c2d47607be0db06c3e58074ed","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/imul/shim.js","hash":"c50a8b680e654bf28d3808cd826caa2be231345d","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/array/of/implement.js","hash":"77b1f20401a1e92ca6816db0fc0dc7e99c25d425","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/of/index.js","hash":"01c498ff0d05031f7bd4260b7d2b4c6923b84f6f","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/of/is-implemented.js","hash":"6c0b5720b8344aa567b99110ed13280e4a948703","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/of/shim.js","hash":"e9f9822369e63dbb0aeb1fb769d3e9fa8839ae15","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/math/hypot/implement.js","hash":"398d6a35410851d4cd924b66fdea0498adf1f019","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/hypot/index.js","hash":"3b817da30b16ec5099796df6a4af0d72c77322cc","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/hypot/is-implemented.js","hash":"538d15b2718c9987d132775408c3c8042cfa0741","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/hypot/shim.js","hash":"7e2f528b785f9c18452dd14275a6f58ae596ac9b","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log1p/implement.js","hash":"e243ee67dde5058fd60b80072c5bd5c6fa281572","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log1p/index.js","hash":"983d7f5053678876d921be3eebf94c7c8f2376c5","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log1p/is-implemented.js","hash":"c960ba076906cb809efc6ae586a5cbea0f567c82","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log10/implement.js","hash":"bb9ef1e630b38059961666d252d28e0946abd4e3","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log1p/shim.js","hash":"ed27763b1710af01406b08bf34348a4086e5897a","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log10/index.js","hash":"56348d35959c671e6615d8ac6b5c4a37ca343f17","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log10/is-implemented.js","hash":"149b9fb086822dcb6ffd5390254a606a27c5d6be","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log10/shim.js","hash":"a11d07a8a0be2af50c686c418e5906d5b45a6b57","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/sign/implement.js","hash":"2ae9633d168b1b1aeb216831aadbb8df4f2913ca","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/sign/index.js","hash":"674099e04a9f0839fe643a8fa05e743a7a9443cd","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/sign/is-implemented.js","hash":"c12b127c747f8ca79c64e6916e14ccf1d96534f0","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/sign/shim.js","hash":"cd1d361e52d2580fdcfb3d1a7a4bbd973f3f3c36","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/tanh/index.js","hash":"c4cd344a46bc0d01abd559c7399a22292744b6f7","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/tanh/implement.js","hash":"bde0eb35a952aa009d0718088f32f2e6e986065f","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/tanh/is-implemented.js","hash":"afa102571b74951158b673d479c199adaec89ffb","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/tanh/shim.js","hash":"b43cd7c54fedaf3d5b37c4fee2a36b6e27d661a7","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/sinh/implement.js","hash":"b234f71b46a820d1f8ffe54a22a6780c285e9736","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/sinh/index.js","hash":"9add2eba42d700c0f0edd32db131ae1d2d092ba3","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/sinh/is-implemented.js","hash":"24ecd0e804cc10d9c9a9ffe5fce442d5b279c2b8","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/sinh/shim.js","hash":"587e7a738fd7d2788d01a4c0a7b91649279dd47b","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/trunc/implement.js","hash":"a0c8451b613617d84c6a920429b49b58d28c6a4f","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/trunc/index.js","hash":"e118bb5f149ea76e0e9b55c0c6410f932b015bb1","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/trunc/is-implemented.js","hash":"edca9851bf7464b4863a697c36dc3183ac5b2575","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/trunc/shim.js","hash":"d05790065cf9c545fa664b47180e683c296e2655","modified":1435238759000},{"_id":"themes/apollo/node_modules/es5-ext/math/log2/is-implemented.js","hash":"0db196a994caec0811120e6738d0365333468178","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log2/implement.js","hash":"d65730c3515319696321e48c451b3335a528285c","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log2/index.js","hash":"d72f39ea7988df5bb8b2cf3479b25ad485fb3fda","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/math/log2/shim.js","hash":"244aafeb0c46d7cad9e49d6a5e32d130529e7372","modified":1435238758000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/_compare-by-length.js","hash":"ae78c1942fea6601ad27cdafa94fd5e14fe136a1","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/clear.js","hash":"34dd7f4277430265305d256fc9c963c2a603f215","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/compact.js","hash":"d0bcc1307e9cf5a99c15dc2e015f1ca4e2999ca8","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/binary-search.js","hash":"1d7a38e84bffa23dd455685154c2663a77cd152d","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/diff.js","hash":"8778efddee47a0fb8b18275d2c20bb6d72513294","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/e-index-of.js","hash":"a57cdab778e57f8eb600e670cd34137f86b6a9b0","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/contains.js","hash":"3dd27426e601c5874cb912933fd4cbc81c829b31","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/e-last-index-of.js","hash":"279a6ef9888dc5a18edf71b1b432b0a3489a55d2","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/exclusion.js","hash":"9e7f4a5cb7e6bb523994f8edd7eb10c35245419d","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/first-index.js","hash":"ac491e635f85d6caa28ae8ac2f511837466dd4bb","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/first.js","hash":"bc30db38f4456b4dcb231bec38d987083b3266aa","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/flatten.js","hash":"bf9dc8789d15469e853f506281e11a051c1dd950","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/for-each-right.js","hash":"8773ba0cba7f8e014780501cc87e0fe925927be5","modified":1437038482000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/index.js","hash":"baa4fd0ba4447b2ec0e9fe015566b2bafa38c28c","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/group.js","hash":"ed34454a8175e377b466d3fe7b8d76cd99716af1","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/indexes-of.js","hash":"8c40d1c3465c73367a73b3905b4db314c497fa1b","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/intersection.js","hash":"8fbd79fda2e16cd306700e8750fa57d5efef2af2","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/is-copy.js","hash":"f9a842760a432b51b715aba424950b31b354b106","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/is-uniq.js","hash":"9cd5b2d0920615a5241171d55cfad559ff0d60cb","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/last-index.js","hash":"1926082a27a9d9a082cb6c3d5a472438fdda0439","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/last.js","hash":"55f3054f3bfc21e6eb59c8e1b5ce5c56b4dda746","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/separate.js","hash":"3ec62c17fbaac92bf413e5382bfbcb873575d3df","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/remove.js","hash":"ecaf01cac70d928594221c2e40aa280bb531dfee","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/some-right.js","hash":"df88842f90387c5c4e109d136a0d056d470a4bd4","modified":1437038530000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/uniq.js","hash":"6ace6dcd2ee3d6097f4594cd83001b6cbb253a94","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/object/assign/is-implemented.js","hash":"e582f3e4b838f9485afce646490638272a43a2c8","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/assign/shim.js","hash":"e8d7a4df4ccbd6dd57d3523608d5dc30a9d7d118","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/assign/index.js","hash":"8e48578b639ee49145b78d79ee08d503bbfdee4a","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/assign/implement.js","hash":"a5972d70c5b8ec3e889276461ef4f4b895d99927","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/index.js","hash":"c98bd544769cd6df3c22b2e5d3f32d1dbebaa032","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/is-sticky.js","hash":"e0e3fdbbabe6f5220dd1f747c9c8215a6b26f4b8","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/is-unicode.js","hash":"b2d730166634b677320cfa4de1139a5bf03572fc","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/keys/implement.js","hash":"4b99985d60f54b6b8f9d1bfc39662c064b18179a","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/keys/index.js","hash":"4e914f90e9f67443f82176b29054bed082eee185","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/keys/is-implemented.js","hash":"fcae2ff406c40cd259f210ae7177f16b39e60efa","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/keys/shim.js","hash":"d0eea27d062e3292f2419eaed8cfbd92a65c301f","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/set-prototype-of/implement.js","hash":"4a81f7a2a91a49abade6a0337266b5682322b5d6","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/set-prototype-of/index.js","hash":"bb7249b2ca7b9459bff5a9a2d86089c7f41a6a36","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/set-prototype-of/shim.js","hash":"515dec891c4d9ed0dc62ae010208820de038daa2","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/object/set-prototype-of/is-implemented.js","hash":"885858a11d1921453ec888223d2dfcdf84eaeb85","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/camel-to-hyphen.js","hash":"80cb47b0980f39096f0db0a2b23b50746286d00d","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/capitalize.js","hash":"d6f2e37b6cdc114b8e7e2188225a1a936dfe0a34","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/case-insensitive-compare.js","hash":"bd3f3824a37ba658d81276e567c9a3d9a395ebaf","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/indent.js","hash":"ce936cc0b4362dce481b788dcd3e5fd7d4ba43d1","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/index.js","hash":"3b1c065def8869f8dee34168290259fdc8ad6aff","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/last.js","hash":"43ec22d7c091f73a38312b85df142880d66fd12a","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/hyphen-to-camel.js","hash":"850e52a6fe0d1e5325e0d3d3bd2c795695510641","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/pad.js","hash":"8e25b08051bed13befcb034acafa81e4bd065d33","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/plain-replace-all.js","hash":"1682754de7cc77f7a455a1861b072bb0f9cfabf5","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/plain-replace.js","hash":"bbf2e9fe87eca1c1a942c2e9de05f40bfabc3d8d","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/uncapitalize.js","hash":"4b7fd7ad10e6a91fb7e46bbfbbfe70c9803e4e32","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/at.js","hash":"2dd8b3cead6b46158342b3139367e7c191b4c10d","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/from-code-point/implement.js","hash":"ff74077c57f4950defded8ccf921add45d7471e2","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/from-code-point/index.js","hash":"4d996988d02bd3e834a9f03a64c32c851459bbb0","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/from-code-point/is-implemented.js","hash":"d9940ea64fb2757cf04d401055dee50663220804","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/from-code-point/shim.js","hash":"822e811506985d02fecd4f6a78a5cb5200b765c1","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/raw/implement.js","hash":"ddf1350a850f74526f7e167c6b3f14ac9a9a938b","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/is-date.js","hash":"ec872bedd0981813c5a0fba263b04b27f40e83bf","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/string/raw/shim.js","hash":"9cd5b7f68e4fbc9b98f2946734bfb54a64d3acb6","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/raw/is-implemented.js","hash":"7ef1fa1fd01443e530d2efcf03b21500f09019eb","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/raw/index.js","hash":"e06cb147d8f9e96a5cd1b899273300756640e4e7","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/iterable/for-each.js","hash":"4a056dcbbe8db448826908753b9c0f41199a5bfb","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/iterable/is.js","hash":"67f01082af0e744a57dae65c70b5492cc9e83a48","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/boolean/is-boolean.js","hash":"b3e27eed120a41652c0b105b7e50ccd48c2a9d00","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/iterable/validate.js","hash":"11378651928fcdcd61be45ce452b5a7fa0bf5f20","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/iterable/validate-object.js","hash":"f2c00263f181a792286678034fa2ee99c459c87b","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/valid-date.js","hash":"790d77ee19ae5ce5fde586d70d21bb8ecce221fe","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/_is-extensible.js","hash":"58008a010ea5d9dad98136d47944328b9e4bd1cd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/_sub-array-dummy-safe.js","hash":"07cb2f7aa07eff69347f3ef8bf69ac6c00649db2","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/_sub-array-dummy.js","hash":"07cb2f7aa07eff69347f3ef8bf69ac6c00649db2","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/__scopes.js","hash":"e83185e81a63add4a1a037c2823bb19c6a208129","modified":1437038416000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/generate.js","hash":"70297594142daa477ddd85591f93977da5ecf38e","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/to-array.js","hash":"ff8e8232e4ecd00cf3c01f89321146f70f24d03e","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/valid-array.js","hash":"3b7323d27d3971cc2e4379a623ef1ec591d44b15","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/is-plain-array.js","hash":"7fe1445b88c4bd1c3b92f13cfa755211c7575344","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/invoke.js","hash":"8ff157c799a24bcc921e693acc101271c28ca54b","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/constant.js","hash":"426b143e4363bf3f096599a42909ebdd284b2666","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/_define-length.js","hash":"6f5cd69501565faff3c0faf57800256f4c3336bf","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/is-arguments.js","hash":"a9dab4cab06a1fa46004cfb1ef9838eb5817d75e","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/noop.js","hash":"9078c71b2aef335167095ae0baad29e3dbc49039","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/is-function.js","hash":"1b466ae868c930e564f0ef09d5bb2a3d2fdb8618","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/identity.js","hash":"1c2ff7f99d3f65ee9ae539218d84567000e913fd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/valid-function.js","hash":"eb86f62637bade1b54212408122a83083dbc68e4","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/pluck.js","hash":"b76bcea07b556c715fed61449f0742bbcbe55335","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/error/custom.js","hash":"3d2336bf389d17709350b294ef5bcdf062656e6f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/error/valid-error.js","hash":"04882aece4ef49b697f57482362b484f52769717","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/_unpack-ieee754.js","hash":"1a3f287fb14d79e9bf0cd44fc1c1a40144fc82ed","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/_pack-ieee754.js","hash":"3502a642dccdb1213859c9025c2bb835e056dd06","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/error/is-error.js","hash":"ff9081a7af88bade763edda5decb5a65779592f8","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-number.js","hash":"40aa99476b61992c8a875035504363555f7fb107","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-natural.js","hash":"10c66828e1cbb63e20c602dc731c43abce7bc8c4","modified":1442828220000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/to-integer.js","hash":"10857e2e2f8d8dababfa239f11717673156a1309","modified":1437136712000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/to-pos-integer.js","hash":"6436aa788bfd751d8964a6ef68ece364253d9729","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/to-uint32.js","hash":"898afaf75ea07ddc6428d665d4308231d648f015","modified":1435238766000},{"_id":"themes/apollo/node_modules/es6-iterator/test/#/chain.js","hash":"a1dcf91bf1cbf0ff6c3676a7816e55c1fe56fa94","modified":1435238779000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/format-method.js","hash":"3fab8d2a689ff4efa31f43d32446f95bb979b470","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/valid-reg-exp.js","hash":"c08ea0d31ecd6696acc1737c51b7960f27e1dc56","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/escape.js","hash":"9b7c3314f5132f68feb1d7319bac6aa77a417f88","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/is-reg-exp.js","hash":"68624b6acbf35a1f3e2cd02616fbd14a0e2272f3","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/random-uniq.js","hash":"8ff922e9cb8aa43c5dc17740246b648a98ff1c8b","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/clear.js","hash":"94d4f0b255182a858d27494baba101ad5badc650","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/_iterate.js","hash":"ef4e909ebace456932684d0de226e39dddf28676","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/is-string.js","hash":"5950e5eb5423c11d1e00ad1237b258c2e8aa8645","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/compact.js","hash":"dfd6881afe18738118cae6500a9651d9903cb390","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/compare.js","hash":"48059381d5f7545694053150467b47290f1b77c1","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/copy.js","hash":"84532bf308fa4c0096ab787228497175ad5f52cb","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/copy-deep.js","hash":"2963b0b5c8c1fcac3ac3691cb37175cc5e11669a","modified":1437053250000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/count.js","hash":"a5b694fac7c2755f950c8fde28b50b63933d9bd2","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/ensure-natural-number-value.js","hash":"e5330e1e6553900bf05962eefb788ebb918cfe03","modified":1448532484000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/eq.js","hash":"3b2d10359a053b0a499ef108bdbd4684ad69dcb5","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/ensure-natural-number.js","hash":"2e158b02c1c7897350a68ad2d52c8a6fd5341d84","modified":1448532455000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/find-key.js","hash":"9cf7bc0b6f98752a30069309f1ad47b6b60dd643","modified":1442408973000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/filter.js","hash":"9bb2f2786dc05bc87acb38e35aa843e314ec55b0","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/create.js","hash":"cc93de6530dd3808274771d3744321d6582d948b","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/every.js","hash":"1bc235b2d7f827e8bb8441471b85eed79c8b4427","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/for-each.js","hash":"4ccbcfc15152c8d3e3e3746eca2aa837a52e97f6","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/flatten.js","hash":"5284edd97b892c663b95ab0abba6e2176dc5cccc","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/first-key.js","hash":"10294e7842a25800fc386a7351cfbbdb49618097","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/find.js","hash":"4478f8f7edc2c8714cd5321e29085619286ea807","modified":1442408515000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/get-property-names.js","hash":"fdedd392357d1d224b31787c86730f7b93e2644f","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-array-like.js","hash":"f98652d674a71db8249984f2215091d90907ca2b","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-copy-deep.js","hash":"16926efac119efe814bdd0bac83ff2e1da384dc5","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-callable.js","hash":"5bebf355ec0afa414905ff089357fa3b66051efd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-copy.js","hash":"a62a4ef519285ba6885511d8ec8b70c0b683bc47","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-empty.js","hash":"44a939a7901869c9564eddd71dd120cefaf65eb8","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-number-value.js","hash":"9abf91474bc954392c4ce38872b29161bbef991c","modified":1449840734000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-object.js","hash":"bfe9dfb13c6f04bcccad62b5898023a68f2cce83","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is-plain-object.js","hash":"57c595e9a408cc2a36b10cd885d34934e5953b5b","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/is.js","hash":"4d95853d27f5bfc24a710fcb7edce40e65cb30a6","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/key-of.js","hash":"fe05490f15e753bf44fa024adb6502c1ca632af8","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/map-keys.js","hash":"ae56eb2424065577e4e3fb7580a3167893963768","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/map.js","hash":"b17ca08a12e631f11a4cf52584a94e4cef0200ef","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/normalize-options.js","hash":"b37ffb9294ee2bc67472e48e627fc9ba456bf792","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/mixin-prototypes.js","hash":"2eeb5edc9d3af4f6d5dadd57d273f9d6bdd0c6d1","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/mixin.js","hash":"fea0b44c5c2c62a96216610c96ff6d34e453c017","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/primitive-set.js","hash":"f084d2856a30200299e79d03edb9a79dee6b5ee9","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/safe-traverse.js","hash":"004567940b0755c3256651856831d0f7ff16774d","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/some.js","hash":"0a95ff1d559c797db3b3029c2a847ce35f4815c7","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/serialize.js","hash":"75dabec8b78e6c1669e7403630b54af75e1ed304","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/to-array.js","hash":"474b5687ec7794258c376945d2b52fff21ef6a59","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/unserialize.js","hash":"4232ece60a76d23e8e03059191799d45c50d46d2","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/valid-object.js","hash":"b41428d3579d597d0dd4e32174fda0a075b00a06","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/valid-callable.js","hash":"40c2bf90db0662c24dba344e03186abf48182e32","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/validate-array-like-object.js","hash":"d6b80017fcbb07a32afef73716984fac80868448","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/validate-array-like.js","hash":"886413225500d772b7f3106fe7a25060c42b0cd4","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/valid-value.js","hash":"b7b2938ec255db82c3cc7f8e3b2286f90bea55ec","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/validate-stringifiable-value.js","hash":"e6e475227cb12b04432368c0ac9268b6d74c844f","modified":1435238766000},{"_id":"themes/apollo/node_modules/flagged-respawn/test/bin/exit_code.js","hash":"40624af9ab6a9a649fab3b0fb76e14b55cb64883","modified":1458636135000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/validate-stringifiable.js","hash":"71a2d653a4627f52631e06830c138433f597313f","modified":1435238766000},{"_id":"themes/apollo/node_modules/flagged-respawn/test/bin/signal.js","hash":"ee3b900f9cf7f6b62b0cf71cbeab36418438979c","modified":1458636135000},{"_id":"themes/apollo/node_modules/flagged-respawn/test/bin/respawner.js","hash":"de8526198782c05f5b0aa039f4682f678c44297e","modified":1458636135000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/minimatch/README.md","hash":"fb5bec4ab02467cdb76cdb552613ff0547402439","modified":1407793656000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/minimatch/browser.js","hash":"04c30625df185494a153c238296f5859aed9c963","modified":1437616294000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/minimatch/package.json","hash":"3561fdec50f2d12e2dbe642f35ccafccc514f63a","modified":1460380283000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/minimatch/minimatch.js","hash":"16b28bcabd1eca778c2176d6c49330396907411e","modified":1437616284000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/README.md","hash":"baad5ea68016e9b668194d7ca0969c2485407407","modified":1426224735000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/common.js","hash":"8b512afa64e1c9b387f57509b20999d503f4b4d9","modified":1426225989000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/package.json","hash":"69f2e30fed8ded265cb6bc87cd903b2fe5e68895","modified":1460380283000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/glob.js","hash":"c9fa574abcc02f3774948acc39c957c08dbc923f","modified":1426226723000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1390625747000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1414231540000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/README.md","hash":"3ecce92efae230a3f6debb25a8ce965b25c14072","modified":1414231526000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/glob/sync.js","hash":"4fe72cbca7ae1d6dc58b8a801948985516ff6128","modified":1426226292000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1388359679000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1388359680000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/readable.js","hash":"52d449d64dd584bac6f7fdd9ef5f257046482ba6","modified":1414231442000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/package.json","hash":"511ef800df97a12a56f70e71f604ea0bf39d82d5","modified":1460380284000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1388359680000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1388359680000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1428599741000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/through2/LICENSE","hash":"9111ee4142f0ea90481a6805bfdf840f6e5213d9","modified":1428599741000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/through2/package.json","hash":"b588b5ba661b4ece2bd5367b1a5209aa9cab1d5a","modified":1460380282000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/through2/README.md","hash":"dfcdcd7261144b54eb808605602d2b11256b9fc5","modified":1428601273000},{"_id":"themes/apollo/node_modules/glob-watcher/test/fixtures/test.coffee","hash":"abedc47a5ede3fab13390898c5160ec9afbb6ec3","modified":1397537692000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1428599741000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/.npmignore","hash":"df0230e54e04f0f4739f4cdf671570dced4a1223","modified":1350315195000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/.travis.yml","hash":"b0e08ffb1a32bb17941785759a4154f995139ae8","modified":1344299893000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/LICENSE","hash":"a042a6c4248c82d810b9b617958f222c0de0f6c2","modified":1343093261000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/README.md","hash":"d44c73a135f6fbbc73c54586e74aa35cf802c1b7","modified":1344287108000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/package.json","hash":"d799a7812c3547039b2be322aed43e601d918bfe","modified":1460380284000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1322520827000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/glob.js","hash":"f3efbd66544514b81ffc5f7e9e44da191cf015aa","modified":1361809438000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/LICENSE","hash":"a042a6c4248c82d810b9b617958f222c0de0f6c2","modified":1369627536000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/package.json","hash":"71c121dd5e0955c59ad8bb87dec5a1e167ed8710","modified":1460380283000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/graceful-fs.js","hash":"4d221ed85a222893cd9b37f07d78ecad306c6b10","modified":1373442338000},{"_id":"themes/apollo/node_modules/globule/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1440704194000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/README.md","hash":"c29647b03fe278f98effd353b3df894557b04b52","modified":1367341461000},{"_id":"themes/apollo/node_modules/globule/node_modules/inherits/inherits.js","hash":"0e8b7c5a1e8020e3a93191c12bb0bd529dacfb6e","modified":1302136514000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1372866257000},{"_id":"themes/apollo/node_modules/globule/node_modules/inherits/package.json","hash":"e963adb7ca92e6f280c0c761deb8c47ef22d9743","modified":1460380282000},{"_id":"themes/apollo/node_modules/globule/node_modules/inherits/README.md","hash":"baafb44348cace2d60b31a3663f43e856a7ba282","modified":1302136514000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/LICENSE","hash":"4a1927e74796f06ac7e7a687ca6b44d39c65d8f4","modified":1311966493000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/README.md","hash":"32a95bf2d3d1c5463542d236af28b5ffb12b7d2d","modified":1387173103000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/package.json","hash":"3af88cc42d7409a4d1e898bb3141fa5123ec22b8","modified":1460380284000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/minimatch.js","hash":"66de40ad270165fabe16e5af02fae0ce2d558b7f","modified":1387223424000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/CHANGELOG.md","hash":"d73578d10cb8619c68e6461af85d5595b2da10b3","modified":1453159729000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/index.js","hash":"e9ebb91ae1d90c6eaa5e4ee7df8a7e87af8cce3a","modified":1453157795000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/README.md","hash":"73a922a4d3b5e1449fd5364970aa5179c2be30f0","modified":1453156753000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1445581386000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/package.json","hash":"d93c7a82e00bdcabe8decbdef0c0f4c3ae75b8b4","modified":1460380283000},{"_id":"themes/apollo/node_modules/gulp-sass/node_modules/object-assign/package.json","hash":"e481ef4739fbcd95f7581188a780a5081b22fb06","modified":1460380282000},{"_id":"themes/apollo/node_modules/gulp-sass/node_modules/object-assign/index.js","hash":"476a1f802734b18e265b5dd7a87574dfb2a19eb6","modified":1440073908000},{"_id":"themes/apollo/node_modules/gulp-sass/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/gulp-sass/node_modules/object-assign/readme.md","hash":"237462a8f598833f49e666f62c48a753fe647047","modified":1414015686000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/cache.json","hash":"24dd76d544e1c3c4be343e1a88e9ffad19705021","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/cacheEntry.json","hash":"abb6d0b052b7f624f2e9efd5508c0614c4831b36","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/content.json","hash":"896c9f34e3f38c5687255edcec798bedc98221a0","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/cookie.json","hash":"fc6b61b7f65667ebd270e2daadfc21e6b6aec452","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/creator.json","hash":"b0096cca448769435a9a1dfc8835bc560957fa97","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/entry.json","hash":"161d6c3ab62b4fc423c5aa1d3ee1f67d98c008ca","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/har.json","hash":"9b5debe33b9aa8c6055bb950ca5f19b1a1d82a42","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/log.json","hash":"9c72f7600e6fad2818459e76de0140ed9cb67422","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/index.js","hash":"1bab9e9eb0c54be915c5303ee23cba4faaff0194","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/page.json","hash":"d3ca0cf8dbcc30f33b91b8e8db85982b01cc5986","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/postData.json","hash":"123d9c6853b0e1a33147e2c04404aa33cf53a1ff","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/pageTimings.json","hash":"2661f2488c8bfaec68b30b4e9dee25089277e448","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/record.json","hash":"23a2f8245bfef93b6b87696af51c1e9d4a0302df","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/response.json","hash":"e01a380eeb0b3c87c37f936ebf4888eae55dc3b1","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/timings.json","hash":"4879ffeb448af68307aa46910bd2d3ac2fde9246","modified":1448373288000},{"_id":"themes/apollo/node_modules/har-validator/lib/schemas/request.json","hash":"ecdaba295ca01aeaa9f3f9779d1c94a051af5578","modified":1448373288000},{"_id":"themes/apollo/node_modules/hosted-git-info/test/lib/standard-tests.js","hash":"afc4cfe4a2f5107d37c707b61a3f6d5e2fb0ebaf","modified":1428454391000},{"_id":"themes/apollo/node_modules/hoek/test/modules/test3.js","hash":"4b695a807655475e7d89966828af28b7dee15ec5","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/test/modules/test2.js","hash":"31071671a8bdb854825c1cd90e29c30e9203b9fc","modified":1441988248000},{"_id":"themes/apollo/node_modules/hoek/test/modules/test1.js","hash":"32aceae0ba03e9116b108f41d74bea7d163bb56f","modified":1441988248000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/fixtures/cosmic.js","hash":"94a2af635cae7d0491fce9767a67d06f651e0244","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/allOf.json","hash":"e98aea1d36d932870561f0c32c32fc5858f251f9","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/additionalItems.json","hash":"75644b309367675ce21d8b35b9baee049a58e159","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/additionalProperties.json","hash":"34478026a586b1ff8b96dbe54efdf7515099da7d","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/anyOf.json","hash":"8081feb305d328878b37a7cc3b296eb5544c239d","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/default.json","hash":"17c051cc94a9fb40ad627b04a41d7dce9150e3b5","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/bignum.json","hash":"32b70fb2c2156c979702eec5c18a86c1fe6d0bd7","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/definitions.json","hash":"0963ac4f014a0faf6ad37554c9af03f63dad9b02","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/dependencies.json","hash":"d239f1bb8cfffb7487335c73e02c6cda10d4ef5b","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/enum.json","hash":"4b96cc24245950f9fad0916113a5056d9f51c2e5","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/items.json","hash":"873828cf8ad5d2701022650e99367cb0a89624b0","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/format.json","hash":"3d60bdb3fbb2d47da991e99e51bb9ab241703c44","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/maxItems.json","hash":"580cdb7c89cd07b45f3fdadb2279bb13108b79b4","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/maxProperties.json","hash":"1703d6ef976a74eae8ea6cd21c131853c6ca5f6c","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/maximum.json","hash":"c205edb4c5bd171c9e1f4955f5cc3b94ca78cb0c","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/minItems.json","hash":"176fedc074768c6ec5c7ceb979f23a6a4bd0be58","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/minLength.json","hash":"99eb79755bf43df641900a01e8ac9ff5becec8d5","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/minimum.json","hash":"1a849968c80db05a9ad0a92481edd93dee567804","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/multipleOf.json","hash":"e8c9555c09db80f5398d2d73840358a0aec80529","modified":1456180252000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/minProperties.json","hash":"b61b2829899d8a5f6bbc8bde2b694b69bb35d38a","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/not.json","hash":"5b9567e8409e28b256f3704ca83447f0d0abb707","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/nullAndFormat.json","hash":"8682b818844ecab9f69642d3f121eea59877f6e0","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/nullAndObject.json","hash":"dc0ff1a9b5740271c3e92436a697a50ee8168046","modified":1437940209000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/oneOf.json","hash":"6772cacb066e5458a7fca9a47cfee27b56110d6b","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/pattern.json","hash":"5b09d287b8d5170ba4442429bf5309eae1f3cec8","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/patternProperties.json","hash":"e0080348b213f1d004af7d5c43c2f3f29375224b","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/properties.json","hash":"1aacdf890a9b844c7275f6ad2f3acc2f9100219c","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/required.json","hash":"35b980ec46ea56c7c7c38afc63c84a863d4b3132","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/refRemote.json","hash":"ef0c43623cad9a3ceb7b407272062ca55c1c9c7e","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/ref.json","hash":"a9dd881b0a9d5272897be0cc8550c5a64841fc8c","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/maxLength.json","hash":"3f6273e86c31605607384559df5ee9c92201c5bc","modified":1434031383000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/type.json","hash":"e2e4371fb68d01ecbc7a5022348c0ffd05d1fd9b","modified":1434031383000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/examples/address","hash":"b6e70440f5faf725b978da4e92f6f39100377674","modified":1345750810000},{"_id":"themes/apollo/node_modules/is-my-json-valid/test/json-schema-draft4/uniqueItems.json","hash":"8c9909ffd2abf8f625f81c18a43c789efa369e34","modified":1434031383000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/examples/card","hash":"c1405e471f81bbb4eea94c2ef85fa07195a8ad80","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/examples/interfaces","hash":"9666b12a3d05e526886aa2650f0439d32b25f0dd","modified":1345750810000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/examples/geo","hash":"74d8c66f1ba74c6cd330b8acd5948efb5f2879e4","modified":1345750810000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.compat.js","hash":"41eb73dd63d0732df32e1a8483976c3abd973b29","modified":1427729642000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.underscore.js","hash":"61d3db53b8b711131d87f5d74c2bdf4754e0e933","modified":1427729433000},{"_id":"themes/apollo/node_modules/lodash/dist/lodash.js","hash":"864d4955dce02ae26b48f8c0846e5c62d8c9bdb1","modified":1427729525000},{"_id":"themes/apollo/node_modules/json-schema/draft-03/examples/calendar","hash":"3e53cb296ba1799f39c5a00bc4627fa10e26e165","modified":1345750810000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1372148119000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/index.js","hash":"c69b3860fa8b40337db188fdfb201077df93ef5b","modified":1392957961000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/package.json","hash":"2c833ba49b967d03ea30bd1e517864b3449c32b9","modified":1460380284000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1372145420000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/readme.markdown","hash":"b037b8453fa008383cf7495b3736aa7cc217deb1","modified":1372148196000},{"_id":"themes/apollo/node_modules/meow/node_modules/object-assign/index.js","hash":"476a1f802734b18e265b5dd7a87574dfb2a19eb6","modified":1440073908000},{"_id":"themes/apollo/node_modules/meow/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/meow/node_modules/object-assign/package.json","hash":"8bb3140997460ae831a7356e1d028e2d1f345f96","modified":1460380282000},{"_id":"themes/apollo/node_modules/meow/node_modules/object-assign/readme.md","hash":"237462a8f598833f49e666f62c48a753fe647047","modified":1414015686000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/.editorconfig","hash":"aba1f89214b3b56287fa843c98ceb0283a7777ef","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/.npmignore","hash":"efeb9e0dfd13dea2a03064b4ca1d07988557fbc5","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/.travis.yml","hash":"c524c797c977ef18ab31595b074f841e4c56e14f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/COPYING","hash":"dc6b6d4b9ae804ab0dd95d46d148ee533bec260f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/GNUmakefile.am","hash":"f8ecfbbe556995b5bf9c3b70082e33f88ca9ef1a","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/INSTALL","hash":"43b8a3cf953a0e27840c87cd40c512044aca3840","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/LICENSE","hash":"dc6b6d4b9ae804ab0dd95d46d148ee533bec260f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/Makefile","hash":"b8481a7906ddd4d29d0463c37571472ce641b6a5","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/Makefile.conf","hash":"3f3a476bf498638a6724abcf78a1228cc856d6e0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/SECURITY.md","hash":"7682df2633d251afee93920d5501403c06041b07","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/Readme.md","hash":"25f9ca7da9d8cba8c1fa4e70c8061f39811fa4b5","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/appveyor.yml","hash":"cedfa0190e96dbc50777d63979781d9ddf7da8a9","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/configure.ac","hash":"f32fa8727a9b14f5809b5b1cd3716747a7ef7396","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/extconf.rb","hash":"01e601be6ed04b017afe76da2828a011be4f61f0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/version.sh","hash":"14f9f6a82a7c494d9442330ecbad6617792ead06","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/boolean.cpp","hash":"01bb0ab2ed32f2fd5440f50d6def50bc93208854","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/color.h","hash":"8f5fa0a605981e005f70ec85a59a35700ead43c9","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/color.cpp","hash":"4fbe9ffe9864cd612c0ffbacb48e94c7a7421534","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/error.cpp","hash":"7704eb4e51ac5da80936e437e13849a3ab36c1ef","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/boolean.h","hash":"526f4edb56a5033f6044d63a35c3b517314b99ce","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/factory.cpp","hash":"f5d6a0c5777c7d0a6a2bc735227fb0190510e440","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/factory.h","hash":"add2b90d01eb6aa0740b68c605877d8cea026dd1","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/list.cpp","hash":"341a2b4dcd4120a700e9bd6afe12eaca1df765b7","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/error.h","hash":"b351552e285a215b7172ad5ba82457478c9d4dfd","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/map.cpp","hash":"fc8a23445e59713bca76273cb67ed95bda9b7783","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/null.cpp","hash":"dba9d42a122da0ec644b80ab3b54ee2881d443e8","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/map.h","hash":"06f6a1140d9caca0ad61403b468c31abe12bfb87","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/list.h","hash":"9e6efc8c3812aa91f4e84c999f6090d05d42b19d","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/null.h","hash":"50fe83074196b49237932020fdf9287393cda649","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/number.cpp","hash":"bf60fd900bc85246e11208e2af5e383633e23a74","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/number.h","hash":"1b9061e61e2bec387f3ed80d9ecfd1cfe312a72c","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/sass_value_wrapper.h","hash":"9c60d15e33fafa21beb6982ca5a536ab1146176a","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/string.cpp","hash":"fee5da179cbff039312ae996a45e07bb03adec2d","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/value.h","hash":"4969fbd34dff7054df7a529ad2dc7302c4b51064","modified":1447231540000},{"_id":"themes/apollo/node_modules/node-sass/src/sass_types/string.h","hash":"ce6da5545d143c4db595f10ae06860d3525975b5","modified":1447231540000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/.npmrc","hash":"e438a852dff69dc9bffa450061c29f87de87420a","modified":1400024493000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/builtin","hash":"333aca8b649f06789bfbf507a0e3898d2bf7e5a5","modified":1344982153000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/globalconfig","hash":"49658428581028d52a7188679816f20e2401f6a9","modified":1344981785000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/userconfig","hash":"74551e0a6d088f4e31e7285c9f0649e5344895e2","modified":1412717970000},{"_id":"themes/apollo/node_modules/npmconf/test/fixtures/multi-ca","hash":"da5b4f7b01d3d1de83013df8c00d65191639a2a4","modified":1404232147000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/buildbot/buildbot_run.py","hash":"bfbddd25c931004ee1d0d6e84f319f50e219e501","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/samples/samples.bat","hash":"56cd7150b96bf610ca6cef96162947296b0d4e7a","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/samples/samples","hash":"202610ceea0a2751bf0991f8973e946f83aee07f","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/buildbot/aosp_manifest.xml","hash":"5edca3606f96a1ccd4e25bb5a1695298e83a53f6","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/README","hash":"3d71e7c0f5b5640a28f98b87a98650be9d552b44","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/graphviz.py","hash":"8bf80a564b3356ed63a9a00ca88ba9eea36cb507","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/pretty_gyp.py","hash":"17c7d785d9ce21155f8e7a8da66222e95d353dbb","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/pretty_sln.py","hash":"d08b00a60c9cb153af76994808b0036cb49fc04e","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/pretty_vcproj.py","hash":"7de1d8e61efa649e9add8247d61bc3220317e915","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/README.md","hash":"baad5ea68016e9b668194d7ca0969c2485407407","modified":1426224735000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/common.js","hash":"8b512afa64e1c9b387f57509b20999d503f4b4d9","modified":1426225989000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/package.json","hash":"d434e7997c4228b2d4ccb7c4fe5fd906c0c17c41","modified":1460380283000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/glob.js","hash":"c9fa574abcc02f3774948acc39c957c08dbc923f","modified":1426226723000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/sync.js","hash":"4fe72cbca7ae1d6dc58b8a801948985516ff6128","modified":1426226292000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1372866257000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/LICENSE","hash":"4a1927e74796f06ac7e7a687ca6b44d39c65d8f4","modified":1311966493000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/.travis.yml","hash":"cf940a5f03d954b69516c498e23fe30aabfee819","modified":1405352197000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/README.md","hash":"db98f83f21fa7f9459e78270ed5457ffceeb67ee","modified":1399941882000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/package.json","hash":"4f50309b8684fc7e267d1ffff531ab47c6861d41","modified":1460380284000},{"_id":"themes/apollo/node_modules/node-gyp/test/fixtures/ca-bundle.crt","hash":"e1f19bad76cea36a513f21f871966edcfada9eb4","modified":1449752899000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/minimatch.js","hash":"9377cc01b9f8269890a7afbf225e3d060a861111","modified":1405121107000},{"_id":"themes/apollo/node_modules/node-gyp/test/fixtures/server.crt","hash":"51286420df35083c964caa4f7889d1c58a253a52","modified":1449752899000},{"_id":"themes/apollo/node_modules/node-gyp/test/fixtures/ca.crt","hash":"c1d5b151e9f1134da227f4078ac07b745175de71","modified":1449752899000},{"_id":"themes/apollo/node_modules/node-gyp/test/fixtures/server.key","hash":"0025a18fd8a9f784493f3e32a7e85aaf5901573e","modified":1449752899000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/badscripts.json","hash":"a3970c05ac4c9cfc7d1db09fe3ada39ef5aa72a0","modified":1446502955000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/bcrypt.json","hash":"08b39f6311a79be8729d7bf1d049f5b3d882abee","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/async.json","hash":"43258320fc1abc9bd1bdbf56e9e470c5372524c7","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/coffee-script.json","hash":"05206f3be670938bff37ba9f9b6b1e1534da5dd9","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/movefile.json","hash":"ad2b7c87841807ed5057b6aa01442d269f6b2638","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/no-description.json","hash":"2be46cd21e813c15f5facfe0c042c4ec68427e15","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/npm.json","hash":"cc2230d04260e633b93da4cfd18142259a658b54","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/http-server.json","hash":"3f0b992a97488ff99992412e6be68dcded84e02c","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/read-package-json.json","hash":"676d95086ba35ae3aed64cc4ca0e483f39b76419","modified":1446152527000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/underscore.json","hash":"e3d6bdd0eb77167e4cfccce19f01e4b5f25e3e4d","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/node-module_exist.json","hash":"42e9cc594ead5217935ccdf30760f57f0b8a76a5","modified":1414473106000},{"_id":"themes/apollo/node_modules/normalize-package-data/test/fixtures/request.json","hash":"4f436def8d797fc254686d621766800266d527d1","modified":1414473106000},{"_id":"themes/apollo/node_modules/postcss/docs/guidelines/plugin.md","hash":"a9fc93bd40a0664fdb34b302a4ce23d87de0e7c2","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/node_modules/supports-color/index.js","hash":"fe33197b64a6b417498ddf16431e605e36bdf8c7","modified":1444735207000},{"_id":"themes/apollo/node_modules/postcss/node_modules/supports-color/browser.js","hash":"2a31b5297e62e95536bf59191d31d7342051d2c2","modified":1437229470000},{"_id":"themes/apollo/node_modules/postcss/docs/guidelines/runner.md","hash":"94a80976f958917f2b6fe253ae4158dcb456388b","modified":1456942225000},{"_id":"themes/apollo/node_modules/postcss/node_modules/supports-color/readme.md","hash":"112d6af03cea5f26256e3f2198f883c4cb86a428","modified":1437003477000},{"_id":"themes/apollo/node_modules/postcss/node_modules/supports-color/package.json","hash":"555b311a9f2fd959beb6f2a23fd41657d3b4a9f0","modified":1460380282000},{"_id":"themes/apollo/node_modules/postcss/node_modules/supports-color/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":1455171806000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/common.js","hash":"05025adbb5e84ef5aed1bb7029d1ac7178bcf174","modified":1457166115000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/README.md","hash":"0085fbce10be11548134260e6ced6583a032f19a","modified":1455132571000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/package.json","hash":"ec245249a8886e2df3680b724919f41d1f07c101","modified":1460380283000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/glob.js","hash":"aac4ceff1503c6f3b0ae9699f3414b342a753e23","modified":1457166045000},{"_id":"themes/apollo/node_modules/rimraf/node_modules/glob/sync.js","hash":"4608320cbcab344dbd1634dfb0658ea642594169","modified":1457166061000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/glob.js","hash":"950021530921858aef80eefcf3296971350359d0","modified":1452292213000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/README.md","hash":"11402eb3ef9b4c244d19d3176a3c5bb8beb0898f","modified":1451528302000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/common.js","hash":"2216c2b406550fa30ce86669313721bc5a72fbf8","modified":1452292176000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/package.json","hash":"9dde73622075e800fc951cde5531e6bad5d45e77","modified":1460380283000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/glob/sync.js","hash":"6585718061bdd1f27bec952486252c6ee46ea35e","modified":1447632932000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/a.scss","hash":"c9b32899cf031036e66bf028e5a34ee46aae0f5d","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/_c.scss","hash":"40cf10748c1b9367fcb688d26e65bb0e51e5bde3","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/b.scss","hash":"21cc7b2d62e530f9a04cf7a7a8688eea081dd985","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/f.scss","hash":"40cf10748c1b9367fcb688d26e65bb0e51e5bde3","modified":1422855422000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/d.scss","hash":"cdd52562288cda75f0f74ae9ab8d5056ac4eb0a2","modified":1421284976000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/g.scss","hash":"7b9a513d600b1476f1fcf63836cde0f48136e9dc","modified":1426667664000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/i.scss","hash":"59fc65f3fb3e569a7deed0f40da655f4087e7d2c","modified":1430718059000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/j.scss","hash":"6babb78167ff90c4d9d18e4eebe2b0f48f408d21","modified":1426667664000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/m.scss","hash":"110c5f9ab984d5797f70e5e8dbcbf468129620f1","modified":1427065313000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/r.scss","hash":"b64b016bad7203db5e80ea65b0708b27594893eb","modified":1454293183000},{"_id":"themes/apollo/node_modules/resolve/test/precedence/aaa.js","hash":"9c2d3ffdc41f1567d64612167fc763c4a4390eef","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/dotdot/index.js","hash":"5b0128a5e56ba3ad6252d85edecfb1cbcc58543d","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/precedence/bbb.js","hash":"185c1241b941fc83f8849e4fdaf5567ffb2a203d","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/foo.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/cup.coffee","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1441654384000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/.eslintrc","hash":"c69a8fa86ac6bdf27526c4eab76de9688107e185","modified":1435781323000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/.npmignore","hash":"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3","modified":1435780828000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/.jscs.json","hash":"7f5a3e8db0f48b0741606ecae7fe55d9cdc3a7b7","modified":1435781035000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/.travis.yml","hash":"2836505a6f7474044fe7f70648052fa3a823a4db","modified":1435781025000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":1435780828000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/component.json","hash":"07af5d609ee23647ce3238a0e1322c35b385fc45","modified":1435783532000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/README.md","hash":"4bce70a4b2e7dda8a760418301a4622c0557bae9","modified":1435780828000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/CHANGELOG.md","hash":"782aabec0278f6500fbedf61e29a5a0d748c78fb","modified":1435783518000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/index.js","hash":"9154a195afa931672ff49f30d5fdf0c5a10614bc","modified":1435780828000},{"_id":"themes/apollo/node_modules/request/node_modules/extend/package.json","hash":"14892f4f82f8834c1da2eb50382f33bccfd651bc","modified":1460380284000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/awaiter.js","hash":"2183629672364736e371fe5d35be106519b9e6fe","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/change-code.js","hash":"68409f8f972d4959ed927d34e77e14eaa63355de","modified":1432531928000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/end-of-execution.js","hash":"cc1aeec350b3d9f373b6b87d3d2a6fbfd9cd72af","modified":1432007938000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/change-code-expect.json","hash":"5fe626855f24d55ccbe863414801b643be2a497b","modified":1432521683000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/exit-last.js","hash":"ef373e0e6268e9cdbd7c1cd9fa8457e4df282a70","modified":1432500744000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/exit.js","hash":"6843c75460126b8708042bcce4764dc4eb777722","modified":1432009095000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/exiter.js","hash":"7c9727fc47aec2309f93b894cbd6c7515b6ccd90","modified":1432365139000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/load-unload.js","hash":"e7a73f662a1c525e58b352a3dcc508f58ac8b574","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/multiple-load.js","hash":"0e49c01d253f24ed8945bb9c21e87da2c5e355ac","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/parent.js","hash":"045a180a634201aebf944ac5ebfb1a7c08d1a912","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/sigint.js","hash":"b5f02c47134ac9cb09b02cba12abb87ae3a4f72f","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/sigkill.js","hash":"b520139feb017bda77090ffc43ef90fae017dd5d","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/signal-default.js","hash":"fe34650709a0ad383a93b4745d986d4a38c6528b","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/signal-listener.js","hash":"854e54b11c74a6598dcd5ca0d9eecae71cab074c","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/sigpipe.js","hash":"d30716e9b78cd0bd04a7a338450cc96abbd368d7","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/signal-last.js","hash":"1f5d2318ca2aa98836f3e3199cb961100e288684","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/sigterm.js","hash":"2f15d530ff5c07cb85719b320fbc1f378e1972d2","modified":1432363619000},{"_id":"themes/apollo/node_modules/signal-exit/test/fixtures/unwrap.js","hash":"894dea531dd3bd5d6b71d094dd5418815dce1ce9","modified":1432363619000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/README.md","hash":"76918eead4c85fbaea9878dd1d862b2960064f27","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1460128163000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_DataView.js","hash":"f5780de8f4171ced0e5f4c52aba30e58660070e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Hash.js","hash":"111f099b27253aa4eba4a14c43cb5819798c7cbf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_LazyWrapper.js","hash":"9fc0cec80e680d4fe00cf4e33672e7f06d4b9b79","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_LodashWrapper.js","hash":"d1b595bd38e7764539f2cf99d2374f5c5aa72d70","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Map.js","hash":"d58862090ce31a3295cb1dae73e44dcdba9b70bc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Reflect.js","hash":"98b5e239d8887d12e00683334c5a25839e014085","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Promise.js","hash":"7c7b81e303018a3045ca269b1be551224b607790","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_MapCache.js","hash":"bb53187f0c70803b71f9f74fc89fd76875ec1598","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Stack.js","hash":"4c99628c3f8e5d08e54dcf9d61b62f59ec7a4b2e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_SetCache.js","hash":"cd5d534094daccd0acc7e3ca756b5017c427eef4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Symbol.js","hash":"1d38c59f19e1b038981b4f0093d5b504d647c694","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Set.js","hash":"d55df157d59851d181aae5086ac2b703f41e422d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_WeakMap.js","hash":"f384e74a27955f5ab92345281a5fcb7d95111b58","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_addSetEntry.js","hash":"5393abc83a269de5cf064523cfe521d67154305e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_addMapEntry.js","hash":"dd1935b60eb83b0548139660569579eb089e62f2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_Uint8Array.js","hash":"9aca80cbc7c3b25813dbeb9561324d3d6ff7700a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_apply.js","hash":"2ae177e3988fc11f80d382082809ab1827d830a2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayConcat.js","hash":"496c39823c16f24336281909246506814ffab3bc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayEach.js","hash":"8df804553b42e6c8405cfba9de1e7d56673afb2a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayAggregator.js","hash":"73c68de7313dcb5239ff92d55b004445d4276177","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayEachRight.js","hash":"97045c826b223c1d30443dfcfa0d4e0506baec6f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayIncludes.js","hash":"665ccf209b22578644a5f0a77b8cae816ab61e2c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayFilter.js","hash":"a0aeafa43a5fbd63176e9617142c948494fc19a7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayEvery.js","hash":"85d8eb963732ff75c69d13891ed6ecca6520eae9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayIncludesWith.js","hash":"c73568d5b0af95b1774c555c91d7eb534eb8c457","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayMap.js","hash":"d638f440921cd0497a8de071ef047efd41125e74","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayPush.js","hash":"8b9d6d4bcd8f6661ee23634aecda75d5395db2cc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayReduce.js","hash":"f07eb6f87a19c084a9cf18e9bf5675e65f4d49f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arrayReduceRight.js","hash":"62212d3f674de9d91493a53324c0c23b69a2dd1c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assignInDefaults.js","hash":"1e57537dff4aeb61f423c8e03e79fec425c4eb61","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_arraySome.js","hash":"5f7399012af57deed74bebe92518c1f78dba6af0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assignMergeValue.js","hash":"5466d76a54b7fcbcd855487bc803179deeea01c6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assignValue.js","hash":"ed36c720b8740a89d564823230fb2e6598aa6c9d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assocDelete.js","hash":"f54a8245bdad5d6a083191caf6a6d7297dbd28e9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assocGet.js","hash":"e652c5a88d0cf69edb8065f769f355b5f50221e1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assocHas.js","hash":"d683a70a8477f8cfe76c86d04e7ec7c3a93c8038","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assocIndexOf.js","hash":"696abbb7489f9f85702b53b804c52fb1f7c8d9f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_assocSet.js","hash":"eabaa8e8041f2f944cbaefa780482485aa168a21","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseAggregator.js","hash":"a0f27fd540785f2f3d54913950fcd555ca789b4f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseAssign.js","hash":"b12b76d29619f0fadf5c75c2b1f4d9c5a140af4d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseAt.js","hash":"61dea3ced46adb8279cd1c9851d4d3a741daedc7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseCastArrayLikeObject.js","hash":"003ebaf9a17f2bb887d8db27dcb877816e253285","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseCastFunction.js","hash":"dc1441d8e89263dfe08fd1475c47c15040698f01","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseCastKey.js","hash":"871eff7b32da716cb871e9ce5c5ef3a992d9ba27","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseCastPath.js","hash":"747b3970400f0adf4409e1f0e8cad61aa3095930","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseClamp.js","hash":"2e2fff5de831c6853382d09701c1d739b0a6b05a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseConforms.js","hash":"6e3ba3df60aabb03d0dfaf91a299d42c5fae743b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseClone.js","hash":"b2eacf3f5005ff1ebf096924286ff1abc0c7b5ce","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseCreate.js","hash":"396754c1d91948bb5b090d9bddde685f962c7b58","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseDifference.js","hash":"24de56c1d3ab1f9efc5362c78e4f8cd75435a1b4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseEach.js","hash":"8df288083999c6711cdddc83d3f62ee092e0bd35","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseEachRight.js","hash":"f8f31ce8197c50e01ffe073be5e329bb95c5dd7f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseDelay.js","hash":"651e4d48574726567ad56d05e99280ebcfe83235","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseExtremum.js","hash":"79895e8e34f36ce93f488b6910c691aac07f4d8d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFill.js","hash":"474427d0d470b473ac37456e9ba151a966b2ade7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFilter.js","hash":"aa90047b0a1231f770807422c67a36a4c3524365","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseEvery.js","hash":"6e445241a2ceb58e400c619247c7f1d5a9ad76da","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFind.js","hash":"55e8e71a7e3aa6471ab8b6e8426ae0a9eeef9ee3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFindIndex.js","hash":"8f0e78fa3507ea1cda4066dd585f18564e2df48d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFor.js","hash":"0c1cb461a289484b92c1bc8e6de7db51ac04004d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFlatten.js","hash":"045ce95760998450c806995fd49db7ce8fd96982","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseForOwn.js","hash":"8977ba022a8d144093f35c729822e6161d5fd291","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseFunctions.js","hash":"8a20e4358e25453f766d270ae27150205ed019fa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseForRight.js","hash":"2d3155596f8e8420da54564a69dadfadbd84cd67","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseForOwnRight.js","hash":"29a6ce1c8ff0893a7a5021a5b54d3303dc7e9ef5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseGet.js","hash":"7c152d1ae80970eaff5d66eca400b6fa3fc2b99e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseHas.js","hash":"984aa0a3b7a18da63b3bc0e22c55e3ebb7634bc1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseHasIn.js","hash":"5cf5d4b65362788b9bacb5568c34520315dbb41d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseGetAllKeys.js","hash":"e744349d41ff881c7d77984e3466a88b05c54a75","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseInRange.js","hash":"680a833c769655c38b9e0545f293402b72c312b6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIntersection.js","hash":"e888cbbc5be8a66edd1a9382690bf7ddcfff1b34","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIndexOfWith.js","hash":"90126bb96f42909679f9de9f39fdff64c956dabd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIndexOf.js","hash":"916b6c550455703f6f4b6d8d20869d6fc2bc8f4b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseInverter.js","hash":"84de1267be8b3b1973a696826a66247ff88e7c25","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseInvoke.js","hash":"afe08e5e16f77e1a027be8ce68861b7632a0ea17","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIsEqual.js","hash":"07b896ef2b99ed354b6e5bed8bcb86f3927a24fc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIsEqualDeep.js","hash":"37f56fa1f0c75ef06bf06ddd554f55d798e05329","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIsMatch.js","hash":"754996110340cd1f80a518a3259a6d4bde7f3f13","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseIteratee.js","hash":"032e8e56ae36205075f11cef6a7e91890a8425bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseKeysIn.js","hash":"53411fcdc4bdead3e99d622fc87d4f6a9e920715","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseKeys.js","hash":"273b115ffda8847a759fab735693ddaf2ebd2cc5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseLodash.js","hash":"dfebf25a399f77aa4b416e1a92ba11ca59c2a8e9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMap.js","hash":"e4d4a4031106e999c0f44a81dd62afc0f84f3fe0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMatches.js","hash":"7324efa0299efc725b4a04b78affa9b211952e3f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMerge.js","hash":"94d9b19d8b77cbccc9fcc61adf0e3468ff3a9762","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMergeDeep.js","hash":"a68975cd9dd2570b5b2fd12555c3e59968332794","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMean.js","hash":"9f0d1b72651f1e9dd2c121f810617990033d276d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseMatchesProperty.js","hash":"49cb44e271c99c345ea44f4d83d0dd1d24c1d5ac","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_basePickBy.js","hash":"762527857f217b06b5a3b151ca2d9a9e3b747f0b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseProperty.js","hash":"0685e8376f01d0ead1d8b918c37faef8dc88a9a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_basePick.js","hash":"de74b56f6a8159d5381f83eb2ff9e1468054fea9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseOrderBy.js","hash":"d1bfda8b6c31c77be07a69c187b3ed26444254d6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_basePropertyDeep.js","hash":"ae3efac0649b3254b4575ce90e8a59d8a04b5fc7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_basePullAll.js","hash":"30c79bb8d192d850f1753d666350919c8cd89443","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_basePullAt.js","hash":"7e1a02957ee8b3b01ca46376744b995fe9f2f44a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseRandom.js","hash":"86fe0bbec2bf3b242a8d861abd894f9281c2408a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseRange.js","hash":"ad023b8667aa1223fef3dfb1769941e99b433f73","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseReduce.js","hash":"96e87d251b7bbf30707b39b529243e5d3a7f5c2f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseRepeat.js","hash":"e5acd9c33e9026b8848de16db87d9ee1dfe293db","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSet.js","hash":"32e61d5d6cba0a4331a733f5633bde7ee2f5eb82","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSetData.js","hash":"41085b8b958f011c52f65601134b358f10aa3e6d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSlice.js","hash":"959756556fea236343ff752adb6b869bcac82e4b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSome.js","hash":"4be43bfa949a8292f8f780eeeb83bb5da00f58b7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSortBy.js","hash":"77483347d5381f336bed3174c5b301f40dfc7a24","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSortedIndex.js","hash":"d66871f648b3c80ad96a0c351b44bfdf889a6318","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSortedIndexBy.js","hash":"25f89ef5a9e26db812b2a22883c7d6abc59ed38c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSortedUniq.js","hash":"5fa2e216bcf98fb48270deb1d873b5ceab9e3d5f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSum.js","hash":"e96a801668916a3027558a8795a4957e11c791f1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseSortedUniqBy.js","hash":"ddfa6c9a063fffa1e1d8cfae433c98b82e809800","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseTimes.js","hash":"7f3edc2bfd65d843b592ff123759c9d616ce3a64","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseToPairs.js","hash":"604a17b9e5705c24d7d5df2b8c5189cfd41821a3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseUnary.js","hash":"3e8fb3032264e44cb7ab3bfa67ae0569dd0f9578","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseUniq.js","hash":"8a45c20b54781eef2276d2f34647fc9fdb2f1f78","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseUpdate.js","hash":"3ab1e64340d3364617dfa0fb4bd74a92a147f32c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseUnset.js","hash":"310e6c3bad19ec03bf81173c286fd62c6198ca10","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseValues.js","hash":"a8cfeda4f95c958cb46ac71f77a631e57617c1f7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseWhile.js","hash":"4fb4c4f09282c0e560a1bb289caaac7d58d64a10","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseWrapperValue.js","hash":"1b1d0a42b03e95693fc88d6a24e4a3473d15392c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseXor.js","hash":"56b840e35f8b6d82978b0691baa8aea7f0b5efa8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_baseZipObject.js","hash":"7995093c8f43666bf1f2dc15cc1d752dacc55e35","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cacheHas.js","hash":"83d4a8ce1ef0b5b01b529fcb9a39c97bb6a86dbe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cachePush.js","hash":"70e489d6a97bea8cb70efcbb79b9ed0514b0cd51","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_charsEndIndex.js","hash":"4164a27a922efe0dfb1dc15496d199152fd96599","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_charsStartIndex.js","hash":"c4db2a95b12b0a442f73d3ad3d27c0048193b216","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_checkGlobal.js","hash":"3c660cd830dfedd26c2efc537dc434dc5a3bc8bf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneArrayBuffer.js","hash":"ffbada38bb191bc5290fc3ae51f6c01c3f8f6d7f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneMap.js","hash":"a9eb977737c9ba392a21f1ab41d27ce8c98a5f39","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneRegExp.js","hash":"d0318f8d44ff0e8720cf498982e3183e23579919","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneDataView.js","hash":"c8e9d1cd47aab00655a7ad7d3103cdddf2fd92a6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneBuffer.js","hash":"2dc1138aa403c78293e275578983de620a32f02a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneSet.js","hash":"d2d8f10dc69cdc13205e970610f30fb3455675ce","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneSymbol.js","hash":"8b27dca2415595e97e38d9fa7fb3f854c4051048","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_cloneTypedArray.js","hash":"b50a151594d841fdb56e8cf04619529fed4891f7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_compareAscending.js","hash":"ee3a4ecae605bcac1c5e3d681e5309c84f6905b7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_compareMultiple.js","hash":"798b323506b11fa866904e39771daf98df260bca","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_composeArgs.js","hash":"8b9b113a4f1886b457d3a2b28192e02c944f2208","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_composeArgsRight.js","hash":"1d69a14d2e9fcade19f7db7de1b84bcbaa72de92","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_copyArray.js","hash":"cec6a29544aa38261f7cfc1bf123f3289d22c377","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_copyObject.js","hash":"c5f8d7d9d4d906c59d40c4a6e1db40c54fb66961","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_copyObjectWith.js","hash":"e6ac52d029e6e58320dd3657e21c0a3593002ac4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_countHolders.js","hash":"b28c0d66480a9d249ed0ecd761e704f696f7d8ea","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createAggregator.js","hash":"68bca1cdf0dbfae244d1a669ce2382d63d6b28ca","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_copySymbols.js","hash":"1323222e86b2a4965da70863cc990255323f76c3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createAssigner.js","hash":"96be660f73af89b2ae960e45df0d7c5a714df617","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createBaseEach.js","hash":"ade31f23b8e144e8588af940219fc4c8bda2ce53","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createBaseFor.js","hash":"77c64903d26461aaff6bb22d3e2739a5ac9a5e0e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createBaseWrapper.js","hash":"914bdb389613cd8763599085dc7fc1dd99d1800f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createCompounder.js","hash":"60497fce6532a66875589f3cecf14f6c008415ee","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createCtorWrapper.js","hash":"82714c93f64b436af853ff10b4805593201959cd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createCaseFirst.js","hash":"8a064880a3ae5b39befc1a29bdc82ed51eec6719","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createCurryWrapper.js","hash":"4826f092b4254964ad1ee1b041e9e9244434387c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createInverter.js","hash":"3b149fffb0fb7fe82cf00dbd794973ddc33f33e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createMathOperation.js","hash":"139890c624c04ca516ba6e44510ea61076c58f73","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createHybridWrapper.js","hash":"cf02829ae3ba18cce9885fbd782d5818586693da","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createFlow.js","hash":"b946aefa28bf140009cb2df04c200d112c43f097","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createOver.js","hash":"88ffbc0c0843c7fc530f18fa046cd0f87c2c11db","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createPartialWrapper.js","hash":"727183bc50c72b032811ce903835affeb6b9a563","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createPadding.js","hash":"b393ab8bee058adddc958a698379742612627a11","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createRange.js","hash":"a48521e31fee1f01707934bfcd0b4261952edf8f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createRecurryWrapper.js","hash":"78f8a9d513ecc10f9b3f205b714ed0926a327da1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createRound.js","hash":"feb858bcd68c5988b745870d37341dc50c66ab67","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createSet.js","hash":"497e6075ba53d870cb2531bfc91415d7e2e64105","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_createWrapper.js","hash":"585f835f2729ad53572876805e51d6338e7b5dfd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_deburrLetter.js","hash":"bf009bb55928b782f65d8c6aa4edfd13bb242885","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_equalByTag.js","hash":"6bc9f9687f3c6618f2c1469130fd4831d64d1ac9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_equalArrays.js","hash":"807f98914213dfe6f4a84461e5efc50d4a2c84be","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_equalObjects.js","hash":"03caa8b519c1fda5c053b8228dc9cb76c470a057","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getAllKeys.js","hash":"9fcb354c326cd308df841e6846d506165842f9a3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_escapeStringChar.js","hash":"d011ca793a93e44d7e6928cced2055ea47f6c39e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getAllKeysIn.js","hash":"4c08d556179109df462c2ffdecef2d6486315062","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getData.js","hash":"2fea3c244fa4625b978cea63124835c16aefe660","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getFuncName.js","hash":"dd42afbc814c94e5bdd2fbef652efb7801403f6e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getLength.js","hash":"34233f8a6c2f8c8b59eda2a6e5ba184c2868474e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getMatchData.js","hash":"b759f381375b693de94ba5853ce506ffade537c5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getNative.js","hash":"643a75a05557c291e02e6e0e2c0f2e386a34ac2d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getPlaceholder.js","hash":"2bfd527847d409d83041d492e1d08841d01fb413","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getPrototype.js","hash":"0f1142c4850d2b1d6b982512a95c143277a6ddea","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getSymbols.js","hash":"ac455966a30566155f03bb1e211b7919c3e55a98","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getTag.js","hash":"dd9d8755990ee6ac73eb12af78d9137db1bbb726","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getView.js","hash":"3a642a1adfccdac302261e31fadd3918e623d6f6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_hasPath.js","hash":"84cc9633ec9994ec5c292f824e70bccfda84d4e0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_hashDelete.js","hash":"0bce3edee4dac7eac0f1a754d5113383abfaaa77","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_hashGet.js","hash":"476f8c9bf78cecef9ea3178fe1c777a5ffb68d64","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_hashHas.js","hash":"a2d6515f5ffa8bf529573ea0b5ea44ef75a7d52e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_hashSet.js","hash":"9c0512108a1c81ad1bf99beae8eddbb456e78b21","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_getSymbolsIn.js","hash":"ecf5e4c05b258e34e1038ce17012767efa617d3f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_escapeHtmlChar.js","hash":"28a8bd051eed9e1cdf95ab9b55f107a8c66a5784","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_initCloneArray.js","hash":"ea7dc2be272c42decf2d28b9e87861ed83aa196d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_initCloneByTag.js","hash":"8969b78bdee7f1b47064aec690b0d61956210c59","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_indexOfNaN.js","hash":"fcee71d9047690349e250ad7be4efa7e322d4824","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_indexKeys.js","hash":"36c6128730c3ae69e310f0a857a91828c3f85cb7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isFlattenableIteratee.js","hash":"e3616ceed4dcfb99d41155ca489ae322fef780d8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isFlattenable.js","hash":"952034b1fd3d6f13771904019dcae7d60daf6070","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_initCloneObject.js","hash":"f2ee8035eaa7751ff081de5681c6603da177f8f6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isHostObject.js","hash":"041928f19398802401abfb975b3c7447895db3e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isIndex.js","hash":"01bdfd3c624a59762051bb411fc592cbc9ebbc23","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isKey.js","hash":"3efa57777039e65c80cb7792e1e0c6c6e00a7324","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isLaziable.js","hash":"857a630edb35c21d76e6e2fd6daed3f3b51ea6a9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isIterateeCall.js","hash":"8116de0f8e735fb8c0a9d263a369be4b74f5f09c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isKeyable.js","hash":"a6f69679c467c5bded20463b2fb380595a8838d3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isPrototype.js","hash":"6ebbd7e2661dbf8b6e35f36d680b7117fcc6b2c0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_isStrictComparable.js","hash":"1db231f38b860e0a94e052c232829f8e8d31eb74","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_iteratorToArray.js","hash":"0512af6634544643fd2dacfb328aa8fca1770d72","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_lazyClone.js","hash":"528f2c4e0ddaadd246d07757608fafc02842508b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_lazyReverse.js","hash":"a16d79ce7d467ebd00332162dafae250f726fe17","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_lazyValue.js","hash":"09f17b5524617d2558c05794577b7cdee1f313e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapClear.js","hash":"9a5076693df83fc7e2f181e139f2bf59fd32a21b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapDelete.js","hash":"2f26a60da172701615edc6bae98dfc80fb5db78d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapHas.js","hash":"5bdac2625f544a1e4b06c3baebaa2993f0ef7202","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapGet.js","hash":"cb42497957139186435358a1f27c59f8b9e75c1d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapSet.js","hash":"f6d5b68fffb36c6894ca6b96160dfb30f5972bbd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mapToArray.js","hash":"a1b00cdc369029f942a7f6a65dd8a64be09b4560","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_matchesStrictComparable.js","hash":"5cbc0d830a4af9562837222959d7b5675c529f15","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mergeDefaults.js","hash":"3740050825d9744fa9f323227ebb6bffbafb8b76","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_mergeData.js","hash":"c8cc42dbc36f12717aab0c0626167c54787b5aad","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_metaMap.js","hash":"6fe08e4a7c81c515eb34e464db1fe31d20bc8ff6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_nativeCreate.js","hash":"d77d487728a34b77fe91c07ed4a2ca41a7265b43","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_reEscape.js","hash":"1956c226d87ffb9bfb9d0b443e5e7c6665e222a9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_parent.js","hash":"96c1e1e1a0a62224fe816f9e72c8786266ff7e93","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_reEvaluate.js","hash":"01062fe9dad608255c7e341c6d3e145c9ae6912b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_realNames.js","hash":"1d70870e01638a3ba3e742bf871a5618ba866480","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_reInterpolate.js","hash":"1f30c7932ca224ade79f3b50991da604fdc93c0f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_reorder.js","hash":"f9ebaaf8bddda0f54270363ed88d8eeb4b0acf95","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_replaceHolders.js","hash":"c24095b10ee93a2b1c4eabe187a37eb54a74b47c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_root.js","hash":"110b1107654aaf935be5ffbc82c5d03f344aca08","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_setData.js","hash":"2610818fc5ab7f74c759b288df08bf5d793b2a8e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_setToArray.js","hash":"a9e6a09aac572724d940598486c6e70a8ee85a91","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stackClear.js","hash":"190fb633e9f0f63702681101121494170376396d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stackGet.js","hash":"ce0eecacbd42cf93fc82f9d5fa388acc341c07dc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stackDelete.js","hash":"ba92c4ed22d090ff861fab2d8561b9190b650844","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stackHas.js","hash":"ffe557139e1516ef62bbc3259b261c9e9d6cba16","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stackSet.js","hash":"949d9623a8e019c8d6aa5c73172005e8573fe48a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stringSize.js","hash":"012d073c4a7e8e62bcb8aafcaed95265a69bbf51","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stringToArray.js","hash":"00d326e386246b25926b6a6ef2939dbbbd2ccc48","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_stringToPath.js","hash":"b6d883d3de56e60444ca0ee2a16b244f6633681b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_toSource.js","hash":"a83cbb06edb126f5af0bc44c808eff57963e37c8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_unescapeHtmlChar.js","hash":"75da9e9c5dcd6f5ca75169d13aee4f997f67d7f8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/_wrapperClone.js","hash":"c54b050119a2a1ad75146508a03ed4a78ab9b5fb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/add.js","hash":"8f95f25a574ba0060a8a5e19193b66108658f9fe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/after.js","hash":"453f13774b41ab1ae546a615d773531b6146fa68","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/array.js","hash":"19502d13531d0e991ff3eaac1feb9519e369955e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/ary.js","hash":"6265bc0bd80dc8867db58933f556baebcc396d34","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/assignIn.js","hash":"52289ecf82f275964d97da9dea219f8f9aec7f47","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/assign.js","hash":"029e90777b78c28e9881da4efc50514910346484","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/assignInWith.js","hash":"8a0b1966b5be2bdf7e29c9bd6f6dd3d8301b0593","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/assignWith.js","hash":"668c58a2412e3b4ea33723f5efe1064e74a8c118","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/at.js","hash":"82e5ad5d1d269ff80cbbe19e35edd787a3e5b842","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/attempt.js","hash":"3e296820f243f7e030debb9029ef7696793959cc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/before.js","hash":"ca1044d65108da89010dbafe6e57c186b33e03b3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/bind.js","hash":"8581fc68f751d54ee3c6fc15c097e7f902da0284","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/bindAll.js","hash":"6aa95a560d6457d65060ea8970ee3354636871d7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/bindKey.js","hash":"dfaa1f3db6c312ed2178a653f94fb613f5dd1fed","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/camelCase.js","hash":"1db1aa1a3c7a3a703a33c660526ef141c0bd3b94","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/capitalize.js","hash":"cf956ec612dfed45fdab26ab30cac6f46d738119","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/castArray.js","hash":"8dd901032216d00cf43986adaf961ad7422a64bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/ceil.js","hash":"13eff7a830076aeea2ffabd36b8d0d3254849953","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/chain.js","hash":"e51b12d085b20c8676bf3297d9d0a8acb3871e4f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/clone.js","hash":"1426fdc75907c888c5f1208974f2fefeb3707d29","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/chunk.js","hash":"b2544df1a4b3e11a7c44a571f30d5aa5e5622eed","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/clamp.js","hash":"0c356936d91c87fe7938faa3e1bb61b8334e7f0b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/cloneDeep.js","hash":"f01ecef514dd833d2a53606025886a697d1b68a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/cloneWith.js","hash":"3d02e6e1ce0f7c975922e99395183fc214762e43","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/collection.js","hash":"0138dd880538d16b692a363626c9cff08c9a6615","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/commit.js","hash":"f2962f416c4427b7d5fd2fe8f752c41a8e6ee53f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/cloneDeepWith.js","hash":"d2fcf32b3df15792a036f2fcb4f853a065a53b47","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/compact.js","hash":"e955b73f310a77a29f644a55224130a64f249015","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/conforms.js","hash":"8eaafe6e0de590c074b247048902180eaa7dfd92","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/cond.js","hash":"06cffdc84d988dc5009ba58614d1683704743254","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/concat.js","hash":"f05765637814a045bcd5c0106ac72a44c120dd0b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/constant.js","hash":"e7ecda387a20ff2841f9670e6fae46eddcfdde7d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/core.min.js","hash":"cb5b290da7fd40910a2cd6f4c5594de6996165e1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/create.js","hash":"7624168e1f1ce85a82474ec0ffe3f1606899457b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/countBy.js","hash":"e31ca9005d724bf273fab843fe3c75d0d7286dee","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/curry.js","hash":"e00bbda809cff1dad17e672ad0f16c22de8b8b9a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/debounce.js","hash":"a9e9c90af128aed25a7c2f979f361107874157f7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/deburr.js","hash":"17cf2f916f6a278ce809be257b43144f42c1a1aa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/date.js","hash":"6466f5749384af915c2b6a449e74e14e320f4e11","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/curryRight.js","hash":"b0c7780311a1b2854be276325c8ef485133a179b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/defaults.js","hash":"ffe5d156568e46996bbef0caf57aaa60f9ee8abf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/defaultsDeep.js","hash":"109b9f22fbbd7150cccf1dd1debfcd6874ad8024","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/defer.js","hash":"b8ed267d3e3e792f4e60bbe4d7d10f8170bcf894","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/delay.js","hash":"3661938280e71d5f313fa7f0b61ed5fc21680fa5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/differenceBy.js","hash":"ad9aa67d278e7ce36758ecc42a86953128527c57","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/difference.js","hash":"b17c5781548165358c2c441922c686180bbbbae5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/differenceWith.js","hash":"0dccecd329474afbcc9ee0dff7e87af5928da802","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/drop.js","hash":"1ff5789852de8b151790fec8da0e9f8a97ba99cd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/dropRight.js","hash":"214788ff11bac6e05c534c3f39624821e4a570d8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/divide.js","hash":"9ac7b2b80132bf76d6e289ce7ad06d3a4ac0985e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/dropWhile.js","hash":"c4789036fb96a5abc4e347e1d468c40dd8fcc0e6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/dropRightWhile.js","hash":"791c7a53e7e39d488e5fba7ae49b7026b27cfc17","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/endsWith.js","hash":"3ac42db913c297290fd79f27993cabe0c4fd338c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/eq.js","hash":"30dbb0d5e91e4523e304717d00a02f5950dee04b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/escapeRegExp.js","hash":"33b715e2963261c8e220d09000d0422e996aac23","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/escape.js","hash":"99981bcbfb8eeca784f4ad869f58c5db3f8e5261","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/every.js","hash":"69d716c84e093e6bf806a230485b88da1c981992","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fill.js","hash":"f99d5449368892dc3fe43682b5fa46eed475782e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/filter.js","hash":"6467e6a27fe1a340356e85bf9511519a5989a569","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/find.js","hash":"402098b118c46c0846c8e6908c3ad81cd0f43a0e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/findIndex.js","hash":"9707c5b2da8c45fce6b00b27c7c2aeb5a2a62918","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/findKey.js","hash":"173f004f43ce973c4a9cd5dcbc3eb0991cc4240b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/findLast.js","hash":"71015f3e8474afd72a517d86c91a8f9ab23a29f8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/findLastIndex.js","hash":"04412eaeed115af5c48c31dc0613186e3a9c0dae","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/findLastKey.js","hash":"3df012e18c4f888226ff9143202015dee7e4d1a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flatMap.js","hash":"2f031201a31fee26aeb7fd6a70486d3db8a5346e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flatMapDeep.js","hash":"67d423f3a3f4550ab7330b8001c8c5f229d8288d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flatMapDepth.js","hash":"78a634b846dd9dd97f86fb47291b453a80ee8127","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flattenDeep.js","hash":"29ed4a75a77e20e5da756e60fc651109711d3e56","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flatten.js","hash":"86aae3f0dab18df4d3f5fe3e11b185d498a0143a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flip.js","hash":"a5a4f3a7a4dc31d3c0272e98c1c0fff95c007423","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flattenDepth.js","hash":"abf98f208d4cef918809c80934baccbced96c10e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/floor.js","hash":"dcc9365721002de964aa2439793b7a10419d3dad","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flow.js","hash":"89cff3561265321154bd1d5df59a725351e18af7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/flowRight.js","hash":"25714490d4828cd26b8e203d61f0e3abfb6c7f06","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forEach.js","hash":"5b0e75c76080fe6e32cc74b41e3c9d60e09483cb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forEachRight.js","hash":"cc94de2ef6511fb72bd0253a5d568d5f98b4f1f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forIn.js","hash":"73847fce1166a76b3a809f6f78b09ee635ba8d40","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forInRight.js","hash":"8287c066ff051d58c946d943d76ee1584cc095aa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forOwn.js","hash":"bdf0f8f62a8cac6229aacba39d283f7718edf0a8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/function.js","hash":"23850ac10d90d3b9eee8723beaa3af727330323e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fromPairs.js","hash":"4ccc5e41e9ee7891a5d46097281fbee03445316d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/forOwnRight.js","hash":"69cb67124bc37def604cc91a53f2fc70ef5a672b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp.js","hash":"15a13940a645e776e00a229a7bec48f6af716505","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/functions.js","hash":"60701b3c9cbc5f5f556e4755149bf5be557e01c6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/groupBy.js","hash":"c83c97374f215d8d2fc4a945be3fc95f4f91daf1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/get.js","hash":"a7a8f09d080b36a54afd8eb6372e4a7980c46d81","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/functionsIn.js","hash":"be884ff10c7c2aaa9e5aa282f43c83e26aaacaa0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/gt.js","hash":"2431a2368b434082bc2003212b3e0d999bccc299","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/hasIn.js","hash":"8a4bf01f81a8d508b322441659f9c74f38998c3b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/gte.js","hash":"46760986d3303f7fb37d5702eb4979bfa07ad228","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/has.js","hash":"c3c35131b701a60eb1f6bf9e530c78d123268cf9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/identity.js","hash":"a22faedad02f828f75ccde4283e780168f077b38","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/includes.js","hash":"9df4a5db7d3bb50e450366c768e66fa6de50644c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/inRange.js","hash":"6d6668769673cd27c7c366883dc1a13d6d09dd17","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/head.js","hash":"c89d60ce4188354190f1f275e90b2679806bc2b2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/index.js","hash":"14d8b25e9e35c7f1b551d732fb814c982fc5301e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/initial.js","hash":"203ea571ac6274a1b12085c4cf6f71f3e14cf0ba","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/intersection.js","hash":"479bab80c24eef9cba0b6e4d716a3c2f49349596","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/indexOf.js","hash":"9c78cd978d821487b70dde60df1888feb2343f0a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/intersectionBy.js","hash":"33f40fcc8a2f27dc8afb3b360f4cca6ff3bee338","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/invert.js","hash":"8416527db2867dd6bb9645374268924b6ab5988f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/intersectionWith.js","hash":"fb382b008e1f27d616e977ad023d28030dc5330e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/invertBy.js","hash":"b90eefdfa5ea00d3a425cc1a4492be6f9afbc76b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/invoke.js","hash":"2fc969a0a16071b81b5302f828779e6151aa0e1f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isArguments.js","hash":"5c584c72d5b005d702c1b8d6eeaaf42cc510cd94","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isArray.js","hash":"bfbbc4e8ae1ab0896e10d773f3da0a905ed02107","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/invokeMap.js","hash":"a2f8a51f203186ffcebdb2fa9795ad0fd547924f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isArrayBuffer.js","hash":"81ccc5bc39404300eda1cc448e9841dc5dfa862d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isArrayLikeObject.js","hash":"300effec49e91a13bfaf9b6a9dda4ea2c4d45d92","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isBoolean.js","hash":"1ee3b20c560fca5e5b70857a7113e9dc12462072","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isArrayLike.js","hash":"4ac44f3af5e0e83a1f1c51ad8d3b233bcc942147","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isBuffer.js","hash":"9262e2663bab9f5247603a5350813f3e3547889b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isDate.js","hash":"3b69fcfefd19b70d884e85b620616495d1e4a921","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isEmpty.js","hash":"955b9f0dc4c256afae64b9812ce4131e67f71a2b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isElement.js","hash":"795fcc009cb9d391f03f4c3da7bf9b9dc5dc8140","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isEqual.js","hash":"96ec9e9d8e7c67bd24ec917c62f1ab804708fa2e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isError.js","hash":"8635f14934724c9207f2b6c0a9de17e58fd5002b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isEqualWith.js","hash":"0582944607a8bb96ffaad306e84375bc21be4d50","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isFinite.js","hash":"5da2aba8b30832be467a0463d92349d9795d008a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isInteger.js","hash":"ac93647df1dbe92f6358a992b1d5e7039cf85514","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isLength.js","hash":"0b1b50591ec4758296765c7db4f1fd9c170afc58","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isFunction.js","hash":"a2e3d03ecb875a1cbb852631d33d57f5caf71b8c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isMap.js","hash":"047110a6e5b592d42f2a86699a883481d556fa0f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isMatch.js","hash":"eaa66e5e015343f01818b3309c888397a2b4a3ff","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isMatchWith.js","hash":"60bf9f292afffa501f83381428457dc7567ee4cf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isNaN.js","hash":"711cb119497d074148b07dda40eef0fa7519de8d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isNative.js","hash":"2847be52583fc54d39648560564fa5939b755648","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isNil.js","hash":"5780b6ca6e7dee6c2599a9ac77eb302812a373ca","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isNull.js","hash":"bd68451baaba662307893e3216b99ed20cf8a0d2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isObject.js","hash":"e3ca694e2054c17abb63744a577f6aaa7e0c0b74","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isObjectLike.js","hash":"e8ffeb5b7decfb9436fd901e9129f80801e0ba96","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isNumber.js","hash":"71f10b58cd0d62e16c2ce2357a3213d67a6b1aa9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isPlainObject.js","hash":"7e266a97c01093bdd760b1bc0ea60dbfa958fd85","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isSet.js","hash":"1bd5a72d46f59d777250251d9953c7f4e2660aa6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isSafeInteger.js","hash":"a9453b0a26ad29d622f0403694f47f7abe6c7e35","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isRegExp.js","hash":"73861a998f114abee574e165372384626ae1de18","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isString.js","hash":"7e589ca389b09690e5072a67dbc24c26852ba5fe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isTypedArray.js","hash":"315d6ba6adff69446ee8b19193ce48a0a68f8f78","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isSymbol.js","hash":"84c3303d65580170e3cab6d58f20991d33e3ceca","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isUndefined.js","hash":"4e087abc1b0997f71bbf33e2065b40d438511e2e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isWeakSet.js","hash":"53722674e35e510953c05860a63f6c2bea131150","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/isWeakMap.js","hash":"20be8cc80dc2ef574f14b34195a6799f75aa317f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/join.js","hash":"ce057c5b57b901972204d4157a75b77ae1d92d6b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/iteratee.js","hash":"a418052e478006c68e23ff0a6eb408aa9dfa2473","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/keyBy.js","hash":"4778ee7987440b5c5d581dddc5894d009d4cb29f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/keysIn.js","hash":"6431a655121fb5f08e3ba5068890dde439d170ea","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/keys.js","hash":"43a923058b2de597027b181c89a80da796f31bbb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/kebabCase.js","hash":"ed770da5a2e3ada160f9dcd625a94d16ffa8fef0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lang.js","hash":"c639f0267540a6163fa2991dec8bd6fb14f4c37f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lastIndexOf.js","hash":"3bcd298ca1ec688cf4f3768f7111c4727083885d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/last.js","hash":"9e04d5c58a04740c841d4b61787e29f10d9daa20","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lowerCase.js","hash":"6280f901a37fb21a9acc5df8678661c1dd47d425","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lowerFirst.js","hash":"6b7a190cd8d1f01254d0556b7725ed8ad3ee9cb3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lt.js","hash":"f9321290c8eb23c49b344cf6b48df2b99348f1b6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lte.js","hash":"4dc69ffa2f9b22c3c4915a9a1e5618bdba8db70a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/map.js","hash":"39cefda7843d7d40c02dcd00d19a30f5a1da9af1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/mapKeys.js","hash":"b1e05f221ebd4ed2e664630919f54fc8b9682d8c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/mapValues.js","hash":"6f14fa3aaf812757f5171075d0de5c92a4293426","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/matches.js","hash":"68f0aa65f5c6e28eaf16090f4002e9f3c5d1dc36","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/matchesProperty.js","hash":"5bbd6f13b5531bf5e64c39cafd60a485aed1788f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/math.js","hash":"09b7cdb94b0829a362572cd9eb490c6b86471f35","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/maxBy.js","hash":"f2883fe693ad3975d539b9b39731052862e5add5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/max.js","hash":"2e4cf3f3d4d20b3377a14ff42c5ae47250438482","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/mean.js","hash":"17efb674e29e2456f3b1e595210a9929480e14a3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/memoize.js","hash":"dda11d8f4d8ced5f1427025a3a5e1c3696d824d0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/meanBy.js","hash":"1267b47f31ea838163b2fc9a7f959f4b44629096","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/merge.js","hash":"601f71dd59646a339060a74bee293544e401f108","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/mergeWith.js","hash":"77daa42304fc33e8e8c0811d0c977e42ab372d7d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/method.js","hash":"ba440e716a2538de5e976a4f73ae413d51dafbd9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/methodOf.js","hash":"591ea209b35ce8182a9465a8a04508ea7879c08b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/min.js","hash":"62896e467c18b402d639a32c887967b52d8a6c9c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/minBy.js","hash":"0fa61f2a77941494b702b11bf797f9d66180afcc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/mixin.js","hash":"7b6bf16a7554cdb25ae80a83c28ff4d6ed8b0931","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/multiply.js","hash":"2b609b09e6de04e168e1b5f3a4e1f5a622e2a728","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/negate.js","hash":"a79a3db729766667c083a83d43b3efb140c243a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/next.js","hash":"8504ac753cf6e3e19d811038503ee000b7829e8a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/noop.js","hash":"9e637bd0f43c805a5166097b025246e57a76c6ff","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/now.js","hash":"64a4e9bd84f12a8bc00bf3a72bc5240352219526","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/nthArg.js","hash":"baaaf7e9e7e592a3581afaeb34b6a15ba3e0ccb9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/number.js","hash":"8c2564ca466fcb7f4f0decd5eb79f803f39983f9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/object.js","hash":"9fb54c7a4df121ea593a878c3a8637def697c1f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/omit.js","hash":"74e2913198d4870e68b4b1f1fb43828a34695ac8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/omitBy.js","hash":"3b23053b9f07612d2009c0326af200681042aa75","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/once.js","hash":"ef0e5d4cc60430fba176bd0ec59b896282193c65","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/overArgs.js","hash":"5784892fd8bd674913a9e17796da3aed39621946","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/overEvery.js","hash":"3e4e9abc018e0e8c72e4127f299faeb1fbe56af5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/over.js","hash":"1a75aaf3bcc2770d1720069e9fc7bbe566ce8277","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/orderBy.js","hash":"7665eee9891d204d48cdd799992dbd6a9678125a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/overSome.js","hash":"7171435d8f1ffa82d3ed5715896171dc160b4930","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/package.json","hash":"0363cd7b4adf2775a1be2526cd2e3428c409e816","modified":1460380289000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pad.js","hash":"b6a0479a2ce0289d29214e8f7ff83a0074406d25","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/padEnd.js","hash":"5973017726462db292d41c2f28b53b8a4a24c507","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/padStart.js","hash":"d6ea6887328ca596d505af7b181edcad862865f4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/parseInt.js","hash":"9586c7ff98745000f1dca8ec81f98d3e2c8c3270","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/partial.js","hash":"e0158034457f9ea71db5463039baf38d95a1cbc4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/partialRight.js","hash":"94a862f29a922a61ea0f74ecc9ed0507c31a8ab0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/partition.js","hash":"cd2833710e7737297459e28cba6b8a3f57f9074e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pick.js","hash":"a8eb4854e766f2873c052efa5cb61be3be3e5063","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pickBy.js","hash":"d8631faa14b44ebf514a5529ebf39de13382f623","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/property.js","hash":"9ce2a38ef85ba51e733bfc5edec7462ed1f214ec","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/plant.js","hash":"2b370614388e8fc4a0e12d2eaa644c25622de026","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/propertyOf.js","hash":"5c724906ebfff6e6c8d4208ca409b5e23bc6432b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pull.js","hash":"0b65511632f14cb29c3367f2fd1fc053b2a9ecb5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pullAll.js","hash":"46e66589aaf3da681dbc5e959a8c0623b6baea0d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pullAllBy.js","hash":"38993a054fb147ddf0892c4b42c9146a4285b3d8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/random.js","hash":"fee3714299da4a55020abc6587944ae91b5672e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pullAt.js","hash":"9b6557d8e1cb58c2c96abec9fc792b55831ca04f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/range.js","hash":"bfe8b8aa23238941d79e6b80962038236bb4af7f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/pullAllWith.js","hash":"f205f46a35a1b3d40f86c92dd9488e25c59cf5b9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/rangeRight.js","hash":"2c44c4a46de87d847d1af2beda84fd8604931b00","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/rearg.js","hash":"cb815a6d5d66dfc9d7a8da2918e2c7636863619a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/reduceRight.js","hash":"f58f1cdc5da6cef1e7349590570eb24e49fe17ee","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/reduce.js","hash":"bf93ba6954767e3bd2ffcd68820e0b26a2e93a70","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/reject.js","hash":"63d40c381d3815f5e21858b931bca7bec55c14ec","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/remove.js","hash":"b6e093b63675e08ffd73f9f4c7c0d3de32c60a2a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/repeat.js","hash":"8a5c222ac1514d5732374f165d8df9dc0274bd71","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/replace.js","hash":"a35231e4112316c03e6c65162affe9effee35922","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/rest.js","hash":"11f2c8ce62f10bff2556d1b0998ae82703afe035","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/result.js","hash":"e5cdbd5a042f373058508a316a19b58884d4bd9e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/reverse.js","hash":"219412559bcdd068e6efde6bae6cdc8aa84960b7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/round.js","hash":"629b46fafec63f591a3c6b02ee03529ef43a8acf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sample.js","hash":"728342d34e05ba94c2f72cc5f12252895abfdbe4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sampleSize.js","hash":"6737d7c6d30d29374384d3fbbaa5e09d68313f1a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/seq.js","hash":"e8dae0be3b8ece53ea5d6594d0b45d221f643576","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/set.js","hash":"bd5aefade6c00bbf37fd21dcd79e0ffd085a6084","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/setWith.js","hash":"012090d3598aeb4e36cadb5fb3ee7ecd9d184211","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/size.js","hash":"dbda4ae3d3bb6f7776c03fc1aa976bd5696eb599","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/shuffle.js","hash":"dec668b9cbba3c52354d8eadda33f62f7d0c5be9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/snakeCase.js","hash":"b95290beac2d4eb4436d72bde0b191a8db147970","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/some.js","hash":"d38a46511893b483e391850f0eff9954568c8dd7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/slice.js","hash":"e4b4833e104eabc902c5b1864672ffc9a08fda22","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortBy.js","hash":"181072a273ad8a1c18ffd27836f48f6c3c66f064","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedIndexBy.js","hash":"82542b4d32cfd9f954e8380a6e4b9f1e1bdd695e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedIndexOf.js","hash":"0d4542e1d7257cc14d94b65dc6973624716f1812","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedIndex.js","hash":"31da84256a9cb1bc9c8af9c6945447b49b5f3b6f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedLastIndex.js","hash":"d854308c4f881768dc83c5b1189abfe4f8d368cb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedLastIndexBy.js","hash":"a883d2684c6bb198950bc6910fe9ecfd38b2662c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedUniqBy.js","hash":"ce61792ce9a69c6b65f854bb886d331b26487199","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedUniq.js","hash":"612a221cb2088447b6510930f35f7140ecf41d1f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sortedLastIndexOf.js","hash":"93572995e2a6069542aa167d8d0e45275beb735f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/split.js","hash":"428899af905ab9f535ad91883ac1528eb5c6253a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/spread.js","hash":"ac9c672320779a3d7e9e989fdf0e6e17f9577b15","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/startCase.js","hash":"5cae4afa2846579e8173a62ae27253a75fb57119","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/startsWith.js","hash":"28eff722f69bfc9a73b1592f2ed457a57028d86d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/string.js","hash":"9da506e6420a685f56f77ccdcdd4dfe0ffe552b0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/subtract.js","hash":"3bddd3ec0a5c97d55d490920a8cc0147ece4c015","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sum.js","hash":"b468caad43dbd33443e584c510697155ec12a71c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/sumBy.js","hash":"3f13393c54349f2abb31be6cdcd5345bd53cbf0c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/take.js","hash":"07615e176130761c61262b882598a6aab8bbbd48","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/tail.js","hash":"c908fb3577ea235637db2380ea22377b4fec9814","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/takeRight.js","hash":"17a6fafac0497b6fe5d82a767d7c7142b5591f54","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/takeRightWhile.js","hash":"aea5ec91d848601f201693cad5f5f9e0716a559a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/tap.js","hash":"a1f5e1966c3620b69def36154a27a8d9893d87f1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/takeWhile.js","hash":"20c9b6e2372d0ef381a24f772073e12b83cfd32d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/template.js","hash":"3917060a16ee36040fc8555a8d899fbc4d4e9cfd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/templateSettings.js","hash":"3646fa4b27c19d376be193ca5c106ca2ce5c4493","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/throttle.js","hash":"1e47bd1b616255df8c19a05a3a97aeb727a89d90","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/thru.js","hash":"d006fad2ab19f7bc90e0ec69eb5037f081d99bee","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/times.js","hash":"6b1946d4f176f6751d212940c8a713ede10c1868","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toArray.js","hash":"b17c71fdefb8d42c45b003be0c80e89c0e1b457d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toInteger.js","hash":"562beccfdf1671716bec3d00b0121dbfa4a1f6d2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toIterator.js","hash":"f8fc807ff29125bb2dab968633ad964ec94194b0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toJSON.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toLength.js","hash":"4b3575fdba0b4c87fc4f04f9138f18411fd41958","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toLower.js","hash":"3cf1e67f3e193b9f982b8814fec29cdf99b6b038","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toPairsIn.js","hash":"cabe4a6317a87b483b15c19b5be585e36a03ea5e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toPairs.js","hash":"17d65b572d0f97fca8084953d8dee0861616f46f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toNumber.js","hash":"d52bd18b47130adb24383c385ddd0ae574a96c0b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toPath.js","hash":"733b308d1066bbf89fd03962b52fa83aeced31d8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toPlainObject.js","hash":"4e96ce3252e389b1633a2c73fc9d68031a12df29","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toSafeInteger.js","hash":"38ecc93e644c5d89772bc8dd19eedf06e2e3318d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toString.js","hash":"f8ec62be401804f51e18f601cd14112111e8f6d7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/toUpper.js","hash":"5e6fa81c32735a5c142884a1da0b1d88b780d05d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/transform.js","hash":"dfa15fd34f3fb5762b2c6725e366c23e969b084d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/trim.js","hash":"005e67af5137ef1098ee650046afa11c07706830","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/trimStart.js","hash":"541c2a71f58d13cbe0d0f3434f4e4325eee69d28","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/truncate.js","hash":"d0203f6ce5321155772d6a2d843507bfc7621457","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unary.js","hash":"276b22472b676974fcd40cc5d4a36d0819670e0f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/trimEnd.js","hash":"608d989e110e0d89d77efc10ae848ae3315c0088","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unescape.js","hash":"f5b6fe1f2692fb0c999996e3064425459cc5b61f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unionBy.js","hash":"17fa97e345039dfcbdb372fff241b6d758a388bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/union.js","hash":"a56fb2ded489bacae2792a8d16d361402a96acde","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unionWith.js","hash":"e24bdf001f652daa7204b314b614eec2f031484d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/uniq.js","hash":"ed73e450bacd9cabf18935febd6a87f1cd1eb77e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/uniqWith.js","hash":"4063d40ae895f25b35819a1ba1b932c3d4cff39a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/uniqueId.js","hash":"0809eace58255a033eb37e73ce581e2cc6fe26d1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/uniqBy.js","hash":"070e2d78aa363010be4d6f9e86b1c1137a01debb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unzip.js","hash":"8bf0e410182557a625d7a23a20989c5b32ef5706","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unzipWith.js","hash":"13255720f48e23ba96205aa49fe5bb538b3c640c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/update.js","hash":"dfb0993a9cfa3d636affa1b91af58c4a09ea45db","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/unset.js","hash":"5f2a9664870f21d2b7dcf0255f50ad9b37a6c850","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/updateWith.js","hash":"8f3b85b191de22e97bc4708775b28f8e1d758104","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/upperFirst.js","hash":"091005e45cf8b9ce4f51e1b2ff2da30558b40714","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/upperCase.js","hash":"4ce59b5839e848688ed76fc99d62f35168f9f46c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/util.js","hash":"0e8ffe4e8ab5b9e89d9a679b51f381d8897ac238","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/value.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/values.js","hash":"20c5571cf48073f8be9e55d268134a4706a36ed8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/valuesIn.js","hash":"5d6cd8fa3358eafef39b236579720c3d6c4450c0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/valueOf.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/without.js","hash":"488fc343edeb14a25d99ae837df609889aed178f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/words.js","hash":"1b784435556577d5e32dfc16c37f41b21aa31079","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrap.js","hash":"4489f4c15968a80c53937e3ba59b4a7f2d88babc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrapperAt.js","hash":"0715480a4e635e5909984e7caf05774d478ac1c7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrapperChain.js","hash":"0b6afa60d6fedd5ae935c2127562ba2a590b5b14","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrapperLodash.js","hash":"d29a6f6eb9a0ac3b7cd7f4301e48524e6519edc5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrapperReverse.js","hash":"2318334d83fc88acd2b7fa81c1a709b957719f4a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/wrapperValue.js","hash":"dcf31c73fbacb8ab409179125d9ffe51e1ec8696","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/xorBy.js","hash":"7b56ead87b2876adbf688fd260338a758e8fefa8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/xor.js","hash":"c02367a34b6e7fb08ff37a871b2aa29068be4400","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/zip.js","hash":"d901c41086b22a3c104e3b35236ea9c631466554","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/xorWith.js","hash":"0cedbec645d5ae1b5e745d055196aae593cd15b4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/zipObject.js","hash":"fa1c2ef419f663fe0b552effed4b64428cb52f15","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/zipWith.js","hash":"5d92ee250cd8fac67ffcb605e5c5ee82e9e8432d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/zipObjectDeep.js","hash":"a4cd8a063e87152a2229d1493af4fdd0419d3ff0","modified":1460128955000},{"_id":"themes/apollo/node_modules/spawn-sync/lib/json-buffer/README.md","hash":"dda2255200591fc11ea2e4f53b231a0ba87544aa","modified":1418838658000},{"_id":"themes/apollo/node_modules/spawn-sync/lib/json-buffer/LICENSE","hash":"19a06b8c5c2a7c8fe7fd64231318076c92d05cda","modified":1418838658000},{"_id":"themes/apollo/node_modules/spawn-sync/lib/json-buffer/index.js","hash":"343f2b4874f66f08a894f9e891387358de9877fe","modified":1418838658000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/pem.js","hash":"8288839f3bc23aa06ff4be127a0c7099511668b1","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/auto.js","hash":"ef4cc1499a3c7c3d96343b8edb2965c9630830a6","modified":1446856544000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/pkcs1.js","hash":"155a8e28b24cb78b4d2a9cc88acdbd24f8296e97","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/pkcs8.js","hash":"c9f73599e6447ef8cd55d670335b710bf9eb666e","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/ssh-private.js","hash":"cba9761409b07d0d383aa58185d968613edbd5ff","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/rfc4253.js","hash":"31768dec67a622cb3a29e665467a2c6506923da2","modified":1455236041000},{"_id":"themes/apollo/node_modules/sshpk/lib/formats/ssh.js","hash":"e05ce4d9981b2d0ccbbc6c5b28f1c4497adffe56","modified":1447889453000},{"_id":"themes/apollo/node_modules/sshpk/man/man1/sshpk-conv.1","hash":"a64a4769ca648e2047d255bf5237ce051f6af15a","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/man/man1/sshpk-sign.1","hash":"742f5bb2986ad635eb081bad695573cd6826c96b","modified":1452565517000},{"_id":"themes/apollo/node_modules/sshpk/man/man1/sshpk-verify.1","hash":"a5c70f82de5313ee103ba9bf3cfb9774465de370","modified":1452565517000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/.travis.yml","hash":"f4f8520976704e518fbf4dfd0327c9c85897cbc1","modified":1457790108000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/.zuul.yml","hash":"0af73c9b9845d91872644251c6d7ae945205e868","modified":1442671065000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/README.md","hash":"91831f48f5af8150b55e5dc8611b71885ed5591e","modified":1457876227000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/package.json","hash":"43ed676ecbfbfcd88222fcca06eb816ef179abec","modified":1460380284000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/readable.js","hash":"f68ae09e1cfcd9f75f8d43cb82724b3dee5d9251","modified":1434936362000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1433891361000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/package.json","hash":"0415541d8a63e585cfdd300a66be9087849270fd","modified":1460380283000},{"_id":"themes/apollo/node_modules/through2/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/apollo/node_modules/tough-cookie/lib/pubsuffix.js","hash":"56aac14d8b2dcacfe05e3447a6e4bf9dff2fa0d9","modified":1443808008000},{"_id":"themes/apollo/node_modules/typedarray/test/server/undef_globals.js","hash":"ba4353da7ce4b686c6e6fbe3acfa32dedaa46ef4","modified":1386647008000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/getStats.js","hash":"356b8911b8a18422e973e146a533e07e341f7cac","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1346721042000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/index.js","hash":"720c95a58c2077a351bb3c482d5989d089c53708","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/dest/index.js","hash":"ca21f5ad24522d0c8e8f8fec2dc4ec9f6610c187","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/.travis.yml","hash":"e438209a0417a788ce88536eb381285cc1de05af","modified":1368383060000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/LICENSE","hash":"b943bc3de7bcc7b5eb5c4951370c5df745d8c8d0","modified":1404039267000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/clone.js","hash":"b3d4cc4e904d116bfb144bba1c489bb9068149a0","modified":1417042209000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/README.md","hash":"8a633b84e8ded4e6faf45640108dfbee433a416b","modified":1417042209000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/package.json","hash":"854ede6a816a91381da0b8aeb11c3c19f5c96398","modified":1460380283000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/clone/test.js","hash":"910e24b3afbb0bdb0485793f757f90012f9472e5","modified":1417042209000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1322520827000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999494000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/README.md","hash":"39b898216c6bc12c6364d5477fb69d7abeb0c1eb","modified":1401673729000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/fs.js","hash":"214a84634b81d45fb802e1682466a6dddebea473","modified":1416354878000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/graceful-fs.js","hash":"b052eadbfcc08c68aa22828abcdabcb7a1b38d3e","modified":1433134992000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/package.json","hash":"a57d05ed709c9c7eafad1263710251e62b6f3675","modified":1460380284000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/polyfills.js","hash":"1ee3e1dcc76baed780d3f21cb1496d66d0b8d091","modified":1426109322000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1414231540000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1390625747000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/README.md","hash":"3ecce92efae230a3f6debb25a8ce965b25c14072","modified":1414231526000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1388359679000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/package.json","hash":"2aa103a7b797cb4ed16902c75404cab03e79fc29","modified":1460380284000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1388359680000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/readable.js","hash":"52d449d64dd584bac6f7fdd9ef5f257046482ba6","modified":1414231442000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1388359680000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1388359680000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/strip-bom/index.js","hash":"245294d16d567468201cdc654f5822cf691c8cab","modified":1408239708000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/strip-bom/package.json","hash":"17b2678d02c8c9a9ebc4822b00ebbe34f3bb9337","modified":1460380282000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/strip-bom/readme.md","hash":"acd13da40c7c166588abab091aa42ab51a664eed","modified":1408712564000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1428599741000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/through2/LICENSE","hash":"9111ee4142f0ea90481a6805bfdf840f6e5213d9","modified":1428599741000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/through2/package.json","hash":"3593427bfdc6b55a26a60ec967dd906934c8cc2b","modified":1460380282000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/through2/README.md","hash":"dfcdcd7261144b54eb808605602d2b11256b9fc5","modified":1428601273000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1428599741000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1405745814000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/README.md","hash":"228fae87c32d78d629e6e531df6ada27cadabb25","modified":1409233342000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/index.js","hash":"0da367ab607a8b3159ca3170a47aeb835a8aa021","modified":1416781152000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/strip-bom/cli.js","hash":"89d5f738b25054bb4c82e60ad90f0a6ee81c9e34","modified":1408712487000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/.bin/strip-bom","hash":"89d5f738b25054bb4c82e60ad90f0a6ee81c9e34","modified":1408712487000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/package.json","hash":"24251b619239db9a64aa661e1e442fb717eb7628","modified":1460380283000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/m4/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-value-example.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1447192294000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter/deep_ref/main.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/baz/doom.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/other_path/root.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/core.js","hash":"75452fb2aa12c4cadec93ca3243eb097fa6cf66f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lodash.min.js","hash":"4dc1843a010ece776913f745144ed2dcf2629367","modified":1460128955000},{"_id":"themes/apollo/node_modules/source-map/dist/source-map.min.js.map","hash":"595ca3c8d787c96290a48c25b4754e27aeaab95b","modified":1445614125000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"fa351e6fe45991f886fddaa20b3e5d2457c51617","modified":1453369844000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/master","hash":"29e0e802b9d7ebf221b19a22b7c4b32bce08ce98","modified":1460383820000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1457790130000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1457790130000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/doc/stream.markdown","hash":"10432335bea3230f59e7d889246b5e891360f163","modified":1457876227000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/lib/_stream_readable.js","hash":"9c18555e3832293b79c9437c56d4c5e453f85eee","modified":1457790130000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/lib/_stream_transform.js","hash":"e9b4761816194578f90bc065a405d3ce09b204d9","modified":1457790130000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/lib/_stream_writable.js","hash":"de86cccbe828e61bcb25bc376c6c107fb577e0ea","modified":1457790130000},{"_id":"themes/apollo/node_modules/aws4/node_modules/lru-cache/lib/lru-cache.js","hash":"eeb0f7c231e04d00540d0733077c28f1bc122d89","modified":1458666750000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1457790130000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1457790130000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_transform.js","hash":"e9b4761816194578f90bc065a405d3ce09b204d9","modified":1457790130000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/doc/stream.markdown","hash":"10432335bea3230f59e7d889246b5e891360f163","modified":1457876227000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_readable.js","hash":"9c18555e3832293b79c9437c56d4c5e453f85eee","modified":1457790130000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js","hash":"de86cccbe828e61bcb25bc376c6c107fb577e0ea","modified":1457790130000},{"_id":"themes/apollo/node_modules/cross-spawn-async/node_modules/lru-cache/lib/lru-cache.js","hash":"eeb0f7c231e04d00540d0733077c28f1bc122d89","modified":1458666750000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/@@iterator/index.js","hash":"643d8376cf7aa23cb5d20d94a90f0d9409c96851","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/@@iterator/is-implemented.js","hash":"2ba2fc1be2fda116ec7fac6959167637e017b3e1","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/@@iterator/implement.js","hash":"27d4440f5148563535c0293b14379744de506448","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/@@iterator/shim.js","hash":"41e0660da86d6c7609cc2fdc2bd2a0bb8fb23c2f","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/concat/implement.js","hash":"66d3abb81867e29a1530112bba40c92ba093b56d","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/concat/index.js","hash":"dda111a33ab429a73a50958b7e2f469660862f52","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/concat/is-implemented.js","hash":"fc414b64aa36a1db6242d63a40c7718d9cbe805b","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/concat/shim.js","hash":"b7a83c47bd78449a981f3ecf4b2b4aba0dc6df82","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/fill/index.js","hash":"2d37d3bac099dc9eef9fba220c7072cf615c88ea","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/fill/implement.js","hash":"3318a96f833c6bbf1b9912932e9cdd7ac2f0cb38","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/fill/is-implemented.js","hash":"c3a758899da2b695e764d52c49b538f1c48f13b4","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/fill/shim.js","hash":"682415d7c2cdfdca8964628689d7c74069a60999","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/copy-within/implement.js","hash":"9097c339b7c00a32c0dec9e6c427a1013307861f","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/copy-within/index.js","hash":"676b2f7bc289b4194bae8d9f13158aba35cf06cf","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/copy-within/is-implemented.js","hash":"696bc7e9004eaf0d279d65629980e7a9406d48d7","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/copy-within/shim.js","hash":"9e8722a7680fa8256e47af31d5e072cc02d3c8f2","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/filter/index.js","hash":"299254c03a02654e4d537149946d62ff5175a94a","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/filter/implement.js","hash":"33fde473fc68b49ceec3ebca0ec3cc42987da0d3","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/filter/is-implemented.js","hash":"517aa149fec4e4b7ce021576399161286a1af545","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/filter/shim.js","hash":"6b8a9b727267709fdf22b7bfb53cfb3f70bb31b1","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/entries/implement.js","hash":"1f841c0c9a63716c3e8961650be3889d7e943f0f","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/entries/index.js","hash":"50f03dc1b9e163badc9729ffc2e6ca41e4b02787","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/entries/is-implemented.js","hash":"652a0229b0fbef26a904f3a6f3c259fcd1b0e85b","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/entries/shim.js","hash":"0e72a712c023f3451e420d42254745f2c6148a61","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find-index/index.js","hash":"e86279c3270e631df1af1d819edc98737c68df87","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find-index/implement.js","hash":"9aff18c454fb611bf718a681f0bff176be39b14a","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find-index/is-implemented.js","hash":"3dc345a12c4db6db0247ddbff8fae64b2a67a2bc","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find-index/shim.js","hash":"8f950036fd22ae85a1155ef56e2fe36dedcc28bb","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find/index.js","hash":"26478ec505a02f95e565d12a136718ca22833186","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find/is-implemented.js","hash":"622aacac0467c2e88f60da3b9b73b106083edb70","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find/shim.js","hash":"7803545bc81dcf3d490e1cfc622759a45085a817","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/find/implement.js","hash":"591b19d6b8a2ffa58f18c9d5262c8907559319f0","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/keys/index.js","hash":"e851d0ccc8af9d3a4c96f810d51889e161f8b54a","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/keys/implement.js","hash":"fca5abd65650c292645a6ca6ba4834d4ac88c4cd","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/keys/is-implemented.js","hash":"f439233b6ea1efd25778e93efae231813433a69b","modified":1435238756000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/keys/shim.js","hash":"c14265485302d18a0ea8215826571f3c57a11e07","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/map/implement.js","hash":"390fef6f90497c727b786a73bb3b5992a3b05107","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/map/index.js","hash":"8307fc7f68ed1329bfa1d37955298a9cb5961db9","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/map/is-implemented.js","hash":"f8964fb30d24037efa2085613a0b2e7d57260769","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/map/shim.js","hash":"6d897a32e9bde44b76e10b066fbc96a0df2981b1","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/slice/implement.js","hash":"c683782347b7008bd5589d5d9692b45f95333556","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/slice/index.js","hash":"fcc06e237ca8d5a5f38f535cc9efea6b69d2cbdc","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/slice/is-implemented.js","hash":"3c8c228874fae77affb3de7e4848e904bb340186","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/slice/shim.js","hash":"2dbeb1923155eaace12ad46cfe617da4be1766f9","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/splice/implement.js","hash":"ea4cf410d1da38fa919c90632ae268a1f5bcb0bc","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/splice/index.js","hash":"651f529d0d9f77f50eeefb3e10cec4045c496522","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/splice/is-implemented.js","hash":"98e3e3b6865a38cf9c571865a48880b750a5464e","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/splice/shim.js","hash":"7ce42c51fe370aa374119e991db89133e47da23b","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/values/implement.js","hash":"4c39b7942700a1218ea32ebd7e7560053d615fad","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/values/index.js","hash":"445d198fc8edb021d157b34018ff784016df2eeb","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/values/is-implemented.js","hash":"0cd8698e95d817f82e2d1f618937e2aa857ef8c2","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/array/#/values/shim.js","hash":"dbbe13c44f2c641f07af9b2c0a2d36c2db7e2a2d","modified":1435238757000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/match/implement.js","hash":"74e35abb3b0cbb7a512efdbbff931d9600fcd883","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/match/is-implemented.js","hash":"cbfdf41ff1bf1b9f7038be8c206c84736692b045","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/match/index.js","hash":"c88944d070688a33eb35cce916c5414e8b87e2fb","modified":1435238760000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/match/shim.js","hash":"30c3d6985009abf87d5d36afa3aad8eb580c1528","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/replace/index.js","hash":"7d5181a2cfb2b67bb2564f0f1be25999fac3514f","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/replace/implement.js","hash":"59bda441a638d38abf720a48b0bd52beec210b2a","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/replace/is-implemented.js","hash":"271575ad781b915dcb0dbdb3bbb111aa99abbeed","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/search/implement.js","hash":"863366c509093757d5fd62a46bf194ca70e914e2","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/replace/shim.js","hash":"d83228cff6d4a2f50a745bd24be44731ca97c8fb","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/search/is-implemented.js","hash":"63ed782532b92483bb425334451b1fb7eef9134e","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/search/index.js","hash":"192c5d76e54ed35e639f4e783b316b0bbf478784","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/split/implement.js","hash":"b0e4e7426a1342a78e1a8e4bb785e7f819282825","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/split/index.js","hash":"46c47fbf952a34b7608b1fdea77204187a3e86f5","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/split/is-implemented.js","hash":"257b4e60604d19ae6c980af887ad74aa8d041953","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/search/shim.js","hash":"2c66860eceb2b4c3894ec4540d90f0503f8a3a6a","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/split/shim.js","hash":"2b7bedb8f6e44d572b2872f6607a7930bc1136d8","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/sticky/implement.js","hash":"984400a14596b81f7679986ccea52380cdd275eb","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/sticky/is-implemented.js","hash":"6d1da93e0f6a2dd4205ea71d7deac7e8e217c3de","modified":1450438031000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/unicode/implement.js","hash":"c2169020d66137d4522882b8d3003da205a1f9f0","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/reg-exp/#/unicode/is-implemented.js","hash":"83e5f2817e46e359a2e97d2e9a62d36a66454e38","modified":1450438042000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/@@iterator/is-implemented.js","hash":"329445b7ce796ee2adbae1c808bf71e8ef0c8f55","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/@@iterator/implement.js","hash":"a7ce0903df36d1398acc6abd1cd2253dde4e181b","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/@@iterator/index.js","hash":"2b01e3ad662cc989b1c16c673e91e4534be2c468","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/@@iterator/shim.js","hash":"ac92262527bb02c95406ea078fc39860f5a047bf","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/contains/index.js","hash":"38c38b069a3af2a79a183bb57fce9455d16b9110","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/contains/implement.js","hash":"aba3e8c6445e5d05c529d0570d24c314db5c0aa8","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/contains/is-implemented.js","hash":"b01eb8f60f61bdea714df5a0aa7765adf51d51df","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/contains/shim.js","hash":"c12e0c3277444f29b3cb597bbbbc0f581f9f732f","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/code-point-at/implement.js","hash":"a031d00542333c007f86051ad7337dcc1c98d0d3","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/code-point-at/is-implemented.js","hash":"000377a994da05f380bf4c7ad96af2975ee33bd7","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/code-point-at/index.js","hash":"cdacc12b52d143c16e161997843a86f70d70a135","modified":1435238761000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/code-point-at/shim.js","hash":"57b6cf4cd69b50e37facc31c2c2781822ef8b8ec","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/ends-with/implement.js","hash":"17781566d619dcfb114b9b42c9b5ae615024e9ce","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/ends-with/index.js","hash":"07a201d930a15003f66dcdd14bb06f023111af9a","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/ends-with/is-implemented.js","hash":"20c2cca3fc8b0d7b4074ad4a27c692d7284f4c0d","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/ends-with/shim.js","hash":"98c7873295803b107bb2adfdcace471648ffcc29","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/normalize/implement.js","hash":"eff0071d37dfbb419cee760b78c5c83a3096229b","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/normalize/index.js","hash":"6f29eb828ab5534beefa2b36d5ed252bd85cf12f","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/normalize/is-implemented.js","hash":"e761071fba72ef17d4f6b12fff6eced300c5fbf5","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/normalize/shim.js","hash":"742379efd1adb0d937b0246fe8a65175d0e4c972","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/repeat/index.js","hash":"1c0ca17f2370f981a04d30789842cd86ccafaa65","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/repeat/is-implemented.js","hash":"a568db17b89ec4341d2118c8b9910eec9a89483f","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/repeat/implement.js","hash":"acfdb741ef87b924867033285b3bdd5c0457d4b2","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/repeat/shim.js","hash":"82b2f1e949d109445ebbb3ee9f5b866376769ac6","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/starts-with/implement.js","hash":"551b8c7fefc34f83d7e371bdaa8ae2a7ddbad2cc","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/starts-with/index.js","hash":"5a612a2512fb6d32532433351a984b06eb4a11de","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/starts-with/is-implemented.js","hash":"79cdcd16c1696346077c5c78a6ddfbed8a4f1643","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/starts-with/shim.js","hash":"980949acead15db8607697142c077a2cdc6b3b72","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/days-in-month.js","hash":"25a4c925b4d0967fec4508cf4db0ce34467c4333","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/copy.js","hash":"7cc4cc17e636b50e900043b6bb7d0796ceda10d2","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/floor-day.js","hash":"317e53a20f184b3950e3b57fdbc78456ed56a87c","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/floor-month.js","hash":"41a8289289edcd8b8e432106adb79d7e3096eaad","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/floor-year.js","hash":"c2a00357f3829549562d1220fa82b26fdb31db17","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/date/#/format.js","hash":"08f41d61480e5422244729cafa833d3ba8a8554d","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/_compare-by-length.js","hash":"53de4453220f8342372d4fa569cfcbb262ba15af","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/binary-search.js","hash":"26ae3a060c43c1a6a8eeddad379b251037090834","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/clear.js","hash":"a69f06bbc0cefe18779492a3a96612d9c2da33b1","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/compact.js","hash":"6e2cb6c24f5e34bd414bfd9b8180ba8bc5878143","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/contains.js","hash":"72a33576f8c358afea74c6426c237c2747617d41","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/diff.js","hash":"35b1c7d4b1d046d1cffecce80461db577a66ff5d","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/e-index-of.js","hash":"28b2cd34ddeb731883538f32ae52e9e4b2a4e2b3","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/e-last-index-of.js","hash":"0bcd8173b6a53043cfe8dc448d5939adc37e927e","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/exclusion.js","hash":"67ca6f7280fd2d9aa355c566cfe93ebef34a4ef4","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/first-index.js","hash":"00974660e9eee5c553a941fbdc8a9b53f8eee097","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/flatten.js","hash":"591856b80b2888e6416c0c4bd7d29d8055535fdc","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/first.js","hash":"75f89fcbddde409a0ac85312c3314cb955fc76ba","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/group.js","hash":"fd036fafdaf88c968a11f6979306c9dcb05b681d","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/for-each-right.js","hash":"1b2af260fd78d9579bc691a291392dba3a531e18","modified":1437037914000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/indexes-of.js","hash":"81eb0f1eb267f767a3c0375afbb070000fda0b71","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/intersection.js","hash":"be81086514d1c877beaba68724024fb82a3d84fe","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/is-uniq.js","hash":"34263eca6fc6173910a1032bd90ef34552f159ac","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/is-copy.js","hash":"6fea15b9c94b4baafc35962daa7e0a9645376c45","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/last.js","hash":"9b51d346d61c35d7b4e85868354812c590caf167","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/last-index.js","hash":"40d7a973d0ff587960d98ad4f266e656202f50bc","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/separate.js","hash":"3cf63f724a3c272e3a8c17100ceb5e65e978a30f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/remove.js","hash":"858f85a8ca874527ef138db4365cd3c1f67fe4c5","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/some-right.js","hash":"b5f2596345a9a131af58e05afc7645ba01533b91","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/uniq.js","hash":"a0380024fec40a4e9d96cb413a3feb7895cb71c7","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/from/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/from/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/from/shim.js","hash":"9907ff48b6a10110387a7efc517c4a0399518e96","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/from/implement.js","hash":"87cdfdd20f3e65377f92d6a0a22196b9730260a3","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/of/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/of/implement.js","hash":"51322fb6308fefc4bec7fb854a9c544aee14ec44","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/of/shim.js","hash":"a4faa1dbec0775d7368c25961018d6aaebc0979c","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/of/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/compose.js","hash":"ea133d5d2d63fd29bc28a5d82fa4b2f1900fae5a","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/copy.js","hash":"67b07e549b37fbbc0824010b9ea914f6357b4e74","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/lock.js","hash":"a63a8ae9669a925f89eafe049de0ed9943da2199","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/curry.js","hash":"33011d506744cad0d6c711ed74653821fbbb07dd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/not.js","hash":"2cec1f60805846729f737f99faf57c18fec1dca2","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/partial.js","hash":"83105b2c7638e79335ab4b048c6854a83cc80b82","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/spread.js","hash":"171c65bc14ef5ec946ac66deb1fba5790303c0ee","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/function/#/to-string-tokens.js","hash":"af8b964880edc5fa0e38652ee5e3e28d66018f2a","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/error/#/throw.js","hash":"c3a7915cab0b807a88f4ac94008bbffd0cd208ce","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/acosh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/acosh/implement.js","hash":"39ed76dc8e3ef5ca7faf1bbc29cd1c40d062f280","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/acosh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/acosh/shim.js","hash":"4aa191495d2e33633b030b487a3c83dd43a965e5","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/asinh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/asinh/implement.js","hash":"d0d279f0f63ca743478f9e1281c32b7ef049d67f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/asinh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/asinh/shim.js","hash":"19f51c4087aa9644a0c2a82057acc09610284a98","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cbrt/implement.js","hash":"b8bf64c5fa837b40c4b98cec1ba66703884e9fca","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cbrt/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cbrt/shim.js","hash":"0bfdfc2b06ddd04f935eb03d0d48d7b90dc140ab","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cosh/implement.js","hash":"24aa6f9151764ab065d3ef10c3d8973bf1ca804f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cosh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cosh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cosh/shim.js","hash":"78d63a34268ebca7e27d2aff8a17179034fa5a1d","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/atanh/implement.js","hash":"0cfa9119611a4b267ac58d44d7806f82e2ef6576","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/atanh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/atanh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/atanh/shim.js","hash":"d69a244656e824d6ebb63508265e04ea787f5b50","modified":1435238764000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/expm1/implement.js","hash":"3a44ba6b71601e60827f60dac73a72470c66cfa5","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/expm1/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/expm1/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/expm1/shim.js","hash":"7c7f89f10b188267baa5ca27206f4f4ea4e1601e","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/hypot/shim.js","hash":"58ee730f821ef32953cc045b4cd6406c1dccf178","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/hypot/implement.js","hash":"efe0c2d4c848c2c5ca8bd628d708a0134d30012e","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/hypot/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/hypot/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/clz32/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/clz32/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/clz32/implement.js","hash":"05fd584cb93f2402c4e656f33a51fd4c3c9fa0df","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/clz32/shim.js","hash":"c5f511b22147a8726a890817e3808cd17b643311","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/fround/implement.js","hash":"1585b9090a4c4a4bd4675edd686d9dad90fdb129","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/fround/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/fround/shim.js","hash":"9792ed14831aa793f53def1e70a0d56d17992fec","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/fround/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log10/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log10/implement.js","hash":"486810c38997f808643906895849619fdc21b756","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log10/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log10/shim.js","hash":"4f8515e4d721432f33f73ff12d0ff614f6869605","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log2/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log2/implement.js","hash":"c21432c8a6b716a02abf24ff549dc50b5fbf76e3","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log2/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log2/shim.js","hash":"11f57f8722a3d403b36f1b3630fd346ab20ada20","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sign/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sign/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sign/shim.js","hash":"a4efadeefc619cdba138ecbfa2b63497a5767899","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sign/implement.js","hash":"5f6a5c4bbe28018e77b83aec3e3d43eeb066feee","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sinh/implement.js","hash":"746b144b22565091980f4dee9a7292e6208ef736","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sinh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sinh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/sinh/shim.js","hash":"187b479e921aa2fae7919fdcd0061a65125e27a2","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/tanh/implement.js","hash":"614f11f17d644597556174df152ec07b75ddb1bb","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/tanh/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/tanh/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/tanh/shim.js","hash":"41896b24a3c7ccecec0a9a9a724ad204ea955cec","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/trunc/implement.js","hash":"e39e83b80022d8d1b82dda4847a2ba8f7b5ffcf2","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/trunc/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/trunc/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/trunc/shim.js","hash":"3500fc6f9cee733cc58b1e94d2d8a31bf9740d49","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log1p/implement.js","hash":"26ce19ddc98bdbe1645d2dd762bedb1ffbe28c2e","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log1p/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log1p/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/log1p/shim.js","hash":"6bf8b8163f1821933f7bc96cf944c0af96ca12c8","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/#/pad.js","hash":"68f4918775b14247a75cd052ec8fe4e4e2ec6674","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/imul/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/imul/implement.js","hash":"8c10eb69fec5f4e8f14e4fdc96f484e1d102a5d4","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/imul/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-integer/implement.js","hash":"46bcf2c39079df30c19a03264b602c6875a6c382","modified":1442828192000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/imul/shim.js","hash":"a5a212c14d8d6ba9246216f21f983af87c3f3b64","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-integer/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1442829437000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-integer/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-nan/implement.js","hash":"ec206eddb75a7a739edbeac903b6b5445cd14bcc","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-integer/shim.js","hash":"ea9f8e7526ed9e765808bfe5461c830e76178500","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-nan/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-nan/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-nan/shim.js","hash":"9327139a8a40d8c1f048d37b4e55a1858620f28d","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/max-safe-integer/implement.js","hash":"b0ce36ca27910552185f8aefa107de62ee902f38","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/math/cbrt/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/max-safe-integer/index.js","hash":"3e8c4db62a28ad64f90ac2e7fda88cac0ebc3c8d","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-finite/implement.js","hash":"1587f6a5f204713c710df878f2bec4adad403a64","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/max-safe-integer/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-finite/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-finite/shim.js","hash":"a3615226482e8033309519b50ecedf9080dded74","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-finite/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-safe-integer/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-safe-integer/implement.js","hash":"d4243719cc00dde713eb589f00565e9f171c833a","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-safe-integer/shim.js","hash":"d66c527579bd3cf9591d99c1094c04684779d03a","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/is-safe-integer/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/min-safe-integer/index.js","hash":"3e8c4db62a28ad64f90ac2e7fda88cac0ebc3c8d","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/min-safe-integer/implement.js","hash":"b3b80f8d6e63e50bba36941d0833bc7305820991","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/epsilon/index.js","hash":"3e8c4db62a28ad64f90ac2e7fda88cac0ebc3c8d","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/epsilon/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/epsilon/implement.js","hash":"955a691ddcc6dce38bbcf974c8f5e0bb392fa91f","modified":1435238765000},{"_id":"themes/apollo/node_modules/es5-ext/test/number/min-safe-integer/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/index.js","hash":"75135703b70ebd9753e82d2f530d9c38b76df35e","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/is-sticky.js","hash":"db5ad5522c3bb6de52d3f1edfd963ac6320ba428","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/is-unicode.js","hash":"2d3288f3daa89e3c6ab99d12a376a981765708a9","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/from-code-point/implement.js","hash":"f21ebbec3d4fd84c02a31d83b43d964654687550","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/from-code-point/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/from-code-point/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/from-code-point/shim.js","hash":"713986ae32bbede04f82f0e17f0e094c6ef3fc21","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/camel-to-hyphen.js","hash":"b2f59e44f389d22a77f5801a4298f30dedca3c92","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/at.js","hash":"a7ca34ea28bfe6a114de00b195582e9edfa37850","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/capitalize.js","hash":"bfb5c9158f512ac6081af7c3631e7d0625bca9a5","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/indent.js","hash":"b3965366cce47180404a6ee7d45e3c1b50a29b6c","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/last.js","hash":"15f78b5834fd5b6e1a64bfea0c6f4e73e6aca113","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/case-insensitive-compare.js","hash":"0b202c32659d7be331f1536f9a6471529a798148","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/plain-replace-all.js","hash":"8a129e65b226492de792cc084b654d619ca13238","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/plain-replace.js","hash":"7d5e40e63d8114b78135922e2c75bf5d6ea093e7","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/pad.js","hash":"0d1149b31d484a40adf149c8f026ebe63386180f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/uncapitalize.js","hash":"7e4f03c06d9b2d34d1d186ff2d43bef257a2add9","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/hyphen-to-camel.js","hash":"3b477a75e5df62e8605e61a8a32ec3b070f3a417","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/raw/implement.js","hash":"9d58d3b877023a2670ff7ac355619da0e99afe0a","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/raw/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/raw/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/assign/implement.js","hash":"1d390dc7bd6f401219406b65278843726b2ea69b","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/assign/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/raw/shim.js","hash":"1e78f60f42999182af24a536605661cd4f4736c5","modified":1435238768000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/assign/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/assign/shim.js","hash":"ce08a05bbd441b7e4851e3698c864ca06872b109","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/keys/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/keys/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/keys/implement.js","hash":"1d88560ef09cdc70e1e369bf8c96c7001a54783a","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/keys/shim.js","hash":"71c2c00ccecd4d0b7c98a10d80b6ad71f5368d57","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/set-prototype-of/implement.js","hash":"f6ec4d4edb493218e6e6e1db56629096c09f564c","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/set-prototype-of/index.js","hash":"c0cbdf3aeee155a6fe16a7021675ca2a73553dd5","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/set-prototype-of/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238766000},{"_id":"themes/apollo/node_modules/es5-ext/test/object/set-prototype-of/shim.js","hash":"c0cbdf3aeee155a6fe16a7021675ca2a73553dd5","modified":1435238766000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1414231759000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1414231759000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_transform.js","hash":"1eb7ec328583b5c038773c5702d01911e1107f17","modified":1414231759000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_readable.js","hash":"fbe877a784cabfe0f67f1a194bfa164517554453","modified":1414231759000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/examples/g.js","hash":"c5e6ed35ba98b68b876256e9fa7b15fbac79aa27","modified":1326929552000},{"_id":"themes/apollo/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_writable.js","hash":"29fb611c264c00b9001364c1ce90fc64efa66ed9","modified":1414231759000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/examples/usr-local.js","hash":"a82d273b8acbbb0728d1d8ba541f406ecb91d612","modified":1326931644000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/00-setup.js","hash":"78da07aaaadb2b79467173cd94329dd64130de62","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/bash-comparison.js","hash":"c7e27558c5870b5edc3bcd461c88f133fb22b1e2","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/mark.js","hash":"f28c2ca48f13937b0a202f6f08219c0ad5b81924","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/cwd-test.js","hash":"3d7413c1706b868c4ee8730ecd58ebb87edcc137","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/bash-results.json","hash":"05fd3e5b75f1b50f6eede1f544bbe7a8481e5097","modified":1361809529000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/nocase-nomagic.js","hash":"0c1f3e2cf40a95940f301925052226c4c278c9e4","modified":1361809186000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/pause-resume.js","hash":"2dfb282ca01b1c5187ec0aa8793560c89ef32d51","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/root-nomount.js","hash":"13bdc59237d69e3fe0bbdea9d14a55b5c3cdeea7","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/root.js","hash":"4ea6f42a975120c5fd51613775174a8ab1ceeaad","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/glob/test/zz-cleanup.js","hash":"cac3aa9dca8beaaffe9281f29ce2703a0211f345","modified":1358897151000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/test/open.js","hash":"cba0c1a5ea28e35bebe95e5dfeea93fc73540d90","modified":1371011144000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/test/brace-expand.js","hash":"a274bc9dea6fc8289ad997754bd58ee36bf47197","modified":1324537594000},{"_id":"themes/apollo/node_modules/globule/node_modules/graceful-fs/test/ulimit.js","hash":"1b4b7cefd7fcaa3f78aab638a96c7c2f7aeb5cf9","modified":1371058145000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/test/basic.js","hash":"91bf75896c5b86f7f8b312e2fab75fc38785371e","modified":1387171514000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/test/caching.js","hash":"310366ed1bb9228269562ca69f27534cfa611dcd","modified":1332887728000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/test/extglob-ending-with-state-char.js","hash":"bf57836fc4f7b64e8920baad6945880901a613c0","modified":1387223424000},{"_id":"themes/apollo/node_modules/globule/node_modules/minimatch/test/defaults.js","hash":"681bc0bd4e4e1fc342418109294e4d151f992e58","modified":1332985301000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/lib/cloneBuffer.js","hash":"434a91be54da878952c3128a9b47cf6521268426","modified":1445581386000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/lib/inspectStream.js","hash":"f2306b65cd7afbcc466184aa08ae2ae501d61c54","modified":1445581386000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1445581386000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/lib/isBuffer.js","hash":"aefbbd2bd806d061500533727e9867be7e2b861b","modified":1445581386000},{"_id":"themes/apollo/node_modules/gulp-sourcemaps/node_modules/vinyl/lib/isStream.js","hash":"b745b237603da7529c86cfe508e516329f83c396","modified":1445581386000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1372147306000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/dotted.js","hash":"51664f4efb36d519b2e439f1156e05e917c08bda","modified":1377730679000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/default_bool.js","hash":"ecdb759c4275fb23bd5d072c3c6a7baa74b407c7","modified":1372147071000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1372143145000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/parse.js","hash":"e240ae50a049d7b4b4b625467df34bcfaef7dceb","modified":1392957961000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/dash.js","hash":"27fa6e19e26916edd7fd46ccc2d0b2301b3042a3","modified":1389378397000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/parse_modified.js","hash":"5c3cf170e2a2476e0f5bfee9af78556a1958d503","modified":1372145355000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1391917546000},{"_id":"themes/apollo/node_modules/mkdirp/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1372148159000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/contrib/libsass.spec","hash":"09e88345d1ff22029b374fa7c1d5bdf239219bca","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass.h","hash":"400a1f43095340e9217565999e2b82abd77a0278","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/contrib/plugin.cpp","hash":"eb37622ed8110dcedd2ec5a179b862b715c133de","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass2scss.h","hash":"5b52856cb289e7bcfab543d069d963f8360c7e12","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/res/resource.rc","hash":"8eb72150c98cfbebb3e2c6ff77ee036ca8a8182b","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/bootstrap","hash":"0bfea6dc15eaecd7bb71075b8ca5e602b1517906","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/ci-install-deps","hash":"ede3aea103e5b268fa4d19aadc77145588a0e733","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/ci-install-compiler","hash":"16a0f4e5fdd2a672ee6cb3411db74aa7cefe562e","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/ci-build-libsass","hash":"9de99bbded0557afb46cf6d8ece2b79459514fe9","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/branding","hash":"cb873536bffe46fadbec9c32774537a9ee88e9d7","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/spec","hash":"31bb4a5412295c7167f54efcdb2220a89e33933c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/ci-report-coverage","hash":"061e955832d1ae1578f411a589fbe62551dfa04f","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/tap-runner","hash":"65eebc9573c380e7796f8a1c87ac0026ed42e381","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/script/tap-driver","hash":"7e3f50d7c10c77fd1585b3d07321121a28253630","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/m4/m4-ax_cxx_compile_stdcxx_11.m4","hash":"c729351d4d0ef9900afd5cfe1de1ff888b0243bd","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/README.md","hash":"288b4955fa98d82c9359ce23845c874c4dd4fb16","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-context-example.md","hash":"caebee931df109a6ad4f329039e2f3056a9e3d1d","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-context-internal.md","hash":"266f6e3c497c615bf489d937df5bb15c1a50f5f0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-context.md","hash":"8436cc57651c0f7111743239e87a8469ee7bda4c","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-function-example.md","hash":"47b68ddbd8ab962b737bf69f86fd5d9203f29356","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-function-internal.md","hash":"53b907e9aef9089f955929e5a59e96b2bf61ca3c","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-doc.md","hash":"91e4cfb042c7cb82d6a6fc01b9ea04f9ceb8d8f7","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-function.md","hash":"e48b7df877b688236dc74edaffae4ab7c4c830e2","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-importer-internal.md","hash":"27f66aacc49203eb90fd17cd3ef19edcb3a5e78c","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-importer.md","hash":"13200efd601ef1fef7d9259bf0ecfd0c623cec63","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-value.md","hash":"bac65b4efcf8f12775590a5d896afb66c6415b55","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-value-internal.md","hash":"8fc993450b90d92b19087dd5788c7fcf51a41972","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/api-importer-example.md","hash":"801a33a311c05036bfbe412b16e5ad92ecfcd331","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-on-darwin.md","hash":"37f787cb90bc2c2d58e90d1c609044ec23420beb","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-on-gentoo.md","hash":"895f239a3c0b9d865aa8d0322353b9c00a4b0023","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-shared-library.md","hash":"84af60ee3fd38e2fc2e2c57d4e4a4237c9c23a7d","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-on-windows.md","hash":"6bde9d9524ee14b92b53b48887fd8e2a5e74b5a4","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-with-autotools.md","hash":"ee945ea0936b3c769d9e78dd096f85bd0c4c4b62","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-with-makefiles.md","hash":"9372ab22e9d7b99c0cbe611f0ff74d84b67ba00f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-with-visual-studio.md","hash":"140bece215caab86adcb0174a1c5daf3be6b1d2d","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build-with-mingw.md","hash":"87be673ac3a2f6c049188660568d9be174f8d611","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/build.md","hash":"e0287cdb19315a18ff8167893bae8462a4ff1a41","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/compatibility-plan.md","hash":"71e1cecbc01caf751a5471febda2875ba6bbb125","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/contributing.md","hash":"7c2e1f627b60c9a17e37539b7c6a278828c2d546","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/custom-functions-internal.md","hash":"c1f532e04b2624c6d81011f4190e27d85c91349b","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/implementations.md","hash":"e0ecf31b160492bf987f1ed354d9e359dade0cc0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/plugins.md","hash":"459170112957c0bd2bf5e5f4ee26b6a42098cbcd","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/setup-environment.md","hash":"bc537b91b9e0f3b450d5ec02e931463a82e49d33","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/source-map-internals.md","hash":"cf90583520eb9dea1504622b74583aaa9a0b4146","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/trace.md","hash":"cc50e2693e081ed19bf51171da2f6bd103a2d64b","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/triage.md","hash":"d5a693bf6f5a7f5b8effed5979513b744474ba91","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/docs/unicode.md","hash":"99e5d75cbee9a36d8362557f98705b435fcc48f4","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_node.cpp","hash":"b9c62863a2b8c9d6fcc167f08a34425a49ed9422","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_paths.cpp","hash":"ca72e4f9ea560115d9aa9e2268950f20f831820a","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_selector_difference.cpp","hash":"7ce90a67cb0d09cd45888011bc742b32156a8427","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_subset_map.cpp","hash":"bf52323c62d1a8ce71d261c62fcd93e36f0a4bc4","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_superselector.cpp","hash":"24909a44c6ed6fee7afab553dda5d7501744bc78","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_specificity.cpp","hash":"d0f9409edc6d360391a3b69c7053a74415b79302","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/test/test_unification.cpp","hash":"f3c79f2af1cf89588767e6764224f1c3db0d2051","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/win/libsass.targets","hash":"87db9609e38d665165222dd1ec3858c8f61c96cd","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/win/libsass.vcxproj","hash":"cffd8dfc6c401fa4c2774bbcf80dab14ae4812f2","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/win/libsass.vcxproj.filters","hash":"4038fd6f7913b47d037f1d97174b7206eef6e28c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/win/libsass.sln","hash":"a3a59170f8179d4de6b79ea33decb94931ff83a8","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/GNUmakefile.am","hash":"83fc47bfbbdc87e01381ceda783aaed05b8aa18e","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/ast_def_macros.hpp","hash":"4bbea362e78d1bd78d088b1032ffb315fdd685d2","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/ast_factory.hpp","hash":"f7f702abe8b256c1f663fd99e355c3c2b40c3b8c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/ast_fwd_decl.hpp","hash":"85ed52e757b893f81695b9019268dc65a84ac505","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/backtrace.hpp","hash":"9d79ef85d0ca53898ad719a73909c5439f3ab858","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/base64vlq.cpp","hash":"a87ac3adec8d163cd77bec1925eb54e154ecf2e9","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/base64vlq.hpp","hash":"fc12234ab87be257952e359645c0d812925b37df","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/bind.hpp","hash":"83f45b1911039fdcf4fc0456d0d68e2af97c5a37","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/bind.cpp","hash":"aac00d245268d4d64f9fab7725ffaf546c84d529","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/cencode.c","hash":"a68841c3ca7d53329f0a96dbf380e29ae29b699b","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/c99func.c","hash":"1e31ab6aa68a6063391170c2dd48259526d247a7","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/constants.cpp","hash":"adf18f221889efffef9efd43e1e6c6052910a1e6","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/color_maps.hpp","hash":"29c58895d8b86d90c8de989d93e58812418ac616","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/constants.hpp","hash":"1af87126cc2105213c8ae097ea073f835cea61b4","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/color_maps.cpp","hash":"2a12ed2b86c9455c253f70e7b9be70e7988ec2eb","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/context.hpp","hash":"02cea162420aef1b5dc4e3d433f47e05b95489d0","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/context.cpp","hash":"268fc3a53769fc6dd9868a4deb41caea67c14c5b","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/cssize.hpp","hash":"b94defa0c4f74d5ce4aa49421fe48298a5b68ca3","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/cssize.cpp","hash":"7f5be0303ad5519c0f3c744e92932b814af346c9","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/debug.hpp","hash":"7fff29dfd923c6711f817434ade27eb149141263","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/emitter.cpp","hash":"2926d4376896947fe4ac2d598da98ac5b169088f","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/debugger.hpp","hash":"99529f0327c85c6ee23eb0af141453d67e9df1ff","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/emitter.hpp","hash":"b6644568a509f6d9b7cbd0e75c1151f856dc3a21","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/environment.cpp","hash":"7a04e5e21b5bd96b127458815e801ec179146bbf","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/environment.hpp","hash":"48e5d401f476957796af4dd7f870452950b5bc24","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/error_handling.cpp","hash":"7f6aeae7fb134bac7fb482799232ad7b1459d620","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/error_handling.hpp","hash":"663c5a4c1dfc57e3f2fe5ad3c830d23650815e54","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/expand.hpp","hash":"9c13ec3473f5f6324fb122d12d68874048fbae1f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/eval.cpp","hash":"505ed2db1b8e82776e4896aba97f4ac3abe42107","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/eval.hpp","hash":"e598f5f443666f3d3a3e4f51bca0632467592297","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/expand.cpp","hash":"578952601b9e15c1367f827ceef6e14d08c84ecf","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/extend.hpp","hash":"1c60e50d96f5cef7315339c36b3f4b4b18e92b14","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/file.cpp","hash":"a3ab215b6f0a0fc162866f470058668865e153fa","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/file.hpp","hash":"357aa266df032d732e9195e34eef8129107001c2","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/functions.hpp","hash":"99a974a5eafd91664d5af04ba224739d23f5fa0d","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/inspect.cpp","hash":"a421d0d581b0d192fd9364bfc21dd2f3ea9f970a","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/inspect.hpp","hash":"782aea72765fc03f210232cc473d987f08e5ee33","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/json.cpp","hash":"f55125b1357d22c50f5165076661476fc04d5ab3","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/kwd_arg_macros.hpp","hash":"616d8b2fc5aaf92bcde58c6d6e852970d10ad9f9","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/json.hpp","hash":"b58599c5293ef3974a6d82869c43c30627416463","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/lexer.cpp","hash":"5aff83d32ea08a0da70a2200b2671915c3832c45","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/listize.cpp","hash":"bdef4e55e65e8a2631707789eb73572e8823aa99","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/lexer.hpp","hash":"2c70a65b15bb5e9a3ad11a2c40aa286621dccf2d","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/listize.hpp","hash":"9e7a3edd595c226c667ced997c7ccee50f47c659","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/mapping.hpp","hash":"0c39fe9bd141706e9af4547d8d2ba56730e4c3e0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/memory_manager.hpp","hash":"3377ed6c8f1ef470fe681714c42b775adde1efc9","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/memory_manager.cpp","hash":"c1048300c8591de5600919106dac0f4f8bb554c8","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/node.cpp","hash":"568a5a80e23f4a052a09748af9bbc6364ce1833c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/node.hpp","hash":"cea968a318ff1472cc93087e9b7d53c428bb1948","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/output.hpp","hash":"278d676c50993d183bcefa24f29766d1a7e99e39","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/operation.hpp","hash":"fa56ecebc507d78d66ddbda265d5e0e5caa25b8d","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/parser.hpp","hash":"ee51b6f62642dcb8c4a1d3b12ea78a552ea22fd8","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/paths.hpp","hash":"79f6279896a40131e06357d6aa3662440207b559","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/plugins.cpp","hash":"7c899f20660053b6f82c1b2a3a2834db7842bacd","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/plugins.hpp","hash":"0492c4aa010bff5eb978700b88250bab0b041652","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/position.hpp","hash":"7110de09c92701ca9d86dcc42a983d1a19a65756","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/position.cpp","hash":"2a6ca5777464b0b14fbb4bf38aaf697ea56e8ef1","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/prelexer.hpp","hash":"59dfc0335e0978a7ea0a8fd90346a01939e9677c","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/remove_placeholders.hpp","hash":"2138b0c433a9c66e1176d45331c6003e4114d788","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/remove_placeholders.cpp","hash":"33226ecc809fbaa9dd294000a6eb570c247c814a","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/prelexer.cpp","hash":"006e3eea0b2c930ecec2fec9d18f4a510bfb10bb","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass.cpp","hash":"debcaf53ca2f802f1794ae7f8339c5458f9f7a63","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_context.cpp","hash":"37fce671991c29c957ce3df1a34d10084c608ea4","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_context.hpp","hash":"181ca38a728f8f586274b894bb5ebbdcca02f86b","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass2scss.cpp","hash":"e151a623c18538c082295733d8ab6a5bfec96da2","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_functions.cpp","hash":"42b6a2a1e6b5798a2838e2f9a1df858cf5918b01","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_functions.hpp","hash":"8e0dfe93cc2c5f5f6989ff0836fc8a4f7d8be106","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_interface.cpp","hash":"b6aec104368f66bee52a42130de091e10f38374d","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_util.cpp","hash":"1b87561efb7b24497a918450a385aa36b734ff72","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_values.cpp","hash":"556d9e3cefa996919bf3d6eabedaf04c3bd08d63","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_util.hpp","hash":"746a46dc3a7513dfc0e5b17e81d697a9aa87d1f0","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/source_map.hpp","hash":"a7906b7947e4e95e07b5606c037a8f2fbe3c0b6f","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/sass_values.hpp","hash":"cbb96187b171ebec1e2d812e6c88c8b8c19bef1f","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/source_map.cpp","hash":"5dafcc1aff250235bb2780869c1b18019123f1f8","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_c.cpp","hash":"d3d36ead811640b6500ea73bd7d206804a55e507","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/subset_map.hpp","hash":"8dc6fb89b58d25a55ff850d7f46fa66577ae33bb","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_c.hpp","hash":"dc8e999fd632e315c9d6f8e9fd9ff251b6c549f5","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_string.cpp","hash":"c526f7e6341c850f47beba6fad9df47650019919","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_string.hpp","hash":"9e7905dd54a97fad55721a26a6b40095d887a996","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_value.cpp","hash":"7fa43abd03b62088a5d647f43f4ae1fa8d43a5c1","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/to_value.hpp","hash":"9a0f494e9442b41b37caf4e08a2966b419caa99b","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/units.cpp","hash":"c30e69efcdd929da175dafe3b7dc872456c4e57c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/units.hpp","hash":"a801fe7b3652f2b2af6e7fecc8d7cb4d95945867","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8.h","hash":"e3c90b46539f5aa7056ac8dd992721cd4663e47e","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8_string.cpp","hash":"384e3db75c86588cb45d0c57d0a52532296b13bc","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8_string.hpp","hash":"7136671a4cd0f6bb3c6d11a8973f8c5fb749679f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/util.cpp","hash":"bcfa629cf50e7f62bb566071370d571c175119f7","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/util.hpp","hash":"7607a4bbfac93133fba2c3f7801ccb7fc3a2b93c","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/values.hpp","hash":"555f900079a80708b272dc21ce8b094c011dbf5c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/values.cpp","hash":"768e9c2aabe37a64ca96e07d7dbf82331804494e","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/output.cpp","hash":"659e90a440d250968ce4c1182830fff30bea9b97","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/data/win/large-pdb-shim.cc","hash":"df68a5aeadfc72a0005ad6e0f9574ff26ae78e09","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/buildbot/commit_queue/README","hash":"2a2cf963d0156a532ee4b046ef20c6cd6d7dba74","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/buildbot/commit_queue/OWNERS","hash":"d0c0c55192bedda080ef69dc060cd63dd5314595","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/buildbot/commit_queue/cq_config.json","hash":"e4b7f85333ab0ea9534183f140bd40406e8cf695","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSProject.py","hash":"be9f6a294ab02dc54ec98389c5f15197af835b9f","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSNew.py","hash":"32f9f3d56c140f89bdee5636430e529cca96243c","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings.py","hash":"5f314c5e3d663c169a2ad5add3aed94cf7486e35","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSUserFile.py","hash":"765ed22ffdbe7b31e91775c7dc9722a42e05fd82","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSToolFile.py","hash":"da3b00bcd21f67ece96a76d61f9bc827c2c4564b","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py","hash":"2300ecdacc5971520e1c2a25be987d8cc3b3dcaf","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSVersion.py","hash":"22338e7b3a4ea85480eaa259ad9817808f6084c0","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/__init__.py","hash":"90391102ed719cf8239086926be58983cfc7adf2","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/common.py","hash":"aa76baccd2010b2b68f3379751a3ade05933d2b0","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/common_test.py","hash":"bf40e7539605385948d989902adbc6cb216d2b90","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py","hash":"e8ef53c8697f51e58872bc2c62aecabd4365685c","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py","hash":"63de08ee325b15089019b36b6d51af436c6e8a61","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py","hash":"e6f29ede3c23874a167ec95af690440a353ef274","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/input_test.py","hash":"4a695f62aae333d68b3b438f91454c22a9e4e743","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py","hash":"11c1020f51c8758a65e32509777f07dd46c19271","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/ninja_syntax.py","hash":"74a6661b1bb7862a69693b6899ab97a2e0c3f04b","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/msvs_emulation.py","hash":"a4811c935b4b4549ab547eb91d0521259a5130d8","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/simple_copy.py","hash":"8326dc1a4ab5ccee8f571509a86ea2db01042965","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/ordered_dict.py","hash":"8c35e3ea6807b9010eee64832314e19ab5f7ab5f","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/xcode_ninja.py","hash":"c19fe3119c11ddfe59a606855e6fa6c68e027c7e","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py","hash":"98548cce05b63dfbd5f8684614a63c4e03f795a8","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py","hash":"39fb039eb03d7f269090e02205216b0c334c2673","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/Xcode/README","hash":"e34a59826a4e03d3226e016e89fbee14fbe194b2","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/xml_fix.py","hash":"5907456728e5bcc39b5c7b5e41fdf4f7b3250dcf","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/README","hash":"043e2d758d6a915d1eb70d1a014d5d34c633a997","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/gyp-tests.el","hash":"172840f03a12b26a5ae04e032f9ab61a14fa9d4f","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/gyp.el","hash":"f0c30cfd94719c1a676fe64718a4e9a74489ee09","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/run-unit-tests.sh","hash":"415a0b8aecee435bf43601a71778813c2f04872c","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/test/brace-expand.js","hash":"a53256be0d7bb6ad68ed92b4cc281a16af9b88b5","modified":1405121099000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/test/caching.js","hash":"310366ed1bb9228269562ca69f27534cfa611dcd","modified":1332887728000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/test/basic.js","hash":"91bf75896c5b86f7f8b312e2fab75fc38785371e","modified":1387171514000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/test/defaults.js","hash":"4f30a9b91bcada2aad8a258a3e4abd25e6d7dfa1","modified":1399941975000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/minimatch/test/extglob-ending-with-state-char.js","hash":"bf57836fc4f7b64e8920baad6945880901a613c0","modified":1387223424000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/_o.scss/_p.scss","hash":"e3f9e96d35639664186bb4d9e867ba42bf271b6f","modified":1454036248000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/compass/_n.scss","hash":"dcce9bce52b50a00c29580f27f3efe3bad708f15","modified":1427065313000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/components/_e.scss","hash":"2986ef49fd4fc7de8a315cbe984d1e4f47c74925","modified":1430718017000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/components/_compass.scss","hash":"777d98b0df48ac301ffe57fe756077d814f0b232","modified":1427065313000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/components/k.l.scss","hash":"caf303309385011ca1ebc06c77be22f4c6451460","modified":1426667664000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/nested/_i.scss","hash":"2b9db0cd3c8a80bb0d6be47122a385576e46729a","modified":1426667664000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/nested/_h.scss","hash":"5f0118bad79b97e0af15c196d9666cbd21854599","modified":1426667664000},{"_id":"themes/apollo/node_modules/resolve/test/dotdot/abc/index.js","hash":"75a341c5a597afcc451ba5003f9274296812f1b6","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/precedence/aaa/main.js","hash":"6abb061dc5fe8032ac292fa5701a1c79a8aac229","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/precedence/bbb/main.js","hash":"f5572df4e3b12c2f3f0b2182f1356c5747d5d2b2","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/baz/package.json","hash":"54931d5f8e2eeaf618a6f621ba26554ec56395bb","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/precedence/aaa/index.js","hash":"b35cd29e4afa6af8c491dcea649f75e1eb1a33de","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/baz/quux.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/incorrect_main/index.js","hash":"a6947a6ae82fe4fc03c1447ba40f53bcd7f356dd","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/incorrect_main/package.json","hash":"fd4f09f8d82645ce1701105eff34bf2e494c5496","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/without_basedir/main.js","hash":"25ccf64a8f231b3cdf853f87a8b525dae9ff71ac","modified":1441654384000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/_convertBrowser.js","hash":"6af02b833e35556d2437da905c6d9eaa2fc4b168","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/__.js","hash":"9c805f4d417e7a952726f3cd1d0bfa7c30cfa7b8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/_falseOptions.js","hash":"ad9c0db1f5df98f88d63bd70d729417a7eab2adf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/_baseConvert.js","hash":"249fe4328bd7c40461db7ca68b173935c27d8bf8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/_mapping.js","hash":"14fd431d42bb259d4174c257af81c7008f818999","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/_util.js","hash":"96217b02b246fad3b5959267dd9268d311c928d6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/add.js","hash":"9a7af31a7389d2b2b2ada006440c4cc5c2e42e14","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/after.js","hash":"b9b375ce8fc1a7d08495feac490844967e5c6ac0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/allPass.js","hash":"d6accb07bf9f23b3d0f72ce21b787618d575da04","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/all.js","hash":"ca7a311804ca0107de2a6f00602710f36160c765","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/always.js","hash":"d3c13a79ddd4488702c96b285bbfe2556ee67e17","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/any.js","hash":"64f468269587c745e361d31e0d8b26cb8f67fb06","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/anyPass.js","hash":"4a3f89614864715dcc36c7ee5dbb9850f6ae2f95","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/apply.js","hash":"eb2c8c5f1efdd93f4d55605df4874bea9f831b54","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/array.js","hash":"6c3a1a438a1f341a9bfbf059da2d1efd4a582178","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/ary.js","hash":"b811ed8b5b34ff86e65589b38cf22f1d7699ed4d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assign.js","hash":"52e569f6c7d83714506850d8174be2c3a2992852","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assignIn.js","hash":"71da9458e2fdabef9d716d9b48060a12c0185afe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assignInWith.js","hash":"b3b0adbd4b47e963b9f3ec93335b375deca2a320","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assignWith.js","hash":"d4a0c3092be5c92abca026002a322407a1e12f2d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assocPath.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/assoc.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/at.js","hash":"615c43358bc89d4eaed242300b9fd77631f72443","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/attempt.js","hash":"eb059364d0e518867b8fe2d4d9773ca481f80b15","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/before.js","hash":"c9fbf0e49c14385711d6335cb1dc0d6e09f3aea4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/bind.js","hash":"5620199ffaf7354deb17332bd96d023ef93a7563","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/bindAll.js","hash":"2e3944394c315756627aab74b8ce3cebab98662a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/bindKey.js","hash":"8884ec3af184de8a5f20829f6eb5fb6ea459582b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/camelCase.js","hash":"8eb598ce4ff5d309c2ab8fb299f41df23c4cd308","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/capitalize.js","hash":"101f5c2148a579105036a5cdd25b4193812f64d3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/castArray.js","hash":"ab5ea04ba48ee2920164fadb8b78d8a03f1cee6d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/ceil.js","hash":"0539c156c827c85dd682ece5986b9f7bac19a097","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/chain.js","hash":"c85611a5e7da7d0aaf29a45bd34130b56315199c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/chunk.js","hash":"63359d1585edc86fb70c74388c36e0a96e16b96c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/clamp.js","hash":"d10d4fb46ea8518851b6578ef67dde23b2a9b013","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/clone.js","hash":"6cd53703b2949cbee86ce6d708942e248afb8b4d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/cloneDeep.js","hash":"179860c9bdc495da2f5d8281fec35077b2f2b216","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/cloneDeepWith.js","hash":"365d2b00fa2e722ce8c60b0605bf3af06c6ff454","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/cloneWith.js","hash":"a303da7355a2bcf3314b47558b57c8e3b235094f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/collection.js","hash":"75a23149e229dc1435bbddc870542ac1ff298f91","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/commit.js","hash":"2b2f58504601fed318dd5f6ef943a873018195cd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/compact.js","hash":"b6603e874a29627153368292851fe987f5462bcf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/complement.js","hash":"db8673391fb52d0d4682d80065e5f82809a3292a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/compose.js","hash":"ea122818ed87e1559af41edff0f2d2fa54319b9a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/cond.js","hash":"c5bcad894a249463aeabed85ac3d3e7474455533","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/concat.js","hash":"64240c44714fa5369fc4092f00ef58caced12344","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/conforms.js","hash":"3c5fff2abc2dedd1511e0f2de3f6531d146b287f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/constant.js","hash":"109c49b151baa999c023e7934b4223e0fe3d84c5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/contains.js","hash":"cf59973c08cea72d4b25f223aa3c30e99fde8e55","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/convert.js","hash":"5e125cf746680131339a8ab7f41d917bdccdf356","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/countBy.js","hash":"52e5e9e4b6064c30131e7f678551f23f8120cf0d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/create.js","hash":"7fdb4d9dfc8e2b4876ec6b47b9b32fa37eb1aa2c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/curry.js","hash":"ded1e6452bc77478e51a4b9a7f8f2eb9c07d1b03","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/curryN.js","hash":"13f2d44be73b0df20161c72c0b77b69f8bfdba39","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/curryRight.js","hash":"333b1a096341c2552aae7af172dfc6b1aa2d68d2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/curryRightN.js","hash":"919ca15f73c98eb40bfddd2213edff6a8992e2e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/date.js","hash":"bbf85ffcdfc83df6d5c24c84b03ca937f9796257","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/debounce.js","hash":"c702651f3d6844c12c8e7fb2d2d07ee898f3c78e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/deburr.js","hash":"b4aba68c497e84459d6d9739d71b0f1a3bb7182e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/defaults.js","hash":"0afcaa5650946e068d13f298bdcf3e185f5a1f07","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/defer.js","hash":"49b70a2e28eca9a02a89437582cf42c165dd2d05","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/difference.js","hash":"13ba75b75ad25ad44bcfcc552dd0fe00114c13da","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/delay.js","hash":"1f6a34ed80e76bcfa748c686fbc67488d0164d78","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/defaultsDeep.js","hash":"6eea71a30ff427217403c02e6721e6bdaa0de604","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/differenceWith.js","hash":"290648f706217284bb229fc0957d21578b89b0e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/differenceBy.js","hash":"55c72db5c42636b2f5824b45979834483161d817","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/dissocPath.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/dissoc.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/divide.js","hash":"86636acadd06d91f809acd2c1d31cf780caa8649","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/drop.js","hash":"2cf18a3172602551b9950bf4b21ef23b07f5c8e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/dropRight.js","hash":"e8beb9bca520499fc14e793b6e8f7a428d197bb9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/dropRightWhile.js","hash":"779915c003cbb1a9643965f284858729bc032b6a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/dropWhile.js","hash":"3d82fced32a443d92d80485508cd79c34b0a0ac2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/endsWith.js","hash":"1e2c542c82f7aefc5fad986136445a7a4425e145","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/equals.js","hash":"735240597ea9393397bbd638934ebfaea4f6b2c8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/eq.js","hash":"e22365568b08047e550d002e351cef842cddabbd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/escapeRegExp.js","hash":"2a88b89297d34797244d963f2323e59a7c3d4d31","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/every.js","hash":"0499e846512778b49de2da8574e81f21dbd3ca40","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/escape.js","hash":"68a5b97faa5723827ef59f065101bbbe2556e6bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/fill.js","hash":"783c4109619e522701ef2956d070ec6f94ebb258","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/filter.js","hash":"7f77256838b2435ebf7539e186cce009aa54c1a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/find.js","hash":"86e525b8931055cfd1dbed74e13e649b39e8fa6e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/findKey.js","hash":"7a3a8649e4119245549d42a71a20752a7a3258bc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/findLastIndex.js","hash":"25b3d6da9b75a73e37d908e0bd1c2c071eb81def","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/findIndex.js","hash":"6dae88bc0ea9a1c2ceb6bed27e6fcc1a993795cd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/findLast.js","hash":"a19b3954a423f675b6e556a4838d45a28eca25b1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/findLastKey.js","hash":"d71353c58b59d98cc7d909a543f8f49ace63bf10","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flatMap.js","hash":"1b0399b113f8f036d69c78626ffb7fdbd531a452","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flatMapDeep.js","hash":"68eb25628604462da50f41131335e5bdd79dd931","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flatten.js","hash":"93940d34c59306c75e8680b2f54a9535f1eb56fe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flatMapDepth.js","hash":"04d4e92f43b87d2f5504ebfd7d095c0421322e6e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flattenDepth.js","hash":"c606dc88f1ff4ae80ccb61d0e293d46f53e687ba","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flattenDeep.js","hash":"3d4a37408b913e82d947aa842b984fca60b9dd0d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flip.js","hash":"e13e97806d2757e3661b52657b0a81077bddddcf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flowRight.js","hash":"ba997b9952e847801199c2767ee07ffd64c4810a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/floor.js","hash":"a7a4526f7ffcc6fd12b5805cc687f5e31fb41152","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/flow.js","hash":"b1fa8a6738958fb2b0f61f55670e80e72b37f3f6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forEach.js","hash":"fe364b04d37562751d1e68482ddf6a7808156916","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forIn.js","hash":"83e5d965ee8ff794867c6c8a2e01ca56fe76a15b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forEachRight.js","hash":"fd98cd06ffb50506eacfab8999a3cc06d2c646b6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forInRight.js","hash":"3f48c8bb263b1eb71cbaf4ad9d2606b3656f8a83","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forOwn.js","hash":"60ef3e46e036d39572320f2c6f7601881ca41955","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/forOwnRight.js","hash":"5e5befea43de625a990a571cabcf5545f7ce1ad2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/fromPairs.js","hash":"1e7734eac86bf368e7d1bf63ca1657952b20f13f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/function.js","hash":"c7d47f84639e315320f598f32c3a8f8dc8b0a724","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/functions.js","hash":"82f6797b95c815f8082611ca84cffad654ed7ee0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/functionsIn.js","hash":"8b79a911c832b5683868fa56bc7c6cdaeb4d5e88","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/get.js","hash":"27edd6c7c585dcd0222c1cea97765e5eb1c52925","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/getOr.js","hash":"423682307e027ac900a0cc83948ad83b19c2fca1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/groupBy.js","hash":"28032f75b908231d97cfacc99fc04ff0a3f22e65","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/gt.js","hash":"36dfa14d07d98b751b8d37ba1ee1e64c64971161","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/gte.js","hash":"d6e1cf7bd2d03d198791afb3eedae8323b06c262","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/has.js","hash":"20fd58ff42e0550eb9f94e183225458d52436836","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/hasIn.js","hash":"c9e75e41b1638417c4d1f9101c43469032522afd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/head.js","hash":"886dc89b060616ea92340f7d68bc946f058e8c2c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/identical.js","hash":"40efa57b258af781819e8bd050c32583837184b5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/identity.js","hash":"59c993b05e7ec2f4653e4bc55b3025dcd5ca2f13","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/inRange.js","hash":"57145747d9c73137b76796e00ed79263c9049c14","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/includes.js","hash":"c5b5262c60578989e7569a4ec24c14c22af9d4be","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/indexOf.js","hash":"f296c1ad76022ce01e1f733136933820a2744cfa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/init.js","hash":"22ffae77010a1ac713f0326fa468621c3ab83a2c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/intersection.js","hash":"1391dbb03a7ea4de5e8c8a937667c5b2f58d3b28","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/initial.js","hash":"345cc5bbcd2fcb19a0d5e3ba7c44dc8d4bb85be9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/intersectionBy.js","hash":"c5f67ae844b3c57014cf4ca6878fd805e7a0c7d8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/intersectionWith.js","hash":"f264dacabb5c65b41cdb9301fd281252ceefcd45","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invert.js","hash":"fd7502e8c46743d84540d1f6e83e3e70e4190812","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invertBy.js","hash":"f23b5d7017a48c8757e9e02f8e9198de8af6f181","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invoke.js","hash":"af082b901fb05e5ca0b8c366f2d91c1a80a02fd1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invertObj.js","hash":"f2acc5a6d3985a3d717e180810fc8da4b70eda6c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invokeArgs.js","hash":"fae0d54f2a10c1da45de1894b3a854b2f42f88a7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invokeArgsMap.js","hash":"9cb53649858eb1e33827cc8513c16d9e7363d9da","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/invokeMap.js","hash":"e53c69c9c4a6be115fea0a3574c4d1255bfe5428","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isArguments.js","hash":"675c9c3ee2f01b2ecbbcaa9637bbccd65f89d943","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isArray.js","hash":"45376d39c70fb04bc0cea0bdda3b1998d0c76b3a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isArrayBuffer.js","hash":"6d6c14aae84e1662f0fbac87ff49d1dc0c568444","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isArrayLike.js","hash":"f6ef38c98c8344533e90a2212650cf936ce808c1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isArrayLikeObject.js","hash":"4d053b5fbd0477fe770249346cbc0bcfb37a6219","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isBoolean.js","hash":"b91a773b54bd4822f9c23bb88b139b67f4f1eafb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isBuffer.js","hash":"192efd2ec17cbeeadc1e68b893e504b8b14afcaa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isDate.js","hash":"ccd1b64eeefbb7d146ab6294c52aeec2ad1a93a5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isElement.js","hash":"41b8187c0a4dfb59cdc5c939f1b3a68d674e7048","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isEmpty.js","hash":"517aca0c6b7b51087db094f4ff1ac06bc50c765c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isEqual.js","hash":"e143e5a19f1ceadc7a6d93d5bc95a4e62b6be530","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isEqualWith.js","hash":"685a3ecf2190a5656547f3a62fd8fc0c4fefcad4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isFinite.js","hash":"79c3ad8c8702d1aab54ae80ea400d5f73ae49dc1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isError.js","hash":"03dabdbd0e30796a8bdc2a341394d329a461a9d2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isFunction.js","hash":"a5644120eabb397e67c38922ffb9b87d22aab5b7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isInteger.js","hash":"b30a8a902259cad6f2300f7b06d3f2bc3975f34e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isLength.js","hash":"6aabade08bfdd6e8bb07e28225629c419b5e8c97","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isMap.js","hash":"c2421f5389375dd9697de826b777b3d99c8e833b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isMatch.js","hash":"ea5bb01a981706a79b547149e5aadb39369967ea","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isMatchWith.js","hash":"0afec1beb71c2424691fd4b4dcb9100820374c26","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isNative.js","hash":"4dc770dd04ad9f97aad0b764d876375aad3c8a9e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isNaN.js","hash":"c607c72d2d7f67fd2da46ca370acf5e12a024e44","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isNil.js","hash":"00960af435b0e8ad04bb1fea65d6a30ae8a61d06","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isObject.js","hash":"ffe7fe0c07a623545dedbd0c45ec219e3745cc99","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isNumber.js","hash":"6caecaae0ff0b438dbe62b2a814b14db80c6afd1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isNull.js","hash":"dc555ce657002d169ecd3f2af155b6ddd64fc6f7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isObjectLike.js","hash":"49d650f710d56de004f9adb20ad8cf1b61f26554","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isSafeInteger.js","hash":"e570e129d68bd49f8ba775f6b85ed596c4a96fbd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isPlainObject.js","hash":"14b52f86eae7bcbe9d5f0400377d9315a588bfef","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isRegExp.js","hash":"fc73a7faaf1e7ed7821d0600676678cd495326f0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isSet.js","hash":"7c2c1be0d45c657157fe1ba88986a6b105c0318f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isSymbol.js","hash":"d374ee1761cd7c88e18c0d89797249ad5848ddc1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isUndefined.js","hash":"0022a9050a33a2d65905711d005042506bc9abad","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isString.js","hash":"512ad2c4610306d11bb3bb3491f53abd029e5ea2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isTypedArray.js","hash":"370900f84ff88e22af1153a209583c2bf6fc9415","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isWeakMap.js","hash":"2d9fb05f212d14e0ace898c6bab8563582d707cb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/isWeakSet.js","hash":"00837472f9eff86d2ffecbc9b54ed3605b3c72da","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/iteratee.js","hash":"5a57ada3203e3a1b57b61923cda5737bc5bdf7ed","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/join.js","hash":"3ef2d8c47d359b75da09f77c3fe2266508d4f021","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/juxt.js","hash":"19b5b68440238c0945975ba74e5a43d633a4cb25","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/kebabCase.js","hash":"8c4c6c334759ea0ecf4b1529287aae9fb187e47d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/keyBy.js","hash":"623811ac634d2ea4518def1661ebcf95b0201530","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/keys.js","hash":"5e7f14bc64715f1731977c278b871574eb7796dd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/keysIn.js","hash":"8e6ccf89f46ff56b75f2b23f820112e0982845ed","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/last.js","hash":"482343e9c2122718717131d20ff454537bc3452f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lang.js","hash":"62dc2db0a784f758cb9347da261f8089d1df95b7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lastIndexOf.js","hash":"34238beb4a520fcdcd9c46854d6dc7bfbcc1b5f9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lowerCase.js","hash":"10a1cbec9a77d960a0c2b470450877fe4596bd02","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lowerFirst.js","hash":"e496119d716f19967b0070c7ec9c03d28b919122","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lt.js","hash":"ebbdda9e5136aca682159edb9a951257370bc6f4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/lte.js","hash":"4926168ae6c4fe1a9493b20ddceb81f5ffef82a9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/map.js","hash":"b353305d3741738e30ccc46b96421df43380d99a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mapKeys.js","hash":"ecdd3cd7edca30157bbb0bc2a3cd91058dc75199","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mapValues.js","hash":"15803c364129828e85167dca814187bd2ac879c1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mapObj.js","hash":"4e62dd8b68e56d9fe58eebf7dd291bd4ee3237fc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/matches.js","hash":"9da5307c662261c656d066af024ae6916edc8479","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/matchesProperty.js","hash":"73c7321e05c3a79d869afe876a64ae009d8d3da0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/max.js","hash":"72e93ed6cc51a6bb7ba5131cffbc4ed64b0d5148","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/math.js","hash":"dd031d6043c326be2e5c3a8b3a4bd728bc74650f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/maxBy.js","hash":"9a5c1f5cbbb6375b8f314d5c3508854a76541613","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mean.js","hash":"73e71b6ebd607cc99741a6bd8a504f4b2d753cb3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/meanBy.js","hash":"062613f280d0bed68bb11a9999721c0c90730c6a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/memoize.js","hash":"d6bd34e0088a0f017e8c36785c6cb79450b2e0f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/merge.js","hash":"087b5cb62cf464d2154b378d4a79fceb5987966f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mergeWith.js","hash":"061bbc4f62c653eb99021e78accc7ae915c3d8a0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/method.js","hash":"9c12a91f85dc26106523d5662166b6ee0056dd14","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/methodOf.js","hash":"d7ca6c11064364211c6b7f7fa8465377f2a07342","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/min.js","hash":"e0a8670ec5ee7da49ea872f9eff2d5ec5bb5c1e6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/minBy.js","hash":"7c81c5d5a852cb0ece8e3026820c1000d6ad10f5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/mixin.js","hash":"bff01db6635beb3588b48b53aa0b83d92430f62d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/multiply.js","hash":"373b10cb68541026463c91d41901e052f3587044","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/negate.js","hash":"1503b32cfd9bc78f575f865ac3984bbb3dec2695","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/next.js","hash":"ff0900b4e5fdd889ec980c50e5e52d05d469b9f1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/nAry.js","hash":"bc98ebd544e4def682ac61ff204c16aba3b5a227","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/noop.js","hash":"dd608cb4eb01d202042edb374958ea37494d0ffc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/now.js","hash":"e455b0b859454a7852eeef13a2a7e2a26ba00502","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/number.js","hash":"56db9afc452bfa9338b206bf092497b8652f61f0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/nthArg.js","hash":"48a1f84dc9701bbafafaf00ffa222e403a7d84e4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/object.js","hash":"1f4e289be4a66881114caa5198b881b1f16fd4de","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/omit.js","hash":"b9a90a8700d55718cb1a3d68b15223d0b9d7de61","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/omitAll.js","hash":"5c3a9227c6f9ddc785688becab205f8e912a9668","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/omitBy.js","hash":"1ae512e4ff2af4984900b15292137fcc10161589","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/once.js","hash":"b6d33d5a9c4379ef7e1c46b09f9c865ecb8603bf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/orderBy.js","hash":"7a17f923611248c0ea7086507bf568a043b98129","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/overArgs.js","hash":"adcf40dad62a1c856764978731537f30889b1c74","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/over.js","hash":"51db6346f35cb56c4ceff448ce83bb4b0529dd47","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/overEvery.js","hash":"3442bc9336ab31d30983323ab9e88f628085a1b1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/overSome.js","hash":"7de036f2f58dc0faecaf54be9adea63226aad560","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/padChars.js","hash":"4c63a99952765c19e7858c17f18da7c6612c35a7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pad.js","hash":"383ad74a3c1d0de2b6ca0304eb1d1faa4bc5bd0a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/padCharsEnd.js","hash":"07914fc0fb8ecc33d9611986519b7c6607fe455a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/padCharsStart.js","hash":"5c7255195a70d48bba88ed00ac177d59c02e88e6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/padEnd.js","hash":"4aebe4522188368f563e7e72b2549083b542331b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/padStart.js","hash":"a312c6f78be12857bd315385eebcc8eabc67c1e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/parseInt.js","hash":"9f69cbcb1ac43f1e3e7d6cc58efd7685fe4a00aa","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/partial.js","hash":"f2acb8a2cc54f7e90ae1cbca437be0f9c8bc4d68","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/partialRight.js","hash":"bcf63208bf8072ae6e7ff226467ec45fe20b7ace","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/partition.js","hash":"205607a8169b9faeb2b51b0974805fb3cef84b89","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/path.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pathOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pathEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pick.js","hash":"7818ee7a56a4493a25f0262b42226a99b5ea4e74","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pickAll.js","hash":"a24ed77399bda55b6c76f52a7b2d0318e15e9d53","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pickBy.js","hash":"7e90e85df68c3e5ed8e18b36ef2f1033f9c192eb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pipe.js","hash":"9a9cf735bad407cdf098744f528e907de4b8f8bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/placeholder.js","hash":"d211b85c131bc2d7c0230fc611c2f88d1aa1ae62","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/plant.js","hash":"909ca1575840a93993b0cac28834173e1474eb9f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/prop.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/propOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/propOf.js","hash":"4a9afe087120c7e35682886cbd129a08062286e8","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/property.js","hash":"3a20da704882287060017daaeb9c77d4ba21d079","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/propertyOf.js","hash":"86c977659931219a76a81ee1065db512838cba44","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pull.js","hash":"e212c433d15f9e4aae0c7b7472df7478dce59826","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pullAllBy.js","hash":"82df6feed00d7586139b8d19babff6a119d12abc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pullAll.js","hash":"9d43ec3e85737776d1cba4dd43dfe33dcb691213","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pullAllWith.js","hash":"a4c03d7ae4b54c96e5050bbc7421bce119aed17e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/pullAt.js","hash":"e64a22662e4110f3a7598bcbb20c3444ace05733","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/random.js","hash":"c9cacb8c48422049484d1b43f3e10da43f54fcf0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/range.js","hash":"c30a51ad9b00e95df9e8d84359393789adff6f70","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/rangeRight.js","hash":"87d5bc191b63a837147e1a06ff573017932f9956","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/rearg.js","hash":"d5b08395ea2c22d24207c8e80e19a62b8b68d49b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/reduce.js","hash":"7607f41b09579aa65dca0224fae135f2a7bd90fe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/reduceRight.js","hash":"db8224e00025bde9179b073a6aa8aaef52cbaf6e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/reject.js","hash":"f24c316dcf99cac19664e5f3cba90bcb7928ef1c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/remove.js","hash":"f6c76702ae01ec215d972d87850624d302a45b9f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/repeat.js","hash":"7af31ea1d388664c134aeff68f0d5cb72297004a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/replace.js","hash":"f4cf1769a167cbafbca362598669cee3b2048b03","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/rest.js","hash":"a860492108f67bef2af79852208f2dfd4f541d7f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/restFrom.js","hash":"7658cbf9d7d17aa68e24ae89e087b1f1f82858ac","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/result.js","hash":"e805c5972b63deb60f49d1513e570ed116a864b5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/reverse.js","hash":"723596c407da9faeb8a6029ef74e42e97bdc6be9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/round.js","hash":"39a12f5a5a3ec3058dec8aa5118425b16d070281","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sample.js","hash":"2d93d3727f92362eeadcff288c3a8a733d023740","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sampleSize.js","hash":"fcfe74bb18b06d6da53495935d23a7600f9b24f7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/setWith.js","hash":"c5fab5be851b87976674b1459d61b445d0d5be14","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/set.js","hash":"35767c3a9b3e46a963c7fcec39391fa87136861a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/seq.js","hash":"4fd21585867c1b120e02b78852d98320ad8a38b2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/shuffle.js","hash":"2d110e1a05b0780b5ad4159ea18a807f7ea1e505","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/size.js","hash":"3fb55f18bf4ff0daea2c053a54a53c2674499e45","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/snakeCase.js","hash":"d233254a26e81ab2a81fac31c48215d4b0b44adc","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/slice.js","hash":"ad400dcd46e81370daf0ad7c745ea1ab58df49a1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/some.js","hash":"0ab071ab57a97cb20b860f9125f2d3f1f131f833","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortBy.js","hash":"bbfdf129dc3ce45a017989b1b825542383812b73","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedIndex.js","hash":"04be86485281acfc53118491293043d70e3a7f2e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedIndexOf.js","hash":"70b13a8537667e2fcfeba4993992875bdf8ff864","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedIndexBy.js","hash":"47138204798bfa0b43928340b12bbdcff317f60d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndex.js","hash":"d6598c35bd7fb8887fd6fdbdcb8b18befa6632ad","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndexOf.js","hash":"94fc33bdee1fdebb80f0b00d195eb4a13bb926f0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndexBy.js","hash":"e53794520cd5b3ca6df2ffb977e0e6b7a5f9502c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedUniq.js","hash":"8e361b43dd485f7aa5971e947939324cda143dd3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/spread.js","hash":"347036d4ea05dea39b09f20275d06e8594b55ccf","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/split.js","hash":"e785df2f7e7764f1bf518b872bc302679b505589","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sortedUniqBy.js","hash":"dc651f780172d66beef630e5c50c006d9fba50d3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/spreadFrom.js","hash":"30b843077c519cbe18ec47e2ba9685f3a37e19e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/string.js","hash":"3a30865f86edf4dc3baff7567a894bc6f280a654","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/startsWith.js","hash":"73df7824ddaf5d8dbcbfb2894234f8e5f4214497","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/startCase.js","hash":"aee3f36ca72d7fa30de64c0541e80b8ce2d729bd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/subtract.js","hash":"f76a659ba3d7724c8e4ff6049dfb6cb17627ae41","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sumBy.js","hash":"73e4807968a99437d8168517ac9fd13ceeac5886","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/tail.js","hash":"4515c52305fd72e45da2ac90042e05c2215178a2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/sum.js","hash":"430189ab2c6a23195cb8ea5111921794b9175ebb","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/take.js","hash":"f9dd7f687a04982ac7aad57c525d98b1c3ffd1fe","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/takeWhile.js","hash":"072405b57aebe0b9a274eb3709ecee82226092b9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/takeRightWhile.js","hash":"b090924faefdfd4a31e25c54931f3b46f61c8203","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/takeRight.js","hash":"eed0e281c0ecf99c20f5668ce9e0dd154e45ca71","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/tap.js","hash":"26ebee1454a84078cc66c9acb6c4844a5dbb6223","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/throttle.js","hash":"93c605d12d488e2ea9c6e6c63dbf42a538c66146","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/templateSettings.js","hash":"b9a7dd2e08852490ea86ed35b1e7469482c2bb23","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/template.js","hash":"ee7becfdb63a3d9ff3dda057f1a9caef3a814554","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/thru.js","hash":"e93cff48a14c89ca44d3cf7b14dd7ec275dd53ff","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toInteger.js","hash":"1a1797465c07599f7abc0f8430e46cff38d50986","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toArray.js","hash":"f47d0cfbc5a869b78087164b18237c5448f21851","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/times.js","hash":"216300e9d1f02445f1af5f8c8427f949133b75a1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toIterator.js","hash":"961722cad23f72206b6f7d83e054c271b6a2add4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toLower.js","hash":"e0fb8417621f54e54d3df261d1e873438502ed70","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toLength.js","hash":"7d567f44a37d6a32bbd5a3856d011d71a9665f5e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toJSON.js","hash":"7ac9ef07def4a64b062a05e942d3d110e3492ec7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toNumber.js","hash":"3f6ed987b363575f5f35f6189b144ba3d907eb43","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toPairsIn.js","hash":"407a3784056e15bba952ddd7d835aff27eecc673","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toPath.js","hash":"d5cb075719634a9c336bea31d017ac20389c044d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toPlainObject.js","hash":"fa912ce1e006d37f4483a53391271acb71692997","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toPairs.js","hash":"c28dd8a85dfaf032e5db9c1ae75da809d8527223","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toSafeInteger.js","hash":"fa9edb660be230da19a83e120f48052d9ee5400b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toString.js","hash":"70b8676332f4ca060ba84f05a9bf101749fbf3f3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/toUpper.js","hash":"4312523e48af3aadf918218214ab329523305334","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/transform.js","hash":"932c1b9f13d1e4892db0ea9eefd4902f843f74b4","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trim.js","hash":"f57135b04ed9e9db794f75b6b47b328440f06922","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trimChars.js","hash":"28eb05ea233dc6596ed3b17a3684c7225efa82be","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trimCharsEnd.js","hash":"c2d9c19c69c5e695022119baabadaa64ef02414c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trimCharsStart.js","hash":"8415cb22cbb73b5fd101e360400bf6182f4d488e","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trimEnd.js","hash":"a9f669bd68b6fb04ca71e18d5f2c88805ec7d61a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/trimStart.js","hash":"50c328eddeec91b92f4eb516edcc78faaae87333","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/truncate.js","hash":"af7ab1a8bcac66a7504359d2b2625b0b4bb6445c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unapply.js","hash":"936c484aca78852157be00e7b5cb71da6f747bfd","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unary.js","hash":"22e12bb090f8f305fb360a2372d87fcd9467399d","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unescape.js","hash":"e91a70341966dbafb94a8d6fc723f23f3c3a31a7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/union.js","hash":"8e1193fe25429e87a9cd2e4a29dbd279c5decd5f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unionBy.js","hash":"139742a9be22d7eb2195e7e7182d87a912936e2f","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unionWith.js","hash":"c48bcdd3435f2cf4a650d30608cc929712943578","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/uniq.js","hash":"54b58010d1988f7a6ec28dc4a2df2205e83029ae","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/uniqBy.js","hash":"4111e9001db74d691176ba3e02af5527a4a77ed6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/uniqWith.js","hash":"af2818a584a4317e5148e52222afffa0c5fee59b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unnest.js","hash":"3d20beb0655413d13c2c55fdc3ac06013125edc6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unset.js","hash":"401e919462b8e66630dfc74e18796fdfa62ba6a3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/uniqueId.js","hash":"414c720c8d11aeeca6b05cccb6deb16a0f27c943","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unzip.js","hash":"29cd397f4baa016f6e6d1c8fc4326219106896e9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/unzipWith.js","hash":"afc880fef61b32bc409f3a9a7359d755cdddf83b","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/update.js","hash":"a7d197f6473f8a7a38c00acc709f53481c545474","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/updateWith.js","hash":"9dd189e80bb45da43b4076a1643a45c69f8cf1a7","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/upperCase.js","hash":"612a73d5f39d6d5a6f3c3b80ec89a6377e2e3c4a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/useWith.js","hash":"992d0f455bb3b824323580e322a9c79bd378d0c6","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/upperFirst.js","hash":"084545106fd93e9acff00c4401918ed9054d55e3","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/util.js","hash":"0724cd943bdab0b6bac86e7ac14e815e5aa1d9ed","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/value.js","hash":"e2d89ba1db613274b31d1d0fb1acb503644ad2e2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/values.js","hash":"97fd629e19d9740fbfc87a26f86a259bbe7ca7f9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/valueOf.js","hash":"a2ea35c715e7b3b68051a38cbf6802b29370d975","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/valuesIn.js","hash":"b7b2dd2b81111cce5adfeeb45254a5372e6c28f5","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/whereEq.js","hash":"a8739227f9a06cd21d46e2947b3184c390ae9c56","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/without.js","hash":"2599adcc37dbd771a16ea4cc2a0c1d4513f38a9a","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/words.js","hash":"88c9e852c37f155c0dc429a401d44df09d9ca51c","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrap.js","hash":"3631e867dfc78a67db38ffff790ee94022015a52","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrapperAt.js","hash":"7d374b517c61846dba2ec2898d75181025fde1be","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrapperChain.js","hash":"1e4f82ce87696ad134450678d2fba27bb46cd123","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrapperLodash.js","hash":"ee531effe7e5e4472083f98b35497f858be33bb0","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrapperReverse.js","hash":"0e41311c145f305b07da8c06db6e8e7ebe5433ec","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/wrapperValue.js","hash":"51e6e912753e7d425a490e90c8205fe83dc435f1","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/xorBy.js","hash":"476caccbc9387505d0e110f814102335c77bb511","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/xor.js","hash":"bb7e8f6d42f3c73d3358ad081b4e00796d1cc771","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/zip.js","hash":"3017d4235f2ff6d2658a88eb540246821e9dcf04","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/xorWith.js","hash":"8d0c86364c19f9c2b17feac93b112781ff81b3c2","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/zipObj.js","hash":"353dfff83f25574ff58209ae8656869ab5516e81","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/zipObject.js","hash":"8449412e15d18c596810ebfa34c5a0766f22b7e9","modified":1460128955000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/zipObjectDeep.js","hash":"e27ad4a21f3e47d1a59b796566d3a4c5ffbe5ebb","modified":1460128955000},{"_id":"themes/apollo/node_modules/source-map/dist/source-map.debug.js","hash":"fb9b06863aa4aba431679d05f05105b3390894b2","modified":1445614125000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/fp/zipWith.js","hash":"641ede21898d379ba0b8b9038913fa0400a271b9","modified":1460128955000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1457790130000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1457790130000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js","hash":"e9b4761816194578f90bc065a405d3ce09b204d9","modified":1457790130000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/doc/stream.markdown","hash":"10432335bea3230f59e7d889246b5e891360f163","modified":1457876227000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js","hash":"de86cccbe828e61bcb25bc376c6c107fb577e0ea","modified":1457790130000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/dest/writeContents/index.js","hash":"981812bab75fdbc202cf31bf4b00b3b45a4fd1d1","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/dest/writeContents/writeBuffer.js","hash":"4b2bec5a2f19e0e2bf9a21d9d4b70b59a8f3f09d","modified":1442714862000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js","hash":"9c18555e3832293b79c9437c56d4c5e453f85eee","modified":1457790130000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/dest/writeContents/writeDir.js","hash":"546f9be71216f252b1c1454b6f9ccdbfdf17349e","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/dest/writeContents/writeStream.js","hash":"80e549abc59671129b9902a334c796f42c596adf","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/getContents/bufferFile.js","hash":"24c479a621114a981379f36915b9cafd5be9a989","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/getContents/index.js","hash":"b19730dfe4ee77a8500f54871256ee7c9a44b1f8","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/getContents/readDir.js","hash":"61c7ab47540cda4c7d37f2278e70bc54789de5a8","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/lib/src/getContents/streamFile.js","hash":"b916a1161b12e5844d759b4543cc3a0eaf120708","modified":1442714862000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/test/max-open.js","hash":"52fbbb9ea8562970586fbf626f93605be18adcc8","modified":1433135171000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/test/open.js","hash":"0b8ee05d1a18c3ad4440a7ee0086874b0f1feabc","modified":1401669049000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/test/readdir-sort.js","hash":"5b03b7247f028d2af427b4f2a9cd8447c72b8aa5","modified":1416287842000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/graceful-fs/test/write-then-read.js","hash":"61aad474142557853ed11fc10bece0f9625f8e41","modified":1433135176000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1414231759000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1414231759000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_transform.js","hash":"1eb7ec328583b5c038773c5702d01911e1107f17","modified":1414231759000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_readable.js","hash":"fbe877a784cabfe0f67f1a194bfa164517554453","modified":1414231759000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/lib/cloneBuffer.js","hash":"434a91be54da878952c3128a9b47cf6521268426","modified":1409296013000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/lib/inspectStream.js","hash":"7ee432c397a0d55d6a7ec0c60550819f016652cb","modified":1409296013000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_writable.js","hash":"29fb611c264c00b9001364c1ce90fc64efa66ed9","modified":1414231759000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/lib/isBuffer.js","hash":"b7711a383d0a046f171664bcedb529b62c5c3d4e","modified":1387585188000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/lib/isStream.js","hash":"fe040abc25abf6b00173ebc661da4c52960b5e69","modified":1387591573000},{"_id":"themes/apollo/node_modules/vinyl-fs/node_modules/vinyl/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1409296013000},{"_id":"themes/apollo/node_modules/es5-ext/string/#/normalize/_data.js","hash":"44b9b8416c0e97b8008bf3dd15df4680a2944102","modified":1435238762000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/js/bar.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/js/foo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/deep/deep.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/css/baz.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/css/qux.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/ast.cpp","hash":"8965ea640f45c7282e8a5e36ed603dc44590828b","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/ast.hpp","hash":"3e01e006530d5680e1ebe963076d0aed663231bf","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/extend.cpp","hash":"042af7d93b90d5be4f7e21e90f46e5bc2b1c724f","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/functions.cpp","hash":"3251fc3032cbc256f43ab392c2f03178f4529c2c","modified":1447257466000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/parser.cpp","hash":"1d0271b9fc3f7152dde3f73d93f6c4284011cf40","modified":1447256792000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py","hash":"aacdda61ae8980f93051a5a3ab4b8c694f37dfb2","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/input.py","hash":"efb256f9ab9f07f54219e00bb2dd385ef6001c14","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/xcodeproj_file.py","hash":"45e8d7b868e4e2e129b4f17d90aae20f93cb3d89","modified":1448971574000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/other_path/lib/other-lib.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/bl/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1433891361000},{"_id":"themes/apollo/node_modules/concat-stream/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1433891361000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/@@iterator/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/@@iterator/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/@@iterator/shim.js","hash":"3343cf8362f67b7feaf64fe1b5f6ebf64609df0a","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/@@iterator/implement.js","hash":"83654228a94c421ccd7153eeb7ccd0e054f921c0","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/concat/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/concat/shim.js","hash":"f2c47783db1c8b32286cba3342ee1a0f52d4cdbb","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/concat/implement.js","hash":"d2e4f88805996a51b37ee4e8073b5558f1304b56","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/copy-within/implement.js","hash":"ee598ec28815361d0cebcb55385d397aa4914614","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/concat/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238762000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/copy-within/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/copy-within/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/copy-within/shim.js","hash":"4ac740e721779a9ee1b80e0ba31ec1f97c5d8881","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/entries/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/entries/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/entries/shim.js","hash":"13a1553690a5df941fa2f4c08731e3c1d24a7a74","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/entries/implement.js","hash":"51891b79b3a61819e8ec708c78170e0b071c5574","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find/implement.js","hash":"59a75df7e560e226460166cf0bf7ff1dd30585ba","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find/shim.js","hash":"3e6aae34dcb52be860bd142944faff3a761f21bd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/filter/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/filter/implement.js","hash":"4d470b7f26d71a850c1660fa7fe2ebdfe7fc523c","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/filter/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/filter/shim.js","hash":"a71d7da5e916163e837823ba7de8e181435ede38","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find-index/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find-index/implement.js","hash":"c10d4b56b0309abfe14a50ee20ca535c160b3e96","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find-index/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/find-index/shim.js","hash":"f3dbc94652f14f1b05d105d207c2dac6feab8150","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/fill/implement.js","hash":"5c6e7780acb19b1b2990e4c9ee223e7da5bf9595","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/fill/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/fill/shim.js","hash":"ba6567d05833a15d3a0b368fbe08b358d870d1af","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/fill/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/keys/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/keys/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/keys/implement.js","hash":"22738f7a9413c3f34996ea164a57b7645e83e8b7","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/keys/shim.js","hash":"7ac12c2a9bad67e94edd2c059054eb1f99d68044","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/map/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/map/shim.js","hash":"441a4e465de20ec075ff1f0654d2b7ec3250875d","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/map/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/slice/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/map/implement.js","hash":"2271e254963e4348bd87bd24679878d9a933ba89","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/slice/implement.js","hash":"c7101e62c54d8781d6fa8af0103c2854310b7eaa","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/slice/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/slice/shim.js","hash":"ac3ef145195acd5f371e987f5a508eb5eeb68443","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/splice/implement.js","hash":"ceed1ad466f9e9d44e5f82b1e4ed62e322ec3459","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/splice/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/splice/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/splice/shim.js","hash":"8e95ba8424f36b6f5e09b210726fae307f908f99","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/values/implement.js","hash":"c3799bdfa3ef9d63c2a77ca60cbf4d074edf7459","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/values/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/values/shim.js","hash":"3343cf8362f67b7feaf64fe1b5f6ebf64609df0a","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/array/#/values/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238763000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/match/implement.js","hash":"e2887a9a5e7dc55b0942a2f8bb05ed9cbe891413","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/match/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/match/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/match/shim.js","hash":"25bcc380b341c944f45497b76ae200e3b5a2edbf","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/replace/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/replace/implement.js","hash":"edcc229a36e497bdd771a5247f7c241fe0998de9","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/replace/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/replace/shim.js","hash":"1b1b8070efcf7497013680c1d9e0e86611c5dcad","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/search/implement.js","hash":"8548ab27e687a76bf224d5e049b45fe1d8d96956","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/search/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/search/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/search/shim.js","hash":"3dad7f1a901cb06825e9f4292c1c4b0ab8a5efc2","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/split/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/split/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/split/implement.js","hash":"e258374841e066271b5bc25f2a879085b270493e","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/split/shim.js","hash":"99d2ddfccde213b07728f0723f88c2b0e3e11d6d","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/sticky/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/unicode/implement.js","hash":"bda347acc9296ffc9ceecdc1865b726bfef3836b","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/sticky/implement.js","hash":"478eec1fe33d79c9f4c66807c35775f0c394c036","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/reg-exp/#/unicode/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/@@iterator/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/@@iterator/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/@@iterator/implement.js","hash":"c941497527a69fc8aa8229b0764df22840eab394","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/@@iterator/shim.js","hash":"f28e886f8f1793919e65c31ad560accc1aef5dcb","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/contains/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/contains/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/contains/implement.js","hash":"85510c86eeff2e3302e864b52775868c51122674","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/code-point-at/implement.js","hash":"3301b3d8d09facbd5c0b37daabc5a452d343745b","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/contains/shim.js","hash":"4c44924dab1ce5d0c56c7c4c56dcb4f681e66c45","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/code-point-at/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/code-point-at/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/ends-with/implement.js","hash":"0f27cac192ac2845f5124aa1f6b4f5d0c86848ae","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/code-point-at/shim.js","hash":"8d1218201121a93dac5951811d0f766c7e347f5e","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/ends-with/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/ends-with/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/normalize/_data.js","hash":"3fd2738eaba68db980e65ac234dbc64a904adf2d","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/normalize/implement.js","hash":"18857c676d49ab7fa4ee23191e1420cde1473ba2","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/ends-with/shim.js","hash":"3a086e0419a8f81e39c3e0f291da76eef598283d","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/normalize/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/normalize/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/normalize/shim.js","hash":"75d4d628710a2227ff77ede252039bccb7be8663","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/repeat/implement.js","hash":"cbec6b2cd2bbeebe7cec7eb777078b985e153075","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/repeat/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/repeat/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/repeat/shim.js","hash":"dbbb8796f8c7f8af79ac6ad01992f40a2bf9ca14","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/starts-with/implement.js","hash":"cbaee2a0dbb158c4e5351f290659d686031a13c9","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/starts-with/shim.js","hash":"fb37187c035385f86170c8fb4f2a03e7def9cb70","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/starts-with/index.js","hash":"e5cd4ef4e5f1597b57443d1c6b955ce90ed18d5f","modified":1435238767000},{"_id":"themes/apollo/node_modules/es5-ext/test/string/#/starts-with/is-implemented.js","hash":"3cdff8157370b77c3c62944575096bef36c2ebdd","modified":1435238767000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/base.h","hash":"48708eb4c63405be0465f4c322ca95f458d26ed8","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/context.h","hash":"b1893ac3d32743df8f647da86163c02871210f2b","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/functions.h","hash":"8a70330844304fb24fda0320aae7a2ac1f66ee45","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/interface.h","hash":"3f546a5be7bae6be133e561bf94aad8ef2187eff","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/values.h","hash":"93d6b0ab3a5ee17ff6f39f595b2ed3bbdcc1aebe","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/version.h","hash":"9627ac11d5958f49cda1623d06a6550355e9c38e","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/include/sass/version.h.in","hash":"fc1f71be1a80f408c5b35811376b356b1047d545","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/b64/encode.h","hash":"13dcea3037d78e15117e5c20f53b43ff9c3a06f4","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/b64/cencode.h","hash":"dd08436079b47bc078cdc2a7de3e5be54c9f906c","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/support/libsass.pc.in","hash":"10c187d06cb5e2284e97cc8ec5196fe0c69d936f","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8/checked.h","hash":"842f4e5f234593e733b8e8d581737db1ca0dd1cb","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8/core.h","hash":"9fd44ddd80aa088b9f4ea0ac0002bd498bcfb9a1","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-sass/src/libsass/src/utf8/unchecked.h","hash":"13084573f66327141b17928bc82f7d35066114d8","modified":1447192294000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/gypd.py","hash":"a8f5c7f56ad2626c942f5c126d2232b0edb49100","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/dump_dependency_json.py","hash":"0420dac8574c685490790d5f6a9de01fbc3dfc33","modified":1446798086000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/analyzer.py","hash":"cd1885856940c5a3a503161f79afd402c9e2314a","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py","hash":"6fe54f95a01283d9fdb3ae3eee76ef8a7da80485","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/cmake.py","hash":"899aa517a7203082c1da6603dce4210df0c8626c","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py","hash":"f960d0a800fcfebebeebb21d075fb0348194b5b0","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/eclipse.py","hash":"5405df01bb0dc3faf4d7d3d837fc35784dac17f1","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/android.py","hash":"fecdeb3f1025670a64bd8d83135a95b5493cd4a3","modified":1457114822000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py","hash":"b14c086d6fc7c1b2c2765ebcd022d511051139db","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py","hash":"8bc7862793809832a315d8893c5c71871d5a2bb0","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py","hash":"d1f49ee0fef4135a1f4219154f398344dba664c2","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/Xcode/Specifications/gyp.pbfilespec","hash":"65f10440af4c604b36b845354a321d2fc66cd399","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/Xcode/Specifications/gyp.xclangspec","hash":"e87a05f0207176162d6cb975da478f2301c36249","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp","hash":"fc144e3bff480436092617867757d7d6c41aca18","modified":1441509988000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/minimatch.js","hash":"16b28bcabd1eca778c2176d6c49330396907411e","modified":1437616284000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/README.md","hash":"fb5bec4ab02467cdb76cdb552613ff0547402439","modified":1407793656000},{"_id":"themes/apollo/node_modules/sass-graph/test/fixtures/components/_q.scss/_s.scss","hash":"89ad1ba8ec380bf191926fa735540c1569b25b73","modified":1454293183000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/browser.js","hash":"04c30625df185494a153c238296f5859aed9c963","modified":1437616294000},{"_id":"themes/apollo/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/package.json","hash":"1a004c4549fcebc8a5d108adfbd7b341bf2b17cc","modified":1460380283000},{"_id":"themes/apollo/node_modules/resolve/test/module_dir/ymodules/aaa/index.js","hash":"8ab905ac897199b408f3f5ac70425ba60b9d1b39","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/module_dir/zmodules/bbb/main.js","hash":"a860711dfe0ed743e04b756897cfd2138559f132","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/module_dir/xmodules/aaa/index.js","hash":"801190a884bb0ba8ef3457b4bcf99d45ec6fb7a7","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/module_dir/zmodules/bbb/package.json","hash":"3d33fb74a6cd3a549dbae1cbe22a7c2f337f978e","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/node_path/y/bbb/index.js","hash":"329bb0d7e23f441afac2d205ce0bab1243bb1015","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/node_path/x/ccc/index.js","hash":"e95339b8e0538902fa7d20e9b748ecc176027ec7","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/node_path/x/aaa/index.js","hash":"4b616d6a3e49ec0b9f8a40b07940fc9334ae3184","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/node_path/y/ccc/index.js","hash":"a87ca222379cef10ef65b62af862d8c09faba847","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/quux/foo/index.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/without_basedir/node_modules/mymodule.js","hash":"b83c2c7272a70eef84d040fcbb0d242cbf097401","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/subdirs/node_modules/a/package.json","hash":"5f36b2ea290645ee34d943220a14b54ee5ea5be5","modified":1441654384000},{"_id":"themes/apollo/node_modules/through2/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1433891361000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/deep/deeper/deeper.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/make.py","hash":"87336b7fb1f256a7dd76d6248b02bdf76848de67","modified":1448971574000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs.py","hash":"e25d8a0f51eeed63cf01946ec42115bccf4a5423","modified":1446798108000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py","hash":"fc2986bb3875fa7f6972180d406d77895a51a465","modified":1448971574000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter/deep_ref/node_modules/deep/alt.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter/deep_ref/node_modules/deep/ref.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/punycode/node_modules/punycode/index.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified","hash":"c84c7c3760afa3f4385f4c1905495efd1e15e591","modified":1441509988000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter/deep_ref/node_modules/deep/package.json","hash":"c6c96ed588e3fa739dc992ba839fa2778f4bf3f2","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/bar/node_modules/foo/index.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/biz/node_modules/grux/index.js","hash":"1f635b4510e5b264b28f30aca962532ab9910369","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/biz/node_modules/garply/package.json","hash":"d5e686ccafe95b49e0a490a87b48806dc9e0f414","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/biz/node_modules/tiv/index.js","hash":"919de504e19923d1e97ef0120f16ab6865f29199","modified":1441654384000},{"_id":"themes/apollo/node_modules/globule/test/fixtures/expand/deep/deeper/deepest/deepest.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/apollo/node_modules/resolve/test/pathfilter/deep_ref/node_modules/deep/deeper/ref.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441654384000},{"_id":"themes/apollo/node_modules/sass-graph/node_modules/lodash/lodash.js","hash":"c0eb635b9fade4cf02489c7a38bf59ad4b88752d","modified":1460128955000},{"_id":"themes/apollo/node_modules/resolve/test/resolver/biz/node_modules/garply/lib/index.js","hash":"4fc15ac60cee1ae77330c29258ce01f70ca58694","modified":1441654384000},{"_id":"themes/apollo/node_modules/resolve/test/subdirs/node_modules/a/b/c/x.json","hash":"57c19b58491c01c3c7f38d8d12f4a698aff6b9f2","modified":1441654384000},{"_id":"themes/apollo/node_modules/caniuse-db/data.json","hash":"b03cfa5ce13716129b1d8f4fffd37d4207b35c5e","modified":1460000728000},{"_id":"themes/apollo/node_modules/caniuse-db/fulldata-json/data-1.0.json","hash":"b03cfa5ce13716129b1d8f4fffd37d4207b35c5e","modified":1460000728000},{"_id":"themes/apollo/node_modules/caniuse-db/fulldata-json/data-2.0.json","hash":"dca233b3b6d2f1be069c895b09fd0f088b661dab","modified":1460000729000},{"_id":"themes/apollo/node_modules/node-sass/vendor/darwin-x64-47/binding.node","hash":"5ed61c01d924bd205cbba710af5ff6a064c3ba03","modified":1460380413000},{"_id":"public/atom.xml","hash":"b4ff054d649da10f01e4a31e22033bf24bab2058","modified":1461258091851},{"_id":"public/sitemap.xml","hash":"c60996a3879d273f2e2c2fe7eb8f05566b13f4d3","modified":1461258091852},{"_id":"public/2016/洗牌算法/index.html","hash":"100477b2ff88311b934c6f8a71601e7b28295950","modified":1461258091867},{"_id":"public/2016/读《图解-TCP-IP》/index.html","hash":"f294cec0762416ff247917b5b2fe3d34e68e05da","modified":1461258091867},{"_id":"public/2016/GET-vs-POST/index.html","hash":"55ddc21167c8f59b143ac94175a1ac671d48f9c8","modified":1461258091867},{"_id":"public/2016/HTML5-canvas/index.html","hash":"003d85550f9fcea37609eb67902a0c9e6c15aa0d","modified":1461258091867},{"_id":"public/2016/Tmux/index.html","hash":"6f39ec5341010b8b3cb8aba711dfb1a36d972d65","modified":1461258091867},{"_id":"public/2016/Truthy-and-Falsy/index.html","hash":"17f169eb71cae9fbc76e18cbc9d12de447c86bac","modified":1461258091867},{"_id":"public/2016/CSS-Counters/index.html","hash":"fa759208e727435b2de1f9a93abcc72dd47f6c65","modified":1461258091867},{"_id":"public/2015/开发者必看的技术站点/index.html","hash":"800ea74f3a3cd21fff19dadcd35607ffcd6aa725","modified":1461258091868},{"_id":"public/2015/求值策略/index.html","hash":"76ae7638aa83b1b104eb8af395e68ca5560a09c0","modified":1461258091868},{"_id":"public/2015/inline-and-absolute/index.html","hash":"fdd35a69e135ccdcff59692cbde0f88d5c38f011","modified":1461258091868},{"_id":"public/2015/mac-tool-kit/index.html","hash":"c012749d8e48f38075d26de2aba21c544009b99f","modified":1461258091868},{"_id":"public/2015/CSS-Flexbox/index.html","hash":"1096e5433193ce7575f42fcdbd7c351162f284bc","modified":1461258091868},{"_id":"public/2015/void-and-undefined/index.html","hash":"cfe19191c4218a3a513992849a3758733d228368","modified":1461258091868},{"_id":"public/2015/React-组件间的消息传递/index.html","hash":"036daac83c9e43d47a7db255b126041405944e3f","modified":1461258091868},{"_id":"public/2015/React-组件的生命周期/index.html","hash":"1fe9f68804bf91892159cd8fb5f560cdc08d0822","modified":1461258091868},{"_id":"public/2015/数据类型的分类/index.html","hash":"77c1ba3ba76bdc5f7f6cea19362437f41570ce3d","modified":1461258091868},{"_id":"public/2015/Pug/index.html","hash":"e586e488c46e0f62769cdfd90be2c966cc02c9f9","modified":1461258091868},{"_id":"public/archives/index.html","hash":"06c3da6d94b8f31d89cd1f1843f16c93dd30ef11","modified":1461258091868},{"_id":"public/index.html","hash":"16924b31bee67478a8e75ee49f0cc15ec86af842","modified":1461258091868},{"_id":"public/2016/Lazy-loading-images-on-the-web/index.html","hash":"729461b5ef6b99e401b74fc3c1db7fe30c64dad1","modified":1461258091867},{"_id":"public/page/2/index.html","hash":"292bf36b1ba85e1d4bcd5e536064ab482807c0b0","modified":1461258091868},{"_id":"public/page/3/index.html","hash":"4e5601d59c1e1559c4ee1e0777561bae9b268178","modified":1461258091868},{"_id":"public/2016/读《高性能网站建设指南》/index.html","hash":"a693917b4385f74bab2aa7b5706e43f4396da24e","modified":1461258091868},{"_id":"public/2016/JavaScript 常见问题和解决方式/index.html","hash":"47e6a40c6ab0705e4ed252e4d3ece7d6bdf73f0a","modified":1461258091868},{"_id":"public/2016/2016-JavaScript-技术栈展望/index.html","hash":"cc36ecbe961c9d3470be2e6f6a0e942bed0118b2","modified":1461258091868},{"_id":"public/2016/mongodb/index.html","hash":"f923e5ec00c6797f87fcdd18000bde5260d7abed","modified":1461258091868},{"_id":"public/2015/ES2015/index.html","hash":"39ddb71bf8789cb6164d2c0a76b254e5122a7d31","modified":1461258091868},{"_id":"public/2015/Sass/index.html","hash":"d595ef1eb28f679fcf29d1d6a72768466565d453","modified":1461258091868},{"_id":"public/2016/性能优化的十二个方面/index.html","hash":"44d12d814604efb216bbaf6f6717324c800f8e6e","modified":1461258091868},{"_id":"public/2016/PhantomJS/index.html","hash":"67477a5b21c2624e7d0fe5d0b7e21c9e37a1b4f4","modified":1461258091868},{"_id":"themes/pacman/LICENSE","hash":"0138565d68df6e5536667ad445232981ea808aec","modified":1461237436000},{"_id":"themes/pacman/README.md","hash":"d7efa5614e13f8fc7db5e9030e4cc2b27c2df171","modified":1461237436000},{"_id":"themes/pacman/_config.yml","hash":"7645bd6ee93e6ad387742d7b75b7df5abf0ed9c3","modified":1461237436000},{"_id":"themes/pacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461237436000},{"_id":"themes/pacman/.git/config","hash":"71ffd708d008fc1611b6c7168a533848e46a9705","modified":1461237436000},{"_id":"themes/pacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461237373000},{"_id":"themes/pacman/.git/index","hash":"803a3211cf8a5ba8d300dabf9a3c852b6a367e2d","modified":1461237436000},{"_id":"themes/pacman/.git/packed-refs","hash":"e45d41cd8a82b23bb1e924b8f9212cfc77f36e07","modified":1461237436000},{"_id":"themes/pacman/languages/default.yml","hash":"7e9594aa9551cd4841905b4b4d4fcabc2b40e447","modified":1461237436000},{"_id":"themes/pacman/languages/zh-CN.yml","hash":"991b90926686c0d10731a8f4ea61b96c3f087531","modified":1461237436000},{"_id":"themes/pacman/languages/zh-TW.yml","hash":"48b652fa2eb73f9f7cd512472d0cb20057152aea","modified":1461237436000},{"_id":"themes/pacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1461237436000},{"_id":"themes/pacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1461237436000},{"_id":"themes/pacman/layout/index.ejs","hash":"774f7e89d05e9a9b43970a873d5100ad5c9d21ba","modified":1461237436000},{"_id":"themes/pacman/layout/layout.ejs","hash":"87b543229bec7e77cc0ec68cfdd11f2f33df4a1b","modified":1461237436000},{"_id":"themes/pacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1461237436000},{"_id":"themes/pacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1461237436000},{"_id":"themes/pacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1461237436000},{"_id":"themes/pacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1461237436000},{"_id":"themes/pacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461237373000},{"_id":"themes/pacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461237373000},{"_id":"themes/pacman/.git/logs/HEAD","hash":"42fd132bab769e1ad8141cac66e8019a899a7cf6","modified":1461237436000},{"_id":"themes/pacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461237373000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","hash":"af5d700c7e22e364216535142bc0adc798fac22f","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/archive.ejs","hash":"a1ada891cbacf49b397cfa7dd921bdd0ae545a4e","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/article.ejs","hash":"38837fc6a1a799e83b8a75db642b0daf1ff81828","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/footer.ejs","hash":"ecb03b462d938af45bfa5d4aa656cbeb5225f940","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","hash":"b6871f67c87c87acb5295ce4fb673b16a7296a01","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/header.ejs","hash":"515074e0e1449259cfb668217b21224f6e0adde5","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/head.ejs","hash":"f21fc1b1c16498610a44a552d23059d338f34d2a","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/search.ejs","hash":"aed90406246cc43f60dda8cd6558e9eccee342a4","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","hash":"b5aeaab660a18b7a4da568f015e61260eb478916","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/category.ejs","hash":"9b4cc6be18aa6c5da4cf45913d5be83fc33081db","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/links.ejs","hash":"3635a1a407fde93a3be58178b85f51ceb8b87f15","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/tag.ejs","hash":"cc97db230f727c27519298166ad904358811fb53","modified":1461237436000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1461237436000},{"_id":"themes/pacman/source/css/style.styl","hash":"b096cc43460e68004bbef41229f67420b5816637","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461237436000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1461237436000},{"_id":"themes/pacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461237436000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1461237436000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1461237436000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461237436000},{"_id":"themes/pacman/source/img/favicon.ico","hash":"fa2c03e9eb35f2f423a1c85c85c278649a857532","modified":1461237436000},{"_id":"themes/pacman/source/img/author.jpg","hash":"78f534fbda5eb4fdb4e4ce01dce0bfc39e2f729d","modified":1461237436000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461237436000},{"_id":"themes/pacman/source/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1461237436000},{"_id":"themes/pacman/source/img/pacman.jpg","hash":"7e873f2f40a52f8c679302b88bb0809a6abafe5c","modified":1461237436000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1461237436000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461237436000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1461237436000},{"_id":"themes/pacman/.git/objects/pack/pack-acad1edec8e846817639a2e00b10c2ac151c43e5.idx","hash":"4570ad6db0137731b3c73ecf74c2080c4917feaa","modified":1461237436000},{"_id":"themes/pacman/.git/refs/heads/master","hash":"70324d8fb61c49f6ec262f392ff6cff3ac8f80ca","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","hash":"ec5e8f66886dedf35b9a5746d11fe0dc4a7ab68f","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","hash":"f6b107078094333b6567d4a97700f559159675e1","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","hash":"5c0afcd1fd1d7b4e8335f76bc181b8e72ffed38e","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","hash":"a9aeae612eb7085bbe74bd12086198320e6c3702","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","hash":"7ca5b1db9439be61a8b77f6f7d857b56fdf1517f","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","hash":"73aa8a410cc80277930acaec23003c30eeac6d79","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","hash":"adc047d2bbd031092df86f3be2866ea9c3b5f3c9","modified":1461237436000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","hash":"dd9563aaa7094c7082a16e6c9cbc24b33aaef87c","modified":1461237436000},{"_id":"themes/pacman/source/css/_base/font.styl","hash":"75f264bc742888dbe192e8d19eda70705d13c709","modified":1461237436000},{"_id":"themes/pacman/source/css/_base/code.styl","hash":"330209ebaebe69308e131fada85b9b619c85fbd9","modified":1461237436000},{"_id":"themes/pacman/source/css/_base/public.styl","hash":"29deec49b60533cc4196175345eaa4b2d611a97e","modified":1461237436000},{"_id":"themes/pacman/source/css/_base/variable.styl","hash":"3640eedfb72d2bc5a5d75be5b0c9c7954f39229d","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/article.styl","hash":"82d7621920e221b7e52dfdb74cbcec718d0cc666","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/aside.styl","hash":"8fb8c2172883913b404f8e49e181103317486ecc","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/footer.styl","hash":"77c2e6251cea1f3970646f6fbe5d557ed4f98586","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","hash":"a544a58fdb4c8dd8274159323abd1e38cb03215e","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/header.styl","hash":"d27d0057b86dc61a1ab8a9037ee43dfcc43766b3","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/helper.styl","hash":"52d4ee51b7087c2c2a7e7ded6f63270165d9de89","modified":1461237436000},{"_id":"themes/pacman/source/css/_partial/index.styl","hash":"0d219fc6fb76c0d4ffd1dc2a119969d78a157285","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461237436000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461237436000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1461237436000},{"_id":"themes/pacman/.git/logs/refs/heads/master","hash":"42fd132bab769e1ad8141cac66e8019a899a7cf6","modified":1461237436000},{"_id":"themes/pacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461237436000},{"_id":"themes/pacman/.git/logs/refs/remotes/origin/HEAD","hash":"42fd132bab769e1ad8141cac66e8019a899a7cf6","modified":1461237436000},{"_id":"themes/pacman/.git/objects/pack/pack-acad1edec8e846817639a2e00b10c2ac151c43e5.pack","hash":"f5067b0b077a36c6d01b05f1f1341a67fdb7dbc7","modified":1461237436000},{"_id":"public/CNAME","hash":"ba64683b82f51c18f5419339a4ef75e195f7c402","modified":1461258091877},{"_id":"public/img/browser-fetch-flow-2016-04-07.png","hash":"00992ca03e7ce93bf5c9f255bd2e28c8b33c8672","modified":1461258091877},{"_id":"public/img/data-package-header-2016-04-13.png","hash":"a31a2fdd8cd525db698233326948f66b13cdc79b","modified":1461258091877},{"_id":"public/img/es2015-set-methods.png","hash":"206cb198e061c67c5c5fa423e8ced5629ef57ae0","modified":1461258091877},{"_id":"public/img/es2015-generator-yield.png","hash":"90996d0ad551b141b7cbbb087374b9b46884d2ec","modified":1461258091877},{"_id":"public/img/inline-and-absolute.png","hash":"ff3730a2e342cff7343ae433a364e2419a1e0a73","modified":1461258091877},{"_id":"public/img/flexbox-cell.png","hash":"af8e6ca103903120aa65061edd8cae60f742d423","modified":1461258091878},{"_id":"public/img/mac-tool-kit.png","hash":"e7f267227c2091f4bae1283ae546358f1967b5e2","modified":1461258091878},{"_id":"public/img/flexbox.png","hash":"88388c4adba71ba30ed4a4e46dff079745ac71d5","modified":1461258091879},{"_id":"public/img/mixin-vs-extend.png","hash":"211192b714cd97235a0c87dd91a3cfeb5b66bd6d","modified":1461258091878},{"_id":"public/img/react-component-comunication.png","hash":"90a5ab804c96cec8407f92e9d18b6ba4b9bb3ee7","modified":1461258091878},{"_id":"public/img/react-component.png","hash":"bf8f8040b4a88248113822385a3eb16b64881a82","modified":1461258091879},{"_id":"public/img/shuffle-array-2.png","hash":"b5e91a3df132a907f91109f792f08373761a7680","modified":1461258091879},{"_id":"public/img/shuffle-array-1.png","hash":"58471745e666f97fb25aba375ff3dfc1538e368a","modified":1461258091879},{"_id":"public/img/react-lifecycle.png","hash":"90f62f5cfb9e03282c986850b1fce7f21329dae8","modified":1461258091879},{"_id":"public/img/shuffle-array-3.png","hash":"f74f9b653f55e0ad41d67468237f351e311341b3","modified":1461258091879},{"_id":"public/img/shuffle-array-4.png","hash":"dc4d6df142224404b8ad37e4c784dce5f620c304","modified":1461258091879},{"_id":"public/img/shuffle-array-5.png","hash":"6f8a0e5d5a3a7918d0fdbb2ace72fbe370085c93","modified":1461258091879},{"_id":"public/img/shuffle-array-6.png","hash":"7395cbef2b6a697ff8ff11a6db3961b0ff7bbda8","modified":1461258091879},{"_id":"public/img/shuffle-array-7.png","hash":"7e8ea7687079d23236e3053268de1fee9f68434e","modified":1461258091879},{"_id":"public/img/shuffle-array-8.png","hash":"ea26ce73eacbe09c8acaba3ba462618fc7370773","modified":1461258091879},{"_id":"public/img/shuffle-array-9.png","hash":"4c592e27a92a6ca15442a24ecbda60186192cbb0","modified":1461258091879},{"_id":"public/img/tmux-structure.png","hash":"eb9b5e7b1dfc45b7d182e5c6c56dbdeff039ff58","modified":1461258091879},{"_id":"public/img/tcp-ip-protocol-group-2016-04-13.png","hash":"03c8463bb0f417c1e65427348cf13bd82b7e7d00","modified":1461258091879},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1461258091879},{"_id":"public/scss/apollo.scss","hash":"a3153dfedbaff08c20930b2bde95f2db49f6d518","modified":1461258091879},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461258040854},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461258040854},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461258040854},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461258040854},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461258040854},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461258040854},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1461258040854},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461258040854},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1461258040854},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1461258040854},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461258040854},{"_id":"public/img/favicon.ico","hash":"fa2c03e9eb35f2f423a1c85c85c278649a857532","modified":1461258040854},{"_id":"public/img/author.jpg","hash":"78f534fbda5eb4fdb4e4ce01dce0bfc39e2f729d","modified":1461258040855},{"_id":"public/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1461258040855},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461258040855},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461258040855},{"_id":"public/img/pacman.jpg","hash":"7e873f2f40a52f8c679302b88bb0809a6abafe5c","modified":1461258040855},{"_id":"public/img/resources-loading-times-2016-04-07.png","hash":"1fe9a0bf94b89f1473cbecec2d026aeec95a00da","modified":1461258091884},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1461258041112},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461258041112},{"_id":"public/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461258041115},{"_id":"public/css/apollo.css","hash":"bf3a9c57d98fe66a9975b7de6dbd666bfd77d8e2","modified":1461258091887},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1461258041115},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461258041115},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461258041115},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461258041115},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461258041115},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461258041115},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461258041115},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1461258041115},{"_id":"public/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1461258041115},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1461258041120},{"_id":"public/img/flexbox-container.png","hash":"6145f4dfb2fe53e03157cc873140284e9c3b6332","modified":1461258091894}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"2016 JavaScript 技术栈展望","date":"2016-03-11T03:45:31.000Z","desc":"本文展望了 2016 年 JavaScript 在实际开发中会用到的技术工具。","_content":"\n> 翻译自 [State of the Art JavaScript in 2016](https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.iwbk5gf69)\n\n如果你正在筹划新的前端项目或者重构现有项目，那么你需要认识到现在的前端开发环境已经今非昔比，这其中有太多的选择了：React、Flux、Angular、Aurelia、Mocha、Jasmine、Babel、TypeScript、Flow…… 它们的本意是将开发简单化，却无形中提高了学习成本，也给未来项目的维护带来了不确定性。\n\n好在这一现象正在退热，优胜劣汰，优秀的项目慢慢沉淀下来，开发方式也越来越清晰。有些开发者正在尝试使用基于上述技术的框架进行开发，也在一定程度上减少了学习成本。\n\n本文中主要介绍了一些我在 web 应用开发中所涉及和推崇的技术，其中有一些技术上存在争议，所以我对于每一技术都只做简单的介绍和分析。所有的这些观点都是基于我个人的经验和对社区的接触总结而来的，所以各位还请按需各取所用。\n\n<!-- more -->\n\n## React\n\nReact 可谓风头正盛一时无两：\n\n- 组件化使应用程序更易于开发和维护\n- 学习曲线平缓，核心 API 简洁清晰，易于学习\n- JSX 语法不落俗套，充分发挥了 JavaScript 的能量\n- 天生适配 Flux 和 Redux\n- 社区活跃且具有创造力，奉献了诸多优秀的开发工具\n- 单向数据流比双向数据绑定的方式更适合复杂应用程序，质量更高\n- 支持服务端渲染\n\n虽然比起 Ember、Aurelia 和 Angular 这些功能丰富的框架，React 不是全能手，但 React 的开发环境更加健壮。就目前而言，使用 React 已经不是一个技术选择，而是一个商业行为，它能提供更高效和更有效的生产力。\n\n> 当你想开发移动应用时，因为已经学习了 React 语法，所以可以直接上手 React Native 开发跨平台应用。\n\n## Redux\n\n现在，我们已经具有了开发视图层的能力，接下来，我们需要使用其他工具管理应用程序中的状态和生命周期，在这里推荐的工具就是：Redux。\n\n为了配合 React，Facebook 开发了管理单向数据流的工具 Flux，虽然 Flux 基本上实现了对单项数据流的支持，但是同时也带了其他问题，比如如何保存状态、何处发起 Ajax 请求等等。\n\n为了解决这些问题，又衍生了一系列效仿 Flux 模式的框架：Fluxible、Reflux、Alt、Flummox、Lux、Nuclear、Fluxxor……\n\n目前来说被开发社区广泛支持的一个实现就是 Redux。\n\n在 Redux 中，大多数的组件都是纯函数式的组件，也只有一个集中的存储和资源中心。Redux 的实例方法负责整个数据的操作和维护。相比 Flux 来说，Redux 的思路更加清晰。\n\n更重要的是，Redux 非常易于学习。Redux 的作者 Dan Abramov 是一个优秀的教师，他制作了一系列深入浅出的 Redux 视频教程。通过观看这些视频，即可成为一个 Redux 方面的专家。我曾经见识到一个零基础的 React 团队在短短几周内迅速开发出了测试版产品，且代码非常稳健和老练。\n\nRedux 周边的生态系统和 Redux 本身一样健壮。从神奇的 [devtool](https://github.com/gaearon/redux-devtools) 到强大的记忆化工具 [reselect](https://github.com/reactjs/reselect)，Redux 开发社区为开发者提供了应有尽有的工具。\n\n开发者可能会本能地去尝试抽象出一个 Redux 模板，这么做有诸多好处，但请在认清需求的基础上来封装模板，而不要盲目的去尝试。\n\n## ES6 和 Babel\n\n是时候抛弃 CoffeeScript 了，这是因为它的诸多特性已在 ES6 中出现类似的语法，而 ES6 是实施标准，代表了 JavaScript 未来的发展方向。\n\n目前最新的浏览器已经支持了 ES6 的大部分特性。Babel 是一个强大的转换工具，用于将 ES6 转换为 ES5。此外，根据目标浏览器可以调整代码转换的程度。\n\n那么是否有类型系统呢？TypeScript 和 Flow 都为 JavaScript 提供了静态类型系统，使用静态类型检查，可以有效捕获错误，减少测试量。目前来说，我建议对此持观望态度。\n\nTypeScript 在尽力让 JavaScript 向 C# 或 Java 的方向发展，但缺少了许多高级的类型系统特性，比如代数数据类型（algebraic data types）。此外，它不能像 Flow 一样有效地处理 null。\n\n相比而言，Flow 更加强大，捕获的错误类型也更多，但难于配置。此外，它对 JavaScript 新特性的支持弱于 Babel，也不支持 Windows 系统。\n\n就我个人的角度而言，在前端开发中类型系统并不是至关重要的一环（此处可能有争议）。在类型系统更加健壮且对 Babel 更友好之前，还是让我们静观其变吧。\n\n## ESLint\n\n另一个无可争议的工具是 ESLint。ESLint 支持 ES6 语法，还提供了 React 插件，已经不单单是一个代码审查工具了。目前来说，JSLint 已经过时了，ESLint 可以替代 JSHint 和 JSCS 独树一帜了。\n\n开发者可以根据自己的需求配置 ESLint，不过在这里我建议根据 [AirBNB 的开发规范](https://github.com/airbnb/javascript)进行配置，也可以直接使用 [ESLint airbnb config](https://www.npmjs.com/package/eslint-config-airbnb)。当然这份规范中尚有不足之处，但保持团队整体代码的一致性，可以有效提高代码的可读性。\n\n当你熟悉了 ESLint 之后，建议开发者深入地尝试其中的规则。ESLint 捕获的错误越多，产品的稳定性越高。\n\n## NPM，CommonJS 和 ES6 modules\n\n忘记 Bower 吧，用 NPM 接管一切。类似 Browserify 和 Webpack 的构建工具间接提高了 NPM 在 web 开发中的地位。使用 NPM，版本管理将会更加简单，也将更多地与 Node.js 生态系统接触。目前对于 CSS 的处理尚不足够完善。\n\n你可能会考虑如何在部署服务器上执行构建呢？与 Ruby 的 Bundler 有所不同，NPM 使用了通配符检索文件，且第三方包可以在代码开发中以及项目发布前做任意修改。使用 [shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap) 文件可以冻结项目中的第三方依赖，我建议使用 User 的 shrinkwrap，提高输出的一致性。此外，开发者也可以考虑使用类似 [Sinopia](https://www.npmjs.com/package/sinopia) 的工具托管自己的私有 NPM 服务器。\n\nBabel 会将 ES6 module 语法转换为 CommonJS。CommonJS 是一种历经实践的语法，这意味着稳定和通用，此外，使用类似 [tree shaking](http://www.2ality.com/2015/12/webpack-tree-shaking.html) （Webpack 2.0 和 Rollup 已经支持该特性）的机制我们还能实现静态代码分析。\n\n## Webpack\n\n除非你乐意在页面添加数百个脚本标签，否则的话你应该尝试用构建工具来打包页面的资源了。此外，你还需要某些工具让浏览器支持 NPM 第三方包。在这里，我推荐你使用 Webpack。\n\n一年之前对于上述工作，开发者还有诸多工具可以选择，比如基于 JavaScript 的 RequireJS、Browserify 和 Webpack 解决方案，此外还有号称能对 ES6 的模块进行最佳优化的 RollupJS.\n\n在尝试了所有的工具之后，我强烈建议开发者选择 Webpack:\n\n- 通过配置可以应对各种情况\n- 支持主流的模块加载方式（AMD，CommonJS，globals）\n- 内部机制可以修复破损的模块\n- 可以处理 CSS\n- 全面的缓存系统\n- 支持热重载\n- 可以加载大多数的资源\n- 提供高效的[性能优化方案](https://github.com/webpack/docs/wiki/optimization)\n\nWebpack 也非常善于处理大型的单页应用，支持代码分割和惰性加载。\n\n但是值得注意的是，Webpack 的学习曲线异常陡峭。不过一旦你学会了它，那么你就掌握了最强大的构建系统。\n\n那么 Gulp 和 Grunt 呢？相比而言，Webpack 更善于处理各类资源。如果你需要执行其他类型的构建任务，那么 Gulp 和 Grunt 还是有用的。对于类似运行 Webpack 的基本任务，我建议直接使用 [NPM 脚本](https://docs.npmjs.com/cli/run-script)。\n\n## Mocha + Chai + Sinon\n\n在 JavaScript 中，有大量可选的单元测试工具，每一个都很稳定和健壮。如果你只是用于单元测试，那么现有工具完全可以胜任你的需求。\n\n常见的测试工具有 Jasmine、Mocha、Tape、Ava、Jest 等，它们各有所长。\n\n我对一个测试框架的要求有如下几条：\n\n- 可以在浏览器运行，便于调试\n- 执行速度快\n- 便于处理异步测试\n- 便于在命令行中使用\n- 可以兼容任意断言和数据模拟的第三方库\n\n第一条标准就排除了 Ava 和 Jest。\n\n我喜欢 Chai 断言是因为其种类丰富、功能齐全的插件，喜欢 Mocha 是因为其对异步的良好支持。强烈建议使用 [Dirty Chai](https://github.com/prodatakey/dirty-chai) 避免某些问题。Webpack 的 [mocha-leader](https://github.com/webpack/mocha-loader) 插件允许开发者自动执行测试。\n\n对于 React 而言，开发者可以参考一下 AirBNB 的 [Enzyme](https://github.com/airbnb/enzyme) 和 [Teaspoon](https://github.com/jquense/teaspoon)。\n\n我非常钟爱 Mocha 的特性，如果你想要的只是最基础的功能，可以参考[这篇文章](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)了解一下 Tape。\n\n## Lodash\n\nJavaScript 并没有一个类似 Java 或 .NET 的核心工具库，所以开发者大都会从外部引用一个外部工具库。\n\n目前来说，Lodash 是此类工具中的佼佼者。此外，由于它[惰性执行](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/)的特性，也让它是目前性能最佳的工具之一。使用 Lodash 时无需引用全部资源，开发者可以按需使用其中的函数。在 4.x 版本中，Lodash 为偏爱函数式编程的开发者提供了一个“函数式开发”模式。\n\n如果你熟悉函数式编程，你可以了解一下 [Ramda](http://ramdajs.com/0.19.1/index.html)。如果你决定使用这个库，可能需要引用一些 Lodash 函数。\n\n## fetch\n\n许多基于 React 的应用程序都不再使用 jQuery 了。除非你正在维护一个陈旧的项目或者用到的第三方库依赖了 jQuery，否则已经没有必要使用它了。\n\n我喜欢让项目保持简洁，在代码中只使用 [fetch](http://ramdajs.com/0.19.1/index.html) 。fetch 基于 promise，Firefox 和 Chrome 都封装了该接口。对于其他浏览器，则需要提供一个腻子脚本。我建议使用 [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) 在各个浏览器和服务端保持功能的一致性。\n\n当然也可以其他优秀的第三方库异步获取数据，但我觉得 fetch 已经够用了。\n\n## 同构 JavaScript\n\n同构 JavaScript 是指同时运行在客户端和服务端的 JavaScript，常用于在服务端预先渲染页面，提高性能，便于 SEO。使用 React 可以实现同构 JavaScript，但是并不简单，它提高了程序的复杂度，限制了开发者可选的工具和第三方库。\n\n如果你正在构建一个 B2C 的站点，比如电商网站，那么你可能就需要使用同构 JavaScript。不过，对于内部站点或者 B2B 程序，性能就不是最重要的了，则同构 JavaScript 也就不是太重要了。\n\n## API\n\n最近每个人好像都在思考如何处理 API。每个人都在随波逐流的使用 [RESTfull API](https://en.wikipedia.org/wiki/Representational_state_transfer)，[SOAP](https://en.wikipedia.org/wiki/SOAP) 已经成为了过去时。目前业界存在各种 API 协议，比如 HATEOAS、JSON API、HAL、GraphQL 等。\n\nGraphQL 赋予了客户端进行任意查询的能力。搭配 [Relay](https://facebook.github.io/relay/)，可以更好地处理客户端的状态和缓存。不过，创建 GraphQL 的服务端接口的难度还较大，且大多数的文档都是面向 Node.js 的。\n\nNetflix 的 [Falcor](https://github.com/Netflix/falcor) 看起来提供了和 GraphQL/Relay 相似的能力，同时还降低了服务端的需求，但它目前尚处于开发者预览状态，尚未应用于实际开发。\n\n所有已知的规范都各有缺陷，有些过于复杂，有些只能处理数据读取而不嗯那个更新，有些和 REST 差异显著。许多开发者选择自己开发，但是还会遇到上述的问题。\n\n我不认为上述有一个完美的解决方案，但我对 API 有一个自己的认知：\n\n- 可预测，遵循一致性协议\n- 支持在一次查询中获取多个实体\n- 支持更新操作\n- 易于调试\n- 易于使用\n\n到目前为止，我还没有发现满足上述所有条件的解决方案。\n\n如果你正在使用 RESTful，建议参考 [Swagger](http://swagger.io/) 来编写 API。\n\n## Electron\n\n[Electron](https://github.com/atom/electron) 可以使用前端技术构建桌面程序，GitHub 团队出品的 Atom 编辑器就是基于 Electron 创建的。本质上，Electron 内部封装了一个 Node.js，可以打开 Chrome 窗口渲染 UI，还可以访问操作系统本地的 API，并且没有浏览器中的沙盒机制。开发者可以通过 Electron 打包和分发应用程序。\n\n这是创建跨平台软件最简单的方式，而且还可以利用上述的所有工具。此外，Electron 有完整的文档和活跃的开发社区。\n\n你可能听说过 [nw.js](http://nwjs.io/) 的大名，虽然它已经存在了多年，但相比来说，Electron 更加稳定和易用。\n\n这里有一个基于 [Electron、React 和 hot reload 的模板](https://github.com/chentsulin/electron-react-boilerplate)，尝试一下吧。\n\n## 延伸\n\n下面是一些我在 Twitter 上关注的对象：\n\n- [Dan Abramov](https://github.com/gaearon), Redux 的创建者\n- [Christopher Chedeau](https://twitter.com/Vjeux), 非常活跃的 React 开发者，现就职与 Facebook\n- [Jeff Morrison](https://github.com/jeffmo), Flow 的核心贡献者之一\n- [Sebastian Markbåge](https://twitter.com/sebmarkbage), React 的创建者之一\n- [Pete Hunt](https://twitter.com/floydophone)\n- [React](https://twitter.com/reactjs)\n- 更多值得关注的对象请参考 [React Influencers](https://twitter.com/oguzbilgic/lists/react-influencers)\n\n建议阅读 Pate Hunt 的 [Learning React](https://github.com/petehunt/react-howto)!\n\nDan Abramov 发布一系列的视频教程 [Getting started with Redux](https://egghead.io/series/getting-started-with-redux)，强烈推荐！此外，Dan 还发布过一个[关注列表](https://medium.com/@dan_abramov/my-react-list-862227952a8c#.740o0wzee)，比上述更加详细。\n\nMark Erikson 的 [React/Redux links](https://github.com/markerikson/react-redux-links) 集合也是很好的学习材料。\n\n## 按需使用\n\nJavaScript 的生态环境发展迅速，正日益强大起来。React 的最佳实践正在固化，周边工具的职责和能力也日益清晰。\n\n最重要的事情就是要牢记：保持简洁，按需使用。\n\n如果你的应用程序只有两三屏，那么就无需使用路由系统；如果你正在创建一个单页应用，那么甚至不需要 Redux，只需要 React 自己的 state 属性即可；如果你正在创建一个简单的 CRUD 程序，那么你就不需要使用 Relay；如果你正在学习 ES6，并不需要深入地了解 Async/Await 或装饰器；如果你刚刚开始学习 React，并不需要使用热重载和服务端渲染；如果你刚刚接触 Webpack，你就不需要分离代码和合并多个资源；如果你刚刚学习 Redux，你不需要理解使用 Redux-Form 和 Redux-Sagas。\n\n保持简洁，每次只做一件事！","source":"_posts/2016-JavaScript-技术栈展望.md","raw":"title: 2016 JavaScript 技术栈展望\ndate: 2016-03-11 11:45:31\ndesc: 本文展望了 2016 年 JavaScript 在实际开发中会用到的技术工具。\n---\n\n> 翻译自 [State of the Art JavaScript in 2016](https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.iwbk5gf69)\n\n如果你正在筹划新的前端项目或者重构现有项目，那么你需要认识到现在的前端开发环境已经今非昔比，这其中有太多的选择了：React、Flux、Angular、Aurelia、Mocha、Jasmine、Babel、TypeScript、Flow…… 它们的本意是将开发简单化，却无形中提高了学习成本，也给未来项目的维护带来了不确定性。\n\n好在这一现象正在退热，优胜劣汰，优秀的项目慢慢沉淀下来，开发方式也越来越清晰。有些开发者正在尝试使用基于上述技术的框架进行开发，也在一定程度上减少了学习成本。\n\n本文中主要介绍了一些我在 web 应用开发中所涉及和推崇的技术，其中有一些技术上存在争议，所以我对于每一技术都只做简单的介绍和分析。所有的这些观点都是基于我个人的经验和对社区的接触总结而来的，所以各位还请按需各取所用。\n\n<!-- more -->\n\n## React\n\nReact 可谓风头正盛一时无两：\n\n- 组件化使应用程序更易于开发和维护\n- 学习曲线平缓，核心 API 简洁清晰，易于学习\n- JSX 语法不落俗套，充分发挥了 JavaScript 的能量\n- 天生适配 Flux 和 Redux\n- 社区活跃且具有创造力，奉献了诸多优秀的开发工具\n- 单向数据流比双向数据绑定的方式更适合复杂应用程序，质量更高\n- 支持服务端渲染\n\n虽然比起 Ember、Aurelia 和 Angular 这些功能丰富的框架，React 不是全能手，但 React 的开发环境更加健壮。就目前而言，使用 React 已经不是一个技术选择，而是一个商业行为，它能提供更高效和更有效的生产力。\n\n> 当你想开发移动应用时，因为已经学习了 React 语法，所以可以直接上手 React Native 开发跨平台应用。\n\n## Redux\n\n现在，我们已经具有了开发视图层的能力，接下来，我们需要使用其他工具管理应用程序中的状态和生命周期，在这里推荐的工具就是：Redux。\n\n为了配合 React，Facebook 开发了管理单向数据流的工具 Flux，虽然 Flux 基本上实现了对单项数据流的支持，但是同时也带了其他问题，比如如何保存状态、何处发起 Ajax 请求等等。\n\n为了解决这些问题，又衍生了一系列效仿 Flux 模式的框架：Fluxible、Reflux、Alt、Flummox、Lux、Nuclear、Fluxxor……\n\n目前来说被开发社区广泛支持的一个实现就是 Redux。\n\n在 Redux 中，大多数的组件都是纯函数式的组件，也只有一个集中的存储和资源中心。Redux 的实例方法负责整个数据的操作和维护。相比 Flux 来说，Redux 的思路更加清晰。\n\n更重要的是，Redux 非常易于学习。Redux 的作者 Dan Abramov 是一个优秀的教师，他制作了一系列深入浅出的 Redux 视频教程。通过观看这些视频，即可成为一个 Redux 方面的专家。我曾经见识到一个零基础的 React 团队在短短几周内迅速开发出了测试版产品，且代码非常稳健和老练。\n\nRedux 周边的生态系统和 Redux 本身一样健壮。从神奇的 [devtool](https://github.com/gaearon/redux-devtools) 到强大的记忆化工具 [reselect](https://github.com/reactjs/reselect)，Redux 开发社区为开发者提供了应有尽有的工具。\n\n开发者可能会本能地去尝试抽象出一个 Redux 模板，这么做有诸多好处，但请在认清需求的基础上来封装模板，而不要盲目的去尝试。\n\n## ES6 和 Babel\n\n是时候抛弃 CoffeeScript 了，这是因为它的诸多特性已在 ES6 中出现类似的语法，而 ES6 是实施标准，代表了 JavaScript 未来的发展方向。\n\n目前最新的浏览器已经支持了 ES6 的大部分特性。Babel 是一个强大的转换工具，用于将 ES6 转换为 ES5。此外，根据目标浏览器可以调整代码转换的程度。\n\n那么是否有类型系统呢？TypeScript 和 Flow 都为 JavaScript 提供了静态类型系统，使用静态类型检查，可以有效捕获错误，减少测试量。目前来说，我建议对此持观望态度。\n\nTypeScript 在尽力让 JavaScript 向 C# 或 Java 的方向发展，但缺少了许多高级的类型系统特性，比如代数数据类型（algebraic data types）。此外，它不能像 Flow 一样有效地处理 null。\n\n相比而言，Flow 更加强大，捕获的错误类型也更多，但难于配置。此外，它对 JavaScript 新特性的支持弱于 Babel，也不支持 Windows 系统。\n\n就我个人的角度而言，在前端开发中类型系统并不是至关重要的一环（此处可能有争议）。在类型系统更加健壮且对 Babel 更友好之前，还是让我们静观其变吧。\n\n## ESLint\n\n另一个无可争议的工具是 ESLint。ESLint 支持 ES6 语法，还提供了 React 插件，已经不单单是一个代码审查工具了。目前来说，JSLint 已经过时了，ESLint 可以替代 JSHint 和 JSCS 独树一帜了。\n\n开发者可以根据自己的需求配置 ESLint，不过在这里我建议根据 [AirBNB 的开发规范](https://github.com/airbnb/javascript)进行配置，也可以直接使用 [ESLint airbnb config](https://www.npmjs.com/package/eslint-config-airbnb)。当然这份规范中尚有不足之处，但保持团队整体代码的一致性，可以有效提高代码的可读性。\n\n当你熟悉了 ESLint 之后，建议开发者深入地尝试其中的规则。ESLint 捕获的错误越多，产品的稳定性越高。\n\n## NPM，CommonJS 和 ES6 modules\n\n忘记 Bower 吧，用 NPM 接管一切。类似 Browserify 和 Webpack 的构建工具间接提高了 NPM 在 web 开发中的地位。使用 NPM，版本管理将会更加简单，也将更多地与 Node.js 生态系统接触。目前对于 CSS 的处理尚不足够完善。\n\n你可能会考虑如何在部署服务器上执行构建呢？与 Ruby 的 Bundler 有所不同，NPM 使用了通配符检索文件，且第三方包可以在代码开发中以及项目发布前做任意修改。使用 [shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap) 文件可以冻结项目中的第三方依赖，我建议使用 User 的 shrinkwrap，提高输出的一致性。此外，开发者也可以考虑使用类似 [Sinopia](https://www.npmjs.com/package/sinopia) 的工具托管自己的私有 NPM 服务器。\n\nBabel 会将 ES6 module 语法转换为 CommonJS。CommonJS 是一种历经实践的语法，这意味着稳定和通用，此外，使用类似 [tree shaking](http://www.2ality.com/2015/12/webpack-tree-shaking.html) （Webpack 2.0 和 Rollup 已经支持该特性）的机制我们还能实现静态代码分析。\n\n## Webpack\n\n除非你乐意在页面添加数百个脚本标签，否则的话你应该尝试用构建工具来打包页面的资源了。此外，你还需要某些工具让浏览器支持 NPM 第三方包。在这里，我推荐你使用 Webpack。\n\n一年之前对于上述工作，开发者还有诸多工具可以选择，比如基于 JavaScript 的 RequireJS、Browserify 和 Webpack 解决方案，此外还有号称能对 ES6 的模块进行最佳优化的 RollupJS.\n\n在尝试了所有的工具之后，我强烈建议开发者选择 Webpack:\n\n- 通过配置可以应对各种情况\n- 支持主流的模块加载方式（AMD，CommonJS，globals）\n- 内部机制可以修复破损的模块\n- 可以处理 CSS\n- 全面的缓存系统\n- 支持热重载\n- 可以加载大多数的资源\n- 提供高效的[性能优化方案](https://github.com/webpack/docs/wiki/optimization)\n\nWebpack 也非常善于处理大型的单页应用，支持代码分割和惰性加载。\n\n但是值得注意的是，Webpack 的学习曲线异常陡峭。不过一旦你学会了它，那么你就掌握了最强大的构建系统。\n\n那么 Gulp 和 Grunt 呢？相比而言，Webpack 更善于处理各类资源。如果你需要执行其他类型的构建任务，那么 Gulp 和 Grunt 还是有用的。对于类似运行 Webpack 的基本任务，我建议直接使用 [NPM 脚本](https://docs.npmjs.com/cli/run-script)。\n\n## Mocha + Chai + Sinon\n\n在 JavaScript 中，有大量可选的单元测试工具，每一个都很稳定和健壮。如果你只是用于单元测试，那么现有工具完全可以胜任你的需求。\n\n常见的测试工具有 Jasmine、Mocha、Tape、Ava、Jest 等，它们各有所长。\n\n我对一个测试框架的要求有如下几条：\n\n- 可以在浏览器运行，便于调试\n- 执行速度快\n- 便于处理异步测试\n- 便于在命令行中使用\n- 可以兼容任意断言和数据模拟的第三方库\n\n第一条标准就排除了 Ava 和 Jest。\n\n我喜欢 Chai 断言是因为其种类丰富、功能齐全的插件，喜欢 Mocha 是因为其对异步的良好支持。强烈建议使用 [Dirty Chai](https://github.com/prodatakey/dirty-chai) 避免某些问题。Webpack 的 [mocha-leader](https://github.com/webpack/mocha-loader) 插件允许开发者自动执行测试。\n\n对于 React 而言，开发者可以参考一下 AirBNB 的 [Enzyme](https://github.com/airbnb/enzyme) 和 [Teaspoon](https://github.com/jquense/teaspoon)。\n\n我非常钟爱 Mocha 的特性，如果你想要的只是最基础的功能，可以参考[这篇文章](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)了解一下 Tape。\n\n## Lodash\n\nJavaScript 并没有一个类似 Java 或 .NET 的核心工具库，所以开发者大都会从外部引用一个外部工具库。\n\n目前来说，Lodash 是此类工具中的佼佼者。此外，由于它[惰性执行](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/)的特性，也让它是目前性能最佳的工具之一。使用 Lodash 时无需引用全部资源，开发者可以按需使用其中的函数。在 4.x 版本中，Lodash 为偏爱函数式编程的开发者提供了一个“函数式开发”模式。\n\n如果你熟悉函数式编程，你可以了解一下 [Ramda](http://ramdajs.com/0.19.1/index.html)。如果你决定使用这个库，可能需要引用一些 Lodash 函数。\n\n## fetch\n\n许多基于 React 的应用程序都不再使用 jQuery 了。除非你正在维护一个陈旧的项目或者用到的第三方库依赖了 jQuery，否则已经没有必要使用它了。\n\n我喜欢让项目保持简洁，在代码中只使用 [fetch](http://ramdajs.com/0.19.1/index.html) 。fetch 基于 promise，Firefox 和 Chrome 都封装了该接口。对于其他浏览器，则需要提供一个腻子脚本。我建议使用 [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) 在各个浏览器和服务端保持功能的一致性。\n\n当然也可以其他优秀的第三方库异步获取数据，但我觉得 fetch 已经够用了。\n\n## 同构 JavaScript\n\n同构 JavaScript 是指同时运行在客户端和服务端的 JavaScript，常用于在服务端预先渲染页面，提高性能，便于 SEO。使用 React 可以实现同构 JavaScript，但是并不简单，它提高了程序的复杂度，限制了开发者可选的工具和第三方库。\n\n如果你正在构建一个 B2C 的站点，比如电商网站，那么你可能就需要使用同构 JavaScript。不过，对于内部站点或者 B2B 程序，性能就不是最重要的了，则同构 JavaScript 也就不是太重要了。\n\n## API\n\n最近每个人好像都在思考如何处理 API。每个人都在随波逐流的使用 [RESTfull API](https://en.wikipedia.org/wiki/Representational_state_transfer)，[SOAP](https://en.wikipedia.org/wiki/SOAP) 已经成为了过去时。目前业界存在各种 API 协议，比如 HATEOAS、JSON API、HAL、GraphQL 等。\n\nGraphQL 赋予了客户端进行任意查询的能力。搭配 [Relay](https://facebook.github.io/relay/)，可以更好地处理客户端的状态和缓存。不过，创建 GraphQL 的服务端接口的难度还较大，且大多数的文档都是面向 Node.js 的。\n\nNetflix 的 [Falcor](https://github.com/Netflix/falcor) 看起来提供了和 GraphQL/Relay 相似的能力，同时还降低了服务端的需求，但它目前尚处于开发者预览状态，尚未应用于实际开发。\n\n所有已知的规范都各有缺陷，有些过于复杂，有些只能处理数据读取而不嗯那个更新，有些和 REST 差异显著。许多开发者选择自己开发，但是还会遇到上述的问题。\n\n我不认为上述有一个完美的解决方案，但我对 API 有一个自己的认知：\n\n- 可预测，遵循一致性协议\n- 支持在一次查询中获取多个实体\n- 支持更新操作\n- 易于调试\n- 易于使用\n\n到目前为止，我还没有发现满足上述所有条件的解决方案。\n\n如果你正在使用 RESTful，建议参考 [Swagger](http://swagger.io/) 来编写 API。\n\n## Electron\n\n[Electron](https://github.com/atom/electron) 可以使用前端技术构建桌面程序，GitHub 团队出品的 Atom 编辑器就是基于 Electron 创建的。本质上，Electron 内部封装了一个 Node.js，可以打开 Chrome 窗口渲染 UI，还可以访问操作系统本地的 API，并且没有浏览器中的沙盒机制。开发者可以通过 Electron 打包和分发应用程序。\n\n这是创建跨平台软件最简单的方式，而且还可以利用上述的所有工具。此外，Electron 有完整的文档和活跃的开发社区。\n\n你可能听说过 [nw.js](http://nwjs.io/) 的大名，虽然它已经存在了多年，但相比来说，Electron 更加稳定和易用。\n\n这里有一个基于 [Electron、React 和 hot reload 的模板](https://github.com/chentsulin/electron-react-boilerplate)，尝试一下吧。\n\n## 延伸\n\n下面是一些我在 Twitter 上关注的对象：\n\n- [Dan Abramov](https://github.com/gaearon), Redux 的创建者\n- [Christopher Chedeau](https://twitter.com/Vjeux), 非常活跃的 React 开发者，现就职与 Facebook\n- [Jeff Morrison](https://github.com/jeffmo), Flow 的核心贡献者之一\n- [Sebastian Markbåge](https://twitter.com/sebmarkbage), React 的创建者之一\n- [Pete Hunt](https://twitter.com/floydophone)\n- [React](https://twitter.com/reactjs)\n- 更多值得关注的对象请参考 [React Influencers](https://twitter.com/oguzbilgic/lists/react-influencers)\n\n建议阅读 Pate Hunt 的 [Learning React](https://github.com/petehunt/react-howto)!\n\nDan Abramov 发布一系列的视频教程 [Getting started with Redux](https://egghead.io/series/getting-started-with-redux)，强烈推荐！此外，Dan 还发布过一个[关注列表](https://medium.com/@dan_abramov/my-react-list-862227952a8c#.740o0wzee)，比上述更加详细。\n\nMark Erikson 的 [React/Redux links](https://github.com/markerikson/react-redux-links) 集合也是很好的学习材料。\n\n## 按需使用\n\nJavaScript 的生态环境发展迅速，正日益强大起来。React 的最佳实践正在固化，周边工具的职责和能力也日益清晰。\n\n最重要的事情就是要牢记：保持简洁，按需使用。\n\n如果你的应用程序只有两三屏，那么就无需使用路由系统；如果你正在创建一个单页应用，那么甚至不需要 Redux，只需要 React 自己的 state 属性即可；如果你正在创建一个简单的 CRUD 程序，那么你就不需要使用 Relay；如果你正在学习 ES6，并不需要深入地了解 Async/Await 或装饰器；如果你刚刚开始学习 React，并不需要使用热重载和服务端渲染；如果你刚刚接触 Webpack，你就不需要分离代码和合并多个资源；如果你刚刚学习 Redux，你不需要理解使用 Redux-Form 和 Redux-Sagas。\n\n保持简洁，每次只做一件事！","slug":"2016-JavaScript-技术栈展望","published":1,"updated":"2016-04-11T02:46:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarkd0000fsdihltan8pd","content":"<blockquote>\n<p>翻译自 <a href=\"https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.iwbk5gf69\" target=\"_blank\" rel=\"external\">State of the Art JavaScript in 2016</a></p>\n</blockquote>\n<p>如果你正在筹划新的前端项目或者重构现有项目，那么你需要认识到现在的前端开发环境已经今非昔比，这其中有太多的选择了：React、Flux、Angular、Aurelia、Mocha、Jasmine、Babel、TypeScript、Flow…… 它们的本意是将开发简单化，却无形中提高了学习成本，也给未来项目的维护带来了不确定性。</p>\n<p>好在这一现象正在退热，优胜劣汰，优秀的项目慢慢沉淀下来，开发方式也越来越清晰。有些开发者正在尝试使用基于上述技术的框架进行开发，也在一定程度上减少了学习成本。</p>\n<p>本文中主要介绍了一些我在 web 应用开发中所涉及和推崇的技术，其中有一些技术上存在争议，所以我对于每一技术都只做简单的介绍和分析。所有的这些观点都是基于我个人的经验和对社区的接触总结而来的，所以各位还请按需各取所用。</p>\n<a id=\"more\"></a>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p>React 可谓风头正盛一时无两：</p>\n<ul>\n<li>组件化使应用程序更易于开发和维护</li>\n<li>学习曲线平缓，核心 API 简洁清晰，易于学习</li>\n<li>JSX 语法不落俗套，充分发挥了 JavaScript 的能量</li>\n<li>天生适配 Flux 和 Redux</li>\n<li>社区活跃且具有创造力，奉献了诸多优秀的开发工具</li>\n<li>单向数据流比双向数据绑定的方式更适合复杂应用程序，质量更高</li>\n<li>支持服务端渲染</li>\n</ul>\n<p>虽然比起 Ember、Aurelia 和 Angular 这些功能丰富的框架，React 不是全能手，但 React 的开发环境更加健壮。就目前而言，使用 React 已经不是一个技术选择，而是一个商业行为，它能提供更高效和更有效的生产力。</p>\n<blockquote>\n<p>当你想开发移动应用时，因为已经学习了 React 语法，所以可以直接上手 React Native 开发跨平台应用。</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>现在，我们已经具有了开发视图层的能力，接下来，我们需要使用其他工具管理应用程序中的状态和生命周期，在这里推荐的工具就是：Redux。</p>\n<p>为了配合 React，Facebook 开发了管理单向数据流的工具 Flux，虽然 Flux 基本上实现了对单项数据流的支持，但是同时也带了其他问题，比如如何保存状态、何处发起 Ajax 请求等等。</p>\n<p>为了解决这些问题，又衍生了一系列效仿 Flux 模式的框架：Fluxible、Reflux、Alt、Flummox、Lux、Nuclear、Fluxxor……</p>\n<p>目前来说被开发社区广泛支持的一个实现就是 Redux。</p>\n<p>在 Redux 中，大多数的组件都是纯函数式的组件，也只有一个集中的存储和资源中心。Redux 的实例方法负责整个数据的操作和维护。相比 Flux 来说，Redux 的思路更加清晰。</p>\n<p>更重要的是，Redux 非常易于学习。Redux 的作者 Dan Abramov 是一个优秀的教师，他制作了一系列深入浅出的 Redux 视频教程。通过观看这些视频，即可成为一个 Redux 方面的专家。我曾经见识到一个零基础的 React 团队在短短几周内迅速开发出了测试版产品，且代码非常稳健和老练。</p>\n<p>Redux 周边的生态系统和 Redux 本身一样健壮。从神奇的 <a href=\"https://github.com/gaearon/redux-devtools\" target=\"_blank\" rel=\"external\">devtool</a> 到强大的记忆化工具 <a href=\"https://github.com/reactjs/reselect\" target=\"_blank\" rel=\"external\">reselect</a>，Redux 开发社区为开发者提供了应有尽有的工具。</p>\n<p>开发者可能会本能地去尝试抽象出一个 Redux 模板，这么做有诸多好处，但请在认清需求的基础上来封装模板，而不要盲目的去尝试。</p>\n<h2 id=\"ES6-和-Babel\"><a href=\"#ES6-和-Babel\" class=\"headerlink\" title=\"ES6 和 Babel\"></a>ES6 和 Babel</h2><p>是时候抛弃 CoffeeScript 了，这是因为它的诸多特性已在 ES6 中出现类似的语法，而 ES6 是实施标准，代表了 JavaScript 未来的发展方向。</p>\n<p>目前最新的浏览器已经支持了 ES6 的大部分特性。Babel 是一个强大的转换工具，用于将 ES6 转换为 ES5。此外，根据目标浏览器可以调整代码转换的程度。</p>\n<p>那么是否有类型系统呢？TypeScript 和 Flow 都为 JavaScript 提供了静态类型系统，使用静态类型检查，可以有效捕获错误，减少测试量。目前来说，我建议对此持观望态度。</p>\n<p>TypeScript 在尽力让 JavaScript 向 C# 或 Java 的方向发展，但缺少了许多高级的类型系统特性，比如代数数据类型（algebraic data types）。此外，它不能像 Flow 一样有效地处理 null。</p>\n<p>相比而言，Flow 更加强大，捕获的错误类型也更多，但难于配置。此外，它对 JavaScript 新特性的支持弱于 Babel，也不支持 Windows 系统。</p>\n<p>就我个人的角度而言，在前端开发中类型系统并不是至关重要的一环（此处可能有争议）。在类型系统更加健壮且对 Babel 更友好之前，还是让我们静观其变吧。</p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>另一个无可争议的工具是 ESLint。ESLint 支持 ES6 语法，还提供了 React 插件，已经不单单是一个代码审查工具了。目前来说，JSLint 已经过时了，ESLint 可以替代 JSHint 和 JSCS 独树一帜了。</p>\n<p>开发者可以根据自己的需求配置 ESLint，不过在这里我建议根据 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">AirBNB 的开发规范</a>进行配置，也可以直接使用 <a href=\"https://www.npmjs.com/package/eslint-config-airbnb\" target=\"_blank\" rel=\"external\">ESLint airbnb config</a>。当然这份规范中尚有不足之处，但保持团队整体代码的一致性，可以有效提高代码的可读性。</p>\n<p>当你熟悉了 ESLint 之后，建议开发者深入地尝试其中的规则。ESLint 捕获的错误越多，产品的稳定性越高。</p>\n<h2 id=\"NPM，CommonJS-和-ES6-modules\"><a href=\"#NPM，CommonJS-和-ES6-modules\" class=\"headerlink\" title=\"NPM，CommonJS 和 ES6 modules\"></a>NPM，CommonJS 和 ES6 modules</h2><p>忘记 Bower 吧，用 NPM 接管一切。类似 Browserify 和 Webpack 的构建工具间接提高了 NPM 在 web 开发中的地位。使用 NPM，版本管理将会更加简单，也将更多地与 Node.js 生态系统接触。目前对于 CSS 的处理尚不足够完善。</p>\n<p>你可能会考虑如何在部署服务器上执行构建呢？与 Ruby 的 Bundler 有所不同，NPM 使用了通配符检索文件，且第三方包可以在代码开发中以及项目发布前做任意修改。使用 <a href=\"https://docs.npmjs.com/cli/shrinkwrap\" target=\"_blank\" rel=\"external\">shrinkwrap</a> 文件可以冻结项目中的第三方依赖，我建议使用 User 的 shrinkwrap，提高输出的一致性。此外，开发者也可以考虑使用类似 <a href=\"https://www.npmjs.com/package/sinopia\" target=\"_blank\" rel=\"external\">Sinopia</a> 的工具托管自己的私有 NPM 服务器。</p>\n<p>Babel 会将 ES6 module 语法转换为 CommonJS。CommonJS 是一种历经实践的语法，这意味着稳定和通用，此外，使用类似 <a href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\" target=\"_blank\" rel=\"external\">tree shaking</a> （Webpack 2.0 和 Rollup 已经支持该特性）的机制我们还能实现静态代码分析。</p>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>除非你乐意在页面添加数百个脚本标签，否则的话你应该尝试用构建工具来打包页面的资源了。此外，你还需要某些工具让浏览器支持 NPM 第三方包。在这里，我推荐你使用 Webpack。</p>\n<p>一年之前对于上述工作，开发者还有诸多工具可以选择，比如基于 JavaScript 的 RequireJS、Browserify 和 Webpack 解决方案，此外还有号称能对 ES6 的模块进行最佳优化的 RollupJS.</p>\n<p>在尝试了所有的工具之后，我强烈建议开发者选择 Webpack:</p>\n<ul>\n<li>通过配置可以应对各种情况</li>\n<li>支持主流的模块加载方式（AMD，CommonJS，globals）</li>\n<li>内部机制可以修复破损的模块</li>\n<li>可以处理 CSS</li>\n<li>全面的缓存系统</li>\n<li>支持热重载</li>\n<li>可以加载大多数的资源</li>\n<li>提供高效的<a href=\"https://github.com/webpack/docs/wiki/optimization\" target=\"_blank\" rel=\"external\">性能优化方案</a></li>\n</ul>\n<p>Webpack 也非常善于处理大型的单页应用，支持代码分割和惰性加载。</p>\n<p>但是值得注意的是，Webpack 的学习曲线异常陡峭。不过一旦你学会了它，那么你就掌握了最强大的构建系统。</p>\n<p>那么 Gulp 和 Grunt 呢？相比而言，Webpack 更善于处理各类资源。如果你需要执行其他类型的构建任务，那么 Gulp 和 Grunt 还是有用的。对于类似运行 Webpack 的基本任务，我建议直接使用 <a href=\"https://docs.npmjs.com/cli/run-script\" target=\"_blank\" rel=\"external\">NPM 脚本</a>。</p>\n<h2 id=\"Mocha-Chai-Sinon\"><a href=\"#Mocha-Chai-Sinon\" class=\"headerlink\" title=\"Mocha + Chai + Sinon\"></a>Mocha + Chai + Sinon</h2><p>在 JavaScript 中，有大量可选的单元测试工具，每一个都很稳定和健壮。如果你只是用于单元测试，那么现有工具完全可以胜任你的需求。</p>\n<p>常见的测试工具有 Jasmine、Mocha、Tape、Ava、Jest 等，它们各有所长。</p>\n<p>我对一个测试框架的要求有如下几条：</p>\n<ul>\n<li>可以在浏览器运行，便于调试</li>\n<li>执行速度快</li>\n<li>便于处理异步测试</li>\n<li>便于在命令行中使用</li>\n<li>可以兼容任意断言和数据模拟的第三方库</li>\n</ul>\n<p>第一条标准就排除了 Ava 和 Jest。</p>\n<p>我喜欢 Chai 断言是因为其种类丰富、功能齐全的插件，喜欢 Mocha 是因为其对异步的良好支持。强烈建议使用 <a href=\"https://github.com/prodatakey/dirty-chai\" target=\"_blank\" rel=\"external\">Dirty Chai</a> 避免某些问题。Webpack 的 <a href=\"https://github.com/webpack/mocha-loader\" target=\"_blank\" rel=\"external\">mocha-leader</a> 插件允许开发者自动执行测试。</p>\n<p>对于 React 而言，开发者可以参考一下 AirBNB 的 <a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"external\">Enzyme</a> 和 <a href=\"https://github.com/jquense/teaspoon\" target=\"_blank\" rel=\"external\">Teaspoon</a>。</p>\n<p>我非常钟爱 Mocha 的特性，如果你想要的只是最基础的功能，可以参考<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\" target=\"_blank\" rel=\"external\">这篇文章</a>了解一下 Tape。</p>\n<h2 id=\"Lodash\"><a href=\"#Lodash\" class=\"headerlink\" title=\"Lodash\"></a>Lodash</h2><p>JavaScript 并没有一个类似 Java 或 .NET 的核心工具库，所以开发者大都会从外部引用一个外部工具库。</p>\n<p>目前来说，Lodash 是此类工具中的佼佼者。此外，由于它<a href=\"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\" target=\"_blank\" rel=\"external\">惰性执行</a>的特性，也让它是目前性能最佳的工具之一。使用 Lodash 时无需引用全部资源，开发者可以按需使用其中的函数。在 4.x 版本中，Lodash 为偏爱函数式编程的开发者提供了一个“函数式开发”模式。</p>\n<p>如果你熟悉函数式编程，你可以了解一下 <a href=\"http://ramdajs.com/0.19.1/index.html\" target=\"_blank\" rel=\"external\">Ramda</a>。如果你决定使用这个库，可能需要引用一些 Lodash 函数。</p>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>许多基于 React 的应用程序都不再使用 jQuery 了。除非你正在维护一个陈旧的项目或者用到的第三方库依赖了 jQuery，否则已经没有必要使用它了。</p>\n<p>我喜欢让项目保持简洁，在代码中只使用 <a href=\"http://ramdajs.com/0.19.1/index.html\" target=\"_blank\" rel=\"external\">fetch</a> 。fetch 基于 promise，Firefox 和 Chrome 都封装了该接口。对于其他浏览器，则需要提供一个腻子脚本。我建议使用 <a href=\"https://github.com/matthew-andrews/isomorphic-fetch\" target=\"_blank\" rel=\"external\">isomorphic-fetch</a> 在各个浏览器和服务端保持功能的一致性。</p>\n<p>当然也可以其他优秀的第三方库异步获取数据，但我觉得 fetch 已经够用了。</p>\n<h2 id=\"同构-JavaScript\"><a href=\"#同构-JavaScript\" class=\"headerlink\" title=\"同构 JavaScript\"></a>同构 JavaScript</h2><p>同构 JavaScript 是指同时运行在客户端和服务端的 JavaScript，常用于在服务端预先渲染页面，提高性能，便于 SEO。使用 React 可以实现同构 JavaScript，但是并不简单，它提高了程序的复杂度，限制了开发者可选的工具和第三方库。</p>\n<p>如果你正在构建一个 B2C 的站点，比如电商网站，那么你可能就需要使用同构 JavaScript。不过，对于内部站点或者 B2B 程序，性能就不是最重要的了，则同构 JavaScript 也就不是太重要了。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>最近每个人好像都在思考如何处理 API。每个人都在随波逐流的使用 <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"external\">RESTfull API</a>，<a href=\"https://en.wikipedia.org/wiki/SOAP\" target=\"_blank\" rel=\"external\">SOAP</a> 已经成为了过去时。目前业界存在各种 API 协议，比如 HATEOAS、JSON API、HAL、GraphQL 等。</p>\n<p>GraphQL 赋予了客户端进行任意查询的能力。搭配 <a href=\"https://facebook.github.io/relay/\" target=\"_blank\" rel=\"external\">Relay</a>，可以更好地处理客户端的状态和缓存。不过，创建 GraphQL 的服务端接口的难度还较大，且大多数的文档都是面向 Node.js 的。</p>\n<p>Netflix 的 <a href=\"https://github.com/Netflix/falcor\" target=\"_blank\" rel=\"external\">Falcor</a> 看起来提供了和 GraphQL/Relay 相似的能力，同时还降低了服务端的需求，但它目前尚处于开发者预览状态，尚未应用于实际开发。</p>\n<p>所有已知的规范都各有缺陷，有些过于复杂，有些只能处理数据读取而不嗯那个更新，有些和 REST 差异显著。许多开发者选择自己开发，但是还会遇到上述的问题。</p>\n<p>我不认为上述有一个完美的解决方案，但我对 API 有一个自己的认知：</p>\n<ul>\n<li>可预测，遵循一致性协议</li>\n<li>支持在一次查询中获取多个实体</li>\n<li>支持更新操作</li>\n<li>易于调试</li>\n<li>易于使用</li>\n</ul>\n<p>到目前为止，我还没有发现满足上述所有条件的解决方案。</p>\n<p>如果你正在使用 RESTful，建议参考 <a href=\"http://swagger.io/\" target=\"_blank\" rel=\"external\">Swagger</a> 来编写 API。</p>\n<h2 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h2><p><a href=\"https://github.com/atom/electron\" target=\"_blank\" rel=\"external\">Electron</a> 可以使用前端技术构建桌面程序，GitHub 团队出品的 Atom 编辑器就是基于 Electron 创建的。本质上，Electron 内部封装了一个 Node.js，可以打开 Chrome 窗口渲染 UI，还可以访问操作系统本地的 API，并且没有浏览器中的沙盒机制。开发者可以通过 Electron 打包和分发应用程序。</p>\n<p>这是创建跨平台软件最简单的方式，而且还可以利用上述的所有工具。此外，Electron 有完整的文档和活跃的开发社区。</p>\n<p>你可能听说过 <a href=\"http://nwjs.io/\" target=\"_blank\" rel=\"external\">nw.js</a> 的大名，虽然它已经存在了多年，但相比来说，Electron 更加稳定和易用。</p>\n<p>这里有一个基于 <a href=\"https://github.com/chentsulin/electron-react-boilerplate\" target=\"_blank\" rel=\"external\">Electron、React 和 hot reload 的模板</a>，尝试一下吧。</p>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><p>下面是一些我在 Twitter 上关注的对象：</p>\n<ul>\n<li><a href=\"https://github.com/gaearon\" target=\"_blank\" rel=\"external\">Dan Abramov</a>, Redux 的创建者</li>\n<li><a href=\"https://twitter.com/Vjeux\" target=\"_blank\" rel=\"external\">Christopher Chedeau</a>, 非常活跃的 React 开发者，现就职与 Facebook</li>\n<li><a href=\"https://github.com/jeffmo\" target=\"_blank\" rel=\"external\">Jeff Morrison</a>, Flow 的核心贡献者之一</li>\n<li><a href=\"https://twitter.com/sebmarkbage\" target=\"_blank\" rel=\"external\">Sebastian Markbåge</a>, React 的创建者之一</li>\n<li><a href=\"https://twitter.com/floydophone\" target=\"_blank\" rel=\"external\">Pete Hunt</a></li>\n<li><a href=\"https://twitter.com/reactjs\" target=\"_blank\" rel=\"external\">React</a></li>\n<li>更多值得关注的对象请参考 <a href=\"https://twitter.com/oguzbilgic/lists/react-influencers\" target=\"_blank\" rel=\"external\">React Influencers</a></li>\n</ul>\n<p>建议阅读 Pate Hunt 的 <a href=\"https://github.com/petehunt/react-howto\" target=\"_blank\" rel=\"external\">Learning React</a>!</p>\n<p>Dan Abramov 发布一系列的视频教程 <a href=\"https://egghead.io/series/getting-started-with-redux\" target=\"_blank\" rel=\"external\">Getting started with Redux</a>，强烈推荐！此外，Dan 还发布过一个<a href=\"https://medium.com/@dan_abramov/my-react-list-862227952a8c#.740o0wzee\" target=\"_blank\" rel=\"external\">关注列表</a>，比上述更加详细。</p>\n<p>Mark Erikson 的 <a href=\"https://github.com/markerikson/react-redux-links\" target=\"_blank\" rel=\"external\">React/Redux links</a> 集合也是很好的学习材料。</p>\n<h2 id=\"按需使用\"><a href=\"#按需使用\" class=\"headerlink\" title=\"按需使用\"></a>按需使用</h2><p>JavaScript 的生态环境发展迅速，正日益强大起来。React 的最佳实践正在固化，周边工具的职责和能力也日益清晰。</p>\n<p>最重要的事情就是要牢记：保持简洁，按需使用。</p>\n<p>如果你的应用程序只有两三屏，那么就无需使用路由系统；如果你正在创建一个单页应用，那么甚至不需要 Redux，只需要 React 自己的 state 属性即可；如果你正在创建一个简单的 CRUD 程序，那么你就不需要使用 Relay；如果你正在学习 ES6，并不需要深入地了解 Async/Await 或装饰器；如果你刚刚开始学习 React，并不需要使用热重载和服务端渲染；如果你刚刚接触 Webpack，你就不需要分离代码和合并多个资源；如果你刚刚学习 Redux，你不需要理解使用 Redux-Form 和 Redux-Sagas。</p>\n<p>保持简洁，每次只做一件事！</p>\n","excerpt":"<blockquote>\n<p>翻译自 <a href=\"https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.iwbk5gf69\">State of the Art JavaScript in 2016</a></p>\n</blockquote>\n<p>如果你正在筹划新的前端项目或者重构现有项目，那么你需要认识到现在的前端开发环境已经今非昔比，这其中有太多的选择了：React、Flux、Angular、Aurelia、Mocha、Jasmine、Babel、TypeScript、Flow…… 它们的本意是将开发简单化，却无形中提高了学习成本，也给未来项目的维护带来了不确定性。</p>\n<p>好在这一现象正在退热，优胜劣汰，优秀的项目慢慢沉淀下来，开发方式也越来越清晰。有些开发者正在尝试使用基于上述技术的框架进行开发，也在一定程度上减少了学习成本。</p>\n<p>本文中主要介绍了一些我在 web 应用开发中所涉及和推崇的技术，其中有一些技术上存在争议，所以我对于每一技术都只做简单的介绍和分析。所有的这些观点都是基于我个人的经验和对社区的接触总结而来的，所以各位还请按需各取所用。</p>","more":"<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p>React 可谓风头正盛一时无两：</p>\n<ul>\n<li>组件化使应用程序更易于开发和维护</li>\n<li>学习曲线平缓，核心 API 简洁清晰，易于学习</li>\n<li>JSX 语法不落俗套，充分发挥了 JavaScript 的能量</li>\n<li>天生适配 Flux 和 Redux</li>\n<li>社区活跃且具有创造力，奉献了诸多优秀的开发工具</li>\n<li>单向数据流比双向数据绑定的方式更适合复杂应用程序，质量更高</li>\n<li>支持服务端渲染</li>\n</ul>\n<p>虽然比起 Ember、Aurelia 和 Angular 这些功能丰富的框架，React 不是全能手，但 React 的开发环境更加健壮。就目前而言，使用 React 已经不是一个技术选择，而是一个商业行为，它能提供更高效和更有效的生产力。</p>\n<blockquote>\n<p>当你想开发移动应用时，因为已经学习了 React 语法，所以可以直接上手 React Native 开发跨平台应用。</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>现在，我们已经具有了开发视图层的能力，接下来，我们需要使用其他工具管理应用程序中的状态和生命周期，在这里推荐的工具就是：Redux。</p>\n<p>为了配合 React，Facebook 开发了管理单向数据流的工具 Flux，虽然 Flux 基本上实现了对单项数据流的支持，但是同时也带了其他问题，比如如何保存状态、何处发起 Ajax 请求等等。</p>\n<p>为了解决这些问题，又衍生了一系列效仿 Flux 模式的框架：Fluxible、Reflux、Alt、Flummox、Lux、Nuclear、Fluxxor……</p>\n<p>目前来说被开发社区广泛支持的一个实现就是 Redux。</p>\n<p>在 Redux 中，大多数的组件都是纯函数式的组件，也只有一个集中的存储和资源中心。Redux 的实例方法负责整个数据的操作和维护。相比 Flux 来说，Redux 的思路更加清晰。</p>\n<p>更重要的是，Redux 非常易于学习。Redux 的作者 Dan Abramov 是一个优秀的教师，他制作了一系列深入浅出的 Redux 视频教程。通过观看这些视频，即可成为一个 Redux 方面的专家。我曾经见识到一个零基础的 React 团队在短短几周内迅速开发出了测试版产品，且代码非常稳健和老练。</p>\n<p>Redux 周边的生态系统和 Redux 本身一样健壮。从神奇的 <a href=\"https://github.com/gaearon/redux-devtools\">devtool</a> 到强大的记忆化工具 <a href=\"https://github.com/reactjs/reselect\">reselect</a>，Redux 开发社区为开发者提供了应有尽有的工具。</p>\n<p>开发者可能会本能地去尝试抽象出一个 Redux 模板，这么做有诸多好处，但请在认清需求的基础上来封装模板，而不要盲目的去尝试。</p>\n<h2 id=\"ES6-和-Babel\"><a href=\"#ES6-和-Babel\" class=\"headerlink\" title=\"ES6 和 Babel\"></a>ES6 和 Babel</h2><p>是时候抛弃 CoffeeScript 了，这是因为它的诸多特性已在 ES6 中出现类似的语法，而 ES6 是实施标准，代表了 JavaScript 未来的发展方向。</p>\n<p>目前最新的浏览器已经支持了 ES6 的大部分特性。Babel 是一个强大的转换工具，用于将 ES6 转换为 ES5。此外，根据目标浏览器可以调整代码转换的程度。</p>\n<p>那么是否有类型系统呢？TypeScript 和 Flow 都为 JavaScript 提供了静态类型系统，使用静态类型检查，可以有效捕获错误，减少测试量。目前来说，我建议对此持观望态度。</p>\n<p>TypeScript 在尽力让 JavaScript 向 C# 或 Java 的方向发展，但缺少了许多高级的类型系统特性，比如代数数据类型（algebraic data types）。此外，它不能像 Flow 一样有效地处理 null。</p>\n<p>相比而言，Flow 更加强大，捕获的错误类型也更多，但难于配置。此外，它对 JavaScript 新特性的支持弱于 Babel，也不支持 Windows 系统。</p>\n<p>就我个人的角度而言，在前端开发中类型系统并不是至关重要的一环（此处可能有争议）。在类型系统更加健壮且对 Babel 更友好之前，还是让我们静观其变吧。</p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>另一个无可争议的工具是 ESLint。ESLint 支持 ES6 语法，还提供了 React 插件，已经不单单是一个代码审查工具了。目前来说，JSLint 已经过时了，ESLint 可以替代 JSHint 和 JSCS 独树一帜了。</p>\n<p>开发者可以根据自己的需求配置 ESLint，不过在这里我建议根据 <a href=\"https://github.com/airbnb/javascript\">AirBNB 的开发规范</a>进行配置，也可以直接使用 <a href=\"https://www.npmjs.com/package/eslint-config-airbnb\">ESLint airbnb config</a>。当然这份规范中尚有不足之处，但保持团队整体代码的一致性，可以有效提高代码的可读性。</p>\n<p>当你熟悉了 ESLint 之后，建议开发者深入地尝试其中的规则。ESLint 捕获的错误越多，产品的稳定性越高。</p>\n<h2 id=\"NPM，CommonJS-和-ES6-modules\"><a href=\"#NPM，CommonJS-和-ES6-modules\" class=\"headerlink\" title=\"NPM，CommonJS 和 ES6 modules\"></a>NPM，CommonJS 和 ES6 modules</h2><p>忘记 Bower 吧，用 NPM 接管一切。类似 Browserify 和 Webpack 的构建工具间接提高了 NPM 在 web 开发中的地位。使用 NPM，版本管理将会更加简单，也将更多地与 Node.js 生态系统接触。目前对于 CSS 的处理尚不足够完善。</p>\n<p>你可能会考虑如何在部署服务器上执行构建呢？与 Ruby 的 Bundler 有所不同，NPM 使用了通配符检索文件，且第三方包可以在代码开发中以及项目发布前做任意修改。使用 <a href=\"https://docs.npmjs.com/cli/shrinkwrap\">shrinkwrap</a> 文件可以冻结项目中的第三方依赖，我建议使用 User 的 shrinkwrap，提高输出的一致性。此外，开发者也可以考虑使用类似 <a href=\"https://www.npmjs.com/package/sinopia\">Sinopia</a> 的工具托管自己的私有 NPM 服务器。</p>\n<p>Babel 会将 ES6 module 语法转换为 CommonJS。CommonJS 是一种历经实践的语法，这意味着稳定和通用，此外，使用类似 <a href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\">tree shaking</a> （Webpack 2.0 和 Rollup 已经支持该特性）的机制我们还能实现静态代码分析。</p>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>除非你乐意在页面添加数百个脚本标签，否则的话你应该尝试用构建工具来打包页面的资源了。此外，你还需要某些工具让浏览器支持 NPM 第三方包。在这里，我推荐你使用 Webpack。</p>\n<p>一年之前对于上述工作，开发者还有诸多工具可以选择，比如基于 JavaScript 的 RequireJS、Browserify 和 Webpack 解决方案，此外还有号称能对 ES6 的模块进行最佳优化的 RollupJS.</p>\n<p>在尝试了所有的工具之后，我强烈建议开发者选择 Webpack:</p>\n<ul>\n<li>通过配置可以应对各种情况</li>\n<li>支持主流的模块加载方式（AMD，CommonJS，globals）</li>\n<li>内部机制可以修复破损的模块</li>\n<li>可以处理 CSS</li>\n<li>全面的缓存系统</li>\n<li>支持热重载</li>\n<li>可以加载大多数的资源</li>\n<li>提供高效的<a href=\"https://github.com/webpack/docs/wiki/optimization\">性能优化方案</a></li>\n</ul>\n<p>Webpack 也非常善于处理大型的单页应用，支持代码分割和惰性加载。</p>\n<p>但是值得注意的是，Webpack 的学习曲线异常陡峭。不过一旦你学会了它，那么你就掌握了最强大的构建系统。</p>\n<p>那么 Gulp 和 Grunt 呢？相比而言，Webpack 更善于处理各类资源。如果你需要执行其他类型的构建任务，那么 Gulp 和 Grunt 还是有用的。对于类似运行 Webpack 的基本任务，我建议直接使用 <a href=\"https://docs.npmjs.com/cli/run-script\">NPM 脚本</a>。</p>\n<h2 id=\"Mocha-Chai-Sinon\"><a href=\"#Mocha-Chai-Sinon\" class=\"headerlink\" title=\"Mocha + Chai + Sinon\"></a>Mocha + Chai + Sinon</h2><p>在 JavaScript 中，有大量可选的单元测试工具，每一个都很稳定和健壮。如果你只是用于单元测试，那么现有工具完全可以胜任你的需求。</p>\n<p>常见的测试工具有 Jasmine、Mocha、Tape、Ava、Jest 等，它们各有所长。</p>\n<p>我对一个测试框架的要求有如下几条：</p>\n<ul>\n<li>可以在浏览器运行，便于调试</li>\n<li>执行速度快</li>\n<li>便于处理异步测试</li>\n<li>便于在命令行中使用</li>\n<li>可以兼容任意断言和数据模拟的第三方库</li>\n</ul>\n<p>第一条标准就排除了 Ava 和 Jest。</p>\n<p>我喜欢 Chai 断言是因为其种类丰富、功能齐全的插件，喜欢 Mocha 是因为其对异步的良好支持。强烈建议使用 <a href=\"https://github.com/prodatakey/dirty-chai\">Dirty Chai</a> 避免某些问题。Webpack 的 <a href=\"https://github.com/webpack/mocha-loader\">mocha-leader</a> 插件允许开发者自动执行测试。</p>\n<p>对于 React 而言，开发者可以参考一下 AirBNB 的 <a href=\"https://github.com/airbnb/enzyme\">Enzyme</a> 和 <a href=\"https://github.com/jquense/teaspoon\">Teaspoon</a>。</p>\n<p>我非常钟爱 Mocha 的特性，如果你想要的只是最基础的功能，可以参考<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\">这篇文章</a>了解一下 Tape。</p>\n<h2 id=\"Lodash\"><a href=\"#Lodash\" class=\"headerlink\" title=\"Lodash\"></a>Lodash</h2><p>JavaScript 并没有一个类似 Java 或 .NET 的核心工具库，所以开发者大都会从外部引用一个外部工具库。</p>\n<p>目前来说，Lodash 是此类工具中的佼佼者。此外，由于它<a href=\"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\">惰性执行</a>的特性，也让它是目前性能最佳的工具之一。使用 Lodash 时无需引用全部资源，开发者可以按需使用其中的函数。在 4.x 版本中，Lodash 为偏爱函数式编程的开发者提供了一个“函数式开发”模式。</p>\n<p>如果你熟悉函数式编程，你可以了解一下 <a href=\"http://ramdajs.com/0.19.1/index.html\">Ramda</a>。如果你决定使用这个库，可能需要引用一些 Lodash 函数。</p>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>许多基于 React 的应用程序都不再使用 jQuery 了。除非你正在维护一个陈旧的项目或者用到的第三方库依赖了 jQuery，否则已经没有必要使用它了。</p>\n<p>我喜欢让项目保持简洁，在代码中只使用 <a href=\"http://ramdajs.com/0.19.1/index.html\">fetch</a> 。fetch 基于 promise，Firefox 和 Chrome 都封装了该接口。对于其他浏览器，则需要提供一个腻子脚本。我建议使用 <a href=\"https://github.com/matthew-andrews/isomorphic-fetch\">isomorphic-fetch</a> 在各个浏览器和服务端保持功能的一致性。</p>\n<p>当然也可以其他优秀的第三方库异步获取数据，但我觉得 fetch 已经够用了。</p>\n<h2 id=\"同构-JavaScript\"><a href=\"#同构-JavaScript\" class=\"headerlink\" title=\"同构 JavaScript\"></a>同构 JavaScript</h2><p>同构 JavaScript 是指同时运行在客户端和服务端的 JavaScript，常用于在服务端预先渲染页面，提高性能，便于 SEO。使用 React 可以实现同构 JavaScript，但是并不简单，它提高了程序的复杂度，限制了开发者可选的工具和第三方库。</p>\n<p>如果你正在构建一个 B2C 的站点，比如电商网站，那么你可能就需要使用同构 JavaScript。不过，对于内部站点或者 B2B 程序，性能就不是最重要的了，则同构 JavaScript 也就不是太重要了。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>最近每个人好像都在思考如何处理 API。每个人都在随波逐流的使用 <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">RESTfull API</a>，<a href=\"https://en.wikipedia.org/wiki/SOAP\">SOAP</a> 已经成为了过去时。目前业界存在各种 API 协议，比如 HATEOAS、JSON API、HAL、GraphQL 等。</p>\n<p>GraphQL 赋予了客户端进行任意查询的能力。搭配 <a href=\"https://facebook.github.io/relay/\">Relay</a>，可以更好地处理客户端的状态和缓存。不过，创建 GraphQL 的服务端接口的难度还较大，且大多数的文档都是面向 Node.js 的。</p>\n<p>Netflix 的 <a href=\"https://github.com/Netflix/falcor\">Falcor</a> 看起来提供了和 GraphQL/Relay 相似的能力，同时还降低了服务端的需求，但它目前尚处于开发者预览状态，尚未应用于实际开发。</p>\n<p>所有已知的规范都各有缺陷，有些过于复杂，有些只能处理数据读取而不嗯那个更新，有些和 REST 差异显著。许多开发者选择自己开发，但是还会遇到上述的问题。</p>\n<p>我不认为上述有一个完美的解决方案，但我对 API 有一个自己的认知：</p>\n<ul>\n<li>可预测，遵循一致性协议</li>\n<li>支持在一次查询中获取多个实体</li>\n<li>支持更新操作</li>\n<li>易于调试</li>\n<li>易于使用</li>\n</ul>\n<p>到目前为止，我还没有发现满足上述所有条件的解决方案。</p>\n<p>如果你正在使用 RESTful，建议参考 <a href=\"http://swagger.io/\">Swagger</a> 来编写 API。</p>\n<h2 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h2><p><a href=\"https://github.com/atom/electron\">Electron</a> 可以使用前端技术构建桌面程序，GitHub 团队出品的 Atom 编辑器就是基于 Electron 创建的。本质上，Electron 内部封装了一个 Node.js，可以打开 Chrome 窗口渲染 UI，还可以访问操作系统本地的 API，并且没有浏览器中的沙盒机制。开发者可以通过 Electron 打包和分发应用程序。</p>\n<p>这是创建跨平台软件最简单的方式，而且还可以利用上述的所有工具。此外，Electron 有完整的文档和活跃的开发社区。</p>\n<p>你可能听说过 <a href=\"http://nwjs.io/\">nw.js</a> 的大名，虽然它已经存在了多年，但相比来说，Electron 更加稳定和易用。</p>\n<p>这里有一个基于 <a href=\"https://github.com/chentsulin/electron-react-boilerplate\">Electron、React 和 hot reload 的模板</a>，尝试一下吧。</p>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><p>下面是一些我在 Twitter 上关注的对象：</p>\n<ul>\n<li><a href=\"https://github.com/gaearon\">Dan Abramov</a>, Redux 的创建者</li>\n<li><a href=\"https://twitter.com/Vjeux\">Christopher Chedeau</a>, 非常活跃的 React 开发者，现就职与 Facebook</li>\n<li><a href=\"https://github.com/jeffmo\">Jeff Morrison</a>, Flow 的核心贡献者之一</li>\n<li><a href=\"https://twitter.com/sebmarkbage\">Sebastian Markbåge</a>, React 的创建者之一</li>\n<li><a href=\"https://twitter.com/floydophone\">Pete Hunt</a></li>\n<li><a href=\"https://twitter.com/reactjs\">React</a></li>\n<li>更多值得关注的对象请参考 <a href=\"https://twitter.com/oguzbilgic/lists/react-influencers\">React Influencers</a></li>\n</ul>\n<p>建议阅读 Pate Hunt 的 <a href=\"https://github.com/petehunt/react-howto\">Learning React</a>!</p>\n<p>Dan Abramov 发布一系列的视频教程 <a href=\"https://egghead.io/series/getting-started-with-redux\">Getting started with Redux</a>，强烈推荐！此外，Dan 还发布过一个<a href=\"https://medium.com/@dan_abramov/my-react-list-862227952a8c#.740o0wzee\">关注列表</a>，比上述更加详细。</p>\n<p>Mark Erikson 的 <a href=\"https://github.com/markerikson/react-redux-links\">React/Redux links</a> 集合也是很好的学习材料。</p>\n<h2 id=\"按需使用\"><a href=\"#按需使用\" class=\"headerlink\" title=\"按需使用\"></a>按需使用</h2><p>JavaScript 的生态环境发展迅速，正日益强大起来。React 的最佳实践正在固化，周边工具的职责和能力也日益清晰。</p>\n<p>最重要的事情就是要牢记：保持简洁，按需使用。</p>\n<p>如果你的应用程序只有两三屏，那么就无需使用路由系统；如果你正在创建一个单页应用，那么甚至不需要 Redux，只需要 React 自己的 state 属性即可；如果你正在创建一个简单的 CRUD 程序，那么你就不需要使用 Relay；如果你正在学习 ES6，并不需要深入地了解 Async/Await 或装饰器；如果你刚刚开始学习 React，并不需要使用热重载和服务端渲染；如果你刚刚接触 Webpack，你就不需要分离代码和合并多个资源；如果你刚刚学习 Redux，你不需要理解使用 Redux-Form 和 Redux-Sagas。</p>\n<p>保持简洁，每次只做一件事！</p>"},{"title":"CSS Counters","date":"2016-01-25T04:23:35.000Z","desc":"css counter basic knowledge and examples","_content":"\nSeveral years ago, a question was rasied by someone on Weibo: how to code the module of calculating commodity price, which plays a big role in Taobao commodity detail pages. Usually at the detail page, the commodity has many options, such like size and color. The amount will change real time when users change their options. This question is not noly business-oriented, but also has many solving methods. JS came to my mind first at the time.\n\nThe last two weeks, I'm digesting technical posts which collected in Pocket and Weibo over past three years. There are many Best Practice in it, such like CSS Counters which the rest is going to say. \n\n<!-- more -->\n\nCSS Counters is proposed in CSS2.1, so not only modern browsers, but also IE8+ support it. CSS Counters is a auto-counter, and it should coordinate with pseudo-classes `::before` and `::after` to use。\n\n## Property\n\nCSS Counters have a series of property or method to use:\n\n- `counter-reset`, used to initialize a counter. It receives two parameters: the first is a string identifier, and the second is a optional number which used to initialize counter's default value.   \n- `counter-increment`, used to increse the counter's value, and it receives a optional number parameter. If the optional parameter exsits, the counter will plus it instead of the default value one.\n- `counter()`, used to get counter's result in the `content` property.\n\n## Usage \n\nAs metioned above, we could use counter-reset property to defined a counter. Look at the following html structure:\n\n```html\n<body>\n    <ul>\n        <li></li>\n        <li></li>\n        <li></li>\n    </ul>\n    <p></p>\n</body>\n```\n\nAnd styles:\n\n```scss\nul {\n    counter-reset: li-counter 10;\n    li {\n        counter-increment: li-counter 2;\n    }\n    p::before {\n        content: counter(li-counter);\n    }\n}\n```\n\nBased on above code fragments, counter called \"li-counter\" was created, and its initial value is 10. At the li tag, counter-increment comes in and increse the counter's vlaue. Finally, p tag was created with pseudo-class `::before` to display the counter's end result.\n\n## Example\n\n<div class=\"counter-wrap\"><ul class=\"row\"><li class=\"price-10\"><input type=\"radio\" name=\"color\" id=\"white\"/><label for=\"white\">White(+10)</label></li><li class=\"price-13\"><input type=\"radio\" name=\"color\" id=\"red\"/><label for=\"red\">Red(+13)</label></li><li class=\"price-15\"><input type=\"radio\" name=\"color\" id=\"green\"/><label for=\"green\">Green(+15)</label></li></ul><ul class=\"row\"><li class=\"price-4\"><input type=\"radio\" name=\"size\" id=\"small\"/><label for=\"small\">Small(+4)</label></li><li class=\"price-8\"><input type=\"radio\" name=\"size\" id=\"large\"/><label for=\"large\">Large(+8)</label></li></ul><ul class=\"row\"><li class=\"price-total\"></li></ul></div>\n\n<style>\n@charset \"UTF-8\";\n.counter-wrap {\n  width: 360px;\n  margin: 0 auto;\n  counter-reset: price 10;\n}\n\n.counter-wrap ul.row {\n  margin: 2px 2px 2px 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n.counter-wrap li {\n  display: inline-block;\n  margin: 10px 2px;\n  text-align: center;\n}\n\n.counter-wrap input {\n  position: absolute;\n  clip: rect(0 0 0 0);\n}\n\n.counter-wrap label {\n  padding: 10px 16px;\n  color: white;\n  background-color: #79BD8F;\n  border-radius: 5px;\n}\n\n.counter-wrap input:checked + label {\n  background-color: #F06161;\n}\n\n.counter-wrap input#small:checked {\n  counter-increment: price 4;\n}\n\n.counter-wrap input#large:checked {\n  counter-increment: price 8;\n}\n\n.counter-wrap input#white:checked {\n  counter-increment: price 10;\n}\n\n.counter-wrap input#red:checked {\n  counter-increment: price 13;\n}\n\n.counter-wrap input#green:checked {\n  counter-increment: price 15;\n}\n\n.counter-wrap li.price-total {\n  padding: 10px 16px;\n  background-color: #BEEB9F;\n  border-radius: 5px;\n}\n.counter-wrap li.price-total::before {\n  content: \"$\" counter(price);\n  color: #D83C65;\n  font-weight: bold;\n}\n</style>\n\nAs you can see, here is a simple commodity form with multiple options. If you click colors or sizes, the amount will change real time. With this approach, code is cleaner and more robust.\n\nFor more infomation about this example, you could look over my Codepen playground via this [link](http://codepen.io/pinggod/pen/JGpVNx?editors=1100).\n\n","source":"_posts/CSS-Counters.md","raw":"title: CSS Counters\ndate: 2016-01-25 12:23:35\ndesc: css counter basic knowledge and examples\n---\n\nSeveral years ago, a question was rasied by someone on Weibo: how to code the module of calculating commodity price, which plays a big role in Taobao commodity detail pages. Usually at the detail page, the commodity has many options, such like size and color. The amount will change real time when users change their options. This question is not noly business-oriented, but also has many solving methods. JS came to my mind first at the time.\n\nThe last two weeks, I'm digesting technical posts which collected in Pocket and Weibo over past three years. There are many Best Practice in it, such like CSS Counters which the rest is going to say. \n\n<!-- more -->\n\nCSS Counters is proposed in CSS2.1, so not only modern browsers, but also IE8+ support it. CSS Counters is a auto-counter, and it should coordinate with pseudo-classes `::before` and `::after` to use。\n\n## Property\n\nCSS Counters have a series of property or method to use:\n\n- `counter-reset`, used to initialize a counter. It receives two parameters: the first is a string identifier, and the second is a optional number which used to initialize counter's default value.   \n- `counter-increment`, used to increse the counter's value, and it receives a optional number parameter. If the optional parameter exsits, the counter will plus it instead of the default value one.\n- `counter()`, used to get counter's result in the `content` property.\n\n## Usage \n\nAs metioned above, we could use counter-reset property to defined a counter. Look at the following html structure:\n\n```html\n<body>\n    <ul>\n        <li></li>\n        <li></li>\n        <li></li>\n    </ul>\n    <p></p>\n</body>\n```\n\nAnd styles:\n\n```scss\nul {\n    counter-reset: li-counter 10;\n    li {\n        counter-increment: li-counter 2;\n    }\n    p::before {\n        content: counter(li-counter);\n    }\n}\n```\n\nBased on above code fragments, counter called \"li-counter\" was created, and its initial value is 10. At the li tag, counter-increment comes in and increse the counter's vlaue. Finally, p tag was created with pseudo-class `::before` to display the counter's end result.\n\n## Example\n\n<div class=\"counter-wrap\"><ul class=\"row\"><li class=\"price-10\"><input type=\"radio\" name=\"color\" id=\"white\"/><label for=\"white\">White(+10)</label></li><li class=\"price-13\"><input type=\"radio\" name=\"color\" id=\"red\"/><label for=\"red\">Red(+13)</label></li><li class=\"price-15\"><input type=\"radio\" name=\"color\" id=\"green\"/><label for=\"green\">Green(+15)</label></li></ul><ul class=\"row\"><li class=\"price-4\"><input type=\"radio\" name=\"size\" id=\"small\"/><label for=\"small\">Small(+4)</label></li><li class=\"price-8\"><input type=\"radio\" name=\"size\" id=\"large\"/><label for=\"large\">Large(+8)</label></li></ul><ul class=\"row\"><li class=\"price-total\"></li></ul></div>\n\n<style>\n@charset \"UTF-8\";\n.counter-wrap {\n  width: 360px;\n  margin: 0 auto;\n  counter-reset: price 10;\n}\n\n.counter-wrap ul.row {\n  margin: 2px 2px 2px 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n.counter-wrap li {\n  display: inline-block;\n  margin: 10px 2px;\n  text-align: center;\n}\n\n.counter-wrap input {\n  position: absolute;\n  clip: rect(0 0 0 0);\n}\n\n.counter-wrap label {\n  padding: 10px 16px;\n  color: white;\n  background-color: #79BD8F;\n  border-radius: 5px;\n}\n\n.counter-wrap input:checked + label {\n  background-color: #F06161;\n}\n\n.counter-wrap input#small:checked {\n  counter-increment: price 4;\n}\n\n.counter-wrap input#large:checked {\n  counter-increment: price 8;\n}\n\n.counter-wrap input#white:checked {\n  counter-increment: price 10;\n}\n\n.counter-wrap input#red:checked {\n  counter-increment: price 13;\n}\n\n.counter-wrap input#green:checked {\n  counter-increment: price 15;\n}\n\n.counter-wrap li.price-total {\n  padding: 10px 16px;\n  background-color: #BEEB9F;\n  border-radius: 5px;\n}\n.counter-wrap li.price-total::before {\n  content: \"$\" counter(price);\n  color: #D83C65;\n  font-weight: bold;\n}\n</style>\n\nAs you can see, here is a simple commodity form with multiple options. If you click colors or sizes, the amount will change real time. With this approach, code is cleaner and more robust.\n\nFor more infomation about this example, you could look over my Codepen playground via this [link](http://codepen.io/pinggod/pen/JGpVNx?editors=1100).\n\n","slug":"CSS-Counters","published":1,"updated":"2016-01-26T04:31:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarkk0001fsdiah9hkc4r","content":"<p>Several years ago, a question was rasied by someone on Weibo: how to code the module of calculating commodity price, which plays a big role in Taobao commodity detail pages. Usually at the detail page, the commodity has many options, such like size and color. The amount will change real time when users change their options. This question is not noly business-oriented, but also has many solving methods. JS came to my mind first at the time.</p>\n<p>The last two weeks, I’m digesting technical posts which collected in Pocket and Weibo over past three years. There are many Best Practice in it, such like CSS Counters which the rest is going to say. </p>\n<a id=\"more\"></a>\n<p>CSS Counters is proposed in CSS2.1, so not only modern browsers, but also IE8+ support it. CSS Counters is a auto-counter, and it should coordinate with pseudo-classes <code>::before</code> and <code>::after</code> to use。</p>\n<h2 id=\"Property\"><a href=\"#Property\" class=\"headerlink\" title=\"Property\"></a>Property</h2><p>CSS Counters have a series of property or method to use:</p>\n<ul>\n<li><code>counter-reset</code>, used to initialize a counter. It receives two parameters: the first is a string identifier, and the second is a optional number which used to initialize counter’s default value.   </li>\n<li><code>counter-increment</code>, used to increse the counter’s value, and it receives a optional number parameter. If the optional parameter exsits, the counter will plus it instead of the default value one.</li>\n<li><code>counter()</code>, used to get counter’s result in the <code>content</code> property.</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>As metioned above, we could use counter-reset property to defined a counter. Look at the following html structure:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And styles:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: li-counter <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">counter-increment</span>: li-counter <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span>::before &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: counter(li-counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Based on above code fragments, counter called “li-counter” was created, and its initial value is 10. At the li tag, counter-increment comes in and increse the counter’s vlaue. Finally, p tag was created with pseudo-class <code>::before</code> to display the counter’s end result.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><div class=\"counter-wrap\"><ul class=\"row\"><li class=\"price-10\"><input type=\"radio\" name=\"color\" id=\"white\"><label for=\"white\">White(+10)</label></li><li class=\"price-13\"><input type=\"radio\" name=\"color\" id=\"red\"><label for=\"red\">Red(+13)</label></li><li class=\"price-15\"><input type=\"radio\" name=\"color\" id=\"green\"><label for=\"green\">Green(+15)</label></li></ul><ul class=\"row\"><li class=\"price-4\"><input type=\"radio\" name=\"size\" id=\"small\"><label for=\"small\">Small(+4)</label></li><li class=\"price-8\"><input type=\"radio\" name=\"size\" id=\"large\"><label for=\"large\">Large(+8)</label></li></ul><ul class=\"row\"><li class=\"price-total\"></li></ul></div>\n\n<style>\n@charset \"UTF-8\";\n.counter-wrap {\n  width: 360px;\n  margin: 0 auto;\n  counter-reset: price 10;\n}\n\n.counter-wrap ul.row {\n  margin: 2px 2px 2px 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n.counter-wrap li {\n  display: inline-block;\n  margin: 10px 2px;\n  text-align: center;\n}\n\n.counter-wrap input {\n  position: absolute;\n  clip: rect(0 0 0 0);\n}\n\n.counter-wrap label {\n  padding: 10px 16px;\n  color: white;\n  background-color: #79BD8F;\n  border-radius: 5px;\n}\n\n.counter-wrap input:checked + label {\n  background-color: #F06161;\n}\n\n.counter-wrap input#small:checked {\n  counter-increment: price 4;\n}\n\n.counter-wrap input#large:checked {\n  counter-increment: price 8;\n}\n\n.counter-wrap input#white:checked {\n  counter-increment: price 10;\n}\n\n.counter-wrap input#red:checked {\n  counter-increment: price 13;\n}\n\n.counter-wrap input#green:checked {\n  counter-increment: price 15;\n}\n\n.counter-wrap li.price-total {\n  padding: 10px 16px;\n  background-color: #BEEB9F;\n  border-radius: 5px;\n}\n.counter-wrap li.price-total::before {\n  content: \"$\" counter(price);\n  color: #D83C65;\n  font-weight: bold;\n}\n</style>\n\n<p>As you can see, here is a simple commodity form with multiple options. If you click colors or sizes, the amount will change real time. With this approach, code is cleaner and more robust.</p>\n<p>For more infomation about this example, you could look over my Codepen playground via this <a href=\"http://codepen.io/pinggod/pen/JGpVNx?editors=1100\" target=\"_blank\" rel=\"external\">link</a>.</p>\n","excerpt":"<p>Several years ago, a question was rasied by someone on Weibo: how to code the module of calculating commodity price, which plays a big role in Taobao commodity detail pages. Usually at the detail page, the commodity has many options, such like size and color. The amount will change real time when users change their options. This question is not noly business-oriented, but also has many solving methods. JS came to my mind first at the time.</p>\n<p>The last two weeks, I’m digesting technical posts which collected in Pocket and Weibo over past three years. There are many Best Practice in it, such like CSS Counters which the rest is going to say. </p>","more":"<p>CSS Counters is proposed in CSS2.1, so not only modern browsers, but also IE8+ support it. CSS Counters is a auto-counter, and it should coordinate with pseudo-classes <code>::before</code> and <code>::after</code> to use。</p>\n<h2 id=\"Property\"><a href=\"#Property\" class=\"headerlink\" title=\"Property\"></a>Property</h2><p>CSS Counters have a series of property or method to use:</p>\n<ul>\n<li><code>counter-reset</code>, used to initialize a counter. It receives two parameters: the first is a string identifier, and the second is a optional number which used to initialize counter’s default value.   </li>\n<li><code>counter-increment</code>, used to increse the counter’s value, and it receives a optional number parameter. If the optional parameter exsits, the counter will plus it instead of the default value one.</li>\n<li><code>counter()</code>, used to get counter’s result in the <code>content</code> property.</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>As metioned above, we could use counter-reset property to defined a counter. Look at the following html structure:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And styles:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: li-counter <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">counter-increment</span>: li-counter <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span>::before &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: counter(li-counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Based on above code fragments, counter called “li-counter” was created, and its initial value is 10. At the li tag, counter-increment comes in and increse the counter’s vlaue. Finally, p tag was created with pseudo-class <code>::before</code> to display the counter’s end result.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><div class=\"counter-wrap\"><ul class=\"row\"><li class=\"price-10\"><input type=\"radio\" name=\"color\" id=\"white\"/><label for=\"white\">White(+10)</label></li><li class=\"price-13\"><input type=\"radio\" name=\"color\" id=\"red\"/><label for=\"red\">Red(+13)</label></li><li class=\"price-15\"><input type=\"radio\" name=\"color\" id=\"green\"/><label for=\"green\">Green(+15)</label></li></ul><ul class=\"row\"><li class=\"price-4\"><input type=\"radio\" name=\"size\" id=\"small\"/><label for=\"small\">Small(+4)</label></li><li class=\"price-8\"><input type=\"radio\" name=\"size\" id=\"large\"/><label for=\"large\">Large(+8)</label></li></ul><ul class=\"row\"><li class=\"price-total\"></li></ul></div>\n\n<style>\n@charset \"UTF-8\";\n.counter-wrap {\n  width: 360px;\n  margin: 0 auto;\n  counter-reset: price 10;\n}\n\n.counter-wrap ul.row {\n  margin: 2px 2px 2px 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n.counter-wrap li {\n  display: inline-block;\n  margin: 10px 2px;\n  text-align: center;\n}\n\n.counter-wrap input {\n  position: absolute;\n  clip: rect(0 0 0 0);\n}\n\n.counter-wrap label {\n  padding: 10px 16px;\n  color: white;\n  background-color: #79BD8F;\n  border-radius: 5px;\n}\n\n.counter-wrap input:checked + label {\n  background-color: #F06161;\n}\n\n.counter-wrap input#small:checked {\n  counter-increment: price 4;\n}\n\n.counter-wrap input#large:checked {\n  counter-increment: price 8;\n}\n\n.counter-wrap input#white:checked {\n  counter-increment: price 10;\n}\n\n.counter-wrap input#red:checked {\n  counter-increment: price 13;\n}\n\n.counter-wrap input#green:checked {\n  counter-increment: price 15;\n}\n\n.counter-wrap li.price-total {\n  padding: 10px 16px;\n  background-color: #BEEB9F;\n  border-radius: 5px;\n}\n.counter-wrap li.price-total::before {\n  content: \"$\" counter(price);\n  color: #D83C65;\n  font-weight: bold;\n}\n</style>\n\n<p>As you can see, here is a simple commodity form with multiple options. If you click colors or sizes, the amount will change real time. With this approach, code is cleaner and more robust.</p>\n<p>For more infomation about this example, you could look over my Codepen playground via this <a href=\"http://codepen.io/pinggod/pen/JGpVNx?editors=1100\">link</a>.</p>"},{"title":"CSS Flexbox","date":"2015-12-02T02:42:39.000Z","_content":"\n如果你正在学习使用 CSS 布局，推荐来 [learnlayout](http://zh.learnlayout.com/toc.html) 了解一下这些年前端所用到的各类布局手法。这里之所以使用“手法”一词，意指其中多少有些偏激取巧，比如使用浮动（float）来定位、使用 margin 来伸缩空间等等。\n\nfloat、margin 本不应该用于布局，只是囿于早期的 CSS 布局模块发展缓慢且不合时宜，促使开发者另辟蹊径，借助其他样式来模拟布局效果。最近几年随着浏览器对布局模块的支持度越来越高，Flexible Box Layout（Flexbox）、Grid Layout、Multiple Column Layout 也逐渐为开发者所接受，其中以 Flexbox 的兼容性最好，拥护者也随之水涨船高。\n\n就个人感受而言，未来的布局方式会归纳为两类：一类是纯粹使用浏览器兼容性高的布局模块，比如 Flexbox，这也是未来的发展趋势；另一类是使用预处理器或者框架自定义的布局模块，这只是目前的缓兵过渡之计。\n\n<!-- more -->\n\n在几个月前，我曾经使用过一段时间的 [Susy](http://susy.oddbird.net/)。 Susy 是基于 Sass 的一款布局框架，其核心是使用非布局样式来模拟布局效果，最大的优点在于封装布局样式之后提供了一套简洁明了的布局接口。比如，在下面的 Sass 代码中，`.contianer` 被附加了一套容器样式，嵌套在其中的 `item` 占据总体宽度的 4 / 10。\n\n```scss\n.container {\n    @include container;  \n    .item {\n        @include span(4 of 10);\n    }\n}\n```\n\n> Susy 的理念是帮助开发者规避数学计算，所以它有一条大快人心的口号：YOUR MARKUP, YOUR DESIGN, YOUR OPINIONS, OUR MATH。\n\n## Flexbox\n\n在数学计算的问题上，我觉得 Flexbox 和 Susy 有异曲同工之妙，只是相比起来，原生的 Flexbox 更加简捷。在 Flexbox 中有两个核心元素：`container` 和 `item`，所有的样式也是围绕这两类元素计算的。下图中有两条红线，分别代表在水平方向和垂直方向进行布局的基线。\n\n![Flexbox](/img/flexbox.png)\n\nFlexbox 中的 contianer 元素需要解决两个问题：自身的类型以及内部 item 的排列方式。通过 `display: flex` 和 `display: inline-flex` 可以将 container 声明为块级或者行内块级，从而确定了 container 自身的类型。使用以下属性则可以确定 container 内部 item 的排列方式：\n\n- flex-flow：flex-direction 和 flex-wrap 的缩写\n- flex-direction：决定 item 的排列方向\n- flex-wrap：决定 item 的溢出容器后的处理方式\n- justify-content：决定 item 在水平方向上的对齐方式\n- align-item：决定 item 在垂直方向上的对齐方式\n- align-content：决定多个 main axis 在垂直方向上的对齐方式\n\n![flex-container](/img/flexbox-container.png)\n\nitem 元素需要解决的问题集中于自身上，包括自身在 container 中的顺序、缩放、对齐方式。使用以下属性可以设置 item 自身的布局样式：\n\n- order：决定 item 的顺序，默认值为 0，值越小越靠前\n- flex：flex-grow、flex-shrink 和 flex-basis 的缩写\n- flex-grow：决定 item 的放大比例，默认值为 0，0 表示不放大\n- flex-shrink：决定 item 的缩小比例，默认值为 1，0 表示不缩小\n- flex-basis：浏览器分配 container 剩余空间时，决定 item 获得的比重\n- align-self: 决定自身在垂直方向的对齐方式\n\n![flex-item](/img/flexbox-cell.png)\n\n## box-sizing\n\n话外提一下 `box-sizing`， 该属性用于声明 `width` 和 `height` 的约束范围：`border-box` 表示边框、内边距和内容块的宽高计入容器宽高；`content-box` 表示只有内容块的宽高计入容器宽高。此外，该属性可继承，可以通过设置 body 的 box-sizing 统一约束容器的宽高。\n\n## FlexFroggy\n\n这是一个寓教于乐的 Flexbox 布局小游戏，难度中下，很有意思：[http://flexboxfroggy.com](http://flexboxfroggy.com)。","source":"_posts/CSS-Flexbox.md","raw":"title: CSS Flexbox\ndate: 2015-12-02 10:42:39\n---\n\n如果你正在学习使用 CSS 布局，推荐来 [learnlayout](http://zh.learnlayout.com/toc.html) 了解一下这些年前端所用到的各类布局手法。这里之所以使用“手法”一词，意指其中多少有些偏激取巧，比如使用浮动（float）来定位、使用 margin 来伸缩空间等等。\n\nfloat、margin 本不应该用于布局，只是囿于早期的 CSS 布局模块发展缓慢且不合时宜，促使开发者另辟蹊径，借助其他样式来模拟布局效果。最近几年随着浏览器对布局模块的支持度越来越高，Flexible Box Layout（Flexbox）、Grid Layout、Multiple Column Layout 也逐渐为开发者所接受，其中以 Flexbox 的兼容性最好，拥护者也随之水涨船高。\n\n就个人感受而言，未来的布局方式会归纳为两类：一类是纯粹使用浏览器兼容性高的布局模块，比如 Flexbox，这也是未来的发展趋势；另一类是使用预处理器或者框架自定义的布局模块，这只是目前的缓兵过渡之计。\n\n<!-- more -->\n\n在几个月前，我曾经使用过一段时间的 [Susy](http://susy.oddbird.net/)。 Susy 是基于 Sass 的一款布局框架，其核心是使用非布局样式来模拟布局效果，最大的优点在于封装布局样式之后提供了一套简洁明了的布局接口。比如，在下面的 Sass 代码中，`.contianer` 被附加了一套容器样式，嵌套在其中的 `item` 占据总体宽度的 4 / 10。\n\n```scss\n.container {\n    @include container;  \n    .item {\n        @include span(4 of 10);\n    }\n}\n```\n\n> Susy 的理念是帮助开发者规避数学计算，所以它有一条大快人心的口号：YOUR MARKUP, YOUR DESIGN, YOUR OPINIONS, OUR MATH。\n\n## Flexbox\n\n在数学计算的问题上，我觉得 Flexbox 和 Susy 有异曲同工之妙，只是相比起来，原生的 Flexbox 更加简捷。在 Flexbox 中有两个核心元素：`container` 和 `item`，所有的样式也是围绕这两类元素计算的。下图中有两条红线，分别代表在水平方向和垂直方向进行布局的基线。\n\n![Flexbox](/img/flexbox.png)\n\nFlexbox 中的 contianer 元素需要解决两个问题：自身的类型以及内部 item 的排列方式。通过 `display: flex` 和 `display: inline-flex` 可以将 container 声明为块级或者行内块级，从而确定了 container 自身的类型。使用以下属性则可以确定 container 内部 item 的排列方式：\n\n- flex-flow：flex-direction 和 flex-wrap 的缩写\n- flex-direction：决定 item 的排列方向\n- flex-wrap：决定 item 的溢出容器后的处理方式\n- justify-content：决定 item 在水平方向上的对齐方式\n- align-item：决定 item 在垂直方向上的对齐方式\n- align-content：决定多个 main axis 在垂直方向上的对齐方式\n\n![flex-container](/img/flexbox-container.png)\n\nitem 元素需要解决的问题集中于自身上，包括自身在 container 中的顺序、缩放、对齐方式。使用以下属性可以设置 item 自身的布局样式：\n\n- order：决定 item 的顺序，默认值为 0，值越小越靠前\n- flex：flex-grow、flex-shrink 和 flex-basis 的缩写\n- flex-grow：决定 item 的放大比例，默认值为 0，0 表示不放大\n- flex-shrink：决定 item 的缩小比例，默认值为 1，0 表示不缩小\n- flex-basis：浏览器分配 container 剩余空间时，决定 item 获得的比重\n- align-self: 决定自身在垂直方向的对齐方式\n\n![flex-item](/img/flexbox-cell.png)\n\n## box-sizing\n\n话外提一下 `box-sizing`， 该属性用于声明 `width` 和 `height` 的约束范围：`border-box` 表示边框、内边距和内容块的宽高计入容器宽高；`content-box` 表示只有内容块的宽高计入容器宽高。此外，该属性可继承，可以通过设置 body 的 box-sizing 统一约束容器的宽高。\n\n## FlexFroggy\n\n这是一个寓教于乐的 Flexbox 布局小游戏，难度中下，很有意思：[http://flexboxfroggy.com](http://flexboxfroggy.com)。","slug":"CSS-Flexbox","published":1,"updated":"2015-12-27T09:32:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarkn0002fsdif8q92my2","content":"<p>如果你正在学习使用 CSS 布局，推荐来 <a href=\"http://zh.learnlayout.com/toc.html\" target=\"_blank\" rel=\"external\">learnlayout</a> 了解一下这些年前端所用到的各类布局手法。这里之所以使用“手法”一词，意指其中多少有些偏激取巧，比如使用浮动（float）来定位、使用 margin 来伸缩空间等等。</p>\n<p>float、margin 本不应该用于布局，只是囿于早期的 CSS 布局模块发展缓慢且不合时宜，促使开发者另辟蹊径，借助其他样式来模拟布局效果。最近几年随着浏览器对布局模块的支持度越来越高，Flexible Box Layout（Flexbox）、Grid Layout、Multiple Column Layout 也逐渐为开发者所接受，其中以 Flexbox 的兼容性最好，拥护者也随之水涨船高。</p>\n<p>就个人感受而言，未来的布局方式会归纳为两类：一类是纯粹使用浏览器兼容性高的布局模块，比如 Flexbox，这也是未来的发展趋势；另一类是使用预处理器或者框架自定义的布局模块，这只是目前的缓兵过渡之计。</p>\n<a id=\"more\"></a>\n<p>在几个月前，我曾经使用过一段时间的 <a href=\"http://susy.oddbird.net/\" target=\"_blank\" rel=\"external\">Susy</a>。 Susy 是基于 Sass 的一款布局框架，其核心是使用非布局样式来模拟布局效果，最大的优点在于封装布局样式之后提供了一套简洁明了的布局接口。比如，在下面的 Sass 代码中，<code>.contianer</code> 被附加了一套容器样式，嵌套在其中的 <code>item</code> 占据总体宽度的 4 / 10。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> container;  </span><br><span class=\"line\">    <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">include</span> span(<span class=\"number\">4</span> of 10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Susy 的理念是帮助开发者规避数学计算，所以它有一条大快人心的口号：YOUR MARKUP, YOUR DESIGN, YOUR OPINIONS, OUR MATH。</p>\n</blockquote>\n<h2 id=\"Flexbox\"><a href=\"#Flexbox\" class=\"headerlink\" title=\"Flexbox\"></a>Flexbox</h2><p>在数学计算的问题上，我觉得 Flexbox 和 Susy 有异曲同工之妙，只是相比起来，原生的 Flexbox 更加简捷。在 Flexbox 中有两个核心元素：<code>container</code> 和 <code>item</code>，所有的样式也是围绕这两类元素计算的。下图中有两条红线，分别代表在水平方向和垂直方向进行布局的基线。</p>\n<p><img src=\"/img/flexbox.png\" alt=\"Flexbox\"></p>\n<p>Flexbox 中的 contianer 元素需要解决两个问题：自身的类型以及内部 item 的排列方式。通过 <code>display: flex</code> 和 <code>display: inline-flex</code> 可以将 container 声明为块级或者行内块级，从而确定了 container 自身的类型。使用以下属性则可以确定 container 内部 item 的排列方式：</p>\n<ul>\n<li>flex-flow：flex-direction 和 flex-wrap 的缩写</li>\n<li>flex-direction：决定 item 的排列方向</li>\n<li>flex-wrap：决定 item 的溢出容器后的处理方式</li>\n<li>justify-content：决定 item 在水平方向上的对齐方式</li>\n<li>align-item：决定 item 在垂直方向上的对齐方式</li>\n<li>align-content：决定多个 main axis 在垂直方向上的对齐方式</li>\n</ul>\n<p><img src=\"/img/flexbox-container.png\" alt=\"flex-container\"></p>\n<p>item 元素需要解决的问题集中于自身上，包括自身在 container 中的顺序、缩放、对齐方式。使用以下属性可以设置 item 自身的布局样式：</p>\n<ul>\n<li>order：决定 item 的顺序，默认值为 0，值越小越靠前</li>\n<li>flex：flex-grow、flex-shrink 和 flex-basis 的缩写</li>\n<li>flex-grow：决定 item 的放大比例，默认值为 0，0 表示不放大</li>\n<li>flex-shrink：决定 item 的缩小比例，默认值为 1，0 表示不缩小</li>\n<li>flex-basis：浏览器分配 container 剩余空间时，决定 item 获得的比重</li>\n<li>align-self: 决定自身在垂直方向的对齐方式</li>\n</ul>\n<p><img src=\"/img/flexbox-cell.png\" alt=\"flex-item\"></p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>话外提一下 <code>box-sizing</code>， 该属性用于声明 <code>width</code> 和 <code>height</code> 的约束范围：<code>border-box</code> 表示边框、内边距和内容块的宽高计入容器宽高；<code>content-box</code> 表示只有内容块的宽高计入容器宽高。此外，该属性可继承，可以通过设置 body 的 box-sizing 统一约束容器的宽高。</p>\n<h2 id=\"FlexFroggy\"><a href=\"#FlexFroggy\" class=\"headerlink\" title=\"FlexFroggy\"></a>FlexFroggy</h2><p>这是一个寓教于乐的 Flexbox 布局小游戏，难度中下，很有意思：<a href=\"http://flexboxfroggy.com\" target=\"_blank\" rel=\"external\">http://flexboxfroggy.com</a>。</p>\n","excerpt":"<p>如果你正在学习使用 CSS 布局，推荐来 <a href=\"http://zh.learnlayout.com/toc.html\">learnlayout</a> 了解一下这些年前端所用到的各类布局手法。这里之所以使用“手法”一词，意指其中多少有些偏激取巧，比如使用浮动（float）来定位、使用 margin 来伸缩空间等等。</p>\n<p>float、margin 本不应该用于布局，只是囿于早期的 CSS 布局模块发展缓慢且不合时宜，促使开发者另辟蹊径，借助其他样式来模拟布局效果。最近几年随着浏览器对布局模块的支持度越来越高，Flexible Box Layout（Flexbox）、Grid Layout、Multiple Column Layout 也逐渐为开发者所接受，其中以 Flexbox 的兼容性最好，拥护者也随之水涨船高。</p>\n<p>就个人感受而言，未来的布局方式会归纳为两类：一类是纯粹使用浏览器兼容性高的布局模块，比如 Flexbox，这也是未来的发展趋势；另一类是使用预处理器或者框架自定义的布局模块，这只是目前的缓兵过渡之计。</p>","more":"<p>在几个月前，我曾经使用过一段时间的 <a href=\"http://susy.oddbird.net/\">Susy</a>。 Susy 是基于 Sass 的一款布局框架，其核心是使用非布局样式来模拟布局效果，最大的优点在于封装布局样式之后提供了一套简洁明了的布局接口。比如，在下面的 Sass 代码中，<code>.contianer</code> 被附加了一套容器样式，嵌套在其中的 <code>item</code> 占据总体宽度的 4 / 10。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> container;  </span><br><span class=\"line\">    <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">include</span> span(<span class=\"number\">4</span> of 10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Susy 的理念是帮助开发者规避数学计算，所以它有一条大快人心的口号：YOUR MARKUP, YOUR DESIGN, YOUR OPINIONS, OUR MATH。</p>\n</blockquote>\n<h2 id=\"Flexbox\"><a href=\"#Flexbox\" class=\"headerlink\" title=\"Flexbox\"></a>Flexbox</h2><p>在数学计算的问题上，我觉得 Flexbox 和 Susy 有异曲同工之妙，只是相比起来，原生的 Flexbox 更加简捷。在 Flexbox 中有两个核心元素：<code>container</code> 和 <code>item</code>，所有的样式也是围绕这两类元素计算的。下图中有两条红线，分别代表在水平方向和垂直方向进行布局的基线。</p>\n<p><img src=\"/img/flexbox.png\" alt=\"Flexbox\"></p>\n<p>Flexbox 中的 contianer 元素需要解决两个问题：自身的类型以及内部 item 的排列方式。通过 <code>display: flex</code> 和 <code>display: inline-flex</code> 可以将 container 声明为块级或者行内块级，从而确定了 container 自身的类型。使用以下属性则可以确定 container 内部 item 的排列方式：</p>\n<ul>\n<li>flex-flow：flex-direction 和 flex-wrap 的缩写</li>\n<li>flex-direction：决定 item 的排列方向</li>\n<li>flex-wrap：决定 item 的溢出容器后的处理方式</li>\n<li>justify-content：决定 item 在水平方向上的对齐方式</li>\n<li>align-item：决定 item 在垂直方向上的对齐方式</li>\n<li>align-content：决定多个 main axis 在垂直方向上的对齐方式</li>\n</ul>\n<p><img src=\"/img/flexbox-container.png\" alt=\"flex-container\"></p>\n<p>item 元素需要解决的问题集中于自身上，包括自身在 container 中的顺序、缩放、对齐方式。使用以下属性可以设置 item 自身的布局样式：</p>\n<ul>\n<li>order：决定 item 的顺序，默认值为 0，值越小越靠前</li>\n<li>flex：flex-grow、flex-shrink 和 flex-basis 的缩写</li>\n<li>flex-grow：决定 item 的放大比例，默认值为 0，0 表示不放大</li>\n<li>flex-shrink：决定 item 的缩小比例，默认值为 1，0 表示不缩小</li>\n<li>flex-basis：浏览器分配 container 剩余空间时，决定 item 获得的比重</li>\n<li>align-self: 决定自身在垂直方向的对齐方式</li>\n</ul>\n<p><img src=\"/img/flexbox-cell.png\" alt=\"flex-item\"></p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>话外提一下 <code>box-sizing</code>， 该属性用于声明 <code>width</code> 和 <code>height</code> 的约束范围：<code>border-box</code> 表示边框、内边距和内容块的宽高计入容器宽高；<code>content-box</code> 表示只有内容块的宽高计入容器宽高。此外，该属性可继承，可以通过设置 body 的 box-sizing 统一约束容器的宽高。</p>\n<h2 id=\"FlexFroggy\"><a href=\"#FlexFroggy\" class=\"headerlink\" title=\"FlexFroggy\"></a>FlexFroggy</h2><p>这是一个寓教于乐的 Flexbox 布局小游戏，难度中下，很有意思：<a href=\"http://flexboxfroggy.com\">http://flexboxfroggy.com</a>。</p>"},{"title":"ES2015","date":"2015-12-15T06:07:10.000Z","_content":"\nES2015 是最新的 JavaScript 语法规范，也是前端工程化高速发展所催化出的产物。JS 的不成熟一直为人诟病，前端的高速发展又离不开 JS，所以这次激进的变革显得十分必要。\n\n虽然 ES2015 规范发布了，但是要原生的运行在浏览器上还是受到诸多因素的肘制，比如各版本浏览器的用户量、浏览器厂商对新特性的支持度等等。目前的权宜之计是使用 Babel 之类的编译器将 ES2015 代码转换为 ES5，所以下文中的 ES2015 代码也暂时以 Babel 的解析结果为准。各版本浏览器对 ES2015（ES6）、ES2016（ES7）的支持度可以参考这里：[ES2015 兼容性列表](http://kangax.github.io/compat-table/es6/)。\n\n<!-- more -->\n\n## 块级作用域和变量声明\n\nES6 新增了以花括号 `{}` 为标志的块级作用域，用以增强代码的稳健性。在 ES6 之前，JS 中只有全局作用域和函数作用域（eval 作用域？我没用过），这种设计有多种弊端，比如最常见的循环变量泄露为全局变量：\n\n```js\nvar a = [];\n\nfor ( var i = 0; i < 3; i++ ) {\n    a[i] = function () {\n        return i;\n    };\n}\n\nconsole.log(a[1]());\n// => 3\n```\n\n虽然循环结束了，但是 i 的值在全局作用域内仍然有效，进而形成了一系列的错误。对于这种错误，最常见的处理方式是使用立即执行函数（Immediately-Invoked Function Expression）：\n\n```js\nvar a = [];\n\nfor ( var i = 0; i < 3; i++ ) {\n    a[i] = (function (i) {\n        return i;\n    })(i);\n}\n\nconsole.log(a[1]);\n// => 1\n```\n\n这里用到的立即执行函数实际上是将[求值策略](http://pinggod.com/2015/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/)从延迟求值转变为了预先求值，但仍然不够优雅和健壮。在 ES2015 中，通过使用 `let` 来声明循环变量同样可以解决这个问题，而且方式更加简洁：\n\n```js\nlet a = [];\n\nfor ( let i = 0; i < 3; i++ ) {\n    a[i] = function () {\n        return i;\n    };\n}\n\nconsole.log(a[1]());\n// => 1\n```\n\n`let` 和 `const` 是 ES2015 新增的变量声明指令：let 用来声明变量，const 用来声明常量。当使用 let 和 const 声明变量时，所声明的变量只在当前的块级作用域内有效，这一点是与 var 的本质差别，也是上述代码生效的基础。对于 var 时代的各种诡异特性，现在 let 和 const 做了一些修改：\n\n- let 和 const 声明的变量不存在变量提升\n- let 和 const 声明的变量不允许在同一作用域内重复声明多次\n- let 和 const 声明的变量必须先声明后使用，否则抛出 ReferenceError\n\n从块级作用域的开始到 let 和 const 变量声明的区域被称为临时死区（temporal dead zone），意指此处调用未声明的 let 和 const 变量一定报错：\n\n```js\nif ( true ) {\n    temp = 'abc';\n    \n    // ...\n    // blablablabla\n    // ...\n\n    // 该行代码之前都属于变量 temp 的 temporal dead zone\n    // 意指在此之前不可使用变量 temp\n    let temp;\n}\n```\n\n<div class=\"tip\">\n    在浏览器环境下，使用 var 声明的全局变量都会挂载在全局对象 window 下面。ES 2015 规定，使用 var 和 function 声明的全局变量仍然挂载在全局对象下面，但是 let、const 和 class 声明的全局变量则不属于全局对象。\n</div>\n\n\n## 解构赋值\n\n解构赋值是 ES2015 提供的一种语法糖操作，常用于简化对数组和对象的数据提取。可以使用解构赋值的数据类型包括：\n\n- 对象\n- 字符串\n- 数值和布尔值（自动转换为对象，然后调用 toString() ）\n- 数组，以及具有 Iterator 结构的数据结构，比如 Set 等\n\n下面我们通过一些实例来看一下解构赋值的使用方式：\n\n```js\n// 1. 交换两个数的值\n[x, y] = [y, x]\n\n// 2. 提取 JSON 数据\nconst JSON = {\n    id: 12345,\n    status: 'OK',\n    data: [123, 456]\n};\n\nconst { id, status, data } = JSON;\n\n// 3. 按需加载模块\nconst { Route, DefaultRoute, HistoryLocation } = ReactRouter; \n\n// 4. 从函数返回多个值\nfunction handleStyle ()  {\n    const font = {};\n    const border = {};\n    const position = {};\n  \n    return { font, border, position };\n}\n\nconst {\n    font: fontStyle,\n    border: borderStyle,\n    position: positionStyle\n} = handleStyle();\n\n```\n\n> 解构赋值可以以 `[x = '0'] = [y]` 的形式设置默认值，当 y 不存在时，x 的值就是 0；如果 y 不存在且没有设置默认值，则会被自动赋值为 undefined。\n\n## 字符串\n\n在 JS 内部，字符以 16 位 2 字节的格式存储，这种表示法的范围限制为 \\u0000-\\uFFFF，对于超出范围的字符（\\u20BB7），会被解析为两个字符四个字节（\\u20BB\\u0007）。ES2015 增强了对 Unicode 的支持，提出了一种新的字符表示方法：\\u{20BB7}。\n\n对于新的字符表示形式 `\\u{codePoint}`，传统的字符串方法已经不适用了，所以 ES2015 提出了一系列新的方法来替代，它们可以正确识别编码大于 \\uFFFF 的字符：\n\n- at()，对应 charAt()，返回指定位置的字符\n- codePointAt()，对应 charCodeAt()，返回指定位置字符的编码\n- String.fromCodePoint()，对应 String.fromCharCode()，返回指定编码所对应的字符\n\n```js\n'\\u20BB7'\n// => '₻7'\n\n'\\u{20BB7}'\n// => '𠮷'\n\n'\\u{20BB7}'.charAt(0)   \n// => '�'\n'\\u{20BB7}'.at(0)       \n// => \"𠮷\"\n\n'\\u{20BB7}'.codePointAt(0).toString(16)\n// => 20BB7\n'\\u{20BB7}'.codePointAt(1).toString(16)\n// => DFB7\n'\\u{20BB7}'.charCodeAt(1).toString(16)\n// => DFB7\n\n'a\\u{20BB7}b'.length\n// => 4\nArray.from('a\\u{20BB7}b').length\n// => 3\n```\n\nES2015 规范中规定字符串实现了 Iterator 接口，用于 for ... of 遍历，此外，增加了一些工具类方法：\n\n```js\nconst str = \"abcdefghi\";\n\n// 判断字符串 str 是否以参数字符串开头\nstr.startsWith('abc');\n// 判断字符串 str 是否包含参数字符串\nstr.includes('def');\n// 判断字符串 str 是否以参数字符串结尾\nstr.endsWith('ghi');\n\n// 生成重复字符串\n'x'.repeat(3);\n// => 'xxx'\n```\n\n字符串的另一个强力扩展是：模板字符串和标签模板。模板字符串（template string）类似于其他编程语言中的字符串插值，以反引号（\\`）为标志，字符串中的插值部分使用 `${}` 包裹：\n\n```js\nconst x = 3;\nconst y = 4;\n\nconsole.log(`${x} + ${y} = ${x + y}`);\n// => '3 + 4 = 7'\n```\n\n如果一个函数的函数名之后紧跟一个模板字符串，那么这个函数就会被用来处理这个模板字符串，这个功能被称为`标签模板（tagged template）`：\n\n```js\n// 第一个参数是一个数组\n// 数组的元素是被插值部分分隔的字符串\n// 第二个及以后的参数代表模板字符串中插值部分的值\n// 可以使用参数扩展语法将其包裹到一个变量中\nfunction tag(strs, ...values) {\n    console.log(strs);\n    console.log(values);\n}\n\nconst x = 3;\nconst y = 4;\n\ntag`${x} + ${y} = ${x + y}`;\n// => [\"\",\" + \",\" = \",\"\"]\n// => [3,4,7]\n```\n\n标签模板的一个实际运用就是过滤 HTML 字符串，提高安全性：\n\n```js\nfunction safeHTML (strs, ...values) {\n    let result = '';\n\n    strs.forEach( (str, index) => {\n        let temp = String(values[index]);\n\n        result += str;\n        if ( temp ) {\n            result += temp.replace(/&/g, '&amp;')\n                          .replace(/</g, '$lt;')\n                          .replace(/>/g, '&gc;');\n        }\n    });\n\n    return result;\n}\n\nconst user = '<html tag>';\nconst msg = safeHTML`<p>${user} has sent you a msg.</p>`;\n// => <p>$lt;html tag&gc; has sent you a msg.</p>undefined\n```\n\n## 数值\n\n数值部分，一个是在 Number 对象上丰富了一些工具函数\n\n- Nubmer.isNaN()\n- Number.isFinite()\n- Number.parseInt()\n- Nubmer.parseFloat()\n- Nnmber.isInteger()\n- Number.EPSILON，极小量常量，在数值比对时，如果小于极小量，则判断两数相等\n- Number.isSafeInteger()，安全范围指（-2^53，2^53）\n- Number.MAX\\_SAFE\\_INTEGER\n- Number.MIN\\_SAFE\\_INTEGER\n\n```js\nNumber.isNaN(NaN);\n// => true\n\nNumber.isFinite(Infinity);\n// => false\n\nNumber.isInteger(1.0);\n// => true\n\nwindow.parseFloat === Number.parseFloat\n// => true\n\nwindow.parseInt === Number.parseInt\n// => true\n\n0.1 + 0.2\n// => 0.30000000000000004\n\n0.1 + 0.2 === 0.3\n// => false\n\n0.1 + 0.2 - 0.3 < Number.EPSILON\n// => true\n```\n\n二是在 Math 对象上扩展了一些数学函数：\n\n- Math.trunc()，去除浮点数的小数部分\n- Math.sign()，判断数值是正数、负数还是零\n- Math.cbrt()，计算一个数值的立方根\n- Math.clz32()，返回一个数值的 32 位无符号整数形式前前导零的个数\n- Math.imul()\n- Math.fround()\n- Math.hypot()\n- Math.expn1()\n- Math.log1p()\n- Math.log10()\n- Math.log2()\n- Math.sinh()\n- Math.cosh()\n- Math.tanh()\n- Math.asinh()\n- Math.acosh()\n- Math.atanh()\n\n```js\nMath.trunc(3.1415926);\n// => 3\n\nMath.cbrt(8);\n// => 2\n\nMath.hypot(3, 4);\n// => 5\n\nMath.log10(100)\n// => 2\n\nMath.log2(16)\n// => 4\n```\n\n## 数组\n\n在函数中，参数对象 arguments 是一个具有 length 属性的对象，这一类对象被称为类数组对象（array-like object），常见的类数组对象包括 arguments 对象和 DOM 操作返回的 NodeList 集合，对于此类类数组对象，我们往往希望可以将其转换为数组，方便调用数组的方法对数据进行处理。在 ES6 中有一个方法专门用于转换类数组对象为真正的数组：\n\n```js\nconst obj = { '0': 'a', length: 2 };\nconst arr = Array.from(obj);\n\nconsole.log(arr);\n// => [ \"a\", undefined ]\n```\n\n从上面的代码可知，对象中的 length 属性确定了转换后数组的长度，索引不匹配的位置返回 undefined，此外 Array.from() 还接受第二个参数，用于对 obj 数据进行 map 处理。此外，对于 ES6 新增的 Set 和 Map 数据结构，也可以使用 Array.from() 转换为数组。\n\n在前面我们遇到了字符串编码大于 \\uFFFF 时，字符长度会被误判的问题，这种情况下可以使用 Array.from() 将字符串转换为数组，获取数组的长度：\n\n```js\n\"𠮷\".length\n// => 2\n\nArray.from(\"𠮷\").length;\n// =>  1\n```\n\n数组的构造函数 Array() 一直存在行为不确定的问题（一个参数表示新建数组长度，多个参数表示新建数组的组成元素），对此 ES6 提出了 Array.of() 方法来构建数组。Array.of() 方法接收任意多个参数，这些参数就是返回数组的元素：\n\n```js\nArray.of(1, 'a', {}, [], Symbol())\n// => [ 1, \"a\", Object, Array[0], Symbol() ]\n```\n\n在众多的数组方法中，有那么一类方法非常值得警惕，这类方法的危险性在于，它们可以修改数组自身的数据，常见方法有：**pop() / push() / shift() / unshift() / reverse() / sort() / splice()**。在 ES6 中也存在两个可以修改数组自身的方法：copyWithin() 和 fill()：\n\n```js\n// copyWithin(arrayStart[, copyStart, copyEnd])\n// arrayStart: 从数组的该位置开始修改数据\n// copyStart: 从数组的该位置开始取数据\n// copyEnd: 从数组的该位置停止取数据\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// => [ 4, 2, 3, 4, 5 ]\n\n// fill(num, start, end) 方法可以用于数据重置\n[1, 2, 3, 4, 5].fill(0, 3, 4);\n// => [ 1, 2, 3, 0, 5 ]\n```\n\n新增的 find() 和 some() 类似，都需要一个回调函数对遍历到的元素进行判断，不同点在于，find() 返回符合条件的第一个值，some() 则是在遇到复合条件的元素时返回 true；另一个新增的 findIndex() 与 indexOf() 类似，用于在数组中查找特定值的索引，不同之处在于 findIndex() 接收一个回调函数，indexOf() 接收的是一个值，此外，findIndex() 配合 Object.is 可以发现 NaN：\n\n```js\n[1, 2, 3, NaN].indexOf(y => Object.is(NaN, y))\n// => -1\n[1, 2, 3, NaN].findIndex(y => Object.is(NaN, y))\n// => 3\n```\n\n此外，我们还可以使用 includes() 方法来判断是否存在：\n\n```js\n[1, 2, NaN].includes(NaN);\n// => true\n```\n\n对于数组的遍历，ES6 提供了更精细的方法 entries() / keys() / values()，分别是对键值对、键和值的遍历：\n\n```js\nfor ( let key of ['a', 'b'].keys() ) {\n    console.log(key);\n}\n// => 0\n// => 1\n\nfor ( let value of ['a', 'b'].values()) {\n    console.log(value);\n}\n// => 'a'\n// => 'b'\n\nfor ( let [key, value] of ['a', 'b'].entries()) {\n    console.log([key, value]);\n}\n// => [ 0, \"a\" ]\n// => [ 1, \"b\" ]\n```\n\n最后，值得一提的是，babel 编译已经支持了数组推导式（ES7），这一推到式在 Haskell 和 python 中都有实现：\n\n```js\nconst years = [ 1954, 1974, 1990, 2006, 2010, 2014 ];\nconst array = [ for ( year of years ) if ( year > 1990 ) if ( year < 2014 ) year ];\nconsole.log(array);\n// => [ 2006, 2010 ]\n```\n\n## 函数\n\n先看一个示例：\n\n```js\nfunction f ( x, y = 2, ...z) {\n    console.log(`x = ${x}`);\n    console.log(`y = ${y}`);\n    console.log(`z = ${z}`);\n}\n\nf(1, undefined, 2, 3, 5, 8, 13);\n// => x = 1\n// => y = 2\n// => z = 2,3,5,8,13\n\nconsoel.log(f.length);\n// => 1\n```\n\n这个示例中聚合了很多 ES6 在函数方面的特性，第一处是 `y = 2`，这种形式定义了函数参数的默认值，所以这里的 y 相当于一个默认值参数；第二处是 `...z`，这里的 z 被称为 rest 参数，用于存放函数中多余的参数，该参数往往可以用来替代 arguments 对象，因为它天生就是数组类型；第三处是传参时的 undefined，如果我们想跳过某个参数，需要显示的将该参数赋值为 undefined，使用 null 的话没有效果；第四处就是 func.length，这里的 length 表示普通参数的数量，如果我们测试 arugments.length，会发现结果为 7，因为这里的 arguments.length 表示的是传入参数的数量；最后一处不是很明显，但是很重要，就是普通参数、默认值参数和 rest 参数的位置顺序。\n\n进一步还可以配合对象解构来传参：\n\n```js\nfunction fetch(url, { body = '', method = 'GET', headers = {} } ) {\n    console.log(method);\n}\n\nfetch('http://meituan.com', {});\n// => 'GET'\n\nfetch('http://meituan.com');\n// => Cannot read property 'body' of undefined\n```\n\n第二个 fetch 的问题在于不能省略第二个参数，如果要省略参数，可以设置双重默认值：\n\n```js\nfunction fetch(url, { body = '', method = 'GET', headers = {} } = {} ) {\n    console.log(method);\n}\n\nfetch('http://meituan.com');\n// => 'GET'\n```\n\nrest 参数 `...rest` 用于将参数打包成数组，通过扩展运算符 `...`，可以执行逆运算，将数组（babel 也支持对类数对象的转换）转换为以分号分隔的参数序列：\n\n```js\nfunction add (...rest) {\n    return [0, ...rest, 21];\n}\n\nadd(1, 1, 2, 3, 5, 8, 13);\n// => [0,1,1,2,3,5,8,13,21]\n\n// 实际运用\n// ES5\nMath.max.apply(null, [1, 5, 3]);\n\n// ES6\nMath.max(...[1, 5, 3]);\n```\n\n接下来是比较亮眼的箭头函数`=>`：\n\n```js\n// ES5\nvar f = function(k, v) {\n    return { k: v };\n}\n\n// ES6\nvar f = (k, v) => ( { k: v } );\n```\n\n看到箭头函数的第一感官就是：简洁。另一个重要的点在于，箭头函数绑定了 this 对象，其特点如下：\n\n1. this 对象的指向是可变，但在箭头函数中，它固定的志向定义时所在的对象，而不是使用时所在的对象\n2. 不可以用于构造函数\n3. 不可以使用 arguments 对象，可以使用 rest 参数代替\n4. 不能用作 Generator 函数，所以不能使用 yield 命令\n\n```js\nfunction foo() {\n    setTimeout( () => {\n        console.log(\"id:\", this.id);\n    },100);\n}\n\nfoo.call( { id: 42 } );\n// id: 42\n```\n\n之所以 this 的指向是固定的，根据 babel 的实现来说，是因为箭头函数内并没有 this 对象，无论箭头函数嵌套多少层，它都是指向定时所在的函数：\n\n```js\nfunction foo() {\n    return () => {\n        return () => {\n            return () => {\n                console.log(\"id:\", this.id);\n            };\n        };\n    };\n}\nfoo.call( { id: 42 } )()()();\n\n// babel 编译结果\n\"use strict\";\nfunction foo() {\n    var _this = this;\n\n    return function () {\n        return function () {\n            return function () {\n                console.log(\"id:\", _this.id);\n            };\n        };\n    };\n}\nfoo.call({ id: 42 })()()();\n```\n\n> ES7 提出了函数绑定的概念，使用双冒号 `::` 来替代 call/apply/bind 的调用，目前 babel 已经支持该特性，双冒号左侧是一个对象，右侧是一个函数，实现以左边对象为上下文对象的右边函数：\n```js\nconst obj = { id: 123 };\nfunction f () {\n    console.log(this.id);\n}\n\nobj::f();\n// => 123\n```\n\n最后，讲讲尾函数调用的优化问题。在函数式编程中，如果某个函数的最后一步是函数调用过程，那么这一过程就成为尾调用：\n\n```js\nfunction f(x){\n    return g(x);\n}\n\n// 下面的函数并不是尾调用\nfunction f(x){\n    g(x);\n}\n\n// 上面示例相当于\nfunction f(x){\n    g(x);\n    return undefined;\n}\n```\n\n函数调用过程是不断入栈出栈的过程，由于尾调用是最后一步操作，所以不需要保存外层函数的调用，这被称为尾调用优化，即只保留内层函数的调用帧，这种优化的好处是如果函数都是尾调用，那么就可以优化到每次尾调用都只保留一层调用，大大节省内存，这就是尾调用优化的意义。\n\n函数调用自身的过程，成为递归，如果尾调用自身，则称为尾递归。下面是一个阶乘函数，没有使用尾递归，最多需要保存 n 个调用记录，复杂度为 O(n)：\n\n```js\nfunction factorial (n) {\n    if ( n === 1 ) return 1;\n    return n * factorial( n - 1 );\n}\n\nfactorial(5);\n// => 120\n\n// 使用尾递归改写，只保留一个调用记录，复杂度 O(1)\n// Babel 检测到尾调用时使用 while 循环执行函数体\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1)\n// => 120\n```\n\n鉴于尾调用优化的在性能上的良好表现，EMCAScript 明确规定，所有 ECMAScript 的实现都应该实现“尾调用优化”。\n\n> 为了确保最后一步调用自身实现尾递归优化，就需要把函数内部用到的变量转换为函数的参数，比如上面的 total，不过这样的处理方式并不容易理解，优化方式有两种，一种是函数柯里化，另一种方式就是使用默认值参数：\n```js\n// 方式一\nfunction currying(fn, n) {\n    return function (m) {\n        return fn.call(this, m, n);\n    };\n}\nfunction tailFactorial(n, total) {\n    if (n === 1) return total;\n    return tailFactorial(n - 1, n * total);\n}\nconst factorial = currying(tailFactorial, 1);\nfactorial(5);\n// => 120\n\n// 方式二\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\nfactorial(5);\n// 120\n```\n\n## 对象\n\nES6 在编码的简洁性上做了很多工作，比如上面的箭头函数，比如下面的对象声明：\n\n```js\nconst foo = 'bar';\nconst obj = { foo };\n// 相当于 obj = { foo: foo };\n\nconst obj = {\n    getSth ( x, y ) {\n        return { x, y };\n        // 相当于 return { x: x, y: y };\n    }\n    // 相当于 getSth: function ( x, y ) {}\n}\n```\n\nES2015 新增了一个 Object.is() 方法来比较两个值是否相等，主要解决两方面的问题：一是 `==` 比较时的数据类型自动转换，一是 `===` 比较时 NaN 不等于自身、`+0` 等于 `-0` 的问题。Object.is() 实现的原则是：只要两个值一样，就应该相等（Same-value equality）。\n\n```js\n+0 === -0\n// => true\nObject.is(+0, -0);\n// => false\n\nNaN === NaN;\n// => false\nObject.is(NaN, NaN);\n// => true\n```\n\n`Object.assign(target, source1, source2)` 用于将 source1/source2... 的属性拷贝到 target 中，遇到同名属性自动覆盖：\n\n```js\nlet target = {};\nconst o1 = { \n    id: 123, \n    meta: { \n        age: 1\n    } \n};\nconst o2 = { \n    meta: {\n        age: 2\n    }\n};\nObject.assign(target, o1, o2);\ntarget\n// => {\"id\":123,\"meta\":{\"age\":2}}\n```\n\n到目前为止，一共有六种方法可以遍历对象的属性：\n\n1. `for...in`，循环遍历对象自身的和集成的可枚举属性（不包含 Symbol 属性）\n1. `object.keys(obj)`，返回一个数组，包括自身所有可枚举属性（不含 Symbol 属性和继承属性）\n1. `Object.getOwnPropertyNames(obj)`，返回一个数组，包含对象自身的所有属性（不含Symbol属性，包括不可枚举属性）\n1. `Object.getOwnPropertySymbols(obj)`，返回一个数组，包含对象自身的所有Symbol属性\n1. `Reflect.ownKeys(obj)`，返回一个数组，包含对象自身的所有属性，包括 Symbol 和不可枚举属性\n1. `Reflect.enumerate(obj)` 返回一个 Iterator 对象，结果与 `for...in` 相同\n\n以上六种遍历方法，都遵守同样的遍历次序：\n\n- 首先遍历所有属性名为数值的属性，按照数字排序。\n- 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n- 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n```js\nReflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n```\n\n`__proto__` 是一个没有正式规范，被浏览器广泛支持的属性，ES6 提供了新的方法来代替对该属性的操作：`Object.setPrototypeOf()` / `Object.getPrototypeOf()` / `Object.create()`。\n\n## Symbol\n\nSymbol 是 ES2015 加入的第七种数据类型，它与 undefined/null/boolean/string/number 都是原始数据类型，Symbol 用来实现一种独一无二的值：\n\n```js\nconst s1 = Symbol('foo');\nconst s2 = Symbol('foo');\n\ntypeof s;\n// => 'symbol'\n\ns1.toString();\n// => 'Symbol(foo)'\n\ns2 === s1;\n// => false\n```\n\nSymbol 独一无二的特性非常适合作为对象的属性名：\n\n```js\nconst s = Symbol('foo');\nconst o = {\n    [s]: 'Hi'\n};\n\no.s\n// => 'undefined'\n\n0[s]\n// => 'hi'\n```\n\n在对使用 Symbol 作为属性名的对象进行遍历时，Symbol 属性不会出现在 for...in、for...of 循环中，也不会出现在 Object.keys()、Object.getOwnPropertyNames() 的返回值中。虽然如此，Symbol 并不是私有属性，可以通过 Object.getOwnPropertySymbols() 来获取指定对象的所有 Symbol 属性名：\n\n```js\nconst s1 = Symbol('foo');\nconst s2 = Symbol('baz');\n\nconst obj = {\n    [s1]: 123,\n    [s2]: 'abc'\n};\n\nconst ss = Object.getOwnPropertySymbols(obj);\n// [ Symbol(foo), Symbol(baz) ]\n```\n\n要获取相同的 Symbol，可以调用系统的 Symbol.for()，该方法接受一个字符串作为参数，它会检测是否存在以该字符串参数名称的 Symbol 值，找到就返回，没有就创建：\n\n```js\nconst s1 = Symbol.for('foo');\nconst s2 = Symbol.for('foo');\n\ns1 === s2;\n// => true\n```\n\n上面示例中用作参数的字符串又被成为 Symbol 的 key，使用 Symbol.keyFor() 可以查看这个 key:\n\n```js\nconst s = Symbol.for('foo');\n\nSymbol.keyFor(s);\n// => 'foo'\n```\n\n## Proxy and Reflect\n\nProxy，顾名思义，用于代替特定对象与外界进行交互的对象，简称代理对象:\n\n```js\nconst obj = {};\nconst p = new Proxy(obj, {\n    get: function (target, key) {\n        console.log(target);\n        console.log(`getting ${key}`);\n    }\n});\n\np.xxx\n// => {}\n// => 'getting xxx'\n```\n\nProxy 的拦截操作概览：\n\n- get()，拦截属性的读取\n- set()，拦截属性的设置\n- has()，拦截 propKey in proxy 操作\n- deleteProperty()，拦截 delete proxy[propKey] 操作\n- enumerate()，拦截 for ( let x in proxy ) 操作\n- ownKeys()\n- getOwnPropertyDescriptor()\n- defineProperty()\n- preventExtensions()\n- getPrototypeOf()\n- isExtensible()\n- setPrototypeOf()\n- apply()\n- construct()\n\n使用 Proxy.revocable() 可以创建一个可撤销拦截的代理对象：\n\n```js\nconst { proxy, revoke } = Proxy.revocable({}, {});\n\nproxy.foo = 1;\nconsole.log(proxy.foo);\n// => 1\n\nrevoke();\nconsole.log(proxy);\n// => undefined\n```\n\nReflect 对象的设计初衷：\n\n1. 将 object 对象上明显属于语言内部的方法（Object.defineProperty）放到 Reflect 对象上\n1. 修改某些 Object 对象的返回结果，使其更可控，比如 Object.defineProperty() 在无法定义属性时会抛出错误，而 Reflect.defineProperty() 则会返回 false\n1. 让 Object 操作统一为函数行为，比如 name in obj 和 delete obj[name]，使用 Reflect.has() 和 Reflect.deleteProperty() 来执行\n1. Reflect 对象的方法和 Proxy 对象的方法一一对应，两者高度统一，方便 Proxy 对象调用对应的 Reflect 方法 —— 不管 Proxy 怎么拦截和修改，总可以在 Reflect 上获取默认行为\n\n```js\n// Object 操作对比 Reflect 操作\ntry {\n    Object.defineProperty(target, prop, attr);\n    // success\n}\ncatch (e) {\n    // failure\n}\n\nif (Reflect.defineProperty(target, prop, attr)) {\n    // success\n}\nelse {\n    // failure\n}\n```\n\n## Set and Map\n\nES2015 提供的 Set 数据结构是数组的一个约束，两者的差别就在于 Set 中没有重复值：\n\n```js\n// Set 的参数必须实现了 iterator 接口\nconst set = new Set([1, 2, '2', 2, 1]);\n\nconsole.log(set);\n// => [ 1, 2, \"2\" ]\n```\n\nSet 实例绑定的方法可以分为两类：数据操作方法和成员遍历方法：\n\n![set methods](/img/es2015-set-methods.png)\n\n```js\nconst set = new Set();\n\nset.add(1);\nset.add(2);\n\nset\n// => [1, 2]\n\nset.has(2);\n// => true\n\nset.delete(2);\n// => true\n\nset.clear();\n\nset\n// => []\n\n// 数组去重\nArray.from(new Set([1, 2, 3, 2, 1]))\n// => [1, 2, 3]\n```\n\n在遍历时，由于 Set 结构没有键名，只有键值，所以 keys() 和 values() 的返回值一致：\n\n```js\nconst set = new Set(['red', 'green', 'blue']);\n\nfor ( let key of set.keys() ) {\n    console.log(key);\n}\n// => red\n// => green\n// => blue\n\nfor ( let value of set.values() ) {\n    console.log(value);\n}\n// => red\n// => green\n// => blue\n\nfor ( let [key, value] of set.entries() ) {\n    console.log([key, value]);\n}\n// => [\"red\",\"red\"]\n// => [\"green\",\"green\"]\n// => [\"blue\",\"blue\"]\n```\n\n下面是一个 Set 结构的实例，用来求取两个 Set 结构的并交差集：\n\n```js\nconst x = new Set([1, 2, 3]);\nconst y = new Set([2, 3, 4]);\n\n// 并集\nconst union = new Set([...x, ...y]);\n\n// 交集\nconst intersection = new Set([...x].filter( x => y.has(x) ));\n\n// 差集\nconst diffset = new Set([...x].filter( x => !y.has(x) ));\n```\n\nWeakSet 结构和 Set 结构相似，也是不重复值的集合，差异在于两个地方：一是 WeakSet 内部的元素只能是对象，二是 WeakSet 内部的对象是弱引用，垃圾回收机制不考虑 WeakSet 中对象的引用计数。\n\n由于 WeakSet 结构的对象是弱引用，随时可能消失，所以没有 size 属性，也无法进行遍历，只具有 Set 结构中的三个操作方法：add() / delete() / has()。\n\nMap 结构是对现有 Object 对象的扩展，Object 中的 key 只能是字符串和 Symbol（ES2015 新增），Map 中的 key 可以是任意数据类型：\n\n```js\nconst map = new Map();\nconst obj = { id: 123 };\n\nmap.set(obj, 'hi');\nmap.get(obj);\n// => 'hi'\n\nmap.has(obj);\n// true\nmap.delete(obj);\nmap.has(obj);\n// false\n\n// key 绑定内存地址\nmap.set({}, 'object');\nmap.get({});\n// => undefined\n```\n\n下面在 Map 初始化的时候传入一个二维数组创建 Map：\n\n```js\nconst map = new Map([\n    [1, 'one'],\n    [2, 'two'],\n    [3, 'three']\n]);\n\nfor ( let key of map.keys() ) {\n    console.log(key);\n}\n// => 1\n// => 2\n// => 3\n\nfor ( let value of map.values() ) {\n    console.log(value);\n}\n// => one\n// => two\n// => three\n\nfor ( let [key, value] of map.entries() ) {\n    console.log([key, value]);\n}\n// => [1,\"one\"]\n// => [2,\"two\"]\n// => [3,\"three\"]\n```\n\nWeakMap 是弱引用的 Map 结构，而且 WeakMap 只能以对象作为键值，不接受其他类型的值作为键名。\n\n## Iterator\n\n现在，JS 中表示集合的数据结构包括 String、Array、Object、Map、Set、WeakMap、WeakSet 七种数据结构。Iterator 提供了一种接口，为各种不同的数据结构提供统一的接口，任何数据结构只要部署了 Iterator 结构，就可以完成遍历操作，目前，String、Array、Map 和 Set 是默认部署了该接口的数据结构，Array-like object 可以通过 Array.from() 转换为 Array 使用该接口。\n\nIterator 的作用主要有三点：\n\n- 为数据结构提供统一的访问接口\n- 使得数据接口的成员可以按照某种次序排列\n- 供 for...of 使用\n\n```js\nconst arr = [1, 2, 3];\nconst it = arr[Symbol.iterator]();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\n凡是数据结构原生部署了 Symbol.iterator 属性，则具备 Iterator 接口，调用该接口，就可以得到一个遍历器对象。遍历器对象调用 next() 方法一次可以得到数据结构的所有成员，next() 返回一个对象，包括 value 和 done 属性。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性上，部署该属性的数据结构都被认为是可遍历的。在某些场合会自动调用遍历器接口：\n\n```js\n// 解构赋值\n[x, y] = [x, y]\n\n// 扩展运算符\n[...'hello']\n// => [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n// 其他\nfor ... of\nArray.from()\nMap() / Set() / WeakMap() / WeakSet()\nPromise.all()\nPromis.race()\n\n// yield*\nfunction* gen () {\n    yield* [1, 2, 3];\n}\n\nconst it = gen();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\n遍历语法的发展：\n\n- for 遍历，语法繁琐\n- forEach()，不能使用 break、continue、return 退出循环\n- for...in，为对象设计，遍历数组时会自动将索引转换为字符串\n- for...of，修复上述问题，可以遍历实现 iterator 接口的数据接口，不支持对普通对象的遍历\n\n```js\nconst arr = ['a', 'b', 'c'];\n\nfor ( let key in arr ) {\n    console.log([key, arr[key]]);\n}\n// => [ \"0\", \"a\" ]\n// => [ \"1\", \"b\" ]\n// => [ \"2\", \"c\" ]\n\nfor ( let [key, value] of arr.entries() ) {\n    console.log([key, value]);\n} \n// => [ 0, \"a\" ]\n// => [ 1, \"b\" ]\n// => [ 2, \"c\" ]\n```\n\n## Generator\n\nGenerator 函数是 ES2015 提供的一种异步编程解决方案。可以将 Generator 视为一个有限状态机，内部封装了多个状态：\n\n```js\nfunction* gen () {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nconst it = gen();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\nGenerator 函数返回的遍历器对象需要调用 next 函数才会遍历到下一个内部状态，并且通过函数内部的 yield 命名挂起函数。遍历器对象 next 方法的运行逻辑：\n\n1. 执行 next 函数，遇到 yield 命令挂起函数的执行，并且返回 yield 命令后表达式的值，作为返回的遍历器对象的 value 属性\n1. 继续执行 next 函数，直到遇到下一个 yield，然后挂起函数\n1. 如果没有再遇到 return，就运行到函数结束。函数结束时如果有 return，返回 return 后面表达式的值作为返回对象的 value 属性\n1. 如果没有 return 表达式，则返回对象的 value 属性为 undefined\n\n![es2015-generator-yield](/img/es2015-generator-yield.png)\n\n```js\nfunction* gen () {\n    const ret = yield 1;\n    yield ret;\n}\n\nconst g = gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next(true)\n// => Object { value: true, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\nGenerator 函数返回的对象都部署了 Iterator 接口 [Symbol.iterator]，所以，我们可以使用 for...of 循环来遍历 Generator 函数，当返回对象的 done 属性为 true 时，循环自动中止：\n\n```js\nfunction* gen() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nfor ( let v of gen() ) {\n    console.log(v);\n}\n// => 1\n// => 2\n// => 3\n```\n\nGenerator 返回的对象附带两个方法：throw() 和 return，用于手动抛出异常和结束 Generator 函数。\n\n如果要在 Generator 函数内调用另外一个 Generator 函数，需要使用 `yield*`，实际上如果 yield 后面跟的是一个遍历器对象，都可以使用 `yield*` 来解析：\n\n```js\nfunction* gen() {\n    yield 1;\n    yield* [2, 3, 4];\n    // 等同于 \n    // yield 2;\n    // yield 3;\n    // yield 4;\n    yield 5;\n}\n\nconst g = gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next()\n// => Object { value: 2, done: false }\ng.next()\n// => Object { value: 3, done: false }\ng.next()\n// => Object { value: 4, done: false }\ng.next()\n// => Object { value: 5, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\n如果对象的某个属性是 Generator 函数，形式上有所不同：\n\n```js\nconst obj = {\n    * gen () {\n        yield 1;\n        yield 2;\n    }\n};\n\nconst g = obj.gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next()\n// => Object { value: 2, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\n前面有数组推导，Generator 函数也有推导，Generator 函数推导的优势在于它是惰性求值：\n\n```js\nfunction* bigArr () {\n    for ( let i = 0; i < 1000000; i++ ) {\n        yield i;\n    }\n}\n\nconst ret = ( for ( n of bigArr() ) if ( n < 10 ) n * n );\n\n[...ret]\n// => [ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81 ]\n```\n\n下面是使用 Generator 函数实现的一个状态机：\n\n```js\nfunction* gen() {\n    while( true ) {\n        yield _;\n        console.log('on');\n\n        yield _;\n        console.log('off');\n    }\n}\n\nconst g = gen();\n\ng.next()\n// on\ng.next()\n// off\ng.next()\n// on\n// ...\n```\n\nJS 解析引擎是单线程，只能保持一个调用栈，为了保持多个任务独立的调用栈，引入了协程。Generator 函数是 ES2015 对协程的实现，但不是完整的实现，完整的协程应该可以通过任何函数实现暂停，但是只有 Generator 函数的调用者才能结束 Generator 函数。\n\n如果将 Generator 函数当做协程，可以将多个需要写作的任务都写成 Generator 函数，使用 yield 命令交换控制权。\n\n## Promise\n\n在 ES2015 之前，Promise 早有实现，ES2015 规范统一了 Promise 的用法。Promise 对象共有三个状态：Pending、Resolved 和 Rejected。Promise 对象的状态只能从 Pending 变为 Resolved 或者从 Pending 变为 Rejected。\n\nPromise 对象存在的价值是将异步操作以同步操作的流程表达出来，避免层层嵌套的回调函数，并且提供了统一的接口，便于控制异步操作。不过，Promise 也存在一些缺点：\n\n- 创建后立即执行，无法中途取消\n- 如果不设置回调函数，无法抛出内部错误\n- 处于 Pending 状态时，无法获得具体状态（刚刚开始还是即将完成）\n\nES2015 规定，Promise 对象是一个构造函数，用于生成 Promise 实例：\n\n```js\nconst p = new Promise( (resolve, reject) => {\n    setTimeout(resolve, 1000, 'done');\n});\n\np.then((value) => {\n    console.log(value);\n});\n// 1000ms 后\n// => 'done'\n```\n\nPromise 实例具有两个方法：then(resolved，rejected) 和 catch()。catch() 相当于是 `.them(null, rejected)` 的缩写，用于指定发生错误时的回调函数。\n\nPromise 对象本身还有四个方法：all()、race()、resolve()、reject()。Promise.all() 方法接收包含多个 Promise 实例的一个数组，打包封装成一个 Promise 实例：\n\n```js\nconst p = new Promise.all([p1, p2, p3]);\n// p 的状态取决于 p1、p2、p3\n// p1、p2、p3 全部 resolved 时，p resolved\n// p1、p2、p3 有一个 rejected，p rejected\n```\n\nPromise.race() 同样打包多个返回一个 Promise 实例：\n\n```js\nconst p = new Promise.race([p1, p2, p3]);\n// 与 Promise.all() 的不同之处在于，\n// p 的状态取决于 p1、p2、p3 中状态最先发生变化的那个\n```\n\nPromise.resolve() 方法用于将现有对象转换为 Promise 对象；Promise.reject() 方法返回一个 Promise 实例，该实例的默认状态就是 rejected。\n\nES2015 的 Promise API 并不是很多，可以根据自己的开发需要部署特定的方法，比如我们可以部署两个比较常用的方法：done() 和 finally()。Promise 实例以 then() 或 catch() 方法作为结尾方法时，如果结尾方法抛出错误，是有可能无法捕捉到的，所以可以实现一个 done 方法置于回调链的结尾，保证抛出的任何方法都能被捕获：\n\n```js\nPromise.prototype.done = function (onFulfilled, onRejected) {\n    this.then(onFulfilled, onRejected)\n        .catch(function (reason) {\n            // 抛出一个全局错误\n            setTimeout(() => { throw reason }, 0);\n        });\n};\n```\n\nfinally() 方法用于指定回调链的最终操作，与 done 方法的区别在于，它接受一个普通的回调函数作为参数：\n\n```js\n// 服务器使用 Promise 处理请求，使用 finally 关掉服务器\nserver.listen(0)\n    .then(function () {})\n    .finally(server.stop);\n\nPromise.prototype.finally = function (callback) {\n    let P = this.constructor;\n    return this.then(\n        value  => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason })\n    );\n};\n```\n\n## Async \n\n我们有回调函数、Promise 以及 Generator 这三种异步编程方式了，为什么在此之外还要提供 Async 函数？因为它们本身还有一些问题：\n\n- 回调函数的最大问题是回调嵌套\n- Promise 解决了回调嵌套的问题，但是被 then 方法包装后的代码存在冗余问题，语义和理解性较差\n- Generator 的代码写起来非常像同步代码，如果去除 yield 命令，简直就是同步代码，但是它失去了 Promise 可以自动执行的特性，所以它的缺点就是需要创建一个自动执行函数（Thunk 函数），或者使用三方模块（co），总之要驱动它自执行。\n\n```js\n// Callback Hell\nfunction foo( finalCallback ) {\n    request.get(url1, function(err1, res1) {\n        if (err1) return finalCallback(err1);\n        \n        request.post(url2, function(err2, res2) {\n            if (err2) return finalCallback(err2);\n            \n            request.put(url3, function(err3, res3) {\n                if (err3) return finalCallback(err3);\n                \n                request.del(url4, function(err4, res4) {\n                    if (err4) return finalCallback(err4);\n                    \n                    finalCallback(null, \"whew all done\");\n                })\n            })\n        })\n    })\n}\n\n// Promise\nfunction foo () {\n    return request.getAsync(url1)\n        .then(function(res1) {\n            return request.postAsync(url2);\n        })\n        .then(function(res2) {\n            return request.putAsync(url3);\n        })\n        .then(function(res3) {\n            return request.delAsync(url4);\n        })\n        .then(function(res4) {\n            return \"whew all done\";\n        });\n}\n\n// Generator\nimport co from 'co';\n\nfunction* foo() {\n    const res1 = yield request.getAsync(url1);\n    const res2 = yield request.getAsync(url2);\n    const res3 = yield request.getAsync(url3);\n    const res4 = yield request.getAsync(url4);\n    return \"whew all done\";\n}\n\nco(gen);\n\n// Async\nasync function foo() {\n    const res1 = await request.getAsync(url1);\n    const res2 = await request.getAsync(url2);\n    const res3 = await request.getAsync(url3);\n    const res4 = await request.getAsync(url4);\n    return \"whew all done\";\n}\n```\n\n编译器的惰性求值往往是将参数放入临时函数中实现的，在求值时调用这个临时函数，这个临时函数叫做 Thunk 函数：\n\n```js\nfunction temp ( v ) {\n    return v * 2;\n}\n\ntemp( x + 5 );\n\n// 等同于\nconst thunk = function () {\n    return x + 5;\n}\n\nfunction temp ( v ) {\n    return thunk() + 5;\n}\n```\n\n在 JS 中，Thunk 函数要做的是将多参数函数转换为单参数函数，且只接受回调函数作为参数：\n\n```js\n// 正常版本的readFile（多参数版本）\nfs.readFile(fileName, callback);\n\n// Thunk版本的readFile（单参数版本）\nvar readFileThunk = Thunk(fileName);\nreadFileThunk(callback);\n\nvar Thunk = function (fileName){\n    return function (callback){\n        return fs.readFile(fileName, callback);\n    };\n};\n```\n\n任何函数，只要参数是回调函数，就能写成 Thunk 函数的形式，下面是一个简单的 Thunk 函数转换器：\n\n```js\nvar Thunk = function(fn){\n    return function (){\n        var args = Array.prototype.slice.call(arguments);\n        return function (callback){\n            args.push(callback);\n            return fn.apply(this, args);\n        }\n    };\n};\n```\n\n之所以要提 Thunk 函数，是因为它可以驱动 Generator 函数自执行：\n\n```js\nfunction run(fn) {\n    var gen = fn();\n    function next(err, data) {\n        var result = gen.next(data);\n        if (result.done) return;\n        result.value(next);\n    }\n    next();\n}\n\nrun(gen);\n```\n\nES7 提供了 Async 函数，它相当于是 Generator 函数的语法糖。下面使用两种函数读取文件：\n\n```js\nconst fs = require('fs');\n\ncosnt readFile = function (fileName){\n    return new Promise(function (resolve, reject){\n        fs.readFile(fileName, function(error, data){\n            if (error) {\n                reject(error);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n};\n\n// Generator 函数\nconst gen = function* (){\n    const f1 = yield readFile('/etc/fstab');\n    const f2 = yield readFile('/etc/shells');\n    console.log(f1.toString());\n    console.log(f2.toString());\n};\n\n// Async\ncosnt asyncReadFile = async function (){\n    cosnt f1 = await readFile('/etc/fstab');\n    cosnt f2 = await readFile('/etc/shells');\n    console.log(f1.toString());\n    console.log(f2.toString());\n};\n```\n\n首先，两者在语法上有所不同，但这不是最重要的，重要的是一下三点：\n\n1. Async 函数内置自动执行器，而 Generator 需要自己写自动执行函数或者使用第三方库，比如 co\n1. 更广的适应性，co 模块约定 yield 后面只能是 Thunk 函数或者是 Promise 对象，而 Async 函数的 await 后面可以使用 Promise 对象或原始值类型（此时等于同步操作）\n1. Async 的返回值是 Promise 对象，这比 Generator 返回的 Iterator 对象要更方便一些，可以使用 then() 来制定下一步的操作逻辑\n\n```js\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value)\n}\n\nasyncPrint('hello world', 50);\n```\n\nawait 命令后面跟着一个 Promise 对象，运行结果可能是 rejected，需要使用 try...catch 来捕获异常：\n\n```js\nasync function foo () {\n    try {\n        await P();\n    }\n    catch (err) {\n        console.log(err);\n    }\n}\n\n// Or\nasync function foo () {\n    await P().catch( err => console.log(err) );\n}\n```\n\n## Class\n\nJS 传统的原型继承等方式和其他语言差异较大，造成了一定的学习难度。ES2015 提供了和其他语言相仿的面向对象语法，引入了 Class 的概念，用作对象的模板：\n\n```js\nclass Point {\n    constructor( x, y ) {\n        this.x = x;\n        this.y = y;\n    }\n\n    getInfo () {\n        console.log(`( ${this.x}, ${this.y} )`);\n    }\n}\n\nconst p = new Point(3, 4);\np.getInfo();\n// => ( 3, 4 )\n```\n\n上例中的 constructor 是构造方法，this 代表实例对象。constructor 方法是类的默认方法，使用 new 命令生成对象实例时，自动调用盖房，如果没有显示定义该方法，就会自动添加一个空的 constructor 方法，constructor 方法默认返回类的实例对象，该返回值完全是可以修改的。\n\nClass 之间使用 extends 关键字实现继承，这种写法比 ES5 要简洁很多：\n\n```js\nclass Point {\n    constructor( x, y ) {\n        this.x = x;\n        this.y = y;\n    }\n\n    getInfo () {\n        return `( ${this.x}, ${this.y} )`;\n    }\n}\n\nclass ColorPoint extends Point {\n    constructor ( x, y, color ) {\n        super(x, y);\n        this.color = color;\n    }\n\n    getInfo () {\n        console.log( super.getInfo() + ` is ${this.color}` );\n    }\n}\n\nconst cp = new ColorPoint( 3, 4, 'red' );\ncp.getInfo();\n// => ( 3, 4 ) is red\n```\n\n在继承类的构造函数中出现了 super()，它指代父类的 this 对象。子类必须在 constructor 中调用 super 方法，否则新建实例会报错，这是因为子类没有自己的 this 对象，而是使用继承自父类的 this 对象，一切都是基于对这个 this 的加工处理，如果不调用 super()，就得不到 this 对象。\n\n```js\nclass Point {}\nclass ColorPoint extends Point {\n    constructor() {\n      console.log(this);\n    }\n}\n\nconst cp = new ColorPoint();\n// => Babel: 'this' is not allowed before super()\n// => Firefox: ReferenceError: |this| used uninitialized in ColorPoint class constructor\n```\n\n> ES5 的原型继承，实质是先创造子类的实例对象 this，然后再讲父类的方法添加到 this 上。ES6 的继承机制则是相反的，实质是先创造父类的实例对象 this（调用 super() ），然后在用子类的构造函数修改 this。\n\n类相当于实例的原型，类中定义的方法都会被实例所继承，如果不想让实例继承继承某个方法，可以通过 static 关键字设置类的静态方法：\n\n```js\nclass Foo {\n    static getInfo () {\n        console.log('foo');\n    }\n}\n\nconst f = new Foo();\n\nFoo.getInfo();\n// => 'foo'\nf.getInfo();\n// => TypeError: f.getInfo is not a function\n```\n\nES2015 规定类内部只有静态方法，没有静态属性，ES2016 有一个静态属性的提案，目前 Babel 已经支持：\n\n\n```js\nclass Point {\n    position = [1, 2];\n\n    static color = 'red';\n}\n```\n\nnew 是从类生成实例的命令，ES2015 的 new 命令增加了一个 `new.target` 的属性，表示 new 引用的构造函数：\n\n```js\nclass Point {\n    constructor () {\n        if ( new.target === Point ) {\n            console.log('right');\n        }\n        else {\n            console.log('wrong');\n        }        \n    }\n}\n\nconst p = new Point();\n// => right\nPoint.call(p, 123);\n// => Babel: wrong\n// => Firefox: TypeError: class constructors must be invoked with |new|\n```\n\n在子类继承父类时，new.target 返回的是子类，利用这个特点，可以写出不能独立使用、必须继承后才能使用的类：\n\n```js\nclass Shape {\n    constructor() {\n        if (new.target === Shape) {\n            throw new Error('本类不能实例化');\n        }\n    }\n}\n\nconst s = new Shape();\n// => Error: 本类不能实例化 \n```\n\n## Decorator\n\nES2016 的 Decorator 相当于设计模式中的装饰模式，所以下文就以装饰器来指代 Decorator。与上面提到的 Proxy（代理者，代理模式）不同，装饰器的核心作用是增强被装饰者的功能，而代理对象的作用是管理外界对被代理者的访问权限。装饰器只能用于类和类的方法，不能用于函数，因为编译时存在函数提升。修饰漆对类的行为的改变，是代码编译时发生的，而不是运行时，这意味着，修饰漆能在编译阶段运行代码：\n\n```js\nfunction mixins(...list) {\n    return function (target, name, descriptor) {\n        Object.assign(target.prototype, ...list);\n    }\n}\n\nconst Foo = {\n    foo () {\n        console.log('foo');\n    }\n}\n\n@mixins(Foo)\nclass CLS {}\n\nconst obj = new CLS();\nobj.foo();\n// 'foo'\n```\n\n装饰器函数可以接收三个参数：目标函数、属性名和属性的描述对象。上例代码通过装饰器 mixins，为指定类添加了指定的方法。装饰器的一个实际应用就是注释:\n\n```js\nimport { readonly } from 'core-decorators';\n\nclass Meal extends {\n    @readonly\n    entree = 'steak';\n}\n\nconst dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n```\n\n除了注释功能，装饰器还能用作类型检查，长期来看，它将成为 JavaScript 代码静态分析的重要工具。\n\n## Module\n\n在 ES2015 之前，社区中主要有 CommonJS 和 AMD 两种模块加载方式，ES2015 提出了自己的模块功能，其设计思想是尽量的静态化，在编译时确定模块的依赖关系、输入输出变量。\n\nES2015 module 主要由两个命令组成：`export` 和 `import`。export 用于提供对外接口，import 用于引用外部模块。每个模块都是独立的文件，外部无法直接获取模块文件的变量，只能通过 export 对外输出变量。\n\n```js\n// 输出变量\nconst foo = 'foo';\nconst bar = 'bar';\nexport { foo, bar };\n\n// 输出函数和类\nexport function f() {}\nexport class C {}\n```\n\nexport 定义了外部接口之后，可以使用 import 命令在其他模块中加载：\n\n```js\n// 使用 as 命令重命名引入的变量\n// import 语法存在变量提升，最好置于文件顶部\nimport { foo, bar as baz } from './modulename';\n```\n\n从上面 import 的示例中，我们发现当需要引入外部模块时，必须明确知道模块内部的变量名，这是非常不友好的方式。`export default` 命令就是为了解决这个问题存在的，其作用是为模块指定默认的输出内容：\n\n```js\n// 'export-default.js'\nexport default function () {}\n\n// 'import-default.js'\nimmport customName from './export-default.js';\n```\n\n## 建议使用的特性\n\n\n\n\n###### 参考资料\n\n- [ECMAScript6 入门](http://es6.ruanyifeng.com/)\n- [MDN JavaScript](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n\n","source":"_posts/ES2015.md","raw":"title: ES2015\ndate: 2015-12-15 14:07:10\n---\n\nES2015 是最新的 JavaScript 语法规范，也是前端工程化高速发展所催化出的产物。JS 的不成熟一直为人诟病，前端的高速发展又离不开 JS，所以这次激进的变革显得十分必要。\n\n虽然 ES2015 规范发布了，但是要原生的运行在浏览器上还是受到诸多因素的肘制，比如各版本浏览器的用户量、浏览器厂商对新特性的支持度等等。目前的权宜之计是使用 Babel 之类的编译器将 ES2015 代码转换为 ES5，所以下文中的 ES2015 代码也暂时以 Babel 的解析结果为准。各版本浏览器对 ES2015（ES6）、ES2016（ES7）的支持度可以参考这里：[ES2015 兼容性列表](http://kangax.github.io/compat-table/es6/)。\n\n<!-- more -->\n\n## 块级作用域和变量声明\n\nES6 新增了以花括号 `{}` 为标志的块级作用域，用以增强代码的稳健性。在 ES6 之前，JS 中只有全局作用域和函数作用域（eval 作用域？我没用过），这种设计有多种弊端，比如最常见的循环变量泄露为全局变量：\n\n```js\nvar a = [];\n\nfor ( var i = 0; i < 3; i++ ) {\n    a[i] = function () {\n        return i;\n    };\n}\n\nconsole.log(a[1]());\n// => 3\n```\n\n虽然循环结束了，但是 i 的值在全局作用域内仍然有效，进而形成了一系列的错误。对于这种错误，最常见的处理方式是使用立即执行函数（Immediately-Invoked Function Expression）：\n\n```js\nvar a = [];\n\nfor ( var i = 0; i < 3; i++ ) {\n    a[i] = (function (i) {\n        return i;\n    })(i);\n}\n\nconsole.log(a[1]);\n// => 1\n```\n\n这里用到的立即执行函数实际上是将[求值策略](http://pinggod.com/2015/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/)从延迟求值转变为了预先求值，但仍然不够优雅和健壮。在 ES2015 中，通过使用 `let` 来声明循环变量同样可以解决这个问题，而且方式更加简洁：\n\n```js\nlet a = [];\n\nfor ( let i = 0; i < 3; i++ ) {\n    a[i] = function () {\n        return i;\n    };\n}\n\nconsole.log(a[1]());\n// => 1\n```\n\n`let` 和 `const` 是 ES2015 新增的变量声明指令：let 用来声明变量，const 用来声明常量。当使用 let 和 const 声明变量时，所声明的变量只在当前的块级作用域内有效，这一点是与 var 的本质差别，也是上述代码生效的基础。对于 var 时代的各种诡异特性，现在 let 和 const 做了一些修改：\n\n- let 和 const 声明的变量不存在变量提升\n- let 和 const 声明的变量不允许在同一作用域内重复声明多次\n- let 和 const 声明的变量必须先声明后使用，否则抛出 ReferenceError\n\n从块级作用域的开始到 let 和 const 变量声明的区域被称为临时死区（temporal dead zone），意指此处调用未声明的 let 和 const 变量一定报错：\n\n```js\nif ( true ) {\n    temp = 'abc';\n    \n    // ...\n    // blablablabla\n    // ...\n\n    // 该行代码之前都属于变量 temp 的 temporal dead zone\n    // 意指在此之前不可使用变量 temp\n    let temp;\n}\n```\n\n<div class=\"tip\">\n    在浏览器环境下，使用 var 声明的全局变量都会挂载在全局对象 window 下面。ES 2015 规定，使用 var 和 function 声明的全局变量仍然挂载在全局对象下面，但是 let、const 和 class 声明的全局变量则不属于全局对象。\n</div>\n\n\n## 解构赋值\n\n解构赋值是 ES2015 提供的一种语法糖操作，常用于简化对数组和对象的数据提取。可以使用解构赋值的数据类型包括：\n\n- 对象\n- 字符串\n- 数值和布尔值（自动转换为对象，然后调用 toString() ）\n- 数组，以及具有 Iterator 结构的数据结构，比如 Set 等\n\n下面我们通过一些实例来看一下解构赋值的使用方式：\n\n```js\n// 1. 交换两个数的值\n[x, y] = [y, x]\n\n// 2. 提取 JSON 数据\nconst JSON = {\n    id: 12345,\n    status: 'OK',\n    data: [123, 456]\n};\n\nconst { id, status, data } = JSON;\n\n// 3. 按需加载模块\nconst { Route, DefaultRoute, HistoryLocation } = ReactRouter; \n\n// 4. 从函数返回多个值\nfunction handleStyle ()  {\n    const font = {};\n    const border = {};\n    const position = {};\n  \n    return { font, border, position };\n}\n\nconst {\n    font: fontStyle,\n    border: borderStyle,\n    position: positionStyle\n} = handleStyle();\n\n```\n\n> 解构赋值可以以 `[x = '0'] = [y]` 的形式设置默认值，当 y 不存在时，x 的值就是 0；如果 y 不存在且没有设置默认值，则会被自动赋值为 undefined。\n\n## 字符串\n\n在 JS 内部，字符以 16 位 2 字节的格式存储，这种表示法的范围限制为 \\u0000-\\uFFFF，对于超出范围的字符（\\u20BB7），会被解析为两个字符四个字节（\\u20BB\\u0007）。ES2015 增强了对 Unicode 的支持，提出了一种新的字符表示方法：\\u{20BB7}。\n\n对于新的字符表示形式 `\\u{codePoint}`，传统的字符串方法已经不适用了，所以 ES2015 提出了一系列新的方法来替代，它们可以正确识别编码大于 \\uFFFF 的字符：\n\n- at()，对应 charAt()，返回指定位置的字符\n- codePointAt()，对应 charCodeAt()，返回指定位置字符的编码\n- String.fromCodePoint()，对应 String.fromCharCode()，返回指定编码所对应的字符\n\n```js\n'\\u20BB7'\n// => '₻7'\n\n'\\u{20BB7}'\n// => '𠮷'\n\n'\\u{20BB7}'.charAt(0)   \n// => '�'\n'\\u{20BB7}'.at(0)       \n// => \"𠮷\"\n\n'\\u{20BB7}'.codePointAt(0).toString(16)\n// => 20BB7\n'\\u{20BB7}'.codePointAt(1).toString(16)\n// => DFB7\n'\\u{20BB7}'.charCodeAt(1).toString(16)\n// => DFB7\n\n'a\\u{20BB7}b'.length\n// => 4\nArray.from('a\\u{20BB7}b').length\n// => 3\n```\n\nES2015 规范中规定字符串实现了 Iterator 接口，用于 for ... of 遍历，此外，增加了一些工具类方法：\n\n```js\nconst str = \"abcdefghi\";\n\n// 判断字符串 str 是否以参数字符串开头\nstr.startsWith('abc');\n// 判断字符串 str 是否包含参数字符串\nstr.includes('def');\n// 判断字符串 str 是否以参数字符串结尾\nstr.endsWith('ghi');\n\n// 生成重复字符串\n'x'.repeat(3);\n// => 'xxx'\n```\n\n字符串的另一个强力扩展是：模板字符串和标签模板。模板字符串（template string）类似于其他编程语言中的字符串插值，以反引号（\\`）为标志，字符串中的插值部分使用 `${}` 包裹：\n\n```js\nconst x = 3;\nconst y = 4;\n\nconsole.log(`${x} + ${y} = ${x + y}`);\n// => '3 + 4 = 7'\n```\n\n如果一个函数的函数名之后紧跟一个模板字符串，那么这个函数就会被用来处理这个模板字符串，这个功能被称为`标签模板（tagged template）`：\n\n```js\n// 第一个参数是一个数组\n// 数组的元素是被插值部分分隔的字符串\n// 第二个及以后的参数代表模板字符串中插值部分的值\n// 可以使用参数扩展语法将其包裹到一个变量中\nfunction tag(strs, ...values) {\n    console.log(strs);\n    console.log(values);\n}\n\nconst x = 3;\nconst y = 4;\n\ntag`${x} + ${y} = ${x + y}`;\n// => [\"\",\" + \",\" = \",\"\"]\n// => [3,4,7]\n```\n\n标签模板的一个实际运用就是过滤 HTML 字符串，提高安全性：\n\n```js\nfunction safeHTML (strs, ...values) {\n    let result = '';\n\n    strs.forEach( (str, index) => {\n        let temp = String(values[index]);\n\n        result += str;\n        if ( temp ) {\n            result += temp.replace(/&/g, '&amp;')\n                          .replace(/</g, '$lt;')\n                          .replace(/>/g, '&gc;');\n        }\n    });\n\n    return result;\n}\n\nconst user = '<html tag>';\nconst msg = safeHTML`<p>${user} has sent you a msg.</p>`;\n// => <p>$lt;html tag&gc; has sent you a msg.</p>undefined\n```\n\n## 数值\n\n数值部分，一个是在 Number 对象上丰富了一些工具函数\n\n- Nubmer.isNaN()\n- Number.isFinite()\n- Number.parseInt()\n- Nubmer.parseFloat()\n- Nnmber.isInteger()\n- Number.EPSILON，极小量常量，在数值比对时，如果小于极小量，则判断两数相等\n- Number.isSafeInteger()，安全范围指（-2^53，2^53）\n- Number.MAX\\_SAFE\\_INTEGER\n- Number.MIN\\_SAFE\\_INTEGER\n\n```js\nNumber.isNaN(NaN);\n// => true\n\nNumber.isFinite(Infinity);\n// => false\n\nNumber.isInteger(1.0);\n// => true\n\nwindow.parseFloat === Number.parseFloat\n// => true\n\nwindow.parseInt === Number.parseInt\n// => true\n\n0.1 + 0.2\n// => 0.30000000000000004\n\n0.1 + 0.2 === 0.3\n// => false\n\n0.1 + 0.2 - 0.3 < Number.EPSILON\n// => true\n```\n\n二是在 Math 对象上扩展了一些数学函数：\n\n- Math.trunc()，去除浮点数的小数部分\n- Math.sign()，判断数值是正数、负数还是零\n- Math.cbrt()，计算一个数值的立方根\n- Math.clz32()，返回一个数值的 32 位无符号整数形式前前导零的个数\n- Math.imul()\n- Math.fround()\n- Math.hypot()\n- Math.expn1()\n- Math.log1p()\n- Math.log10()\n- Math.log2()\n- Math.sinh()\n- Math.cosh()\n- Math.tanh()\n- Math.asinh()\n- Math.acosh()\n- Math.atanh()\n\n```js\nMath.trunc(3.1415926);\n// => 3\n\nMath.cbrt(8);\n// => 2\n\nMath.hypot(3, 4);\n// => 5\n\nMath.log10(100)\n// => 2\n\nMath.log2(16)\n// => 4\n```\n\n## 数组\n\n在函数中，参数对象 arguments 是一个具有 length 属性的对象，这一类对象被称为类数组对象（array-like object），常见的类数组对象包括 arguments 对象和 DOM 操作返回的 NodeList 集合，对于此类类数组对象，我们往往希望可以将其转换为数组，方便调用数组的方法对数据进行处理。在 ES6 中有一个方法专门用于转换类数组对象为真正的数组：\n\n```js\nconst obj = { '0': 'a', length: 2 };\nconst arr = Array.from(obj);\n\nconsole.log(arr);\n// => [ \"a\", undefined ]\n```\n\n从上面的代码可知，对象中的 length 属性确定了转换后数组的长度，索引不匹配的位置返回 undefined，此外 Array.from() 还接受第二个参数，用于对 obj 数据进行 map 处理。此外，对于 ES6 新增的 Set 和 Map 数据结构，也可以使用 Array.from() 转换为数组。\n\n在前面我们遇到了字符串编码大于 \\uFFFF 时，字符长度会被误判的问题，这种情况下可以使用 Array.from() 将字符串转换为数组，获取数组的长度：\n\n```js\n\"𠮷\".length\n// => 2\n\nArray.from(\"𠮷\").length;\n// =>  1\n```\n\n数组的构造函数 Array() 一直存在行为不确定的问题（一个参数表示新建数组长度，多个参数表示新建数组的组成元素），对此 ES6 提出了 Array.of() 方法来构建数组。Array.of() 方法接收任意多个参数，这些参数就是返回数组的元素：\n\n```js\nArray.of(1, 'a', {}, [], Symbol())\n// => [ 1, \"a\", Object, Array[0], Symbol() ]\n```\n\n在众多的数组方法中，有那么一类方法非常值得警惕，这类方法的危险性在于，它们可以修改数组自身的数据，常见方法有：**pop() / push() / shift() / unshift() / reverse() / sort() / splice()**。在 ES6 中也存在两个可以修改数组自身的方法：copyWithin() 和 fill()：\n\n```js\n// copyWithin(arrayStart[, copyStart, copyEnd])\n// arrayStart: 从数组的该位置开始修改数据\n// copyStart: 从数组的该位置开始取数据\n// copyEnd: 从数组的该位置停止取数据\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// => [ 4, 2, 3, 4, 5 ]\n\n// fill(num, start, end) 方法可以用于数据重置\n[1, 2, 3, 4, 5].fill(0, 3, 4);\n// => [ 1, 2, 3, 0, 5 ]\n```\n\n新增的 find() 和 some() 类似，都需要一个回调函数对遍历到的元素进行判断，不同点在于，find() 返回符合条件的第一个值，some() 则是在遇到复合条件的元素时返回 true；另一个新增的 findIndex() 与 indexOf() 类似，用于在数组中查找特定值的索引，不同之处在于 findIndex() 接收一个回调函数，indexOf() 接收的是一个值，此外，findIndex() 配合 Object.is 可以发现 NaN：\n\n```js\n[1, 2, 3, NaN].indexOf(y => Object.is(NaN, y))\n// => -1\n[1, 2, 3, NaN].findIndex(y => Object.is(NaN, y))\n// => 3\n```\n\n此外，我们还可以使用 includes() 方法来判断是否存在：\n\n```js\n[1, 2, NaN].includes(NaN);\n// => true\n```\n\n对于数组的遍历，ES6 提供了更精细的方法 entries() / keys() / values()，分别是对键值对、键和值的遍历：\n\n```js\nfor ( let key of ['a', 'b'].keys() ) {\n    console.log(key);\n}\n// => 0\n// => 1\n\nfor ( let value of ['a', 'b'].values()) {\n    console.log(value);\n}\n// => 'a'\n// => 'b'\n\nfor ( let [key, value] of ['a', 'b'].entries()) {\n    console.log([key, value]);\n}\n// => [ 0, \"a\" ]\n// => [ 1, \"b\" ]\n```\n\n最后，值得一提的是，babel 编译已经支持了数组推导式（ES7），这一推到式在 Haskell 和 python 中都有实现：\n\n```js\nconst years = [ 1954, 1974, 1990, 2006, 2010, 2014 ];\nconst array = [ for ( year of years ) if ( year > 1990 ) if ( year < 2014 ) year ];\nconsole.log(array);\n// => [ 2006, 2010 ]\n```\n\n## 函数\n\n先看一个示例：\n\n```js\nfunction f ( x, y = 2, ...z) {\n    console.log(`x = ${x}`);\n    console.log(`y = ${y}`);\n    console.log(`z = ${z}`);\n}\n\nf(1, undefined, 2, 3, 5, 8, 13);\n// => x = 1\n// => y = 2\n// => z = 2,3,5,8,13\n\nconsoel.log(f.length);\n// => 1\n```\n\n这个示例中聚合了很多 ES6 在函数方面的特性，第一处是 `y = 2`，这种形式定义了函数参数的默认值，所以这里的 y 相当于一个默认值参数；第二处是 `...z`，这里的 z 被称为 rest 参数，用于存放函数中多余的参数，该参数往往可以用来替代 arguments 对象，因为它天生就是数组类型；第三处是传参时的 undefined，如果我们想跳过某个参数，需要显示的将该参数赋值为 undefined，使用 null 的话没有效果；第四处就是 func.length，这里的 length 表示普通参数的数量，如果我们测试 arugments.length，会发现结果为 7，因为这里的 arguments.length 表示的是传入参数的数量；最后一处不是很明显，但是很重要，就是普通参数、默认值参数和 rest 参数的位置顺序。\n\n进一步还可以配合对象解构来传参：\n\n```js\nfunction fetch(url, { body = '', method = 'GET', headers = {} } ) {\n    console.log(method);\n}\n\nfetch('http://meituan.com', {});\n// => 'GET'\n\nfetch('http://meituan.com');\n// => Cannot read property 'body' of undefined\n```\n\n第二个 fetch 的问题在于不能省略第二个参数，如果要省略参数，可以设置双重默认值：\n\n```js\nfunction fetch(url, { body = '', method = 'GET', headers = {} } = {} ) {\n    console.log(method);\n}\n\nfetch('http://meituan.com');\n// => 'GET'\n```\n\nrest 参数 `...rest` 用于将参数打包成数组，通过扩展运算符 `...`，可以执行逆运算，将数组（babel 也支持对类数对象的转换）转换为以分号分隔的参数序列：\n\n```js\nfunction add (...rest) {\n    return [0, ...rest, 21];\n}\n\nadd(1, 1, 2, 3, 5, 8, 13);\n// => [0,1,1,2,3,5,8,13,21]\n\n// 实际运用\n// ES5\nMath.max.apply(null, [1, 5, 3]);\n\n// ES6\nMath.max(...[1, 5, 3]);\n```\n\n接下来是比较亮眼的箭头函数`=>`：\n\n```js\n// ES5\nvar f = function(k, v) {\n    return { k: v };\n}\n\n// ES6\nvar f = (k, v) => ( { k: v } );\n```\n\n看到箭头函数的第一感官就是：简洁。另一个重要的点在于，箭头函数绑定了 this 对象，其特点如下：\n\n1. this 对象的指向是可变，但在箭头函数中，它固定的志向定义时所在的对象，而不是使用时所在的对象\n2. 不可以用于构造函数\n3. 不可以使用 arguments 对象，可以使用 rest 参数代替\n4. 不能用作 Generator 函数，所以不能使用 yield 命令\n\n```js\nfunction foo() {\n    setTimeout( () => {\n        console.log(\"id:\", this.id);\n    },100);\n}\n\nfoo.call( { id: 42 } );\n// id: 42\n```\n\n之所以 this 的指向是固定的，根据 babel 的实现来说，是因为箭头函数内并没有 this 对象，无论箭头函数嵌套多少层，它都是指向定时所在的函数：\n\n```js\nfunction foo() {\n    return () => {\n        return () => {\n            return () => {\n                console.log(\"id:\", this.id);\n            };\n        };\n    };\n}\nfoo.call( { id: 42 } )()()();\n\n// babel 编译结果\n\"use strict\";\nfunction foo() {\n    var _this = this;\n\n    return function () {\n        return function () {\n            return function () {\n                console.log(\"id:\", _this.id);\n            };\n        };\n    };\n}\nfoo.call({ id: 42 })()()();\n```\n\n> ES7 提出了函数绑定的概念，使用双冒号 `::` 来替代 call/apply/bind 的调用，目前 babel 已经支持该特性，双冒号左侧是一个对象，右侧是一个函数，实现以左边对象为上下文对象的右边函数：\n```js\nconst obj = { id: 123 };\nfunction f () {\n    console.log(this.id);\n}\n\nobj::f();\n// => 123\n```\n\n最后，讲讲尾函数调用的优化问题。在函数式编程中，如果某个函数的最后一步是函数调用过程，那么这一过程就成为尾调用：\n\n```js\nfunction f(x){\n    return g(x);\n}\n\n// 下面的函数并不是尾调用\nfunction f(x){\n    g(x);\n}\n\n// 上面示例相当于\nfunction f(x){\n    g(x);\n    return undefined;\n}\n```\n\n函数调用过程是不断入栈出栈的过程，由于尾调用是最后一步操作，所以不需要保存外层函数的调用，这被称为尾调用优化，即只保留内层函数的调用帧，这种优化的好处是如果函数都是尾调用，那么就可以优化到每次尾调用都只保留一层调用，大大节省内存，这就是尾调用优化的意义。\n\n函数调用自身的过程，成为递归，如果尾调用自身，则称为尾递归。下面是一个阶乘函数，没有使用尾递归，最多需要保存 n 个调用记录，复杂度为 O(n)：\n\n```js\nfunction factorial (n) {\n    if ( n === 1 ) return 1;\n    return n * factorial( n - 1 );\n}\n\nfactorial(5);\n// => 120\n\n// 使用尾递归改写，只保留一个调用记录，复杂度 O(1)\n// Babel 检测到尾调用时使用 while 循环执行函数体\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1)\n// => 120\n```\n\n鉴于尾调用优化的在性能上的良好表现，EMCAScript 明确规定，所有 ECMAScript 的实现都应该实现“尾调用优化”。\n\n> 为了确保最后一步调用自身实现尾递归优化，就需要把函数内部用到的变量转换为函数的参数，比如上面的 total，不过这样的处理方式并不容易理解，优化方式有两种，一种是函数柯里化，另一种方式就是使用默认值参数：\n```js\n// 方式一\nfunction currying(fn, n) {\n    return function (m) {\n        return fn.call(this, m, n);\n    };\n}\nfunction tailFactorial(n, total) {\n    if (n === 1) return total;\n    return tailFactorial(n - 1, n * total);\n}\nconst factorial = currying(tailFactorial, 1);\nfactorial(5);\n// => 120\n\n// 方式二\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\nfactorial(5);\n// 120\n```\n\n## 对象\n\nES6 在编码的简洁性上做了很多工作，比如上面的箭头函数，比如下面的对象声明：\n\n```js\nconst foo = 'bar';\nconst obj = { foo };\n// 相当于 obj = { foo: foo };\n\nconst obj = {\n    getSth ( x, y ) {\n        return { x, y };\n        // 相当于 return { x: x, y: y };\n    }\n    // 相当于 getSth: function ( x, y ) {}\n}\n```\n\nES2015 新增了一个 Object.is() 方法来比较两个值是否相等，主要解决两方面的问题：一是 `==` 比较时的数据类型自动转换，一是 `===` 比较时 NaN 不等于自身、`+0` 等于 `-0` 的问题。Object.is() 实现的原则是：只要两个值一样，就应该相等（Same-value equality）。\n\n```js\n+0 === -0\n// => true\nObject.is(+0, -0);\n// => false\n\nNaN === NaN;\n// => false\nObject.is(NaN, NaN);\n// => true\n```\n\n`Object.assign(target, source1, source2)` 用于将 source1/source2... 的属性拷贝到 target 中，遇到同名属性自动覆盖：\n\n```js\nlet target = {};\nconst o1 = { \n    id: 123, \n    meta: { \n        age: 1\n    } \n};\nconst o2 = { \n    meta: {\n        age: 2\n    }\n};\nObject.assign(target, o1, o2);\ntarget\n// => {\"id\":123,\"meta\":{\"age\":2}}\n```\n\n到目前为止，一共有六种方法可以遍历对象的属性：\n\n1. `for...in`，循环遍历对象自身的和集成的可枚举属性（不包含 Symbol 属性）\n1. `object.keys(obj)`，返回一个数组，包括自身所有可枚举属性（不含 Symbol 属性和继承属性）\n1. `Object.getOwnPropertyNames(obj)`，返回一个数组，包含对象自身的所有属性（不含Symbol属性，包括不可枚举属性）\n1. `Object.getOwnPropertySymbols(obj)`，返回一个数组，包含对象自身的所有Symbol属性\n1. `Reflect.ownKeys(obj)`，返回一个数组，包含对象自身的所有属性，包括 Symbol 和不可枚举属性\n1. `Reflect.enumerate(obj)` 返回一个 Iterator 对象，结果与 `for...in` 相同\n\n以上六种遍历方法，都遵守同样的遍历次序：\n\n- 首先遍历所有属性名为数值的属性，按照数字排序。\n- 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n- 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n```js\nReflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n```\n\n`__proto__` 是一个没有正式规范，被浏览器广泛支持的属性，ES6 提供了新的方法来代替对该属性的操作：`Object.setPrototypeOf()` / `Object.getPrototypeOf()` / `Object.create()`。\n\n## Symbol\n\nSymbol 是 ES2015 加入的第七种数据类型，它与 undefined/null/boolean/string/number 都是原始数据类型，Symbol 用来实现一种独一无二的值：\n\n```js\nconst s1 = Symbol('foo');\nconst s2 = Symbol('foo');\n\ntypeof s;\n// => 'symbol'\n\ns1.toString();\n// => 'Symbol(foo)'\n\ns2 === s1;\n// => false\n```\n\nSymbol 独一无二的特性非常适合作为对象的属性名：\n\n```js\nconst s = Symbol('foo');\nconst o = {\n    [s]: 'Hi'\n};\n\no.s\n// => 'undefined'\n\n0[s]\n// => 'hi'\n```\n\n在对使用 Symbol 作为属性名的对象进行遍历时，Symbol 属性不会出现在 for...in、for...of 循环中，也不会出现在 Object.keys()、Object.getOwnPropertyNames() 的返回值中。虽然如此，Symbol 并不是私有属性，可以通过 Object.getOwnPropertySymbols() 来获取指定对象的所有 Symbol 属性名：\n\n```js\nconst s1 = Symbol('foo');\nconst s2 = Symbol('baz');\n\nconst obj = {\n    [s1]: 123,\n    [s2]: 'abc'\n};\n\nconst ss = Object.getOwnPropertySymbols(obj);\n// [ Symbol(foo), Symbol(baz) ]\n```\n\n要获取相同的 Symbol，可以调用系统的 Symbol.for()，该方法接受一个字符串作为参数，它会检测是否存在以该字符串参数名称的 Symbol 值，找到就返回，没有就创建：\n\n```js\nconst s1 = Symbol.for('foo');\nconst s2 = Symbol.for('foo');\n\ns1 === s2;\n// => true\n```\n\n上面示例中用作参数的字符串又被成为 Symbol 的 key，使用 Symbol.keyFor() 可以查看这个 key:\n\n```js\nconst s = Symbol.for('foo');\n\nSymbol.keyFor(s);\n// => 'foo'\n```\n\n## Proxy and Reflect\n\nProxy，顾名思义，用于代替特定对象与外界进行交互的对象，简称代理对象:\n\n```js\nconst obj = {};\nconst p = new Proxy(obj, {\n    get: function (target, key) {\n        console.log(target);\n        console.log(`getting ${key}`);\n    }\n});\n\np.xxx\n// => {}\n// => 'getting xxx'\n```\n\nProxy 的拦截操作概览：\n\n- get()，拦截属性的读取\n- set()，拦截属性的设置\n- has()，拦截 propKey in proxy 操作\n- deleteProperty()，拦截 delete proxy[propKey] 操作\n- enumerate()，拦截 for ( let x in proxy ) 操作\n- ownKeys()\n- getOwnPropertyDescriptor()\n- defineProperty()\n- preventExtensions()\n- getPrototypeOf()\n- isExtensible()\n- setPrototypeOf()\n- apply()\n- construct()\n\n使用 Proxy.revocable() 可以创建一个可撤销拦截的代理对象：\n\n```js\nconst { proxy, revoke } = Proxy.revocable({}, {});\n\nproxy.foo = 1;\nconsole.log(proxy.foo);\n// => 1\n\nrevoke();\nconsole.log(proxy);\n// => undefined\n```\n\nReflect 对象的设计初衷：\n\n1. 将 object 对象上明显属于语言内部的方法（Object.defineProperty）放到 Reflect 对象上\n1. 修改某些 Object 对象的返回结果，使其更可控，比如 Object.defineProperty() 在无法定义属性时会抛出错误，而 Reflect.defineProperty() 则会返回 false\n1. 让 Object 操作统一为函数行为，比如 name in obj 和 delete obj[name]，使用 Reflect.has() 和 Reflect.deleteProperty() 来执行\n1. Reflect 对象的方法和 Proxy 对象的方法一一对应，两者高度统一，方便 Proxy 对象调用对应的 Reflect 方法 —— 不管 Proxy 怎么拦截和修改，总可以在 Reflect 上获取默认行为\n\n```js\n// Object 操作对比 Reflect 操作\ntry {\n    Object.defineProperty(target, prop, attr);\n    // success\n}\ncatch (e) {\n    // failure\n}\n\nif (Reflect.defineProperty(target, prop, attr)) {\n    // success\n}\nelse {\n    // failure\n}\n```\n\n## Set and Map\n\nES2015 提供的 Set 数据结构是数组的一个约束，两者的差别就在于 Set 中没有重复值：\n\n```js\n// Set 的参数必须实现了 iterator 接口\nconst set = new Set([1, 2, '2', 2, 1]);\n\nconsole.log(set);\n// => [ 1, 2, \"2\" ]\n```\n\nSet 实例绑定的方法可以分为两类：数据操作方法和成员遍历方法：\n\n![set methods](/img/es2015-set-methods.png)\n\n```js\nconst set = new Set();\n\nset.add(1);\nset.add(2);\n\nset\n// => [1, 2]\n\nset.has(2);\n// => true\n\nset.delete(2);\n// => true\n\nset.clear();\n\nset\n// => []\n\n// 数组去重\nArray.from(new Set([1, 2, 3, 2, 1]))\n// => [1, 2, 3]\n```\n\n在遍历时，由于 Set 结构没有键名，只有键值，所以 keys() 和 values() 的返回值一致：\n\n```js\nconst set = new Set(['red', 'green', 'blue']);\n\nfor ( let key of set.keys() ) {\n    console.log(key);\n}\n// => red\n// => green\n// => blue\n\nfor ( let value of set.values() ) {\n    console.log(value);\n}\n// => red\n// => green\n// => blue\n\nfor ( let [key, value] of set.entries() ) {\n    console.log([key, value]);\n}\n// => [\"red\",\"red\"]\n// => [\"green\",\"green\"]\n// => [\"blue\",\"blue\"]\n```\n\n下面是一个 Set 结构的实例，用来求取两个 Set 结构的并交差集：\n\n```js\nconst x = new Set([1, 2, 3]);\nconst y = new Set([2, 3, 4]);\n\n// 并集\nconst union = new Set([...x, ...y]);\n\n// 交集\nconst intersection = new Set([...x].filter( x => y.has(x) ));\n\n// 差集\nconst diffset = new Set([...x].filter( x => !y.has(x) ));\n```\n\nWeakSet 结构和 Set 结构相似，也是不重复值的集合，差异在于两个地方：一是 WeakSet 内部的元素只能是对象，二是 WeakSet 内部的对象是弱引用，垃圾回收机制不考虑 WeakSet 中对象的引用计数。\n\n由于 WeakSet 结构的对象是弱引用，随时可能消失，所以没有 size 属性，也无法进行遍历，只具有 Set 结构中的三个操作方法：add() / delete() / has()。\n\nMap 结构是对现有 Object 对象的扩展，Object 中的 key 只能是字符串和 Symbol（ES2015 新增），Map 中的 key 可以是任意数据类型：\n\n```js\nconst map = new Map();\nconst obj = { id: 123 };\n\nmap.set(obj, 'hi');\nmap.get(obj);\n// => 'hi'\n\nmap.has(obj);\n// true\nmap.delete(obj);\nmap.has(obj);\n// false\n\n// key 绑定内存地址\nmap.set({}, 'object');\nmap.get({});\n// => undefined\n```\n\n下面在 Map 初始化的时候传入一个二维数组创建 Map：\n\n```js\nconst map = new Map([\n    [1, 'one'],\n    [2, 'two'],\n    [3, 'three']\n]);\n\nfor ( let key of map.keys() ) {\n    console.log(key);\n}\n// => 1\n// => 2\n// => 3\n\nfor ( let value of map.values() ) {\n    console.log(value);\n}\n// => one\n// => two\n// => three\n\nfor ( let [key, value] of map.entries() ) {\n    console.log([key, value]);\n}\n// => [1,\"one\"]\n// => [2,\"two\"]\n// => [3,\"three\"]\n```\n\nWeakMap 是弱引用的 Map 结构，而且 WeakMap 只能以对象作为键值，不接受其他类型的值作为键名。\n\n## Iterator\n\n现在，JS 中表示集合的数据结构包括 String、Array、Object、Map、Set、WeakMap、WeakSet 七种数据结构。Iterator 提供了一种接口，为各种不同的数据结构提供统一的接口，任何数据结构只要部署了 Iterator 结构，就可以完成遍历操作，目前，String、Array、Map 和 Set 是默认部署了该接口的数据结构，Array-like object 可以通过 Array.from() 转换为 Array 使用该接口。\n\nIterator 的作用主要有三点：\n\n- 为数据结构提供统一的访问接口\n- 使得数据接口的成员可以按照某种次序排列\n- 供 for...of 使用\n\n```js\nconst arr = [1, 2, 3];\nconst it = arr[Symbol.iterator]();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\n凡是数据结构原生部署了 Symbol.iterator 属性，则具备 Iterator 接口，调用该接口，就可以得到一个遍历器对象。遍历器对象调用 next() 方法一次可以得到数据结构的所有成员，next() 返回一个对象，包括 value 和 done 属性。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性上，部署该属性的数据结构都被认为是可遍历的。在某些场合会自动调用遍历器接口：\n\n```js\n// 解构赋值\n[x, y] = [x, y]\n\n// 扩展运算符\n[...'hello']\n// => [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n// 其他\nfor ... of\nArray.from()\nMap() / Set() / WeakMap() / WeakSet()\nPromise.all()\nPromis.race()\n\n// yield*\nfunction* gen () {\n    yield* [1, 2, 3];\n}\n\nconst it = gen();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\n遍历语法的发展：\n\n- for 遍历，语法繁琐\n- forEach()，不能使用 break、continue、return 退出循环\n- for...in，为对象设计，遍历数组时会自动将索引转换为字符串\n- for...of，修复上述问题，可以遍历实现 iterator 接口的数据接口，不支持对普通对象的遍历\n\n```js\nconst arr = ['a', 'b', 'c'];\n\nfor ( let key in arr ) {\n    console.log([key, arr[key]]);\n}\n// => [ \"0\", \"a\" ]\n// => [ \"1\", \"b\" ]\n// => [ \"2\", \"c\" ]\n\nfor ( let [key, value] of arr.entries() ) {\n    console.log([key, value]);\n} \n// => [ 0, \"a\" ]\n// => [ 1, \"b\" ]\n// => [ 2, \"c\" ]\n```\n\n## Generator\n\nGenerator 函数是 ES2015 提供的一种异步编程解决方案。可以将 Generator 视为一个有限状态机，内部封装了多个状态：\n\n```js\nfunction* gen () {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nconst it = gen();\n\nit.next();\n// => Object { value: 1, done: false }\nit.next()\n// => Object { value: 2, done: false }\nit.next()\n// => Object { value: 3, done: false }\nit.next()\n// => Object { value: undefined, done: true }\n```\n\nGenerator 函数返回的遍历器对象需要调用 next 函数才会遍历到下一个内部状态，并且通过函数内部的 yield 命名挂起函数。遍历器对象 next 方法的运行逻辑：\n\n1. 执行 next 函数，遇到 yield 命令挂起函数的执行，并且返回 yield 命令后表达式的值，作为返回的遍历器对象的 value 属性\n1. 继续执行 next 函数，直到遇到下一个 yield，然后挂起函数\n1. 如果没有再遇到 return，就运行到函数结束。函数结束时如果有 return，返回 return 后面表达式的值作为返回对象的 value 属性\n1. 如果没有 return 表达式，则返回对象的 value 属性为 undefined\n\n![es2015-generator-yield](/img/es2015-generator-yield.png)\n\n```js\nfunction* gen () {\n    const ret = yield 1;\n    yield ret;\n}\n\nconst g = gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next(true)\n// => Object { value: true, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\nGenerator 函数返回的对象都部署了 Iterator 接口 [Symbol.iterator]，所以，我们可以使用 for...of 循环来遍历 Generator 函数，当返回对象的 done 属性为 true 时，循环自动中止：\n\n```js\nfunction* gen() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nfor ( let v of gen() ) {\n    console.log(v);\n}\n// => 1\n// => 2\n// => 3\n```\n\nGenerator 返回的对象附带两个方法：throw() 和 return，用于手动抛出异常和结束 Generator 函数。\n\n如果要在 Generator 函数内调用另外一个 Generator 函数，需要使用 `yield*`，实际上如果 yield 后面跟的是一个遍历器对象，都可以使用 `yield*` 来解析：\n\n```js\nfunction* gen() {\n    yield 1;\n    yield* [2, 3, 4];\n    // 等同于 \n    // yield 2;\n    // yield 3;\n    // yield 4;\n    yield 5;\n}\n\nconst g = gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next()\n// => Object { value: 2, done: false }\ng.next()\n// => Object { value: 3, done: false }\ng.next()\n// => Object { value: 4, done: false }\ng.next()\n// => Object { value: 5, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\n如果对象的某个属性是 Generator 函数，形式上有所不同：\n\n```js\nconst obj = {\n    * gen () {\n        yield 1;\n        yield 2;\n    }\n};\n\nconst g = obj.gen();\n\ng.next();\n// => Object { value: 1, done: false }\ng.next()\n// => Object { value: 2, done: false }\ng.next()\n// => Object { value: undefined, done: true }\n```\n\n前面有数组推导，Generator 函数也有推导，Generator 函数推导的优势在于它是惰性求值：\n\n```js\nfunction* bigArr () {\n    for ( let i = 0; i < 1000000; i++ ) {\n        yield i;\n    }\n}\n\nconst ret = ( for ( n of bigArr() ) if ( n < 10 ) n * n );\n\n[...ret]\n// => [ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81 ]\n```\n\n下面是使用 Generator 函数实现的一个状态机：\n\n```js\nfunction* gen() {\n    while( true ) {\n        yield _;\n        console.log('on');\n\n        yield _;\n        console.log('off');\n    }\n}\n\nconst g = gen();\n\ng.next()\n// on\ng.next()\n// off\ng.next()\n// on\n// ...\n```\n\nJS 解析引擎是单线程，只能保持一个调用栈，为了保持多个任务独立的调用栈，引入了协程。Generator 函数是 ES2015 对协程的实现，但不是完整的实现，完整的协程应该可以通过任何函数实现暂停，但是只有 Generator 函数的调用者才能结束 Generator 函数。\n\n如果将 Generator 函数当做协程，可以将多个需要写作的任务都写成 Generator 函数，使用 yield 命令交换控制权。\n\n## Promise\n\n在 ES2015 之前，Promise 早有实现，ES2015 规范统一了 Promise 的用法。Promise 对象共有三个状态：Pending、Resolved 和 Rejected。Promise 对象的状态只能从 Pending 变为 Resolved 或者从 Pending 变为 Rejected。\n\nPromise 对象存在的价值是将异步操作以同步操作的流程表达出来，避免层层嵌套的回调函数，并且提供了统一的接口，便于控制异步操作。不过，Promise 也存在一些缺点：\n\n- 创建后立即执行，无法中途取消\n- 如果不设置回调函数，无法抛出内部错误\n- 处于 Pending 状态时，无法获得具体状态（刚刚开始还是即将完成）\n\nES2015 规定，Promise 对象是一个构造函数，用于生成 Promise 实例：\n\n```js\nconst p = new Promise( (resolve, reject) => {\n    setTimeout(resolve, 1000, 'done');\n});\n\np.then((value) => {\n    console.log(value);\n});\n// 1000ms 后\n// => 'done'\n```\n\nPromise 实例具有两个方法：then(resolved，rejected) 和 catch()。catch() 相当于是 `.them(null, rejected)` 的缩写，用于指定发生错误时的回调函数。\n\nPromise 对象本身还有四个方法：all()、race()、resolve()、reject()。Promise.all() 方法接收包含多个 Promise 实例的一个数组，打包封装成一个 Promise 实例：\n\n```js\nconst p = new Promise.all([p1, p2, p3]);\n// p 的状态取决于 p1、p2、p3\n// p1、p2、p3 全部 resolved 时，p resolved\n// p1、p2、p3 有一个 rejected，p rejected\n```\n\nPromise.race() 同样打包多个返回一个 Promise 实例：\n\n```js\nconst p = new Promise.race([p1, p2, p3]);\n// 与 Promise.all() 的不同之处在于，\n// p 的状态取决于 p1、p2、p3 中状态最先发生变化的那个\n```\n\nPromise.resolve() 方法用于将现有对象转换为 Promise 对象；Promise.reject() 方法返回一个 Promise 实例，该实例的默认状态就是 rejected。\n\nES2015 的 Promise API 并不是很多，可以根据自己的开发需要部署特定的方法，比如我们可以部署两个比较常用的方法：done() 和 finally()。Promise 实例以 then() 或 catch() 方法作为结尾方法时，如果结尾方法抛出错误，是有可能无法捕捉到的，所以可以实现一个 done 方法置于回调链的结尾，保证抛出的任何方法都能被捕获：\n\n```js\nPromise.prototype.done = function (onFulfilled, onRejected) {\n    this.then(onFulfilled, onRejected)\n        .catch(function (reason) {\n            // 抛出一个全局错误\n            setTimeout(() => { throw reason }, 0);\n        });\n};\n```\n\nfinally() 方法用于指定回调链的最终操作，与 done 方法的区别在于，它接受一个普通的回调函数作为参数：\n\n```js\n// 服务器使用 Promise 处理请求，使用 finally 关掉服务器\nserver.listen(0)\n    .then(function () {})\n    .finally(server.stop);\n\nPromise.prototype.finally = function (callback) {\n    let P = this.constructor;\n    return this.then(\n        value  => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason })\n    );\n};\n```\n\n## Async \n\n我们有回调函数、Promise 以及 Generator 这三种异步编程方式了，为什么在此之外还要提供 Async 函数？因为它们本身还有一些问题：\n\n- 回调函数的最大问题是回调嵌套\n- Promise 解决了回调嵌套的问题，但是被 then 方法包装后的代码存在冗余问题，语义和理解性较差\n- Generator 的代码写起来非常像同步代码，如果去除 yield 命令，简直就是同步代码，但是它失去了 Promise 可以自动执行的特性，所以它的缺点就是需要创建一个自动执行函数（Thunk 函数），或者使用三方模块（co），总之要驱动它自执行。\n\n```js\n// Callback Hell\nfunction foo( finalCallback ) {\n    request.get(url1, function(err1, res1) {\n        if (err1) return finalCallback(err1);\n        \n        request.post(url2, function(err2, res2) {\n            if (err2) return finalCallback(err2);\n            \n            request.put(url3, function(err3, res3) {\n                if (err3) return finalCallback(err3);\n                \n                request.del(url4, function(err4, res4) {\n                    if (err4) return finalCallback(err4);\n                    \n                    finalCallback(null, \"whew all done\");\n                })\n            })\n        })\n    })\n}\n\n// Promise\nfunction foo () {\n    return request.getAsync(url1)\n        .then(function(res1) {\n            return request.postAsync(url2);\n        })\n        .then(function(res2) {\n            return request.putAsync(url3);\n        })\n        .then(function(res3) {\n            return request.delAsync(url4);\n        })\n        .then(function(res4) {\n            return \"whew all done\";\n        });\n}\n\n// Generator\nimport co from 'co';\n\nfunction* foo() {\n    const res1 = yield request.getAsync(url1);\n    const res2 = yield request.getAsync(url2);\n    const res3 = yield request.getAsync(url3);\n    const res4 = yield request.getAsync(url4);\n    return \"whew all done\";\n}\n\nco(gen);\n\n// Async\nasync function foo() {\n    const res1 = await request.getAsync(url1);\n    const res2 = await request.getAsync(url2);\n    const res3 = await request.getAsync(url3);\n    const res4 = await request.getAsync(url4);\n    return \"whew all done\";\n}\n```\n\n编译器的惰性求值往往是将参数放入临时函数中实现的，在求值时调用这个临时函数，这个临时函数叫做 Thunk 函数：\n\n```js\nfunction temp ( v ) {\n    return v * 2;\n}\n\ntemp( x + 5 );\n\n// 等同于\nconst thunk = function () {\n    return x + 5;\n}\n\nfunction temp ( v ) {\n    return thunk() + 5;\n}\n```\n\n在 JS 中，Thunk 函数要做的是将多参数函数转换为单参数函数，且只接受回调函数作为参数：\n\n```js\n// 正常版本的readFile（多参数版本）\nfs.readFile(fileName, callback);\n\n// Thunk版本的readFile（单参数版本）\nvar readFileThunk = Thunk(fileName);\nreadFileThunk(callback);\n\nvar Thunk = function (fileName){\n    return function (callback){\n        return fs.readFile(fileName, callback);\n    };\n};\n```\n\n任何函数，只要参数是回调函数，就能写成 Thunk 函数的形式，下面是一个简单的 Thunk 函数转换器：\n\n```js\nvar Thunk = function(fn){\n    return function (){\n        var args = Array.prototype.slice.call(arguments);\n        return function (callback){\n            args.push(callback);\n            return fn.apply(this, args);\n        }\n    };\n};\n```\n\n之所以要提 Thunk 函数，是因为它可以驱动 Generator 函数自执行：\n\n```js\nfunction run(fn) {\n    var gen = fn();\n    function next(err, data) {\n        var result = gen.next(data);\n        if (result.done) return;\n        result.value(next);\n    }\n    next();\n}\n\nrun(gen);\n```\n\nES7 提供了 Async 函数，它相当于是 Generator 函数的语法糖。下面使用两种函数读取文件：\n\n```js\nconst fs = require('fs');\n\ncosnt readFile = function (fileName){\n    return new Promise(function (resolve, reject){\n        fs.readFile(fileName, function(error, data){\n            if (error) {\n                reject(error);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n};\n\n// Generator 函数\nconst gen = function* (){\n    const f1 = yield readFile('/etc/fstab');\n    const f2 = yield readFile('/etc/shells');\n    console.log(f1.toString());\n    console.log(f2.toString());\n};\n\n// Async\ncosnt asyncReadFile = async function (){\n    cosnt f1 = await readFile('/etc/fstab');\n    cosnt f2 = await readFile('/etc/shells');\n    console.log(f1.toString());\n    console.log(f2.toString());\n};\n```\n\n首先，两者在语法上有所不同，但这不是最重要的，重要的是一下三点：\n\n1. Async 函数内置自动执行器，而 Generator 需要自己写自动执行函数或者使用第三方库，比如 co\n1. 更广的适应性，co 模块约定 yield 后面只能是 Thunk 函数或者是 Promise 对象，而 Async 函数的 await 后面可以使用 Promise 对象或原始值类型（此时等于同步操作）\n1. Async 的返回值是 Promise 对象，这比 Generator 返回的 Iterator 对象要更方便一些，可以使用 then() 来制定下一步的操作逻辑\n\n```js\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value)\n}\n\nasyncPrint('hello world', 50);\n```\n\nawait 命令后面跟着一个 Promise 对象，运行结果可能是 rejected，需要使用 try...catch 来捕获异常：\n\n```js\nasync function foo () {\n    try {\n        await P();\n    }\n    catch (err) {\n        console.log(err);\n    }\n}\n\n// Or\nasync function foo () {\n    await P().catch( err => console.log(err) );\n}\n```\n\n## Class\n\nJS 传统的原型继承等方式和其他语言差异较大，造成了一定的学习难度。ES2015 提供了和其他语言相仿的面向对象语法，引入了 Class 的概念，用作对象的模板：\n\n```js\nclass Point {\n    constructor( x, y ) {\n        this.x = x;\n        this.y = y;\n    }\n\n    getInfo () {\n        console.log(`( ${this.x}, ${this.y} )`);\n    }\n}\n\nconst p = new Point(3, 4);\np.getInfo();\n// => ( 3, 4 )\n```\n\n上例中的 constructor 是构造方法，this 代表实例对象。constructor 方法是类的默认方法，使用 new 命令生成对象实例时，自动调用盖房，如果没有显示定义该方法，就会自动添加一个空的 constructor 方法，constructor 方法默认返回类的实例对象，该返回值完全是可以修改的。\n\nClass 之间使用 extends 关键字实现继承，这种写法比 ES5 要简洁很多：\n\n```js\nclass Point {\n    constructor( x, y ) {\n        this.x = x;\n        this.y = y;\n    }\n\n    getInfo () {\n        return `( ${this.x}, ${this.y} )`;\n    }\n}\n\nclass ColorPoint extends Point {\n    constructor ( x, y, color ) {\n        super(x, y);\n        this.color = color;\n    }\n\n    getInfo () {\n        console.log( super.getInfo() + ` is ${this.color}` );\n    }\n}\n\nconst cp = new ColorPoint( 3, 4, 'red' );\ncp.getInfo();\n// => ( 3, 4 ) is red\n```\n\n在继承类的构造函数中出现了 super()，它指代父类的 this 对象。子类必须在 constructor 中调用 super 方法，否则新建实例会报错，这是因为子类没有自己的 this 对象，而是使用继承自父类的 this 对象，一切都是基于对这个 this 的加工处理，如果不调用 super()，就得不到 this 对象。\n\n```js\nclass Point {}\nclass ColorPoint extends Point {\n    constructor() {\n      console.log(this);\n    }\n}\n\nconst cp = new ColorPoint();\n// => Babel: 'this' is not allowed before super()\n// => Firefox: ReferenceError: |this| used uninitialized in ColorPoint class constructor\n```\n\n> ES5 的原型继承，实质是先创造子类的实例对象 this，然后再讲父类的方法添加到 this 上。ES6 的继承机制则是相反的，实质是先创造父类的实例对象 this（调用 super() ），然后在用子类的构造函数修改 this。\n\n类相当于实例的原型，类中定义的方法都会被实例所继承，如果不想让实例继承继承某个方法，可以通过 static 关键字设置类的静态方法：\n\n```js\nclass Foo {\n    static getInfo () {\n        console.log('foo');\n    }\n}\n\nconst f = new Foo();\n\nFoo.getInfo();\n// => 'foo'\nf.getInfo();\n// => TypeError: f.getInfo is not a function\n```\n\nES2015 规定类内部只有静态方法，没有静态属性，ES2016 有一个静态属性的提案，目前 Babel 已经支持：\n\n\n```js\nclass Point {\n    position = [1, 2];\n\n    static color = 'red';\n}\n```\n\nnew 是从类生成实例的命令，ES2015 的 new 命令增加了一个 `new.target` 的属性，表示 new 引用的构造函数：\n\n```js\nclass Point {\n    constructor () {\n        if ( new.target === Point ) {\n            console.log('right');\n        }\n        else {\n            console.log('wrong');\n        }        \n    }\n}\n\nconst p = new Point();\n// => right\nPoint.call(p, 123);\n// => Babel: wrong\n// => Firefox: TypeError: class constructors must be invoked with |new|\n```\n\n在子类继承父类时，new.target 返回的是子类，利用这个特点，可以写出不能独立使用、必须继承后才能使用的类：\n\n```js\nclass Shape {\n    constructor() {\n        if (new.target === Shape) {\n            throw new Error('本类不能实例化');\n        }\n    }\n}\n\nconst s = new Shape();\n// => Error: 本类不能实例化 \n```\n\n## Decorator\n\nES2016 的 Decorator 相当于设计模式中的装饰模式，所以下文就以装饰器来指代 Decorator。与上面提到的 Proxy（代理者，代理模式）不同，装饰器的核心作用是增强被装饰者的功能，而代理对象的作用是管理外界对被代理者的访问权限。装饰器只能用于类和类的方法，不能用于函数，因为编译时存在函数提升。修饰漆对类的行为的改变，是代码编译时发生的，而不是运行时，这意味着，修饰漆能在编译阶段运行代码：\n\n```js\nfunction mixins(...list) {\n    return function (target, name, descriptor) {\n        Object.assign(target.prototype, ...list);\n    }\n}\n\nconst Foo = {\n    foo () {\n        console.log('foo');\n    }\n}\n\n@mixins(Foo)\nclass CLS {}\n\nconst obj = new CLS();\nobj.foo();\n// 'foo'\n```\n\n装饰器函数可以接收三个参数：目标函数、属性名和属性的描述对象。上例代码通过装饰器 mixins，为指定类添加了指定的方法。装饰器的一个实际应用就是注释:\n\n```js\nimport { readonly } from 'core-decorators';\n\nclass Meal extends {\n    @readonly\n    entree = 'steak';\n}\n\nconst dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n```\n\n除了注释功能，装饰器还能用作类型检查，长期来看，它将成为 JavaScript 代码静态分析的重要工具。\n\n## Module\n\n在 ES2015 之前，社区中主要有 CommonJS 和 AMD 两种模块加载方式，ES2015 提出了自己的模块功能，其设计思想是尽量的静态化，在编译时确定模块的依赖关系、输入输出变量。\n\nES2015 module 主要由两个命令组成：`export` 和 `import`。export 用于提供对外接口，import 用于引用外部模块。每个模块都是独立的文件，外部无法直接获取模块文件的变量，只能通过 export 对外输出变量。\n\n```js\n// 输出变量\nconst foo = 'foo';\nconst bar = 'bar';\nexport { foo, bar };\n\n// 输出函数和类\nexport function f() {}\nexport class C {}\n```\n\nexport 定义了外部接口之后，可以使用 import 命令在其他模块中加载：\n\n```js\n// 使用 as 命令重命名引入的变量\n// import 语法存在变量提升，最好置于文件顶部\nimport { foo, bar as baz } from './modulename';\n```\n\n从上面 import 的示例中，我们发现当需要引入外部模块时，必须明确知道模块内部的变量名，这是非常不友好的方式。`export default` 命令就是为了解决这个问题存在的，其作用是为模块指定默认的输出内容：\n\n```js\n// 'export-default.js'\nexport default function () {}\n\n// 'import-default.js'\nimmport customName from './export-default.js';\n```\n\n## 建议使用的特性\n\n\n\n\n###### 参考资料\n\n- [ECMAScript6 入门](http://es6.ruanyifeng.com/)\n- [MDN JavaScript](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n\n","slug":"ES2015","published":1,"updated":"2016-02-01T01:01:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaro50003fsdiy4xdtriz","content":"<p>ES2015 是最新的 JavaScript 语法规范，也是前端工程化高速发展所催化出的产物。JS 的不成熟一直为人诟病，前端的高速发展又离不开 JS，所以这次激进的变革显得十分必要。</p>\n<p>虽然 ES2015 规范发布了，但是要原生的运行在浏览器上还是受到诸多因素的肘制，比如各版本浏览器的用户量、浏览器厂商对新特性的支持度等等。目前的权宜之计是使用 Babel 之类的编译器将 ES2015 代码转换为 ES5，所以下文中的 ES2015 代码也暂时以 Babel 的解析结果为准。各版本浏览器对 ES2015（ES6）、ES2016（ES7）的支持度可以参考这里：<a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"external\">ES2015 兼容性列表</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"块级作用域和变量声明\"><a href=\"#块级作用域和变量声明\" class=\"headerlink\" title=\"块级作用域和变量声明\"></a>块级作用域和变量声明</h2><p>ES6 新增了以花括号 <code>{}</code> 为标志的块级作用域，用以增强代码的稳健性。在 ES6 之前，JS 中只有全局作用域和函数作用域（eval 作用域？我没用过），这种设计有多种弊端，比如最常见的循环变量泄露为全局变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]());</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>虽然循环结束了，但是 i 的值在全局作用域内仍然有效，进而形成了一系列的错误。对于这种错误，最常见的处理方式是使用立即执行函数（Immediately-Invoked Function Expression）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>这里用到的立即执行函数实际上是将<a href=\"http://pinggod.com/2015/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/\">求值策略</a>从延迟求值转变为了预先求值，但仍然不够优雅和健壮。在 ES2015 中，通过使用 <code>let</code> 来声明循环变量同样可以解决这个问题，而且方式更加简洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]());</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p><code>let</code> 和 <code>const</code> 是 ES2015 新增的变量声明指令：let 用来声明变量，const 用来声明常量。当使用 let 和 const 声明变量时，所声明的变量只在当前的块级作用域内有效，这一点是与 var 的本质差别，也是上述代码生效的基础。对于 var 时代的各种诡异特性，现在 let 和 const 做了一些修改：</p>\n<ul>\n<li>let 和 const 声明的变量不存在变量提升</li>\n<li>let 和 const 声明的变量不允许在同一作用域内重复声明多次</li>\n<li>let 和 const 声明的变量必须先声明后使用，否则抛出 ReferenceError</li>\n</ul>\n<p>从块级作用域的开始到 let 和 const 变量声明的区域被称为临时死区（temporal dead zone），意指此处调用未声明的 let 和 const 变量一定报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">    temp = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// blablablabla</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该行代码之前都属于变量 temp 的 temporal dead zone</span></span><br><span class=\"line\">    <span class=\"comment\">// 意指在此之前不可使用变量 temp</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    在浏览器环境下，使用 var 声明的全局变量都会挂载在全局对象 window 下面。ES 2015 规定，使用 var 和 function 声明的全局变量仍然挂载在全局对象下面，但是 let、const 和 class 声明的全局变量则不属于全局对象。<br></div>\n\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>解构赋值是 ES2015 提供的一种语法糖操作，常用于简化对数组和对象的数据提取。可以使用解构赋值的数据类型包括：</p>\n<ul>\n<li>对象</li>\n<li>字符串</li>\n<li>数值和布尔值（自动转换为对象，然后调用 toString() ）</li>\n<li>数组，以及具有 Iterator 结构的数据结构，比如 Set 等</li>\n</ul>\n<p>下面我们通过一些实例来看一下解构赋值的使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 交换两个数的值</span></span><br><span class=\"line\">[x, y] = [y, x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提取 JSON 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">JSON</span> = &#123;</span><br><span class=\"line\">    id: <span class=\"number\">12345</span>,</span><br><span class=\"line\">    status: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\">    data: [<span class=\"number\">123</span>, <span class=\"number\">456</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; id, status, data &#125; = <span class=\"built_in\">JSON</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 按需加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Route, DefaultRoute, HistoryLocation &#125; = ReactRouter; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 从函数返回多个值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleStyle</span> (<span class=\"params\"></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> font = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> border = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = &#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; font, border, position &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    font: fontStyle,</span><br><span class=\"line\">    border: borderStyle,</span><br><span class=\"line\">    position: positionStyle</span><br><span class=\"line\">&#125; = handleStyle();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解构赋值可以以 <code>[x = &#39;0&#39;] = [y]</code> 的形式设置默认值，当 y 不存在时，x 的值就是 0；如果 y 不存在且没有设置默认值，则会被自动赋值为 undefined。</p>\n</blockquote>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在 JS 内部，字符以 16 位 2 字节的格式存储，这种表示法的范围限制为 \\u0000-\\uFFFF，对于超出范围的字符（\\u20BB7），会被解析为两个字符四个字节（\\u20BB\\u0007）。ES2015 增强了对 Unicode 的支持，提出了一种新的字符表示方法：\\u{20BB7}。</p>\n<p>对于新的字符表示形式 <code>\\u{codePoint}</code>，传统的字符串方法已经不适用了，所以 ES2015 提出了一系列新的方法来替代，它们可以正确识别编码大于 \\uFFFF 的字符：</p>\n<ul>\n<li>at()，对应 charAt()，返回指定位置的字符</li>\n<li>codePointAt()，对应 charCodeAt()，返回指定位置字符的编码</li>\n<li>String.fromCodePoint()，对应 String.fromCharCode()，返回指定编码所对应的字符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u20BB7'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; '₻7'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; '𠮷'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.charAt(<span class=\"number\">0</span>)   </span><br><span class=\"line\"><span class=\"comment\">// =&gt; '�'</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.at(<span class=\"number\">0</span>)       </span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"𠮷\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 20BB7</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.codePointAt(<span class=\"number\">1</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; DFB7</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.charCodeAt(<span class=\"number\">1</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; DFB7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a\\u&#123;20BB7&#125;b'</span>.length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 4</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'a\\u&#123;20BB7&#125;b'</span>).length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>ES2015 规范中规定字符串实现了 Iterator 接口，用于 for … of 遍历，此外，增加了一些工具类方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"abcdefghi\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否以参数字符串开头</span></span><br><span class=\"line\">str.startsWith(<span class=\"string\">'abc'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否包含参数字符串</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'def'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否以参数字符串结尾</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'ghi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成重复字符串</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'xxx'</span></span><br></pre></td></tr></table></figure>\n<p>字符串的另一个强力扩展是：模板字符串和标签模板。模板字符串（template string）类似于其他编程语言中的字符串插值，以反引号（`）为标志，字符串中的插值部分使用 <code>${}</code> 包裹：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; '3 + 4 = 7'</span></span><br></pre></td></tr></table></figure>\n<p>如果一个函数的函数名之后紧跟一个模板字符串，那么这个函数就会被用来处理这个模板字符串，这个功能被称为<code>标签模板（tagged template）</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数是一个数组</span></span><br><span class=\"line\"><span class=\"comment\">// 数组的元素是被插值部分分隔的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个及以后的参数代表模板字符串中插值部分的值</span></span><br><span class=\"line\"><span class=\"comment\">// 可以使用参数扩展语法将其包裹到一个变量中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strs, ...values</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(strs);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tag<span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"\",\" + \",\" = \",\"\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3,4,7]</span></span><br></pre></td></tr></table></figure>\n<p>标签模板的一个实际运用就是过滤 HTML 字符串，提高安全性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeHTML</span> (<span class=\"params\">strs, ...values</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    strs.forEach( (str, index) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"built_in\">String</span>(values[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        result += str;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( temp ) &#123;</span><br><span class=\"line\">            result += temp.replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">'&amp;amp;'</span>)</span><br><span class=\"line\">                          .replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">'$lt;'</span>)</span><br><span class=\"line\">                          .replace(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">'&amp;gc;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"string\">'&lt;html tag&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = safeHTML<span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123;user&#125;</span> has sent you a msg.&lt;/p&gt;`</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &lt;p&gt;$lt;html tag&amp;gc; has sent you a msg.&lt;/p&gt;undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h2><p>数值部分，一个是在 Number 对象上丰富了一些工具函数</p>\n<ul>\n<li>Nubmer.isNaN()</li>\n<li>Number.isFinite()</li>\n<li>Number.parseInt()</li>\n<li>Nubmer.parseFloat()</li>\n<li>Nnmber.isInteger()</li>\n<li>Number.EPSILON，极小量常量，在数值比对时，如果小于极小量，则判断两数相等</li>\n<li>Number.isSafeInteger()，安全范围指（-2^53，2^53）</li>\n<li>Number.MAX_SAFE_INTEGER</li>\n<li>Number.MIN_SAFE_INTEGER</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parseFloat === <span class=\"built_in\">Number</span>.parseFloat</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parseInt === <span class=\"built_in\">Number</span>.parseInt</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span> &lt; <span class=\"built_in\">Number</span>.EPSILON</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>二是在 Math 对象上扩展了一些数学函数：</p>\n<ul>\n<li>Math.trunc()，去除浮点数的小数部分</li>\n<li>Math.sign()，判断数值是正数、负数还是零</li>\n<li>Math.cbrt()，计算一个数值的立方根</li>\n<li>Math.clz32()，返回一个数值的 32 位无符号整数形式前前导零的个数</li>\n<li>Math.imul()</li>\n<li>Math.fround()</li>\n<li>Math.hypot()</li>\n<li>Math.expn1()</li>\n<li>Math.log1p()</li>\n<li>Math.log10()</li>\n<li>Math.log2()</li>\n<li>Math.sinh()</li>\n<li>Math.cosh()</li>\n<li>Math.tanh()</li>\n<li>Math.asinh()</li>\n<li>Math.acosh()</li>\n<li>Math.atanh()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.trunc(<span class=\"number\">3.1415926</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cbrt(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.log10(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.log2(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>在函数中，参数对象 arguments 是一个具有 length 属性的对象，这一类对象被称为类数组对象（array-like object），常见的类数组对象包括 arguments 对象和 DOM 操作返回的 NodeList 集合，对于此类类数组对象，我们往往希望可以将其转换为数组，方便调用数组的方法对数据进行处理。在 ES6 中有一个方法专门用于转换类数组对象为真正的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>, length: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"a\", undefined ]</span></span><br></pre></td></tr></table></figure>\n<p>从上面的代码可知，对象中的 length 属性确定了转换后数组的长度，索引不匹配的位置返回 undefined，此外 Array.from() 还接受第二个参数，用于对 obj 数据进行 map 处理。此外，对于 ES6 新增的 Set 和 Map 数据结构，也可以使用 Array.from() 转换为数组。</p>\n<p>在前面我们遇到了字符串编码大于 \\uFFFF 时，字符长度会被误判的问题，这种情况下可以使用 Array.from() 将字符串转换为数组，获取数组的长度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"𠮷\"</span>.length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">\"𠮷\"</span>).length;</span><br><span class=\"line\"><span class=\"comment\">// =&gt;  1</span></span><br></pre></td></tr></table></figure>\n<p>数组的构造函数 Array() 一直存在行为不确定的问题（一个参数表示新建数组长度，多个参数表示新建数组的组成元素），对此 ES6 提出了 Array.of() 方法来构建数组。Array.of() 方法接收任意多个参数，这些参数就是返回数组的元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, &#123;&#125;, [], <span class=\"built_in\">Symbol</span>())</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"a\", Object, Array[0], Symbol() ]</span></span><br></pre></td></tr></table></figure>\n<p>在众多的数组方法中，有那么一类方法非常值得警惕，这类方法的危险性在于，它们可以修改数组自身的数据，常见方法有：<strong>pop() / push() / shift() / unshift() / reverse() / sort() / splice()</strong>。在 ES6 中也存在两个可以修改数组自身的方法：copyWithin() 和 fill()：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// copyWithin(arrayStart[, copyStart, copyEnd])</span></span><br><span class=\"line\"><span class=\"comment\">// arrayStart: 从数组的该位置开始修改数据</span></span><br><span class=\"line\"><span class=\"comment\">// copyStart: 从数组的该位置开始取数据</span></span><br><span class=\"line\"><span class=\"comment\">// copyEnd: 从数组的该位置停止取数据</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 4, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill(num, start, end) 方法可以用于数据重置</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, 2, 3, 0, 5 ]</span></span><br></pre></td></tr></table></figure>\n<p>新增的 find() 和 some() 类似，都需要一个回调函数对遍历到的元素进行判断，不同点在于，find() 返回符合条件的第一个值，some() 则是在遇到复合条件的元素时返回 true；另一个新增的 findIndex() 与 indexOf() 类似，用于在数组中查找特定值的索引，不同之处在于 findIndex() 接收一个回调函数，indexOf() 接收的是一个值，此外，findIndex() 配合 Object.is 可以发现 NaN：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">NaN</span>].indexOf(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; -1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">NaN</span>].findIndex(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>此外，我们还可以使用 includes() 方法来判断是否存在：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>对于数组的遍历，ES6 提供了更精细的方法 entries() / keys() / values()，分别是对键值对、键和值的遍历：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p>最后，值得一提的是，babel 编译已经支持了数组推导式（ES7），这一推到式在 Haskell 和 python 中都有实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> years = [ <span class=\"number\">1954</span>, <span class=\"number\">1974</span>, <span class=\"number\">1990</span>, <span class=\"number\">2006</span>, <span class=\"number\">2010</span>, <span class=\"number\">2014</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array = [ <span class=\"keyword\">for</span> ( year <span class=\"keyword\">of</span> years ) <span class=\"keyword\">if</span> ( year &gt; <span class=\"number\">1990</span> ) <span class=\"keyword\">if</span> ( year &lt; <span class=\"number\">2014</span> ) year ];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 2006, 2010 ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>先看一个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"> x, y = 2, ...z</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`y = <span class=\"subst\">$&#123;y&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`z = <span class=\"subst\">$&#123;z&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; x = 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; y = 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; z = 2,3,5,8,13</span></span><br><span class=\"line\"></span><br><span class=\"line\">consoel.log(f.length);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>这个示例中聚合了很多 ES6 在函数方面的特性，第一处是 <code>y = 2</code>，这种形式定义了函数参数的默认值，所以这里的 y 相当于一个默认值参数；第二处是 <code>...z</code>，这里的 z 被称为 rest 参数，用于存放函数中多余的参数，该参数往往可以用来替代 arguments 对象，因为它天生就是数组类型；第三处是传参时的 undefined，如果我们想跳过某个参数，需要显示的将该参数赋值为 undefined，使用 null 的话没有效果；第四处就是 func.length，这里的 length 表示普通参数的数量，如果我们测试 arugments.length，会发现结果为 7，因为这里的 arguments.length 表示的是传入参数的数量；最后一处不是很明显，但是很重要，就是普通参数、默认值参数和 rest 参数的位置顺序。</p>\n<p>进一步还可以配合对象解构来传参：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = '', method = 'GET', headers = &#123;&#125; &#125; </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'GET'</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Cannot read property 'body' of undefined</span></span><br></pre></td></tr></table></figure>\n<p>第二个 fetch 的问题在于不能省略第二个参数，如果要省略参数，可以设置双重默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = '', method = 'GET', headers = &#123;&#125; &#125; = &#123;&#125; </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'GET'</span></span><br></pre></td></tr></table></figure>\n<p>rest 参数 <code>...rest</code> 用于将参数打包成数组，通过扩展运算符 <code>...</code>，可以执行逆运算，将数组（babel 也支持对类数对象的转换）转换为以分号分隔的参数序列：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, ...rest, <span class=\"number\">21</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [0,1,1,2,3,5,8,13,21]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际运用</span></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n<p>接下来是比较亮眼的箭头函数<code>=&gt;</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; k: v &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = (k, v) =&gt; ( &#123; k: v &#125; );</span><br></pre></td></tr></table></figure>\n<p>看到箭头函数的第一感官就是：简洁。另一个重要的点在于，箭头函数绑定了 this 对象，其特点如下：</p>\n<ol>\n<li>this 对象的指向是可变，但在箭头函数中，它固定的志向定义时所在的对象，而不是使用时所在的对象</li>\n<li>不可以用于构造函数</li>\n<li>不可以使用 arguments 对象，可以使用 rest 参数代替</li>\n<li>不能用作 Generator 函数，所以不能使用 yield 命令</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">    &#125;,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call( &#123; id: <span class=\"number\">42</span> &#125; );</span><br><span class=\"line\"><span class=\"comment\">// id: 42</span></span><br></pre></td></tr></table></figure>\n<p>之所以 this 的指向是固定的，根据 babel 的实现来说，是因为箭头函数内并没有 this 对象，无论箭头函数嵌套多少层，它都是指向定时所在的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call( &#123; id: <span class=\"number\">42</span> &#125; )()()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// babel 编译结果</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, _this.id);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(&#123; id: <span class=\"number\">42</span> &#125;)()()();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES7 提出了函数绑定的概念，使用双冒号 <code>::</code> 来替代 call/apply/bind 的调用，目前 babel 已经支持该特性，双冒号左侧是一个对象，右侧是一个函数，实现以左边对象为上下文对象的右边函数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; id: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj::f();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 123</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>最后，讲讲尾函数调用的优化问题。在函数式编程中，如果某个函数的最后一步是函数调用过程，那么这一过程就成为尾调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的函数并不是尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面示例相当于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    g(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数调用过程是不断入栈出栈的过程，由于尾调用是最后一步操作，所以不需要保存外层函数的调用，这被称为尾调用优化，即只保留内层函数的调用帧，这种优化的好处是如果函数都是尾调用，那么就可以优化到每次尾调用都只保留一层调用，大大节省内存，这就是尾调用优化的意义。</p>\n<p>函数调用自身的过程，成为递归，如果尾调用自身，则称为尾递归。下面是一个阶乘函数，没有使用尾递归，最多需要保存 n 个调用记录，复杂度为 O(n)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n === <span class=\"number\">1</span> ) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial( n - <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用尾递归改写，只保留一个调用记录，复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"comment\">// Babel 检测到尾调用时使用 while 循环执行函数体</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br></pre></td></tr></table></figure>\n<p>鉴于尾调用优化的在性能上的良好表现，EMCAScript 明确规定，所有 ECMAScript 的实现都应该实现“尾调用优化”。</p>\n<blockquote>\n<p>为了确保最后一步调用自身实现尾递归优化，就需要把函数内部用到的变量转换为函数的参数，比如上面的 total，不过这样的处理方式并不容易理解，优化方式有两种，一种是函数柯里化，另一种方式就是使用默认值参数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\">fn, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, m, n);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailFactorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tailFactorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> factorial = currying(tailFactorial, <span class=\"number\">1</span>);</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total = 1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>ES6 在编码的简洁性上做了很多工作，比如上面的箭头函数，比如下面的对象声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; foo &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 相当于 obj = &#123; foo: foo &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    getSth ( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; x, y &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 相当于 return &#123; x: x, y: y &#125;;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 相当于 getSth: function ( x, y ) &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES2015 新增了一个 Object.is() 方法来比较两个值是否相等，主要解决两方面的问题：一是 <code>==</code> 比较时的数据类型自动转换，一是 <code>===</code> 比较时 NaN 不等于自身、<code>+0</code> 等于 <code>-0</code> 的问题。Object.is() 实现的原则是：只要两个值一样，就应该相等（Same-value equality）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p><code>Object.assign(target, source1, source2)</code> 用于将 source1/source2… 的属性拷贝到 target 中，遇到同名属性自动覆盖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o1 = &#123; </span><br><span class=\"line\">    id: <span class=\"number\">123</span>, </span><br><span class=\"line\">    meta: &#123; </span><br><span class=\"line\">        age: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o2 = &#123; </span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, o1, o2);</span><br><span class=\"line\">target</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"id\":123,\"meta\":&#123;\"age\":2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>到目前为止，一共有六种方法可以遍历对象的属性：</p>\n<ol>\n<li><code>for...in</code>，循环遍历对象自身的和集成的可枚举属性（不包含 Symbol 属性）</li>\n<li><code>object.keys(obj)</code>，返回一个数组，包括自身所有可枚举属性（不含 Symbol 属性和继承属性）</li>\n<li><code>Object.getOwnPropertyNames(obj)</code>，返回一个数组，包含对象自身的所有属性（不含Symbol属性，包括不可枚举属性）</li>\n<li><code>Object.getOwnPropertySymbols(obj)</code>，返回一个数组，包含对象自身的所有Symbol属性</li>\n<li><code>Reflect.ownKeys(obj)</code>，返回一个数组，包含对象自身的所有属性，包括 Symbol 和不可枚举属性</li>\n<li><code>Reflect.enumerate(obj)</code> 返回一个 Iterator 对象，结果与 <code>for...in</code> 相同</li>\n</ol>\n<p>以上六种遍历方法，都遵守同样的遍历次序：</p>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(&#123; [<span class=\"built_in\">Symbol</span>()]:<span class=\"number\">0</span>, b:<span class=\"number\">0</span>, <span class=\"number\">10</span>:<span class=\"number\">0</span>, <span class=\"number\">2</span>:<span class=\"number\">0</span>, a:<span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure>\n<p><code>__proto__</code> 是一个没有正式规范，被浏览器广泛支持的属性，ES6 提供了新的方法来代替对该属性的操作：<code>Object.setPrototypeOf()</code> / <code>Object.getPrototypeOf()</code> / <code>Object.create()</code>。</p>\n<h2 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h2><p>Symbol 是 ES2015 加入的第七种数据类型，它与 undefined/null/boolean/string/number 都是原始数据类型，Symbol 用来实现一种独一无二的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> s;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'symbol'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.toString();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'Symbol(foo)'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s2 === s1;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 独一无二的特性非常适合作为对象的属性名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">    [s]: <span class=\"string\">'Hi'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">o.s</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'undefined'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>[s]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'hi'</span></span><br></pre></td></tr></table></figure>\n<p>在对使用 Symbol 作为属性名的对象进行遍历时，Symbol 属性不会出现在 for…in、for…of 循环中，也不会出现在 Object.keys()、Object.getOwnPropertyNames() 的返回值中。虽然如此，Symbol 并不是私有属性，可以通过 Object.getOwnPropertySymbols() 来获取指定对象的所有 Symbol 属性名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'baz'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    [s1]: <span class=\"number\">123</span>,</span><br><span class=\"line\">    [s2]: <span class=\"string\">'abc'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ss = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj);</span><br><span class=\"line\"><span class=\"comment\">// [ Symbol(foo), Symbol(baz) ]</span></span><br></pre></td></tr></table></figure>\n<p>要获取相同的 Symbol，可以调用系统的 Symbol.for()，该方法接受一个字符串作为参数，它会检测是否存在以该字符串参数名称的 Symbol 值，找到就返回，没有就创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>上面示例中用作参数的字符串又被成为 Symbol 的 key，使用 Symbol.keyFor() 可以查看这个 key:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'foo'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Proxy-and-Reflect\"><a href=\"#Proxy-and-Reflect\" class=\"headerlink\" title=\"Proxy and Reflect\"></a>Proxy and Reflect</h2><p>Proxy，顾名思义，用于代替特定对象与外界进行交互的对象，简称代理对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(target);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.xxx</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'getting xxx'</span></span><br></pre></td></tr></table></figure>\n<p>Proxy 的拦截操作概览：</p>\n<ul>\n<li>get()，拦截属性的读取</li>\n<li>set()，拦截属性的设置</li>\n<li>has()，拦截 propKey in proxy 操作</li>\n<li>deleteProperty()，拦截 delete proxy[propKey] 操作</li>\n<li>enumerate()，拦截 for ( let x in proxy ) 操作</li>\n<li>ownKeys()</li>\n<li>getOwnPropertyDescriptor()</li>\n<li>defineProperty()</li>\n<li>preventExtensions()</li>\n<li>getPrototypeOf()</li>\n<li>isExtensible()</li>\n<li>setPrototypeOf()</li>\n<li>apply()</li>\n<li>construct()</li>\n</ul>\n<p>使用 Proxy.revocable() 可以创建一个可撤销拦截的代理对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; proxy, revoke &#125; = <span class=\"built_in\">Proxy</span>.revocable(&#123;&#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>Reflect 对象的设计初衷：</p>\n<ol>\n<li>将 object 对象上明显属于语言内部的方法（Object.defineProperty）放到 Reflect 对象上</li>\n<li>修改某些 Object 对象的返回结果，使其更可控，比如 Object.defineProperty() 在无法定义属性时会抛出错误，而 Reflect.defineProperty() 则会返回 false</li>\n<li>让 Object 操作统一为函数行为，比如 name in obj 和 delete obj[name]，使用 Reflect.has() 和 Reflect.deleteProperty() 来执行</li>\n<li>Reflect 对象的方法和 Proxy 对象的方法一一对应，两者高度统一，方便 Proxy 对象调用对应的 Reflect 方法 —— 不管 Proxy 怎么拦截和修改，总可以在 Reflect 上获取默认行为</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object 操作对比 Reflect 操作</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, prop, attr);</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, prop, attr)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set-and-Map\"><a href=\"#Set-and-Map\" class=\"headerlink\" title=\"Set and Map\"></a>Set and Map</h2><p>ES2015 提供的 Set 数据结构是数组的一个约束，两者的差别就在于 Set 中没有重复值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set 的参数必须实现了 iterator 接口</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'2'</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, 2, \"2\" ]</span></span><br></pre></td></tr></table></figure>\n<p>Set 实例绑定的方法可以分为两类：数据操作方法和成员遍历方法：</p>\n<p><img src=\"/img/es2015-set-methods.png\" alt=\"set methods\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.has(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.delete(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"><span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>在遍历时，由于 Set 结构没有键名，只有键值，所以 keys() 和 values() 的返回值一致：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> set.keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; red</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; green</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> set.values() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; red</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; green</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> set.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"red\",\"red\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"green\",\"green\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"blue\",\"blue\"]</span></span><br></pre></td></tr></table></figure>\n<p>下面是一个 Set 结构的实例，用来求取两个 Set 结构的并交差集：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> union = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x, ...y]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> intersection = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x].filter( x =&gt; y.has(x) ));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> diffset = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x].filter( x =&gt; !y.has(x) ));</span><br></pre></td></tr></table></figure>\n<p>WeakSet 结构和 Set 结构相似，也是不重复值的集合，差异在于两个地方：一是 WeakSet 内部的元素只能是对象，二是 WeakSet 内部的对象是弱引用，垃圾回收机制不考虑 WeakSet 中对象的引用计数。</p>\n<p>由于 WeakSet 结构的对象是弱引用，随时可能消失，所以没有 size 属性，也无法进行遍历，只具有 Set 结构中的三个操作方法：add() / delete() / has()。</p>\n<p>Map 结构是对现有 Object 对象的扩展，Object 中的 key 只能是字符串和 Symbol（ES2015 新增），Map 中的 key 可以是任意数据类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; id: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(obj, <span class=\"string\">'hi'</span>);</span><br><span class=\"line\">map.get(obj);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'hi'</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(obj);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(obj);</span><br><span class=\"line\">map.has(obj);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key 绑定内存地址</span></span><br><span class=\"line\">map.set(&#123;&#125;, <span class=\"string\">'object'</span>);</span><br><span class=\"line\">map.get(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>下面在 Map 初始化的时候传入一个二维数组创建 Map：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> map.values() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; one</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; two</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; three</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1,\"one\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [2,\"two\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3,\"three\"]</span></span><br></pre></td></tr></table></figure>\n<p>WeakMap 是弱引用的 Map 结构，而且 WeakMap 只能以对象作为键值，不接受其他类型的值作为键名。</p>\n<h2 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h2><p>现在，JS 中表示集合的数据结构包括 String、Array、Object、Map、Set、WeakMap、WeakSet 七种数据结构。Iterator 提供了一种接口，为各种不同的数据结构提供统一的接口，任何数据结构只要部署了 Iterator 结构，就可以完成遍历操作，目前，String、Array、Map 和 Set 是默认部署了该接口的数据结构，Array-like object 可以通过 Array.from() 转换为 Array 使用该接口。</p>\n<p>Iterator 的作用主要有三点：</p>\n<ul>\n<li>为数据结构提供统一的访问接口</li>\n<li>使得数据接口的成员可以按照某种次序排列</li>\n<li>供 for…of 使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> it = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>凡是数据结构原生部署了 Symbol.iterator 属性，则具备 Iterator 接口，调用该接口，就可以得到一个遍历器对象。遍历器对象调用 next() 方法一次可以得到数据结构的所有成员，next() 返回一个对象，包括 value 和 done 属性。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性上，部署该属性的数据结构都被认为是可遍历的。在某些场合会自动调用遍历器接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\">[x, y] = [x, y]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ... of</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from()</span><br><span class=\"line\"><span class=\"built_in\">Map</span>() / <span class=\"built_in\">Set</span>() / <span class=\"built_in\">WeakMap</span>() / <span class=\"built_in\">WeakSet</span>()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all()</span><br><span class=\"line\">Promis.race()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// yield*</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>遍历语法的发展：</p>\n<ul>\n<li>for 遍历，语法繁琐</li>\n<li>forEach()，不能使用 break、continue、return 退出循环</li>\n<li>for…in，为对象设计，遍历数组时会自动将索引转换为字符串</li>\n<li>for…of，修复上述问题，可以遍历实现 iterator 接口的数据接口，不支持对普通对象的遍历</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> arr ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, arr[key]]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"0\", \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"1\", \"b\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"2\", \"c\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> arr.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"b\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 2, \"c\" ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>Generator 函数是 ES2015 提供的一种异步编程解决方案。可以将 Generator 视为一个有限状态机，内部封装了多个状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Generator 函数返回的遍历器对象需要调用 next 函数才会遍历到下一个内部状态，并且通过函数内部的 yield 命名挂起函数。遍历器对象 next 方法的运行逻辑：</p>\n<ol>\n<li>执行 next 函数，遇到 yield 命令挂起函数的执行，并且返回 yield 命令后表达式的值，作为返回的遍历器对象的 value 属性</li>\n<li>继续执行 next 函数，直到遇到下一个 yield，然后挂起函数</li>\n<li>如果没有再遇到 return，就运行到函数结束。函数结束时如果有 return，返回 return 后面表达式的值作为返回对象的 value 属性</li>\n<li>如果没有 return 表达式，则返回对象的 value 属性为 undefined</li>\n</ol>\n<p><img src=\"/img/es2015-generator-yield.png\" alt=\"es2015-generator-yield\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: true, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Generator 函数返回的对象都部署了 Iterator 接口 [Symbol.iterator]，所以，我们可以使用 for…of 循环来遍历 Generator 函数，当返回对象的 done 属性为 true 时，循环自动中止：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> gen() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>Generator 返回的对象附带两个方法：throw() 和 return，用于手动抛出异常和结束 Generator 函数。</p>\n<p>如果要在 Generator 函数内调用另外一个 Generator 函数，需要使用 <code>yield*</code>，实际上如果 yield 后面跟的是一个遍历器对象，都可以使用 <code>yield*</code> 来解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 等同于 </span></span><br><span class=\"line\">    <span class=\"comment\">// yield 2;</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 3;</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 4;</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果对象的某个属性是 Generator 函数，形式上有所不同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    * gen () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = obj.gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>前面有数组推导，Generator 函数也有推导，Generator 函数推导的优势在于它是惰性求值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bigArr</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ret = ( <span class=\"keyword\">for</span> ( n <span class=\"keyword\">of</span> bigArr() ) <span class=\"keyword\">if</span> ( n &lt; <span class=\"number\">10</span> ) n * n );</span><br><span class=\"line\"></span><br><span class=\"line\">[...ret]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81 ]</span></span><br></pre></td></tr></table></figure>\n<p>下面是使用 Generator 函数实现的一个状态机：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> _;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'on'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> _;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'off'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// on</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// off</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// on</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>JS 解析引擎是单线程，只能保持一个调用栈，为了保持多个任务独立的调用栈，引入了协程。Generator 函数是 ES2015 对协程的实现，但不是完整的实现，完整的协程应该可以通过任何函数实现暂停，但是只有 Generator 函数的调用者才能结束 Generator 函数。</p>\n<p>如果将 Generator 函数当做协程，可以将多个需要写作的任务都写成 Generator 函数，使用 yield 命令交换控制权。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>在 ES2015 之前，Promise 早有实现，ES2015 规范统一了 Promise 的用法。Promise 对象共有三个状态：Pending、Resolved 和 Rejected。Promise 对象的状态只能从 Pending 变为 Resolved 或者从 Pending 变为 Rejected。</p>\n<p>Promise 对象存在的价值是将异步操作以同步操作的流程表达出来，避免层层嵌套的回调函数，并且提供了统一的接口，便于控制异步操作。不过，Promise 也存在一些缺点：</p>\n<ul>\n<li>创建后立即执行，无法中途取消</li>\n<li>如果不设置回调函数，无法抛出内部错误</li>\n<li>处于 Pending 状态时，无法获得具体状态（刚刚开始还是即将完成）</li>\n</ul>\n<p>ES2015 规定，Promise 对象是一个构造函数，用于生成 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">1000</span>, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then((value) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1000ms 后</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'done'</span></span><br></pre></td></tr></table></figure>\n<p>Promise 实例具有两个方法：then(resolved，rejected) 和 catch()。catch() 相当于是 <code>.them(null, rejected)</code> 的缩写，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象本身还有四个方法：all()、race()、resolve()、reject()。Promise.all() 方法接收包含多个 Promise 实例的一个数组，打包封装成一个 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br><span class=\"line\"><span class=\"comment\">// p 的状态取决于 p1、p2、p3</span></span><br><span class=\"line\"><span class=\"comment\">// p1、p2、p3 全部 resolved 时，p resolved</span></span><br><span class=\"line\"><span class=\"comment\">// p1、p2、p3 有一个 rejected，p rejected</span></span><br></pre></td></tr></table></figure>\n<p>Promise.race() 同样打包多个返回一个 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br><span class=\"line\"><span class=\"comment\">// 与 Promise.all() 的不同之处在于，</span></span><br><span class=\"line\"><span class=\"comment\">// p 的状态取决于 p1、p2、p3 中状态最先发生变化的那个</span></span><br></pre></td></tr></table></figure>\n<p>Promise.resolve() 方法用于将现有对象转换为 Promise 对象；Promise.reject() 方法返回一个 Promise 实例，该实例的默认状态就是 rejected。</p>\n<p>ES2015 的 Promise API 并不是很多，可以根据自己的开发需要部署特定的方法，比如我们可以部署两个比较常用的方法：done() 和 finally()。Promise 实例以 then() 或 catch() 方法作为结尾方法时，如果结尾方法抛出错误，是有可能无法捕捉到的，所以可以实现一个 done 方法置于回调链的结尾，保证抛出的任何方法都能被捕获：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then(onFulfilled, onRejected)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 抛出一个全局错误</span></span><br><span class=\"line\">            setTimeout(() =&gt; &#123; <span class=\"keyword\">throw</span> reason &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>finally() 方法用于指定回调链的最终操作，与 done 方法的区别在于，它接受一个普通的回调函数作为参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务器使用 Promise 处理请求，使用 finally 关掉服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;)</span><br><span class=\"line\">    .finally(server.stop);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> P = <span class=\"keyword\">this</span>.constructor;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">        value  =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class=\"line\">        reason =&gt; P.resolve(callback()).then(() =&gt; &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h2><p>我们有回调函数、Promise 以及 Generator 这三种异步编程方式了，为什么在此之外还要提供 Async 函数？因为它们本身还有一些问题：</p>\n<ul>\n<li>回调函数的最大问题是回调嵌套</li>\n<li>Promise 解决了回调嵌套的问题，但是被 then 方法包装后的代码存在冗余问题，语义和理解性较差</li>\n<li>Generator 的代码写起来非常像同步代码，如果去除 yield 命令，简直就是同步代码，但是它失去了 Promise 可以自动执行的特性，所以它的缺点就是需要创建一个自动执行函数（Thunk 函数），或者使用三方模块（co），总之要驱动它自执行。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Callback Hell</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> finalCallback </span>) </span>&#123;</span><br><span class=\"line\">    request.get(url1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err1, res1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err1) <span class=\"keyword\">return</span> finalCallback(err1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        request.post(url2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err2, res2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err2) <span class=\"keyword\">return</span> finalCallback(err2);</span><br><span class=\"line\">            </span><br><span class=\"line\">            request.put(url3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err3, res3</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err3) <span class=\"keyword\">return</span> finalCallback(err3);</span><br><span class=\"line\">                </span><br><span class=\"line\">                request.del(url4, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err4, res4</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err4) <span class=\"keyword\">return</span> finalCallback(err4);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    finalCallback(<span class=\"literal\">null</span>, <span class=\"string\">\"whew all done\"</span>);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request.getAsync(url1)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res1</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.postAsync(url2);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.putAsync(url3);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res3</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.delAsync(url4);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res4</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generator</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> co <span class=\"keyword\">from</span> <span class=\"string\">'co'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">yield</span> request.getAsync(url1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">yield</span> request.getAsync(url2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">yield</span> request.getAsync(url3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res4 = <span class=\"keyword\">yield</span> request.getAsync(url4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">co(gen);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Async</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">await</span> request.getAsync(url1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">await</span> request.getAsync(url2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">await</span> request.getAsync(url3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res4 = <span class=\"keyword\">await</span> request.getAsync(url4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器的惰性求值往往是将参数放入临时函数中实现的，在求值时调用这个临时函数，这个临时函数叫做 Thunk 函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">temp</span> (<span class=\"params\"> v </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">temp( x + <span class=\"number\">5</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">temp</span> (<span class=\"params\"> v </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> thunk() + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 JS 中，Thunk 函数要做的是将多参数函数转换为单参数函数，且只接受回调函数作为参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常版本的readFile（多参数版本）</span></span><br><span class=\"line\">fs.readFile(fileName, callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thunk版本的readFile（单参数版本）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileThunk = Thunk(fileName);</span><br><span class=\"line\">readFileThunk(callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fs.readFile(fileName, callback);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>任何函数，只要参数是回调函数，就能写成 Thunk 函数的形式，下面是一个简单的 Thunk 函数转换器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Thunk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            args.push(callback);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>之所以要提 Thunk 函数，是因为它可以驱动 Generator 函数自执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = fn();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = gen.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        result.value(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(gen);</span><br></pre></td></tr></table></figure>\n<p>ES7 提供了 Async 函数，它相当于是 Generator 函数的语法糖。下面使用两种函数读取文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">cosnt readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generator 函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Async</span></span><br><span class=\"line\">cosnt asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cosnt f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    cosnt f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，两者在语法上有所不同，但这不是最重要的，重要的是一下三点：</p>\n<ol>\n<li>Async 函数内置自动执行器，而 Generator 需要自己写自动执行函数或者使用第三方库，比如 co</li>\n<li>更广的适应性，co 模块约定 yield 后面只能是 Thunk 函数或者是 Promise 对象，而 Async 函数的 await 后面可以使用 Promise 对象或原始值类型（此时等于同步操作）</li>\n<li>Async 的返回值是 Promise 对象，这比 Generator 返回的 Iterator 对象要更方便一些，可以使用 then() 来制定下一步的操作逻辑</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<p>await 命令后面跟着一个 Promise 对象，运行结果可能是 rejected，需要使用 try…catch 来捕获异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> P();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> P().catch( err =&gt; <span class=\"built_in\">console</span>.log(err) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>JS 传统的原型继承等方式和其他语言差异较大，造成了一定的学习难度。ES2015 提供了和其他语言相仿的面向对象语法，引入了 Class 的概念，用作对象的模板：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`( <span class=\"subst\">$&#123;this.x&#125;</span>, <span class=\"subst\">$&#123;this.y&#125;</span> )`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">p.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; ( 3, 4 )</span></span><br></pre></td></tr></table></figure>\n<p>上例中的 constructor 是构造方法，this 代表实例对象。constructor 方法是类的默认方法，使用 new 命令生成对象实例时，自动调用盖房，如果没有显示定义该方法，就会自动添加一个空的 constructor 方法，constructor 方法默认返回类的实例对象，该返回值完全是可以修改的。</p>\n<p>Class 之间使用 extends 关键字实现继承，这种写法比 ES5 要简洁很多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`( <span class=\"subst\">$&#123;this.x&#125;</span>, <span class=\"subst\">$&#123;this.y&#125;</span> )`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( x, y, color ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"keyword\">super</span>.getInfo() + <span class=\"string\">` is <span class=\"subst\">$&#123;this.color&#125;</span>`</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"keyword\">new</span> ColorPoint( <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"string\">'red'</span> );</span><br><span class=\"line\">cp.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; ( 3, 4 ) is red</span></span><br></pre></td></tr></table></figure>\n<p>在继承类的构造函数中出现了 super()，它指代父类的 this 对象。子类必须在 constructor 中调用 super 方法，否则新建实例会报错，这是因为子类没有自己的 this 对象，而是使用继承自父类的 this 对象，一切都是基于对这个 this 的加工处理，如果不调用 super()，就得不到 this 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"keyword\">new</span> ColorPoint();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Babel: 'this' is not allowed before super()</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; Firefox: ReferenceError: |this| used uninitialized in ColorPoint class constructor</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES5 的原型继承，实质是先创造子类的实例对象 this，然后再讲父类的方法添加到 this 上。ES6 的继承机制则是相反的，实质是先创造父类的实例对象 this（调用 super() ），然后在用子类的构造函数修改 this。</p>\n</blockquote>\n<p>类相当于实例的原型，类中定义的方法都会被实例所继承，如果不想让实例继承继承某个方法，可以通过 static 关键字设置类的静态方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'foo'</span></span><br><span class=\"line\">f.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; TypeError: f.getInfo is not a function</span></span><br></pre></td></tr></table></figure>\n<p>ES2015 规定类内部只有静态方法，没有静态属性，ES2016 有一个静态属性的提案，目前 Babel 已经支持：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    position = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> color = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new 是从类生成实例的命令，ES2015 的 new 命令增加了一个 <code>new.target</code> 的属性，表示 new 引用的构造函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">new</span>.target === Point ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'right'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'wrong'</span>);</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Point();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; right</span></span><br><span class=\"line\">Point.call(p, <span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Babel: wrong</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; Firefox: TypeError: class constructors must be invoked with |new|</span></span><br></pre></td></tr></table></figure>\n<p>在子类继承父类时，new.target 返回的是子类，利用这个特点，可以写出不能独立使用、必须继承后才能使用的类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target === Shape) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'本类不能实例化'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> Shape();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Error: 本类不能实例化</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decorator\"><a href=\"#Decorator\" class=\"headerlink\" title=\"Decorator\"></a>Decorator</h2><p>ES2016 的 Decorator 相当于设计模式中的装饰模式，所以下文就以装饰器来指代 Decorator。与上面提到的 Proxy（代理者，代理模式）不同，装饰器的核心作用是增强被装饰者的功能，而代理对象的作用是管理外界对被代理者的访问权限。装饰器只能用于类和类的方法，不能用于函数，因为编译时存在函数提升。修饰漆对类的行为的改变，是代码编译时发生的，而不是运行时，这意味着，修饰漆能在编译阶段运行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.assign(target.prototype, ...list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">    foo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLS</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> CLS();</span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"><span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n<p>装饰器函数可以接收三个参数：目标函数、属性名和属性的描述对象。上例代码通过装饰器 mixins，为指定类添加了指定的方法。装饰器的一个实际应用就是注释:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meal</span> <span class=\"keyword\">extends</span> </span>&#123;</span><br><span class=\"line\">    @readonly</span><br><span class=\"line\">    entree = <span class=\"string\">'steak'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dinner = <span class=\"keyword\">new</span> Meal();</span><br><span class=\"line\">dinner.entree = <span class=\"string\">'salmon'</span>;</span><br><span class=\"line\"><span class=\"comment\">// Cannot assign to read only property 'entree' of [object Object]</span></span><br></pre></td></tr></table></figure>\n<p>除了注释功能，装饰器还能用作类型检查，长期来看，它将成为 JavaScript 代码静态分析的重要工具。</p>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>在 ES2015 之前，社区中主要有 CommonJS 和 AMD 两种模块加载方式，ES2015 提出了自己的模块功能，其设计思想是尽量的静态化，在编译时确定模块的依赖关系、输入输出变量。</p>\n<p>ES2015 module 主要由两个命令组成：<code>export</code> 和 <code>import</code>。export 用于提供对外接口，import 用于引用外部模块。每个模块都是独立的文件，外部无法直接获取模块文件的变量，只能通过 export 对外输出变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo, bar &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出函数和类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>export 定义了外部接口之后，可以使用 import 命令在其他模块中加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 as 命令重命名引入的变量</span></span><br><span class=\"line\"><span class=\"comment\">// import 语法存在变量提升，最好置于文件顶部</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; foo, bar <span class=\"keyword\">as</span> baz &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./modulename'</span>;</span><br></pre></td></tr></table></figure>\n<p>从上面 import 的示例中，我们发现当需要引入外部模块时，必须明确知道模块内部的变量名，这是非常不友好的方式。<code>export default</code> 命令就是为了解决这个问题存在的，其作用是为模块指定默认的输出内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 'export-default.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 'import-default.js'</span></span><br><span class=\"line\">immport customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default.js'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建议使用的特性\"><a href=\"#建议使用的特性\" class=\"headerlink\" title=\"建议使用的特性\"></a>建议使用的特性</h2><h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript6 入门</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">MDN JavaScript</a></li>\n</ul>\n","excerpt":"<p>ES2015 是最新的 JavaScript 语法规范，也是前端工程化高速发展所催化出的产物。JS 的不成熟一直为人诟病，前端的高速发展又离不开 JS，所以这次激进的变革显得十分必要。</p>\n<p>虽然 ES2015 规范发布了，但是要原生的运行在浏览器上还是受到诸多因素的肘制，比如各版本浏览器的用户量、浏览器厂商对新特性的支持度等等。目前的权宜之计是使用 Babel 之类的编译器将 ES2015 代码转换为 ES5，所以下文中的 ES2015 代码也暂时以 Babel 的解析结果为准。各版本浏览器对 ES2015（ES6）、ES2016（ES7）的支持度可以参考这里：<a href=\"http://kangax.github.io/compat-table/es6/\">ES2015 兼容性列表</a>。</p>","more":"<h2 id=\"块级作用域和变量声明\"><a href=\"#块级作用域和变量声明\" class=\"headerlink\" title=\"块级作用域和变量声明\"></a>块级作用域和变量声明</h2><p>ES6 新增了以花括号 <code>{}</code> 为标志的块级作用域，用以增强代码的稳健性。在 ES6 之前，JS 中只有全局作用域和函数作用域（eval 作用域？我没用过），这种设计有多种弊端，比如最常见的循环变量泄露为全局变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]());</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>虽然循环结束了，但是 i 的值在全局作用域内仍然有效，进而形成了一系列的错误。对于这种错误，最常见的处理方式是使用立即执行函数（Immediately-Invoked Function Expression）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>这里用到的立即执行函数实际上是将<a href=\"http://pinggod.com/2015/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/\">求值策略</a>从延迟求值转变为了预先求值，但仍然不够优雅和健壮。在 ES2015 中，通过使用 <code>let</code> 来声明循环变量同样可以解决这个问题，而且方式更加简洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>]());</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p><code>let</code> 和 <code>const</code> 是 ES2015 新增的变量声明指令：let 用来声明变量，const 用来声明常量。当使用 let 和 const 声明变量时，所声明的变量只在当前的块级作用域内有效，这一点是与 var 的本质差别，也是上述代码生效的基础。对于 var 时代的各种诡异特性，现在 let 和 const 做了一些修改：</p>\n<ul>\n<li>let 和 const 声明的变量不存在变量提升</li>\n<li>let 和 const 声明的变量不允许在同一作用域内重复声明多次</li>\n<li>let 和 const 声明的变量必须先声明后使用，否则抛出 ReferenceError</li>\n</ul>\n<p>从块级作用域的开始到 let 和 const 变量声明的区域被称为临时死区（temporal dead zone），意指此处调用未声明的 let 和 const 变量一定报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">    temp = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// blablablabla</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该行代码之前都属于变量 temp 的 temporal dead zone</span></span><br><span class=\"line\">    <span class=\"comment\">// 意指在此之前不可使用变量 temp</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    在浏览器环境下，使用 var 声明的全局变量都会挂载在全局对象 window 下面。ES 2015 规定，使用 var 和 function 声明的全局变量仍然挂载在全局对象下面，但是 let、const 和 class 声明的全局变量则不属于全局对象。<br></div>\n\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>解构赋值是 ES2015 提供的一种语法糖操作，常用于简化对数组和对象的数据提取。可以使用解构赋值的数据类型包括：</p>\n<ul>\n<li>对象</li>\n<li>字符串</li>\n<li>数值和布尔值（自动转换为对象，然后调用 toString() ）</li>\n<li>数组，以及具有 Iterator 结构的数据结构，比如 Set 等</li>\n</ul>\n<p>下面我们通过一些实例来看一下解构赋值的使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 交换两个数的值</span></span><br><span class=\"line\">[x, y] = [y, x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提取 JSON 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">JSON</span> = &#123;</span><br><span class=\"line\">    id: <span class=\"number\">12345</span>,</span><br><span class=\"line\">    status: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\">    data: [<span class=\"number\">123</span>, <span class=\"number\">456</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; id, status, data &#125; = <span class=\"built_in\">JSON</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 按需加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Route, DefaultRoute, HistoryLocation &#125; = ReactRouter; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 从函数返回多个值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleStyle</span> (<span class=\"params\"></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> font = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> border = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = &#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; font, border, position &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    font: fontStyle,</span><br><span class=\"line\">    border: borderStyle,</span><br><span class=\"line\">    position: positionStyle</span><br><span class=\"line\">&#125; = handleStyle();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解构赋值可以以 <code>[x = &#39;0&#39;] = [y]</code> 的形式设置默认值，当 y 不存在时，x 的值就是 0；如果 y 不存在且没有设置默认值，则会被自动赋值为 undefined。</p>\n</blockquote>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在 JS 内部，字符以 16 位 2 字节的格式存储，这种表示法的范围限制为 \\u0000-\\uFFFF，对于超出范围的字符（\\u20BB7），会被解析为两个字符四个字节（\\u20BB\\u0007）。ES2015 增强了对 Unicode 的支持，提出了一种新的字符表示方法：\\u{20BB7}。</p>\n<p>对于新的字符表示形式 <code>\\u{codePoint}</code>，传统的字符串方法已经不适用了，所以 ES2015 提出了一系列新的方法来替代，它们可以正确识别编码大于 \\uFFFF 的字符：</p>\n<ul>\n<li>at()，对应 charAt()，返回指定位置的字符</li>\n<li>codePointAt()，对应 charCodeAt()，返回指定位置字符的编码</li>\n<li>String.fromCodePoint()，对应 String.fromCharCode()，返回指定编码所对应的字符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u20BB7'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; '₻7'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; '𠮷'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.charAt(<span class=\"number\">0</span>)   </span><br><span class=\"line\"><span class=\"comment\">// =&gt; '�'</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.at(<span class=\"number\">0</span>)       </span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"𠮷\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 20BB7</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.codePointAt(<span class=\"number\">1</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; DFB7</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;20BB7&#125;'</span>.charCodeAt(<span class=\"number\">1</span>).toString(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; DFB7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a\\u&#123;20BB7&#125;b'</span>.length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 4</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'a\\u&#123;20BB7&#125;b'</span>).length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>ES2015 规范中规定字符串实现了 Iterator 接口，用于 for … of 遍历，此外，增加了一些工具类方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"abcdefghi\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否以参数字符串开头</span></span><br><span class=\"line\">str.startsWith(<span class=\"string\">'abc'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否包含参数字符串</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'def'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 判断字符串 str 是否以参数字符串结尾</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'ghi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成重复字符串</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'xxx'</span></span><br></pre></td></tr></table></figure>\n<p>字符串的另一个强力扩展是：模板字符串和标签模板。模板字符串（template string）类似于其他编程语言中的字符串插值，以反引号（`）为标志，字符串中的插值部分使用 <code>${}</code> 包裹：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; '3 + 4 = 7'</span></span><br></pre></td></tr></table></figure>\n<p>如果一个函数的函数名之后紧跟一个模板字符串，那么这个函数就会被用来处理这个模板字符串，这个功能被称为<code>标签模板（tagged template）</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数是一个数组</span></span><br><span class=\"line\"><span class=\"comment\">// 数组的元素是被插值部分分隔的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个及以后的参数代表模板字符串中插值部分的值</span></span><br><span class=\"line\"><span class=\"comment\">// 可以使用参数扩展语法将其包裹到一个变量中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strs, ...values</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(strs);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tag<span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"\",\" + \",\" = \",\"\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3,4,7]</span></span><br></pre></td></tr></table></figure>\n<p>标签模板的一个实际运用就是过滤 HTML 字符串，提高安全性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeHTML</span> (<span class=\"params\">strs, ...values</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    strs.forEach( (str, index) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"built_in\">String</span>(values[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        result += str;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( temp ) &#123;</span><br><span class=\"line\">            result += temp.replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">'&amp;amp;'</span>)</span><br><span class=\"line\">                          .replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">'$lt;'</span>)</span><br><span class=\"line\">                          .replace(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">'&amp;gc;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"string\">'&lt;html tag&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = safeHTML<span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123;user&#125;</span> has sent you a msg.&lt;/p&gt;`</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &lt;p&gt;$lt;html tag&amp;gc; has sent you a msg.&lt;/p&gt;undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h2><p>数值部分，一个是在 Number 对象上丰富了一些工具函数</p>\n<ul>\n<li>Nubmer.isNaN()</li>\n<li>Number.isFinite()</li>\n<li>Number.parseInt()</li>\n<li>Nubmer.parseFloat()</li>\n<li>Nnmber.isInteger()</li>\n<li>Number.EPSILON，极小量常量，在数值比对时，如果小于极小量，则判断两数相等</li>\n<li>Number.isSafeInteger()，安全范围指（-2^53，2^53）</li>\n<li>Number.MAX_SAFE_INTEGER</li>\n<li>Number.MIN_SAFE_INTEGER</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parseFloat === <span class=\"built_in\">Number</span>.parseFloat</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parseInt === <span class=\"built_in\">Number</span>.parseInt</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span> &lt; <span class=\"built_in\">Number</span>.EPSILON</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>二是在 Math 对象上扩展了一些数学函数：</p>\n<ul>\n<li>Math.trunc()，去除浮点数的小数部分</li>\n<li>Math.sign()，判断数值是正数、负数还是零</li>\n<li>Math.cbrt()，计算一个数值的立方根</li>\n<li>Math.clz32()，返回一个数值的 32 位无符号整数形式前前导零的个数</li>\n<li>Math.imul()</li>\n<li>Math.fround()</li>\n<li>Math.hypot()</li>\n<li>Math.expn1()</li>\n<li>Math.log1p()</li>\n<li>Math.log10()</li>\n<li>Math.log2()</li>\n<li>Math.sinh()</li>\n<li>Math.cosh()</li>\n<li>Math.tanh()</li>\n<li>Math.asinh()</li>\n<li>Math.acosh()</li>\n<li>Math.atanh()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.trunc(<span class=\"number\">3.1415926</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cbrt(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.log10(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.log2(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>在函数中，参数对象 arguments 是一个具有 length 属性的对象，这一类对象被称为类数组对象（array-like object），常见的类数组对象包括 arguments 对象和 DOM 操作返回的 NodeList 集合，对于此类类数组对象，我们往往希望可以将其转换为数组，方便调用数组的方法对数据进行处理。在 ES6 中有一个方法专门用于转换类数组对象为真正的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>, length: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"a\", undefined ]</span></span><br></pre></td></tr></table></figure>\n<p>从上面的代码可知，对象中的 length 属性确定了转换后数组的长度，索引不匹配的位置返回 undefined，此外 Array.from() 还接受第二个参数，用于对 obj 数据进行 map 处理。此外，对于 ES6 新增的 Set 和 Map 数据结构，也可以使用 Array.from() 转换为数组。</p>\n<p>在前面我们遇到了字符串编码大于 \\uFFFF 时，字符长度会被误判的问题，这种情况下可以使用 Array.from() 将字符串转换为数组，获取数组的长度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"𠮷\"</span>.length</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">\"𠮷\"</span>).length;</span><br><span class=\"line\"><span class=\"comment\">// =&gt;  1</span></span><br></pre></td></tr></table></figure>\n<p>数组的构造函数 Array() 一直存在行为不确定的问题（一个参数表示新建数组长度，多个参数表示新建数组的组成元素），对此 ES6 提出了 Array.of() 方法来构建数组。Array.of() 方法接收任意多个参数，这些参数就是返回数组的元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, &#123;&#125;, [], <span class=\"built_in\">Symbol</span>())</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"a\", Object, Array[0], Symbol() ]</span></span><br></pre></td></tr></table></figure>\n<p>在众多的数组方法中，有那么一类方法非常值得警惕，这类方法的危险性在于，它们可以修改数组自身的数据，常见方法有：<strong>pop() / push() / shift() / unshift() / reverse() / sort() / splice()</strong>。在 ES6 中也存在两个可以修改数组自身的方法：copyWithin() 和 fill()：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// copyWithin(arrayStart[, copyStart, copyEnd])</span></span><br><span class=\"line\"><span class=\"comment\">// arrayStart: 从数组的该位置开始修改数据</span></span><br><span class=\"line\"><span class=\"comment\">// copyStart: 从数组的该位置开始取数据</span></span><br><span class=\"line\"><span class=\"comment\">// copyEnd: 从数组的该位置停止取数据</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 4, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill(num, start, end) 方法可以用于数据重置</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, 2, 3, 0, 5 ]</span></span><br></pre></td></tr></table></figure>\n<p>新增的 find() 和 some() 类似，都需要一个回调函数对遍历到的元素进行判断，不同点在于，find() 返回符合条件的第一个值，some() 则是在遇到复合条件的元素时返回 true；另一个新增的 findIndex() 与 indexOf() 类似，用于在数组中查找特定值的索引，不同之处在于 findIndex() 接收一个回调函数，indexOf() 接收的是一个值，此外，findIndex() 配合 Object.is 可以发现 NaN：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">NaN</span>].indexOf(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; -1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">NaN</span>].findIndex(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>此外，我们还可以使用 includes() 方法来判断是否存在：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>对于数组的遍历，ES6 提供了更精细的方法 entries() / keys() / values()，分别是对键值对、键和值的遍历：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p>最后，值得一提的是，babel 编译已经支持了数组推导式（ES7），这一推到式在 Haskell 和 python 中都有实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> years = [ <span class=\"number\">1954</span>, <span class=\"number\">1974</span>, <span class=\"number\">1990</span>, <span class=\"number\">2006</span>, <span class=\"number\">2010</span>, <span class=\"number\">2014</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array = [ <span class=\"keyword\">for</span> ( year <span class=\"keyword\">of</span> years ) <span class=\"keyword\">if</span> ( year &gt; <span class=\"number\">1990</span> ) <span class=\"keyword\">if</span> ( year &lt; <span class=\"number\">2014</span> ) year ];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 2006, 2010 ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>先看一个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"> x, y = 2, ...z</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`y = <span class=\"subst\">$&#123;y&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`z = <span class=\"subst\">$&#123;z&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; x = 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; y = 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; z = 2,3,5,8,13</span></span><br><span class=\"line\"></span><br><span class=\"line\">consoel.log(f.length);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>这个示例中聚合了很多 ES6 在函数方面的特性，第一处是 <code>y = 2</code>，这种形式定义了函数参数的默认值，所以这里的 y 相当于一个默认值参数；第二处是 <code>...z</code>，这里的 z 被称为 rest 参数，用于存放函数中多余的参数，该参数往往可以用来替代 arguments 对象，因为它天生就是数组类型；第三处是传参时的 undefined，如果我们想跳过某个参数，需要显示的将该参数赋值为 undefined，使用 null 的话没有效果；第四处就是 func.length，这里的 length 表示普通参数的数量，如果我们测试 arugments.length，会发现结果为 7，因为这里的 arguments.length 表示的是传入参数的数量；最后一处不是很明显，但是很重要，就是普通参数、默认值参数和 rest 参数的位置顺序。</p>\n<p>进一步还可以配合对象解构来传参：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = '', method = 'GET', headers = &#123;&#125; &#125; </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'GET'</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Cannot read property 'body' of undefined</span></span><br></pre></td></tr></table></figure>\n<p>第二个 fetch 的问题在于不能省略第二个参数，如果要省略参数，可以设置双重默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = '', method = 'GET', headers = &#123;&#125; &#125; = &#123;&#125; </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://meituan.com'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'GET'</span></span><br></pre></td></tr></table></figure>\n<p>rest 参数 <code>...rest</code> 用于将参数打包成数组，通过扩展运算符 <code>...</code>，可以执行逆运算，将数组（babel 也支持对类数对象的转换）转换为以分号分隔的参数序列：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, ...rest, <span class=\"number\">21</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [0,1,1,2,3,5,8,13,21]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际运用</span></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n<p>接下来是比较亮眼的箭头函数<code>=&gt;</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; k: v &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = (k, v) =&gt; ( &#123; k: v &#125; );</span><br></pre></td></tr></table></figure>\n<p>看到箭头函数的第一感官就是：简洁。另一个重要的点在于，箭头函数绑定了 this 对象，其特点如下：</p>\n<ol>\n<li>this 对象的指向是可变，但在箭头函数中，它固定的志向定义时所在的对象，而不是使用时所在的对象</li>\n<li>不可以用于构造函数</li>\n<li>不可以使用 arguments 对象，可以使用 rest 参数代替</li>\n<li>不能用作 Generator 函数，所以不能使用 yield 命令</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">    &#125;,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call( &#123; id: <span class=\"number\">42</span> &#125; );</span><br><span class=\"line\"><span class=\"comment\">// id: 42</span></span><br></pre></td></tr></table></figure>\n<p>之所以 this 的指向是固定的，根据 babel 的实现来说，是因为箭头函数内并没有 this 对象，无论箭头函数嵌套多少层，它都是指向定时所在的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call( &#123; id: <span class=\"number\">42</span> &#125; )()()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// babel 编译结果</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"id:\"</span>, _this.id);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(&#123; id: <span class=\"number\">42</span> &#125;)()()();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES7 提出了函数绑定的概念，使用双冒号 <code>::</code> 来替代 call/apply/bind 的调用，目前 babel 已经支持该特性，双冒号左侧是一个对象，右侧是一个函数，实现以左边对象为上下文对象的右边函数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; id: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj::f();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 123</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>最后，讲讲尾函数调用的优化问题。在函数式编程中，如果某个函数的最后一步是函数调用过程，那么这一过程就成为尾调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的函数并不是尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面示例相当于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    g(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数调用过程是不断入栈出栈的过程，由于尾调用是最后一步操作，所以不需要保存外层函数的调用，这被称为尾调用优化，即只保留内层函数的调用帧，这种优化的好处是如果函数都是尾调用，那么就可以优化到每次尾调用都只保留一层调用，大大节省内存，这就是尾调用优化的意义。</p>\n<p>函数调用自身的过程，成为递归，如果尾调用自身，则称为尾递归。下面是一个阶乘函数，没有使用尾递归，最多需要保存 n 个调用记录，复杂度为 O(n)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n === <span class=\"number\">1</span> ) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial( n - <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用尾递归改写，只保留一个调用记录，复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"comment\">// Babel 检测到尾调用时使用 while 循环执行函数体</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br></pre></td></tr></table></figure>\n<p>鉴于尾调用优化的在性能上的良好表现，EMCAScript 明确规定，所有 ECMAScript 的实现都应该实现“尾调用优化”。</p>\n<blockquote>\n<p>为了确保最后一步调用自身实现尾递归优化，就需要把函数内部用到的变量转换为函数的参数，比如上面的 total，不过这样的处理方式并不容易理解，优化方式有两种，一种是函数柯里化，另一种方式就是使用默认值参数：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\">fn, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, m, n);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailFactorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tailFactorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> factorial = currying(tailFactorial, <span class=\"number\">1</span>);</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total = 1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>ES6 在编码的简洁性上做了很多工作，比如上面的箭头函数，比如下面的对象声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; foo &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 相当于 obj = &#123; foo: foo &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    getSth ( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; x, y &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 相当于 return &#123; x: x, y: y &#125;;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 相当于 getSth: function ( x, y ) &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES2015 新增了一个 Object.is() 方法来比较两个值是否相等，主要解决两方面的问题：一是 <code>==</code> 比较时的数据类型自动转换，一是 <code>===</code> 比较时 NaN 不等于自身、<code>+0</code> 等于 <code>-0</code> 的问题。Object.is() 实现的原则是：只要两个值一样，就应该相等（Same-value equality）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p><code>Object.assign(target, source1, source2)</code> 用于将 source1/source2… 的属性拷贝到 target 中，遇到同名属性自动覆盖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o1 = &#123; </span><br><span class=\"line\">    id: <span class=\"number\">123</span>, </span><br><span class=\"line\">    meta: &#123; </span><br><span class=\"line\">        age: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o2 = &#123; </span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, o1, o2);</span><br><span class=\"line\">target</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"id\":123,\"meta\":&#123;\"age\":2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>到目前为止，一共有六种方法可以遍历对象的属性：</p>\n<ol>\n<li><code>for...in</code>，循环遍历对象自身的和集成的可枚举属性（不包含 Symbol 属性）</li>\n<li><code>object.keys(obj)</code>，返回一个数组，包括自身所有可枚举属性（不含 Symbol 属性和继承属性）</li>\n<li><code>Object.getOwnPropertyNames(obj)</code>，返回一个数组，包含对象自身的所有属性（不含Symbol属性，包括不可枚举属性）</li>\n<li><code>Object.getOwnPropertySymbols(obj)</code>，返回一个数组，包含对象自身的所有Symbol属性</li>\n<li><code>Reflect.ownKeys(obj)</code>，返回一个数组，包含对象自身的所有属性，包括 Symbol 和不可枚举属性</li>\n<li><code>Reflect.enumerate(obj)</code> 返回一个 Iterator 对象，结果与 <code>for...in</code> 相同</li>\n</ol>\n<p>以上六种遍历方法，都遵守同样的遍历次序：</p>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(&#123; [<span class=\"built_in\">Symbol</span>()]:<span class=\"number\">0</span>, b:<span class=\"number\">0</span>, <span class=\"number\">10</span>:<span class=\"number\">0</span>, <span class=\"number\">2</span>:<span class=\"number\">0</span>, a:<span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure>\n<p><code>__proto__</code> 是一个没有正式规范，被浏览器广泛支持的属性，ES6 提供了新的方法来代替对该属性的操作：<code>Object.setPrototypeOf()</code> / <code>Object.getPrototypeOf()</code> / <code>Object.create()</code>。</p>\n<h2 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h2><p>Symbol 是 ES2015 加入的第七种数据类型，它与 undefined/null/boolean/string/number 都是原始数据类型，Symbol 用来实现一种独一无二的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> s;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'symbol'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.toString();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'Symbol(foo)'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s2 === s1;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 独一无二的特性非常适合作为对象的属性名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">    [s]: <span class=\"string\">'Hi'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">o.s</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'undefined'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>[s]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'hi'</span></span><br></pre></td></tr></table></figure>\n<p>在对使用 Symbol 作为属性名的对象进行遍历时，Symbol 属性不会出现在 for…in、for…of 循环中，也不会出现在 Object.keys()、Object.getOwnPropertyNames() 的返回值中。虽然如此，Symbol 并不是私有属性，可以通过 Object.getOwnPropertySymbols() 来获取指定对象的所有 Symbol 属性名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'baz'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    [s1]: <span class=\"number\">123</span>,</span><br><span class=\"line\">    [s2]: <span class=\"string\">'abc'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ss = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj);</span><br><span class=\"line\"><span class=\"comment\">// [ Symbol(foo), Symbol(baz) ]</span></span><br></pre></td></tr></table></figure>\n<p>要获取相同的 Symbol，可以调用系统的 Symbol.for()，该方法接受一个字符串作为参数，它会检测是否存在以该字符串参数名称的 Symbol 值，找到就返回，没有就创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>上面示例中用作参数的字符串又被成为 Symbol 的 key，使用 Symbol.keyFor() 可以查看这个 key:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'foo'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Proxy-and-Reflect\"><a href=\"#Proxy-and-Reflect\" class=\"headerlink\" title=\"Proxy and Reflect\"></a>Proxy and Reflect</h2><p>Proxy，顾名思义，用于代替特定对象与外界进行交互的对象，简称代理对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(target);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.xxx</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'getting xxx'</span></span><br></pre></td></tr></table></figure>\n<p>Proxy 的拦截操作概览：</p>\n<ul>\n<li>get()，拦截属性的读取</li>\n<li>set()，拦截属性的设置</li>\n<li>has()，拦截 propKey in proxy 操作</li>\n<li>deleteProperty()，拦截 delete proxy[propKey] 操作</li>\n<li>enumerate()，拦截 for ( let x in proxy ) 操作</li>\n<li>ownKeys()</li>\n<li>getOwnPropertyDescriptor()</li>\n<li>defineProperty()</li>\n<li>preventExtensions()</li>\n<li>getPrototypeOf()</li>\n<li>isExtensible()</li>\n<li>setPrototypeOf()</li>\n<li>apply()</li>\n<li>construct()</li>\n</ul>\n<p>使用 Proxy.revocable() 可以创建一个可撤销拦截的代理对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; proxy, revoke &#125; = <span class=\"built_in\">Proxy</span>.revocable(&#123;&#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>Reflect 对象的设计初衷：</p>\n<ol>\n<li>将 object 对象上明显属于语言内部的方法（Object.defineProperty）放到 Reflect 对象上</li>\n<li>修改某些 Object 对象的返回结果，使其更可控，比如 Object.defineProperty() 在无法定义属性时会抛出错误，而 Reflect.defineProperty() 则会返回 false</li>\n<li>让 Object 操作统一为函数行为，比如 name in obj 和 delete obj[name]，使用 Reflect.has() 和 Reflect.deleteProperty() 来执行</li>\n<li>Reflect 对象的方法和 Proxy 对象的方法一一对应，两者高度统一，方便 Proxy 对象调用对应的 Reflect 方法 —— 不管 Proxy 怎么拦截和修改，总可以在 Reflect 上获取默认行为</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object 操作对比 Reflect 操作</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, prop, attr);</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, prop, attr)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set-and-Map\"><a href=\"#Set-and-Map\" class=\"headerlink\" title=\"Set and Map\"></a>Set and Map</h2><p>ES2015 提供的 Set 数据结构是数组的一个约束，两者的差别就在于 Set 中没有重复值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set 的参数必须实现了 iterator 接口</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'2'</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, 2, \"2\" ]</span></span><br></pre></td></tr></table></figure>\n<p>Set 实例绑定的方法可以分为两类：数据操作方法和成员遍历方法：</p>\n<p><img src=\"/img/es2015-set-methods.png\" alt=\"set methods\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.has(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.delete(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">set.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"><span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>在遍历时，由于 Set 结构没有键名，只有键值，所以 keys() 和 values() 的返回值一致：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> set.keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; red</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; green</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> set.values() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; red</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; green</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> set.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"red\",\"red\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"green\",\"green\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [\"blue\",\"blue\"]</span></span><br></pre></td></tr></table></figure>\n<p>下面是一个 Set 结构的实例，用来求取两个 Set 结构的并交差集：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> union = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x, ...y]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> intersection = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x].filter( x =&gt; y.has(x) ));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> diffset = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...x].filter( x =&gt; !y.has(x) ));</span><br></pre></td></tr></table></figure>\n<p>WeakSet 结构和 Set 结构相似，也是不重复值的集合，差异在于两个地方：一是 WeakSet 内部的元素只能是对象，二是 WeakSet 内部的对象是弱引用，垃圾回收机制不考虑 WeakSet 中对象的引用计数。</p>\n<p>由于 WeakSet 结构的对象是弱引用，随时可能消失，所以没有 size 属性，也无法进行遍历，只具有 Set 结构中的三个操作方法：add() / delete() / has()。</p>\n<p>Map 结构是对现有 Object 对象的扩展，Object 中的 key 只能是字符串和 Symbol（ES2015 新增），Map 中的 key 可以是任意数据类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; id: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(obj, <span class=\"string\">'hi'</span>);</span><br><span class=\"line\">map.get(obj);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'hi'</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.has(obj);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(obj);</span><br><span class=\"line\">map.has(obj);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key 绑定内存地址</span></span><br><span class=\"line\">map.set(&#123;&#125;, <span class=\"string\">'object'</span>);</span><br><span class=\"line\">map.get(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>下面在 Map 初始化的时候传入一个二维数组创建 Map：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">    [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> map.values() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; one</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; two</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; three</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1,\"one\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [2,\"two\"]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [3,\"three\"]</span></span><br></pre></td></tr></table></figure>\n<p>WeakMap 是弱引用的 Map 结构，而且 WeakMap 只能以对象作为键值，不接受其他类型的值作为键名。</p>\n<h2 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h2><p>现在，JS 中表示集合的数据结构包括 String、Array、Object、Map、Set、WeakMap、WeakSet 七种数据结构。Iterator 提供了一种接口，为各种不同的数据结构提供统一的接口，任何数据结构只要部署了 Iterator 结构，就可以完成遍历操作，目前，String、Array、Map 和 Set 是默认部署了该接口的数据结构，Array-like object 可以通过 Array.from() 转换为 Array 使用该接口。</p>\n<p>Iterator 的作用主要有三点：</p>\n<ul>\n<li>为数据结构提供统一的访问接口</li>\n<li>使得数据接口的成员可以按照某种次序排列</li>\n<li>供 for…of 使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> it = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>凡是数据结构原生部署了 Symbol.iterator 属性，则具备 Iterator 接口，调用该接口，就可以得到一个遍历器对象。遍历器对象调用 next() 方法一次可以得到数据结构的所有成员，next() 返回一个对象，包括 value 和 done 属性。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性上，部署该属性的数据结构都被认为是可遍历的。在某些场合会自动调用遍历器接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\">[x, y] = [x, y]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ... of</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from()</span><br><span class=\"line\"><span class=\"built_in\">Map</span>() / <span class=\"built_in\">Set</span>() / <span class=\"built_in\">WeakMap</span>() / <span class=\"built_in\">WeakSet</span>()</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all()</span><br><span class=\"line\">Promis.race()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// yield*</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>遍历语法的发展：</p>\n<ul>\n<li>for 遍历，语法繁琐</li>\n<li>forEach()，不能使用 break、continue、return 退出循环</li>\n<li>for…in，为对象设计，遍历数组时会自动将索引转换为字符串</li>\n<li>for…of，修复上述问题，可以遍历实现 iterator 接口的数据接口，不支持对普通对象的遍历</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> arr ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, arr[key]]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"0\", \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"1\", \"b\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ \"2\", \"c\" ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> arr.entries() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([key, value]);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, \"a\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 1, \"b\" ]</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 2, \"c\" ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>Generator 函数是 ES2015 提供的一种异步编程解决方案。可以将 Generator 视为一个有限状态机，内部封装了多个状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">it.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Generator 函数返回的遍历器对象需要调用 next 函数才会遍历到下一个内部状态，并且通过函数内部的 yield 命名挂起函数。遍历器对象 next 方法的运行逻辑：</p>\n<ol>\n<li>执行 next 函数，遇到 yield 命令挂起函数的执行，并且返回 yield 命令后表达式的值，作为返回的遍历器对象的 value 属性</li>\n<li>继续执行 next 函数，直到遇到下一个 yield，然后挂起函数</li>\n<li>如果没有再遇到 return，就运行到函数结束。函数结束时如果有 return，返回 return 后面表达式的值作为返回对象的 value 属性</li>\n<li>如果没有 return 表达式，则返回对象的 value 属性为 undefined</li>\n</ol>\n<p><img src=\"/img/es2015-generator-yield.png\" alt=\"es2015-generator-yield\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: true, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Generator 函数返回的对象都部署了 Iterator 接口 [Symbol.iterator]，所以，我们可以使用 for…of 循环来遍历 Generator 函数，当返回对象的 done 属性为 true 时，循环自动中止：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> gen() ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<p>Generator 返回的对象附带两个方法：throw() 和 return，用于手动抛出异常和结束 Generator 函数。</p>\n<p>如果要在 Generator 函数内调用另外一个 Generator 函数，需要使用 <code>yield*</code>，实际上如果 yield 后面跟的是一个遍历器对象，都可以使用 <code>yield*</code> 来解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 等同于 </span></span><br><span class=\"line\">    <span class=\"comment\">// yield 2;</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 3;</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 4;</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果对象的某个属性是 Generator 函数，形式上有所不同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    * gen () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = obj.gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Object &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>前面有数组推导，Generator 函数也有推导，Generator 函数推导的优势在于它是惰性求值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bigArr</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ret = ( <span class=\"keyword\">for</span> ( n <span class=\"keyword\">of</span> bigArr() ) <span class=\"keyword\">if</span> ( n &lt; <span class=\"number\">10</span> ) n * n );</span><br><span class=\"line\"></span><br><span class=\"line\">[...ret]</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81 ]</span></span><br></pre></td></tr></table></figure>\n<p>下面是使用 Generator 函数实现的一个状态机：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> _;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'on'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> _;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'off'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// on</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// off</span></span><br><span class=\"line\">g.next()</span><br><span class=\"line\"><span class=\"comment\">// on</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>JS 解析引擎是单线程，只能保持一个调用栈，为了保持多个任务独立的调用栈，引入了协程。Generator 函数是 ES2015 对协程的实现，但不是完整的实现，完整的协程应该可以通过任何函数实现暂停，但是只有 Generator 函数的调用者才能结束 Generator 函数。</p>\n<p>如果将 Generator 函数当做协程，可以将多个需要写作的任务都写成 Generator 函数，使用 yield 命令交换控制权。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>在 ES2015 之前，Promise 早有实现，ES2015 规范统一了 Promise 的用法。Promise 对象共有三个状态：Pending、Resolved 和 Rejected。Promise 对象的状态只能从 Pending 变为 Resolved 或者从 Pending 变为 Rejected。</p>\n<p>Promise 对象存在的价值是将异步操作以同步操作的流程表达出来，避免层层嵌套的回调函数，并且提供了统一的接口，便于控制异步操作。不过，Promise 也存在一些缺点：</p>\n<ul>\n<li>创建后立即执行，无法中途取消</li>\n<li>如果不设置回调函数，无法抛出内部错误</li>\n<li>处于 Pending 状态时，无法获得具体状态（刚刚开始还是即将完成）</li>\n</ul>\n<p>ES2015 规定，Promise 对象是一个构造函数，用于生成 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">1000</span>, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then((value) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1000ms 后</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'done'</span></span><br></pre></td></tr></table></figure>\n<p>Promise 实例具有两个方法：then(resolved，rejected) 和 catch()。catch() 相当于是 <code>.them(null, rejected)</code> 的缩写，用于指定发生错误时的回调函数。</p>\n<p>Promise 对象本身还有四个方法：all()、race()、resolve()、reject()。Promise.all() 方法接收包含多个 Promise 实例的一个数组，打包封装成一个 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br><span class=\"line\"><span class=\"comment\">// p 的状态取决于 p1、p2、p3</span></span><br><span class=\"line\"><span class=\"comment\">// p1、p2、p3 全部 resolved 时，p resolved</span></span><br><span class=\"line\"><span class=\"comment\">// p1、p2、p3 有一个 rejected，p rejected</span></span><br></pre></td></tr></table></figure>\n<p>Promise.race() 同样打包多个返回一个 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br><span class=\"line\"><span class=\"comment\">// 与 Promise.all() 的不同之处在于，</span></span><br><span class=\"line\"><span class=\"comment\">// p 的状态取决于 p1、p2、p3 中状态最先发生变化的那个</span></span><br></pre></td></tr></table></figure>\n<p>Promise.resolve() 方法用于将现有对象转换为 Promise 对象；Promise.reject() 方法返回一个 Promise 实例，该实例的默认状态就是 rejected。</p>\n<p>ES2015 的 Promise API 并不是很多，可以根据自己的开发需要部署特定的方法，比如我们可以部署两个比较常用的方法：done() 和 finally()。Promise 实例以 then() 或 catch() 方法作为结尾方法时，如果结尾方法抛出错误，是有可能无法捕捉到的，所以可以实现一个 done 方法置于回调链的结尾，保证抛出的任何方法都能被捕获：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then(onFulfilled, onRejected)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 抛出一个全局错误</span></span><br><span class=\"line\">            setTimeout(() =&gt; &#123; <span class=\"keyword\">throw</span> reason &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>finally() 方法用于指定回调链的最终操作，与 done 方法的区别在于，它接受一个普通的回调函数作为参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务器使用 Promise 处理请求，使用 finally 关掉服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;)</span><br><span class=\"line\">    .finally(server.stop);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> P = <span class=\"keyword\">this</span>.constructor;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">        value  =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class=\"line\">        reason =&gt; P.resolve(callback()).then(() =&gt; &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h2><p>我们有回调函数、Promise 以及 Generator 这三种异步编程方式了，为什么在此之外还要提供 Async 函数？因为它们本身还有一些问题：</p>\n<ul>\n<li>回调函数的最大问题是回调嵌套</li>\n<li>Promise 解决了回调嵌套的问题，但是被 then 方法包装后的代码存在冗余问题，语义和理解性较差</li>\n<li>Generator 的代码写起来非常像同步代码，如果去除 yield 命令，简直就是同步代码，但是它失去了 Promise 可以自动执行的特性，所以它的缺点就是需要创建一个自动执行函数（Thunk 函数），或者使用三方模块（co），总之要驱动它自执行。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Callback Hell</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> finalCallback </span>) </span>&#123;</span><br><span class=\"line\">    request.get(url1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err1, res1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err1) <span class=\"keyword\">return</span> finalCallback(err1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        request.post(url2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err2, res2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err2) <span class=\"keyword\">return</span> finalCallback(err2);</span><br><span class=\"line\">            </span><br><span class=\"line\">            request.put(url3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err3, res3</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err3) <span class=\"keyword\">return</span> finalCallback(err3);</span><br><span class=\"line\">                </span><br><span class=\"line\">                request.del(url4, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err4, res4</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err4) <span class=\"keyword\">return</span> finalCallback(err4);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    finalCallback(<span class=\"literal\">null</span>, <span class=\"string\">\"whew all done\"</span>);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request.getAsync(url1)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res1</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.postAsync(url2);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.putAsync(url3);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res3</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request.delAsync(url4);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res4</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generator</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> co <span class=\"keyword\">from</span> <span class=\"string\">'co'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">yield</span> request.getAsync(url1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">yield</span> request.getAsync(url2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">yield</span> request.getAsync(url3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res4 = <span class=\"keyword\">yield</span> request.getAsync(url4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">co(gen);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Async</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">await</span> request.getAsync(url1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">await</span> request.getAsync(url2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">await</span> request.getAsync(url3);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res4 = <span class=\"keyword\">await</span> request.getAsync(url4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"whew all done\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器的惰性求值往往是将参数放入临时函数中实现的，在求值时调用这个临时函数，这个临时函数叫做 Thunk 函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">temp</span> (<span class=\"params\"> v </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">temp( x + <span class=\"number\">5</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">temp</span> (<span class=\"params\"> v </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> thunk() + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 JS 中，Thunk 函数要做的是将多参数函数转换为单参数函数，且只接受回调函数作为参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常版本的readFile（多参数版本）</span></span><br><span class=\"line\">fs.readFile(fileName, callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thunk版本的readFile（单参数版本）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileThunk = Thunk(fileName);</span><br><span class=\"line\">readFileThunk(callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fs.readFile(fileName, callback);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>任何函数，只要参数是回调函数，就能写成 Thunk 函数的形式，下面是一个简单的 Thunk 函数转换器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Thunk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            args.push(callback);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>之所以要提 Thunk 函数，是因为它可以驱动 Generator 函数自执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = fn();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = gen.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        result.value(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(gen);</span><br></pre></td></tr></table></figure>\n<p>ES7 提供了 Async 函数，它相当于是 Generator 函数的语法糖。下面使用两种函数读取文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">cosnt readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generator 函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Async</span></span><br><span class=\"line\">cosnt asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cosnt f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    cosnt f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，两者在语法上有所不同，但这不是最重要的，重要的是一下三点：</p>\n<ol>\n<li>Async 函数内置自动执行器，而 Generator 需要自己写自动执行函数或者使用第三方库，比如 co</li>\n<li>更广的适应性，co 模块约定 yield 后面只能是 Thunk 函数或者是 Promise 对象，而 Async 函数的 await 后面可以使用 Promise 对象或原始值类型（此时等于同步操作）</li>\n<li>Async 的返回值是 Promise 对象，这比 Generator 返回的 Iterator 对象要更方便一些，可以使用 then() 来制定下一步的操作逻辑</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<p>await 命令后面跟着一个 Promise 对象，运行结果可能是 rejected，需要使用 try…catch 来捕获异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> P();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> P().catch( err =&gt; <span class=\"built_in\">console</span>.log(err) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>JS 传统的原型继承等方式和其他语言差异较大，造成了一定的学习难度。ES2015 提供了和其他语言相仿的面向对象语法，引入了 Class 的概念，用作对象的模板：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`( <span class=\"subst\">$&#123;this.x&#125;</span>, <span class=\"subst\">$&#123;this.y&#125;</span> )`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">p.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; ( 3, 4 )</span></span><br></pre></td></tr></table></figure>\n<p>上例中的 constructor 是构造方法，this 代表实例对象。constructor 方法是类的默认方法，使用 new 命令生成对象实例时，自动调用盖房，如果没有显示定义该方法，就会自动添加一个空的 constructor 方法，constructor 方法默认返回类的实例对象，该返回值完全是可以修改的。</p>\n<p>Class 之间使用 extends 关键字实现继承，这种写法比 ES5 要简洁很多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>( x, y ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`( <span class=\"subst\">$&#123;this.x&#125;</span>, <span class=\"subst\">$&#123;this.y&#125;</span> )`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( x, y, color ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"keyword\">super</span>.getInfo() + <span class=\"string\">` is <span class=\"subst\">$&#123;this.color&#125;</span>`</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"keyword\">new</span> ColorPoint( <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"string\">'red'</span> );</span><br><span class=\"line\">cp.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; ( 3, 4 ) is red</span></span><br></pre></td></tr></table></figure>\n<p>在继承类的构造函数中出现了 super()，它指代父类的 this 对象。子类必须在 constructor 中调用 super 方法，否则新建实例会报错，这是因为子类没有自己的 this 对象，而是使用继承自父类的 this 对象，一切都是基于对这个 this 的加工处理，如果不调用 super()，就得不到 this 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"keyword\">new</span> ColorPoint();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Babel: 'this' is not allowed before super()</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; Firefox: ReferenceError: |this| used uninitialized in ColorPoint class constructor</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES5 的原型继承，实质是先创造子类的实例对象 this，然后再讲父类的方法添加到 this 上。ES6 的继承机制则是相反的，实质是先创造父类的实例对象 this（调用 super() ），然后在用子类的构造函数修改 this。</p>\n</blockquote>\n<p>类相当于实例的原型，类中定义的方法都会被实例所继承，如果不想让实例继承继承某个方法，可以通过 static 关键字设置类的静态方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> getInfo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'foo'</span></span><br><span class=\"line\">f.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; TypeError: f.getInfo is not a function</span></span><br></pre></td></tr></table></figure>\n<p>ES2015 规定类内部只有静态方法，没有静态属性，ES2016 有一个静态属性的提案，目前 Babel 已经支持：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    position = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> color = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new 是从类生成实例的命令，ES2015 的 new 命令增加了一个 <code>new.target</code> 的属性，表示 new 引用的构造函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">new</span>.target === Point ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'right'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'wrong'</span>);</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Point();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; right</span></span><br><span class=\"line\">Point.call(p, <span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Babel: wrong</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; Firefox: TypeError: class constructors must be invoked with |new|</span></span><br></pre></td></tr></table></figure>\n<p>在子类继承父类时，new.target 返回的是子类，利用这个特点，可以写出不能独立使用、必须继承后才能使用的类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target === Shape) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'本类不能实例化'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> Shape();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Error: 本类不能实例化</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decorator\"><a href=\"#Decorator\" class=\"headerlink\" title=\"Decorator\"></a>Decorator</h2><p>ES2016 的 Decorator 相当于设计模式中的装饰模式，所以下文就以装饰器来指代 Decorator。与上面提到的 Proxy（代理者，代理模式）不同，装饰器的核心作用是增强被装饰者的功能，而代理对象的作用是管理外界对被代理者的访问权限。装饰器只能用于类和类的方法，不能用于函数，因为编译时存在函数提升。修饰漆对类的行为的改变，是代码编译时发生的，而不是运行时，这意味着，修饰漆能在编译阶段运行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.assign(target.prototype, ...list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">    foo () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLS</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> CLS();</span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"><span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n<p>装饰器函数可以接收三个参数：目标函数、属性名和属性的描述对象。上例代码通过装饰器 mixins，为指定类添加了指定的方法。装饰器的一个实际应用就是注释:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meal</span> <span class=\"keyword\">extends</span> </span>&#123;</span><br><span class=\"line\">    @readonly</span><br><span class=\"line\">    entree = <span class=\"string\">'steak'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dinner = <span class=\"keyword\">new</span> Meal();</span><br><span class=\"line\">dinner.entree = <span class=\"string\">'salmon'</span>;</span><br><span class=\"line\"><span class=\"comment\">// Cannot assign to read only property 'entree' of [object Object]</span></span><br></pre></td></tr></table></figure>\n<p>除了注释功能，装饰器还能用作类型检查，长期来看，它将成为 JavaScript 代码静态分析的重要工具。</p>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>在 ES2015 之前，社区中主要有 CommonJS 和 AMD 两种模块加载方式，ES2015 提出了自己的模块功能，其设计思想是尽量的静态化，在编译时确定模块的依赖关系、输入输出变量。</p>\n<p>ES2015 module 主要由两个命令组成：<code>export</code> 和 <code>import</code>。export 用于提供对外接口，import 用于引用外部模块。每个模块都是独立的文件，外部无法直接获取模块文件的变量，只能通过 export 对外输出变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; foo, bar &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出函数和类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>export 定义了外部接口之后，可以使用 import 命令在其他模块中加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 as 命令重命名引入的变量</span></span><br><span class=\"line\"><span class=\"comment\">// import 语法存在变量提升，最好置于文件顶部</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; foo, bar <span class=\"keyword\">as</span> baz &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./modulename'</span>;</span><br></pre></td></tr></table></figure>\n<p>从上面 import 的示例中，我们发现当需要引入外部模块时，必须明确知道模块内部的变量名，这是非常不友好的方式。<code>export default</code> 命令就是为了解决这个问题存在的，其作用是为模块指定默认的输出内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 'export-default.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 'import-default.js'</span></span><br><span class=\"line\">immport customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default.js'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建议使用的特性\"><a href=\"#建议使用的特性\" class=\"headerlink\" title=\"建议使用的特性\"></a>建议使用的特性</h2><h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://es6.ruanyifeng.com/\">ECMAScript6 入门</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN JavaScript</a></li>\n</ul>"},{"title":"PhantomJS","date":"2016-04-14T04:22:56.000Z","desc":"本文介绍了 PhantomJS 的 API，并以实例介绍了 PhantomJS 的使用方式","_content":"\n[PhantomJS](https://github.com/ariya/phantomjs/) 是一个脚本化的无界面 WebKit，以 JavaScript 为脚本语言实现各项功能，官方列举的使用场景包括：无界面测试，页面自动化，屏幕截图和网络监控。在 Mac 下，可以使用 Homebrew 安装最新版本：\n\n```bash\nbrew install phantomjs\n```\n\n<!-- more -->\n\n## Command Line Interface\n\nPhantomJS 运行在终端中，通过以下格式进行调用：\n\n```bash\nphantomjs [options] somescript.js [arg1[, arg2 [, ...]]]\n```\n\n如果在终端直接执行 `phantomjs` 命令，则进入 REPL 环境。通过 `phantomjs --help` 命令可以查看详细的 `options` 参数。实际上有两种方式设置 `options`，一种是如上所示的终端传入命令的方式，另一种是将 `options` 写入一个 JSON 格式的配置文件，比如：\n\n```js\n{\n    /* Same as: --ignore-ssl-errors=true */\n    \"ignoreSslErrors\": true,\n    /* Same as: --max-disk-cache-size=1000 */\n    \"maxDiskCacheSize\": 1000,\n    /* Same as: --output-encoding=utf8 */\n    \"outputEncoding\": \"utf8\"\n}\n```\n\n然后在终端中指定该配置文件：\n\n```bash\nphantomjs --config=/path/to/config.json somescript.js [arg1[, arg2 [, ...]]]\n```\n\n值得注意的是，并不是所有的 `options` 参数都可以直接转换为 JSON 中的键名，特殊的 `options` 参数包括：\n\n- `--disk-cache` => `diskCacheEnabled`\n- `--load-images` => `autoLoadImages`\n- `--web-security` => `webSecurityEnabled`\n- `--local-storage-path` => `offlineStoragePath`\n- `--local-storage-quota` => `offlineStorageDefaultQuota`\n- `--local-to-remote-url-access` => `localToRemoteUrlAccessEnabled`\n\n## Phantom Object\n\n`phantom` 对象挂载在 window 对象下面，包含以下属性：\n\n- `phantom.cookies`，对象数组，获取或设置 cookies，cookies 信息存储在 CookieJar 中\n- `phantom.version`，只读对象，返回当前 PhantomJS 的版本信息，类似 `{ \"major\": 2, \"minor\": 1, \"patch\": 1 }`\n- `phantom.libraryPath`，字符串，为 `injectJS()` 设置查找路径\n- `phantom.cookiesEnabled`，布尔值，决定是否使用 CookieJar，默认值为 `true`\n\n包含以下方法：\n\n- `phantom.injectJS(filename)`，该方法用于执行外部脚本，如果无法根据传入的 `filename` 找到脚本，就使用 `libraryPath` 指定的路径查找脚本。脚本注入成功后返回 true，否则返回 false\n- `phantom.addCookie(Object)`，向 CookieJar 添加 cookie 信息，操作成功返回 true，否则返回 false\n- `phantom.clearCookies()`，清空 CookieJar 中的 cookie 信息，无返回值。\n- `phantom.deleteCookie(cookieName)`，删除 CookieJar 中包含 `cookieName` 属性的 cookie，操作成功返回 true，否则返回 false\n- `phantom.exit(returnValue)`，结束程序，携带退出码 `returnValue`，默认退出码为 0\n\n包含以下事件处理器：\n\n- `onError`，用于处理 `page.onError` 没有捕获的 JavaScript 执行错误，常用于捕捉全局错误，接收两个参数，一个是错误信息，另一个是数组形式的堆栈跟踪信息\n\n## Web Page module\n\n通过 `require(webpage)` 可以加载该模块，使用 `create()` 方法可以创建该模块的实例：\n\n```js\nvar webpage = require('webpage');\nvar page = webpage.create();\n```\n\n该模块包含以下属性：\n\n- `canGoBack`，回退一页\n- `canGoForward`，前进一页\n- `clipRect`，对象，该属性规定了 `page.render()` 方法对页面的裁减尺寸，默认裁剪整个页面\n- `content`，字符串，main frame 的原始内容（包含 HTML 元素），通过修改该属性可以设置新的页面内容\n- `cookies`，设置或获取当前页面的 cookie\n- `customHeaders`，对象，给发送给服务器的 HTTP 请求头添加额外的信息，默认值为空对象 `{}`，头信息的键值会被编码为 `US-ASCII` 字符\n- `event`，键盘等事件\n- `focusedFrameName`，当前激活的 Frame 页面名称\n- `frameContent`，字符串，当前激活的 Frame 的页面内容，修改该属性将会以新内容重载该页面\n- `frameName`，字符串，当前激活的 Frame 的页面名称\n- `framePlainText`，字符串，当前激活的 Frame 的页面内容，无 HTML 标签\n- `frameTitle`，字符串，当前激活的 Frame 的页面标题\n- `frameUrl`，只读字符串，当前激活的 Frame 的页面 URL\n- `framesCount`，Frame 的数量\n- `framesName`，所有 Frame 的名称\n- `libraryPath`，字符串，为 `page.injectJS` 设置默认检索路径\n- `navigationLocked`，布尔值，是否离开当前页面，默认值为 false\n- `offlineStoragePath`，字符串，离线资源的存储位置\n- `offlineStorageQuota`，数值，允许离线存储的大小\n- `ownsPages`\n- `pagesWindowName`\n- `pages`\n- `paperSize`，对象，定义了生成 PDF 的尺寸\n- `plainText`，只读字符串，页面内容，无 HTML 标签\n- `scrollPosition`，对象，滚动位置\n- `title`\n- `url`，字符串，当前页面的 URL\n- `viewportSize`，对象，常用于在初始化页面前设定 viewport 的大小，比如 `landscape` 和 `portrait`，该对象包含 `width` 和 `height` 两个属性\n- `windowName`\n- `zoomFactor`，数值，指定 `page.render` 和 `page.renderBase64` 方法的放大系数，默认值为 1，即 100% 放大\n- `settings`，对象，只能在调用 `page.open` 方法初始化页面时调用该页面，其他时间定义该属性无效。该对象包含以下属性：\n    - `javascriptEnabled`，是否允许在当前页面执行 JavaScript\n    - `loadImages`，是否允许加载图片\n    - `localToRemoteUrlAccessEnabled`，是否允许使用本地资源响应远程 URL \n    - `userAgent`，用户代理\n    - `userName`，HTTP 验证的用户名\n    - `password`，HTTP 验证的密码\n    - `XSSAuditingEnabled`，是否监控跨域请求\n    - `webSecurityEnabled`，是否启用网页安全\n    - `resourceTimeout`，定义资源请求的延时时间，超时之后将会触发 `onResourceTimeout` 事件\n\n该模块包含以下方法：\n\n- `addCookie(cookie)`，为页面添加 cookie 信息，返回布尔值\n- `clearCookies()`，清除当前 URL 下的所有 cookie 信息\n- `close()`，关闭当前页面并清空内存\n- `deleteCookie(cookieName)`，删除当前 URL 下所有包含 `cookieName` 属性的 cookie 信息，返回布尔值\n- `evaluteAsync(function, [delayMillis, arg1, arg2, ...])`，在当前页面异步执行代码，第二个参数定义了延迟执行的时间\n- `evaluteJavaScript(str)`，在当前页面执行代码，代码必须写为字符串的形式\n- `evalute(function, arg1, arg2, ...)`，在当前页面执行代码\n- `getPage(windowName)`\n- `goBack()`\n- `goForward()`\n- `go(index)`\n- `includeJs(url, callback)`，向当前页面添加额外的脚本，且当脚本执行完毕后调用回调函数\n- `injectJs(filename)`，与 `includeJs` 不同的是，加载的脚本可以跟当前页面不同域\n- `openUrl(url, httpConf, settings)`\n- `open(url, callback)`、`open(url, method, callback)`、`open(url, method, data, callback)`、`open(url, settings, callback`，打开 `url` 页面，加载完成后触发回调函数，回电函数接收一个状态参数 `status`，该状态函数的值为 `success` 或 `fail`\n- `reload`\n- `renderBase64(format)`，将页面导出为 `format` 格式，该格式的可选值包括 `PNG`、`GIF` 和 `JPEG`\n- `render(filename[, {format, quality}])`，将页面导出为 `fromat` 格式，系统会根据指定的 `filename` 文件名自动匹配格式，或者自定义格式，`quality` 是 0~100 的数值，用于指定导出文件的质量\n- 对于鼠标事件，`sendEvent(mouseEventType[, mouseX, mouseY, button=\"left\"])`，`mouseEventType` 指定了事件类型，可选值包括 `mouseup`、`mousedown`、`mousemove`、`doubleclick` 和 `click`\n- 对于键盘事件，`sendEvent(keyboardEventType, keyOrKeys, [null, null, modifier])`，`keyboardEventType` 指定了事件类型，可选值包括 `keyup`、`keypress` 和 `keydown`，第五个参数是修饰键\n- `setContent(content, url)`，用于设定 `page.content` 和 `page.url` 属性，设定完成后会重载页面\n- `stop()`\n- `switchToFocusedFrame()`\n- `switchToFrame(frameName)` 或 `switchToFrame(framePosition)`\n- `switchToMainFrame()`\n- `switchToParentFrame()`\n- `uploadFile(selector, filename)`，将 `filename` 上传到表单的 `selector` 节点\n\n```js\n// 模拟 Shift + Alt + A 键\nvar webPage = require('webpage');\nvar page = webPage.create();\n\npage.sendEvent('keypress', page.event.key.A, null, null, 0x02000000 | 0x08000000);\n```\n\n该模块包含以下事件：\n\n- `onAlert`，当页面出现 `alert` 弹出框时触发该事件，接收一个字符串参数\n- `onCallback`，当在网页调用 `window.callPhantom` 时触发该事件\n- `onClosing`，当 `WebPage` 实例被关闭时触发该事件，比如调用 `page.close()` 或 `window.close()`，接受一个 `closingPage` 参数，指向关闭的页面\n- `onConfirm`，当页面出现 `confirm` 弹出框时触发该事件，接收一个字符串参数，并返回一个布尔值\n- `onConsoleMessage`，当 JavaScript 中执行 `console` 时就会触发该事件，接收三个参数 (message, lineNumber, sourceIdentifier)\n- `onError`，当 JavaScript 出现执行错误时就会触发该事件，接受两个参数，一个是表示错误信息的字符串，一个是表示堆栈跟踪信息的数组\n- `onFilePicker`\n- `onInitialized`，当 page 实例创建后且 URL 加载前触发该事件\n- `onLoadFinished`，当页面资源加载完成后触发该事件，接收一个表示加载状态的参数 `status`，可选值为 \"success\" 和 \"fail\"\n- `onLoadStarted`，当页面开始加载资源时触发该事件\n- `onNavigationRequested`，当页面跳转时触发该事件，回调函数接收四个参数，其中 `url` 表示跳转的目标地址；`type` 的可选值包括 Undefined/LinkClocked/FormSubmitted/BackOrForward/Reload/FormResubmitted/other；`willNavigate` 是一个布尔值，表示是否会发生跳转；`main` 是一个布尔值，表示事件是否来自于 main frame\n- `onPageCreated`，当新建子窗口时触发该事件，比如 `window.open`\n- `onPrompt`，当页面出现 `prompt` 弹出框时触发该事件，接收一个字符串参数，返回一个字符串\n- `onResourceError`，当页面加载资源失败时触发该事件，回调函数接收一个 `resourceError` 的对象，该对象包含四个属性（id, url, errorCode, errorString）。\n- `onResourceReceived`，当页面成功加载资源后触发该事件，回调函数接收一个 `response` 对象，该对象包含多个属性（id, url, time, headers, bodySize, contentType, redirectURL, stage, status, statusText）\n- `onResourceRequested`，当页面请求资源时触发该事件，回调函数接收两个参数，一个是 `requestData` 对象，另一个是 `networkRequest` 对象。requestData 对象包含多个属性，包括（id, method, url, time, headers），`networkRequest` 对象包含多个方法，包括 (abort, changeUrl(newUrl), setHeader(key, value))\n- `onResourceTimeout`，当资源请求超时时触发该事件，回调函数接收一个 `request` 对象作为参数，该对象包含多个属性（id, method, url, time, headers, errorCode, errorString）\n- `onUrlChanged`，当 URL 发生变化时触发该事件，回调函数接收一个 `targetURL` 的参数\n\n## Child Process Module\n\n通过 `require('child_process')` 可以加载 Child Process 模块，该模块常用于创建子进程处理输出、发送邮件和调用其他语言脚本等任务。\n\n```js\nvar process = require(\"child_process\")\nvar spawn = process.spawn\nvar execFile = process.execFile\n\nvar child = spawn(\"ls\", [\"-lF\", \"/rooot\"])\n\nchild.stdout.on(\"data\", function (data) {\n    console.log(\"spawnSTDOUT:\", JSON.stringify(data))\n})\n\nchild.stderr.on(\"data\", function (data) {\n    console.log(\"spawnSTDERR:\", JSON.stringify(data))\n})\n\nchild.on(\"exit\", function (code) {\n    console.log(\"spawnEXIT:\", code)\n})\n\n//child.kill(\"SIGKILL\")\n\nexecFile(\"ls\", [\"-lF\", \"/usr\"], null, function (err, stdout, stderr) {\n    console.log(\"execFileSTDOUT:\", JSON.stringify(stdout))\n    console.log(\"execFileSTDERR:\", JSON.stringify(stderr))\n})\n```\n\n## File System Module\n\n通过 `require('fs')` 可以加载 File System 模块，该模块常用于处理文件和目录相关的任务。\n\n该模块包含以下属性：\n\n- `separator`，字符串，路径分隔符\n- `workingDirectory`，字符串，当前工作路径\n\n该模块包含以下方法：\n\n- `absolute(path)`，如果 `path` 是绝对路径，则返回 `path`；如果 `path` 是相对路径，则返回该相对路径相对当前工作路径的路径\n- `changeWorkingDirectory(path)`，修改当前工作路径，如果修改成功，则返回 true，否则返回 false\n- `copyTree(src, dest)`，将 `src` 路径下的文件拷贝到 `dest` 路径下，默认递归拷贝，如果拷贝失败，则抛出错误并中断执行\n- `copy(src, dest)`，将 `src` 文件拷贝为 `dest` 文件，如果找不到 `src` 文件或无法创建 `dest` 文件，则抛出错误并中断执行\n- `exissts(string)`，判断文件是否存在，返回一个布尔值，同样适用于软链接\n- `isAbsolute(string)`，判断路径是否是绝对路径，返回布尔值\n- `isDirectory(string)`，判断路径是否是目录，返回布尔值\n- `isExecutable(string)`，判断路径是否是可执行文件，返回布尔值\n- `isFile(string)`，判断路径是否是文件，返回布尔值\n- `isLink(string)`，判断路径是否是软链接，返回布尔值\n- `isReadable(string)`，判断文件是否可读，返回布尔值\n- `isWritable(stirng)`，判断文件是否可写，返回布尔值\n- `list(string)`，参数 `string` 表示相对路径，列出当前路径下的所有文件和目录\n- `makeDirectory(string)`，根据指定路径创建目录，返回值为布尔值\n- `makeTree(string)`，递归创建目录，返回值为布尔值，如果目标目录已存在，同样返回 true\n- `move(src, dest)`，将 `src` 移动到 `dest`，如果 `src` 不存在、无法删除或无法创建 `dest` 文件，则抛出错误\n- `open(path，{ mode, charset })`，第二个参数接收包含两个属性，其中 `mode` 的值是 'r'、'w'、'a/+'、'b' 之一，`charset` 是字符串编码名称。该方法返回一个 Stream 对象，开发者在使用完 Stream 之后有必要显式关闭它。\n- `readLink(string)`，该方法返回软链接指向的真实文件或目录的绝对路径，如果传入的不是软链接，则返回空字符串\n- `read(path, {mode, charset})`，打开 `path` 指定的文件并以字符串的形式返回所有内容\n- `removeDirectory(string)`，删除目录，删除时目录需要为空，否则会抛出错误\n- `removeTree(string)`，递归删除目录\n- `remove(string)`，删除文件\n- `size(string)`，如果文件存在，则返回表示文件大小的数值\n- `touch(string)`，创建空文件，如果文件已存在则不会抛出错误\n- `write(src, content, {mode, charset})`，如果无法向目标文件写入数据，则抛出错误并中断后续执行\n\n```js\nvar fs = require('fs');\n\nconsole.log('LIST: ');\nconsole.log(fs.list());\n\nconsole.log('ABSOLUTE(): ');\nconsole.log(fs.absolute('../'));\n\nconsole.log('CHANGEWORKINGDIRECTORY: ');\nconsole.log(fs.changeWorkingDirectory('../'));\nconsole.log(fs.workingDirectory);\n\nconsole.log('EXISTS: ');\nconsole.log(fs.exists('./index.js'));\nconsole.log(fs.exists('./index.html'));\n\nphantom.exit(0);\n```\n\n## System Module\n\n通过 `require('system')` 可以加载 System 模块，该模块包含以下属性：\n\n- `os`，只读对象，操作系统信息\n- `pid`，只读数值，进程 ID\n- `env`，对象，键值对形式的环境变量\n- `args`，字符串数组，从终端传入的参数，数组中的第一个元素一定是脚本名称。\n- `platform`，只读字符串，平台名称，总是返回 \"phantomjs\"\n\n```js\nvar system = require('system');\n\nconsole.log('ARGS: ');\nconsole.log(system.args);\nconsole.log('OS: ');\nconsole.log(Object.keys(system.os));\nconsole.log('ENV: ');\nconsole.log(Object.keys(system.env));\nconsole.log('PID: ');\nconsole.log(system.pid);\nconsole.log('PLATFORM: ');\nconsole.log(system.platform);\n```\n\n## Web Server Module\n\n通过 `require('webserver')` 可以加载 Web Server 模块，该模块包含以下属性：\n\n- `port`，只读属性，服务器监听的端口\n\n包含以下方法：\n\n- `close()`，该方法用于关闭服务器\n- `listen()`，该方法用于监听指定的端口，该方法接收三个参数，第一个参数是监听端口，既可以是 port（比如 8080），也可以是 ipaddress:port（比如 127.0.0.1:8080）；第二个参数是一个可选对象，该对象目前只包含属性 `keepAlive`，如果值为 true，则使用持久连接；最后一个参数是一个回调函数，该回调函数接收 request 和 response 两个参数。\n\n回调函数中的 `request` 对象包含以下属性：\n\n- `method`，请求方法，比如 `GET` 和 `POST`\n- `url`，返回请求 URL 的路径和查询字符串部分\n- `httpVersion`，HTTP 版本\n- `headers`，键值对形式的 HTTP 头信息\n- `post`，请求体（对于 `POST` 和 `PUT` 请求有效）\n- `postRaw`，如果 `Content-Type: application/x-www-form-urlencoded`，post 的原始内容就会保存在该属性中，且 post 中的数据会被转义\n\n回调函数中的 `response` 对象包含以下属性和方法：\n\n- `headers`，键值对形式的 HTTP 请求头，该属性必须调用 `write()` 之前配置好\n- `statusCode`，设置返回的 HTTP 状态码\n- `setHeader(name, value)`，设置头信息\n- `header(name)`，获取头信息\n- `setEncoding(encoding)`，设置数据的编码格式，默认值为 UTF-8，如果数据是二进制数据，则应该设为 \"binary\"\n- `write(data)`，向响应体发送数据块，可以反复调用\n- `writeHead(statusCode, headers)`，向请求发送响应头信息，`statusCode` 是一个三位的 HTTP 状态码，`headers` 是响应头信息\n- `close()`，关闭 HTTP 连接。为了避免客户端检测到连接中断，最后最好调用一下 `write()`，比如 `response.write(\"\")`\n- `closeGracefully()`，`close()` 的温和版本，确保优先发送响应头信息并在最后发送 `response.write(\"\")`\n\n```js\nvar webserver = require('webserver');\nvar server = webserver.create();\nvar service = server.listen('127.0.0.1:8989', {\n    keepAlive: true\n}, function(req, res) {\n    res.statusCode = 200;\n    res.write('<html><body>Hello!Sean</body></html>');\n    res.close();\n});\n\nconsole.log(\"Server is runing at \" + server.port);\n```\n\n## 实践演练\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### 参考资料\n\n- [PhantomJS 官方文档](http://phantomjs.org/documentation/)\n- [PhantomJS 官方 API](http://phantomjs.org/api/)","source":"_posts/PhantomJS.md","raw":"title: PhantomJS\ndate: 2016-04-14 12:22:56\ndesc: 本文介绍了 PhantomJS 的 API，并以实例介绍了 PhantomJS 的使用方式\n---\n\n[PhantomJS](https://github.com/ariya/phantomjs/) 是一个脚本化的无界面 WebKit，以 JavaScript 为脚本语言实现各项功能，官方列举的使用场景包括：无界面测试，页面自动化，屏幕截图和网络监控。在 Mac 下，可以使用 Homebrew 安装最新版本：\n\n```bash\nbrew install phantomjs\n```\n\n<!-- more -->\n\n## Command Line Interface\n\nPhantomJS 运行在终端中，通过以下格式进行调用：\n\n```bash\nphantomjs [options] somescript.js [arg1[, arg2 [, ...]]]\n```\n\n如果在终端直接执行 `phantomjs` 命令，则进入 REPL 环境。通过 `phantomjs --help` 命令可以查看详细的 `options` 参数。实际上有两种方式设置 `options`，一种是如上所示的终端传入命令的方式，另一种是将 `options` 写入一个 JSON 格式的配置文件，比如：\n\n```js\n{\n    /* Same as: --ignore-ssl-errors=true */\n    \"ignoreSslErrors\": true,\n    /* Same as: --max-disk-cache-size=1000 */\n    \"maxDiskCacheSize\": 1000,\n    /* Same as: --output-encoding=utf8 */\n    \"outputEncoding\": \"utf8\"\n}\n```\n\n然后在终端中指定该配置文件：\n\n```bash\nphantomjs --config=/path/to/config.json somescript.js [arg1[, arg2 [, ...]]]\n```\n\n值得注意的是，并不是所有的 `options` 参数都可以直接转换为 JSON 中的键名，特殊的 `options` 参数包括：\n\n- `--disk-cache` => `diskCacheEnabled`\n- `--load-images` => `autoLoadImages`\n- `--web-security` => `webSecurityEnabled`\n- `--local-storage-path` => `offlineStoragePath`\n- `--local-storage-quota` => `offlineStorageDefaultQuota`\n- `--local-to-remote-url-access` => `localToRemoteUrlAccessEnabled`\n\n## Phantom Object\n\n`phantom` 对象挂载在 window 对象下面，包含以下属性：\n\n- `phantom.cookies`，对象数组，获取或设置 cookies，cookies 信息存储在 CookieJar 中\n- `phantom.version`，只读对象，返回当前 PhantomJS 的版本信息，类似 `{ \"major\": 2, \"minor\": 1, \"patch\": 1 }`\n- `phantom.libraryPath`，字符串，为 `injectJS()` 设置查找路径\n- `phantom.cookiesEnabled`，布尔值，决定是否使用 CookieJar，默认值为 `true`\n\n包含以下方法：\n\n- `phantom.injectJS(filename)`，该方法用于执行外部脚本，如果无法根据传入的 `filename` 找到脚本，就使用 `libraryPath` 指定的路径查找脚本。脚本注入成功后返回 true，否则返回 false\n- `phantom.addCookie(Object)`，向 CookieJar 添加 cookie 信息，操作成功返回 true，否则返回 false\n- `phantom.clearCookies()`，清空 CookieJar 中的 cookie 信息，无返回值。\n- `phantom.deleteCookie(cookieName)`，删除 CookieJar 中包含 `cookieName` 属性的 cookie，操作成功返回 true，否则返回 false\n- `phantom.exit(returnValue)`，结束程序，携带退出码 `returnValue`，默认退出码为 0\n\n包含以下事件处理器：\n\n- `onError`，用于处理 `page.onError` 没有捕获的 JavaScript 执行错误，常用于捕捉全局错误，接收两个参数，一个是错误信息，另一个是数组形式的堆栈跟踪信息\n\n## Web Page module\n\n通过 `require(webpage)` 可以加载该模块，使用 `create()` 方法可以创建该模块的实例：\n\n```js\nvar webpage = require('webpage');\nvar page = webpage.create();\n```\n\n该模块包含以下属性：\n\n- `canGoBack`，回退一页\n- `canGoForward`，前进一页\n- `clipRect`，对象，该属性规定了 `page.render()` 方法对页面的裁减尺寸，默认裁剪整个页面\n- `content`，字符串，main frame 的原始内容（包含 HTML 元素），通过修改该属性可以设置新的页面内容\n- `cookies`，设置或获取当前页面的 cookie\n- `customHeaders`，对象，给发送给服务器的 HTTP 请求头添加额外的信息，默认值为空对象 `{}`，头信息的键值会被编码为 `US-ASCII` 字符\n- `event`，键盘等事件\n- `focusedFrameName`，当前激活的 Frame 页面名称\n- `frameContent`，字符串，当前激活的 Frame 的页面内容，修改该属性将会以新内容重载该页面\n- `frameName`，字符串，当前激活的 Frame 的页面名称\n- `framePlainText`，字符串，当前激活的 Frame 的页面内容，无 HTML 标签\n- `frameTitle`，字符串，当前激活的 Frame 的页面标题\n- `frameUrl`，只读字符串，当前激活的 Frame 的页面 URL\n- `framesCount`，Frame 的数量\n- `framesName`，所有 Frame 的名称\n- `libraryPath`，字符串，为 `page.injectJS` 设置默认检索路径\n- `navigationLocked`，布尔值，是否离开当前页面，默认值为 false\n- `offlineStoragePath`，字符串，离线资源的存储位置\n- `offlineStorageQuota`，数值，允许离线存储的大小\n- `ownsPages`\n- `pagesWindowName`\n- `pages`\n- `paperSize`，对象，定义了生成 PDF 的尺寸\n- `plainText`，只读字符串，页面内容，无 HTML 标签\n- `scrollPosition`，对象，滚动位置\n- `title`\n- `url`，字符串，当前页面的 URL\n- `viewportSize`，对象，常用于在初始化页面前设定 viewport 的大小，比如 `landscape` 和 `portrait`，该对象包含 `width` 和 `height` 两个属性\n- `windowName`\n- `zoomFactor`，数值，指定 `page.render` 和 `page.renderBase64` 方法的放大系数，默认值为 1，即 100% 放大\n- `settings`，对象，只能在调用 `page.open` 方法初始化页面时调用该页面，其他时间定义该属性无效。该对象包含以下属性：\n    - `javascriptEnabled`，是否允许在当前页面执行 JavaScript\n    - `loadImages`，是否允许加载图片\n    - `localToRemoteUrlAccessEnabled`，是否允许使用本地资源响应远程 URL \n    - `userAgent`，用户代理\n    - `userName`，HTTP 验证的用户名\n    - `password`，HTTP 验证的密码\n    - `XSSAuditingEnabled`，是否监控跨域请求\n    - `webSecurityEnabled`，是否启用网页安全\n    - `resourceTimeout`，定义资源请求的延时时间，超时之后将会触发 `onResourceTimeout` 事件\n\n该模块包含以下方法：\n\n- `addCookie(cookie)`，为页面添加 cookie 信息，返回布尔值\n- `clearCookies()`，清除当前 URL 下的所有 cookie 信息\n- `close()`，关闭当前页面并清空内存\n- `deleteCookie(cookieName)`，删除当前 URL 下所有包含 `cookieName` 属性的 cookie 信息，返回布尔值\n- `evaluteAsync(function, [delayMillis, arg1, arg2, ...])`，在当前页面异步执行代码，第二个参数定义了延迟执行的时间\n- `evaluteJavaScript(str)`，在当前页面执行代码，代码必须写为字符串的形式\n- `evalute(function, arg1, arg2, ...)`，在当前页面执行代码\n- `getPage(windowName)`\n- `goBack()`\n- `goForward()`\n- `go(index)`\n- `includeJs(url, callback)`，向当前页面添加额外的脚本，且当脚本执行完毕后调用回调函数\n- `injectJs(filename)`，与 `includeJs` 不同的是，加载的脚本可以跟当前页面不同域\n- `openUrl(url, httpConf, settings)`\n- `open(url, callback)`、`open(url, method, callback)`、`open(url, method, data, callback)`、`open(url, settings, callback`，打开 `url` 页面，加载完成后触发回调函数，回电函数接收一个状态参数 `status`，该状态函数的值为 `success` 或 `fail`\n- `reload`\n- `renderBase64(format)`，将页面导出为 `format` 格式，该格式的可选值包括 `PNG`、`GIF` 和 `JPEG`\n- `render(filename[, {format, quality}])`，将页面导出为 `fromat` 格式，系统会根据指定的 `filename` 文件名自动匹配格式，或者自定义格式，`quality` 是 0~100 的数值，用于指定导出文件的质量\n- 对于鼠标事件，`sendEvent(mouseEventType[, mouseX, mouseY, button=\"left\"])`，`mouseEventType` 指定了事件类型，可选值包括 `mouseup`、`mousedown`、`mousemove`、`doubleclick` 和 `click`\n- 对于键盘事件，`sendEvent(keyboardEventType, keyOrKeys, [null, null, modifier])`，`keyboardEventType` 指定了事件类型，可选值包括 `keyup`、`keypress` 和 `keydown`，第五个参数是修饰键\n- `setContent(content, url)`，用于设定 `page.content` 和 `page.url` 属性，设定完成后会重载页面\n- `stop()`\n- `switchToFocusedFrame()`\n- `switchToFrame(frameName)` 或 `switchToFrame(framePosition)`\n- `switchToMainFrame()`\n- `switchToParentFrame()`\n- `uploadFile(selector, filename)`，将 `filename` 上传到表单的 `selector` 节点\n\n```js\n// 模拟 Shift + Alt + A 键\nvar webPage = require('webpage');\nvar page = webPage.create();\n\npage.sendEvent('keypress', page.event.key.A, null, null, 0x02000000 | 0x08000000);\n```\n\n该模块包含以下事件：\n\n- `onAlert`，当页面出现 `alert` 弹出框时触发该事件，接收一个字符串参数\n- `onCallback`，当在网页调用 `window.callPhantom` 时触发该事件\n- `onClosing`，当 `WebPage` 实例被关闭时触发该事件，比如调用 `page.close()` 或 `window.close()`，接受一个 `closingPage` 参数，指向关闭的页面\n- `onConfirm`，当页面出现 `confirm` 弹出框时触发该事件，接收一个字符串参数，并返回一个布尔值\n- `onConsoleMessage`，当 JavaScript 中执行 `console` 时就会触发该事件，接收三个参数 (message, lineNumber, sourceIdentifier)\n- `onError`，当 JavaScript 出现执行错误时就会触发该事件，接受两个参数，一个是表示错误信息的字符串，一个是表示堆栈跟踪信息的数组\n- `onFilePicker`\n- `onInitialized`，当 page 实例创建后且 URL 加载前触发该事件\n- `onLoadFinished`，当页面资源加载完成后触发该事件，接收一个表示加载状态的参数 `status`，可选值为 \"success\" 和 \"fail\"\n- `onLoadStarted`，当页面开始加载资源时触发该事件\n- `onNavigationRequested`，当页面跳转时触发该事件，回调函数接收四个参数，其中 `url` 表示跳转的目标地址；`type` 的可选值包括 Undefined/LinkClocked/FormSubmitted/BackOrForward/Reload/FormResubmitted/other；`willNavigate` 是一个布尔值，表示是否会发生跳转；`main` 是一个布尔值，表示事件是否来自于 main frame\n- `onPageCreated`，当新建子窗口时触发该事件，比如 `window.open`\n- `onPrompt`，当页面出现 `prompt` 弹出框时触发该事件，接收一个字符串参数，返回一个字符串\n- `onResourceError`，当页面加载资源失败时触发该事件，回调函数接收一个 `resourceError` 的对象，该对象包含四个属性（id, url, errorCode, errorString）。\n- `onResourceReceived`，当页面成功加载资源后触发该事件，回调函数接收一个 `response` 对象，该对象包含多个属性（id, url, time, headers, bodySize, contentType, redirectURL, stage, status, statusText）\n- `onResourceRequested`，当页面请求资源时触发该事件，回调函数接收两个参数，一个是 `requestData` 对象，另一个是 `networkRequest` 对象。requestData 对象包含多个属性，包括（id, method, url, time, headers），`networkRequest` 对象包含多个方法，包括 (abort, changeUrl(newUrl), setHeader(key, value))\n- `onResourceTimeout`，当资源请求超时时触发该事件，回调函数接收一个 `request` 对象作为参数，该对象包含多个属性（id, method, url, time, headers, errorCode, errorString）\n- `onUrlChanged`，当 URL 发生变化时触发该事件，回调函数接收一个 `targetURL` 的参数\n\n## Child Process Module\n\n通过 `require('child_process')` 可以加载 Child Process 模块，该模块常用于创建子进程处理输出、发送邮件和调用其他语言脚本等任务。\n\n```js\nvar process = require(\"child_process\")\nvar spawn = process.spawn\nvar execFile = process.execFile\n\nvar child = spawn(\"ls\", [\"-lF\", \"/rooot\"])\n\nchild.stdout.on(\"data\", function (data) {\n    console.log(\"spawnSTDOUT:\", JSON.stringify(data))\n})\n\nchild.stderr.on(\"data\", function (data) {\n    console.log(\"spawnSTDERR:\", JSON.stringify(data))\n})\n\nchild.on(\"exit\", function (code) {\n    console.log(\"spawnEXIT:\", code)\n})\n\n//child.kill(\"SIGKILL\")\n\nexecFile(\"ls\", [\"-lF\", \"/usr\"], null, function (err, stdout, stderr) {\n    console.log(\"execFileSTDOUT:\", JSON.stringify(stdout))\n    console.log(\"execFileSTDERR:\", JSON.stringify(stderr))\n})\n```\n\n## File System Module\n\n通过 `require('fs')` 可以加载 File System 模块，该模块常用于处理文件和目录相关的任务。\n\n该模块包含以下属性：\n\n- `separator`，字符串，路径分隔符\n- `workingDirectory`，字符串，当前工作路径\n\n该模块包含以下方法：\n\n- `absolute(path)`，如果 `path` 是绝对路径，则返回 `path`；如果 `path` 是相对路径，则返回该相对路径相对当前工作路径的路径\n- `changeWorkingDirectory(path)`，修改当前工作路径，如果修改成功，则返回 true，否则返回 false\n- `copyTree(src, dest)`，将 `src` 路径下的文件拷贝到 `dest` 路径下，默认递归拷贝，如果拷贝失败，则抛出错误并中断执行\n- `copy(src, dest)`，将 `src` 文件拷贝为 `dest` 文件，如果找不到 `src` 文件或无法创建 `dest` 文件，则抛出错误并中断执行\n- `exissts(string)`，判断文件是否存在，返回一个布尔值，同样适用于软链接\n- `isAbsolute(string)`，判断路径是否是绝对路径，返回布尔值\n- `isDirectory(string)`，判断路径是否是目录，返回布尔值\n- `isExecutable(string)`，判断路径是否是可执行文件，返回布尔值\n- `isFile(string)`，判断路径是否是文件，返回布尔值\n- `isLink(string)`，判断路径是否是软链接，返回布尔值\n- `isReadable(string)`，判断文件是否可读，返回布尔值\n- `isWritable(stirng)`，判断文件是否可写，返回布尔值\n- `list(string)`，参数 `string` 表示相对路径，列出当前路径下的所有文件和目录\n- `makeDirectory(string)`，根据指定路径创建目录，返回值为布尔值\n- `makeTree(string)`，递归创建目录，返回值为布尔值，如果目标目录已存在，同样返回 true\n- `move(src, dest)`，将 `src` 移动到 `dest`，如果 `src` 不存在、无法删除或无法创建 `dest` 文件，则抛出错误\n- `open(path，{ mode, charset })`，第二个参数接收包含两个属性，其中 `mode` 的值是 'r'、'w'、'a/+'、'b' 之一，`charset` 是字符串编码名称。该方法返回一个 Stream 对象，开发者在使用完 Stream 之后有必要显式关闭它。\n- `readLink(string)`，该方法返回软链接指向的真实文件或目录的绝对路径，如果传入的不是软链接，则返回空字符串\n- `read(path, {mode, charset})`，打开 `path` 指定的文件并以字符串的形式返回所有内容\n- `removeDirectory(string)`，删除目录，删除时目录需要为空，否则会抛出错误\n- `removeTree(string)`，递归删除目录\n- `remove(string)`，删除文件\n- `size(string)`，如果文件存在，则返回表示文件大小的数值\n- `touch(string)`，创建空文件，如果文件已存在则不会抛出错误\n- `write(src, content, {mode, charset})`，如果无法向目标文件写入数据，则抛出错误并中断后续执行\n\n```js\nvar fs = require('fs');\n\nconsole.log('LIST: ');\nconsole.log(fs.list());\n\nconsole.log('ABSOLUTE(): ');\nconsole.log(fs.absolute('../'));\n\nconsole.log('CHANGEWORKINGDIRECTORY: ');\nconsole.log(fs.changeWorkingDirectory('../'));\nconsole.log(fs.workingDirectory);\n\nconsole.log('EXISTS: ');\nconsole.log(fs.exists('./index.js'));\nconsole.log(fs.exists('./index.html'));\n\nphantom.exit(0);\n```\n\n## System Module\n\n通过 `require('system')` 可以加载 System 模块，该模块包含以下属性：\n\n- `os`，只读对象，操作系统信息\n- `pid`，只读数值，进程 ID\n- `env`，对象，键值对形式的环境变量\n- `args`，字符串数组，从终端传入的参数，数组中的第一个元素一定是脚本名称。\n- `platform`，只读字符串，平台名称，总是返回 \"phantomjs\"\n\n```js\nvar system = require('system');\n\nconsole.log('ARGS: ');\nconsole.log(system.args);\nconsole.log('OS: ');\nconsole.log(Object.keys(system.os));\nconsole.log('ENV: ');\nconsole.log(Object.keys(system.env));\nconsole.log('PID: ');\nconsole.log(system.pid);\nconsole.log('PLATFORM: ');\nconsole.log(system.platform);\n```\n\n## Web Server Module\n\n通过 `require('webserver')` 可以加载 Web Server 模块，该模块包含以下属性：\n\n- `port`，只读属性，服务器监听的端口\n\n包含以下方法：\n\n- `close()`，该方法用于关闭服务器\n- `listen()`，该方法用于监听指定的端口，该方法接收三个参数，第一个参数是监听端口，既可以是 port（比如 8080），也可以是 ipaddress:port（比如 127.0.0.1:8080）；第二个参数是一个可选对象，该对象目前只包含属性 `keepAlive`，如果值为 true，则使用持久连接；最后一个参数是一个回调函数，该回调函数接收 request 和 response 两个参数。\n\n回调函数中的 `request` 对象包含以下属性：\n\n- `method`，请求方法，比如 `GET` 和 `POST`\n- `url`，返回请求 URL 的路径和查询字符串部分\n- `httpVersion`，HTTP 版本\n- `headers`，键值对形式的 HTTP 头信息\n- `post`，请求体（对于 `POST` 和 `PUT` 请求有效）\n- `postRaw`，如果 `Content-Type: application/x-www-form-urlencoded`，post 的原始内容就会保存在该属性中，且 post 中的数据会被转义\n\n回调函数中的 `response` 对象包含以下属性和方法：\n\n- `headers`，键值对形式的 HTTP 请求头，该属性必须调用 `write()` 之前配置好\n- `statusCode`，设置返回的 HTTP 状态码\n- `setHeader(name, value)`，设置头信息\n- `header(name)`，获取头信息\n- `setEncoding(encoding)`，设置数据的编码格式，默认值为 UTF-8，如果数据是二进制数据，则应该设为 \"binary\"\n- `write(data)`，向响应体发送数据块，可以反复调用\n- `writeHead(statusCode, headers)`，向请求发送响应头信息，`statusCode` 是一个三位的 HTTP 状态码，`headers` 是响应头信息\n- `close()`，关闭 HTTP 连接。为了避免客户端检测到连接中断，最后最好调用一下 `write()`，比如 `response.write(\"\")`\n- `closeGracefully()`，`close()` 的温和版本，确保优先发送响应头信息并在最后发送 `response.write(\"\")`\n\n```js\nvar webserver = require('webserver');\nvar server = webserver.create();\nvar service = server.listen('127.0.0.1:8989', {\n    keepAlive: true\n}, function(req, res) {\n    res.statusCode = 200;\n    res.write('<html><body>Hello!Sean</body></html>');\n    res.close();\n});\n\nconsole.log(\"Server is runing at \" + server.port);\n```\n\n## 实践演练\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### 参考资料\n\n- [PhantomJS 官方文档](http://phantomjs.org/documentation/)\n- [PhantomJS 官方 API](http://phantomjs.org/api/)","slug":"PhantomJS","published":1,"updated":"2016-04-18T05:24:00.000Z","_id":"cin3zaro60004fsdi575yxaru","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/ariya/phantomjs/\" target=\"_blank\" rel=\"external\">PhantomJS</a> 是一个脚本化的无界面 WebKit，以 JavaScript 为脚本语言实现各项功能，官方列举的使用场景包括：无界面测试，页面自动化，屏幕截图和网络监控。在 Mac 下，可以使用 Homebrew 安装最新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install phantomjs</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Command-Line-Interface\"><a href=\"#Command-Line-Interface\" class=\"headerlink\" title=\"Command Line Interface\"></a>Command Line Interface</h2><p>PhantomJS 运行在终端中，通过以下格式进行调用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">phantomjs [options] somescript.js [arg1[, arg2 [, ...]]]</span><br></pre></td></tr></table></figure>\n<p>如果在终端直接执行 <code>phantomjs</code> 命令，则进入 REPL 环境。通过 <code>phantomjs --help</code> 命令可以查看详细的 <code>options</code> 参数。实际上有两种方式设置 <code>options</code>，一种是如上所示的终端传入命令的方式，另一种是将 <code>options</code> 写入一个 JSON 格式的配置文件，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --ignore-ssl-errors=true */</span></span><br><span class=\"line\">    <span class=\"string\">\"ignoreSslErrors\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --max-disk-cache-size=1000 */</span></span><br><span class=\"line\">    <span class=\"string\">\"maxDiskCacheSize\"</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --output-encoding=utf8 */</span></span><br><span class=\"line\">    <span class=\"string\">\"outputEncoding\"</span>: <span class=\"string\">\"utf8\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在终端中指定该配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">phantomjs --config=/path/to/config.json somescript.js [arg1[, arg2 [, ...]]]</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，并不是所有的 <code>options</code> 参数都可以直接转换为 JSON 中的键名，特殊的 <code>options</code> 参数包括：</p>\n<ul>\n<li><code>--disk-cache</code> =&gt; <code>diskCacheEnabled</code></li>\n<li><code>--load-images</code> =&gt; <code>autoLoadImages</code></li>\n<li><code>--web-security</code> =&gt; <code>webSecurityEnabled</code></li>\n<li><code>--local-storage-path</code> =&gt; <code>offlineStoragePath</code></li>\n<li><code>--local-storage-quota</code> =&gt; <code>offlineStorageDefaultQuota</code></li>\n<li><code>--local-to-remote-url-access</code> =&gt; <code>localToRemoteUrlAccessEnabled</code></li>\n</ul>\n<h2 id=\"Phantom-Object\"><a href=\"#Phantom-Object\" class=\"headerlink\" title=\"Phantom Object\"></a>Phantom Object</h2><p><code>phantom</code> 对象挂载在 window 对象下面，包含以下属性：</p>\n<ul>\n<li><code>phantom.cookies</code>，对象数组，获取或设置 cookies，cookies 信息存储在 CookieJar 中</li>\n<li><code>phantom.version</code>，只读对象，返回当前 PhantomJS 的版本信息，类似 <code>{ &quot;major&quot;: 2, &quot;minor&quot;: 1, &quot;patch&quot;: 1 }</code></li>\n<li><code>phantom.libraryPath</code>，字符串，为 <code>injectJS()</code> 设置查找路径</li>\n<li><code>phantom.cookiesEnabled</code>，布尔值，决定是否使用 CookieJar，默认值为 <code>true</code></li>\n</ul>\n<p>包含以下方法：</p>\n<ul>\n<li><code>phantom.injectJS(filename)</code>，该方法用于执行外部脚本，如果无法根据传入的 <code>filename</code> 找到脚本，就使用 <code>libraryPath</code> 指定的路径查找脚本。脚本注入成功后返回 true，否则返回 false</li>\n<li><code>phantom.addCookie(Object)</code>，向 CookieJar 添加 cookie 信息，操作成功返回 true，否则返回 false</li>\n<li><code>phantom.clearCookies()</code>，清空 CookieJar 中的 cookie 信息，无返回值。</li>\n<li><code>phantom.deleteCookie(cookieName)</code>，删除 CookieJar 中包含 <code>cookieName</code> 属性的 cookie，操作成功返回 true，否则返回 false</li>\n<li><code>phantom.exit(returnValue)</code>，结束程序，携带退出码 <code>returnValue</code>，默认退出码为 0</li>\n</ul>\n<p>包含以下事件处理器：</p>\n<ul>\n<li><code>onError</code>，用于处理 <code>page.onError</code> 没有捕获的 JavaScript 执行错误，常用于捕捉全局错误，接收两个参数，一个是错误信息，另一个是数组形式的堆栈跟踪信息</li>\n</ul>\n<h2 id=\"Web-Page-module\"><a href=\"#Web-Page-module\" class=\"headerlink\" title=\"Web Page module\"></a>Web Page module</h2><p>通过 <code>require(webpage)</code> 可以加载该模块，使用 <code>create()</code> 方法可以创建该模块的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpage = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> page = webpage.create();</span><br></pre></td></tr></table></figure>\n<p>该模块包含以下属性：</p>\n<ul>\n<li><code>canGoBack</code>，回退一页</li>\n<li><code>canGoForward</code>，前进一页</li>\n<li><code>clipRect</code>，对象，该属性规定了 <code>page.render()</code> 方法对页面的裁减尺寸，默认裁剪整个页面</li>\n<li><code>content</code>，字符串，main frame 的原始内容（包含 HTML 元素），通过修改该属性可以设置新的页面内容</li>\n<li><code>cookies</code>，设置或获取当前页面的 cookie</li>\n<li><code>customHeaders</code>，对象，给发送给服务器的 HTTP 请求头添加额外的信息，默认值为空对象 <code>{}</code>，头信息的键值会被编码为 <code>US-ASCII</code> 字符</li>\n<li><code>event</code>，键盘等事件</li>\n<li><code>focusedFrameName</code>，当前激活的 Frame 页面名称</li>\n<li><code>frameContent</code>，字符串，当前激活的 Frame 的页面内容，修改该属性将会以新内容重载该页面</li>\n<li><code>frameName</code>，字符串，当前激活的 Frame 的页面名称</li>\n<li><code>framePlainText</code>，字符串，当前激活的 Frame 的页面内容，无 HTML 标签</li>\n<li><code>frameTitle</code>，字符串，当前激活的 Frame 的页面标题</li>\n<li><code>frameUrl</code>，只读字符串，当前激活的 Frame 的页面 URL</li>\n<li><code>framesCount</code>，Frame 的数量</li>\n<li><code>framesName</code>，所有 Frame 的名称</li>\n<li><code>libraryPath</code>，字符串，为 <code>page.injectJS</code> 设置默认检索路径</li>\n<li><code>navigationLocked</code>，布尔值，是否离开当前页面，默认值为 false</li>\n<li><code>offlineStoragePath</code>，字符串，离线资源的存储位置</li>\n<li><code>offlineStorageQuota</code>，数值，允许离线存储的大小</li>\n<li><code>ownsPages</code></li>\n<li><code>pagesWindowName</code></li>\n<li><code>pages</code></li>\n<li><code>paperSize</code>，对象，定义了生成 PDF 的尺寸</li>\n<li><code>plainText</code>，只读字符串，页面内容，无 HTML 标签</li>\n<li><code>scrollPosition</code>，对象，滚动位置</li>\n<li><code>title</code></li>\n<li><code>url</code>，字符串，当前页面的 URL</li>\n<li><code>viewportSize</code>，对象，常用于在初始化页面前设定 viewport 的大小，比如 <code>landscape</code> 和 <code>portrait</code>，该对象包含 <code>width</code> 和 <code>height</code> 两个属性</li>\n<li><code>windowName</code></li>\n<li><code>zoomFactor</code>，数值，指定 <code>page.render</code> 和 <code>page.renderBase64</code> 方法的放大系数，默认值为 1，即 100% 放大</li>\n<li><code>settings</code>，对象，只能在调用 <code>page.open</code> 方法初始化页面时调用该页面，其他时间定义该属性无效。该对象包含以下属性：<ul>\n<li><code>javascriptEnabled</code>，是否允许在当前页面执行 JavaScript</li>\n<li><code>loadImages</code>，是否允许加载图片</li>\n<li><code>localToRemoteUrlAccessEnabled</code>，是否允许使用本地资源响应远程 URL </li>\n<li><code>userAgent</code>，用户代理</li>\n<li><code>userName</code>，HTTP 验证的用户名</li>\n<li><code>password</code>，HTTP 验证的密码</li>\n<li><code>XSSAuditingEnabled</code>，是否监控跨域请求</li>\n<li><code>webSecurityEnabled</code>，是否启用网页安全</li>\n<li><code>resourceTimeout</code>，定义资源请求的延时时间，超时之后将会触发 <code>onResourceTimeout</code> 事件</li>\n</ul>\n</li>\n</ul>\n<p>该模块包含以下方法：</p>\n<ul>\n<li><code>addCookie(cookie)</code>，为页面添加 cookie 信息，返回布尔值</li>\n<li><code>clearCookies()</code>，清除当前 URL 下的所有 cookie 信息</li>\n<li><code>close()</code>，关闭当前页面并清空内存</li>\n<li><code>deleteCookie(cookieName)</code>，删除当前 URL 下所有包含 <code>cookieName</code> 属性的 cookie 信息，返回布尔值</li>\n<li><code>evaluteAsync(function, [delayMillis, arg1, arg2, ...])</code>，在当前页面异步执行代码，第二个参数定义了延迟执行的时间</li>\n<li><code>evaluteJavaScript(str)</code>，在当前页面执行代码，代码必须写为字符串的形式</li>\n<li><code>evalute(function, arg1, arg2, ...)</code>，在当前页面执行代码</li>\n<li><code>getPage(windowName)</code></li>\n<li><code>goBack()</code></li>\n<li><code>goForward()</code></li>\n<li><code>go(index)</code></li>\n<li><code>includeJs(url, callback)</code>，向当前页面添加额外的脚本，且当脚本执行完毕后调用回调函数</li>\n<li><code>injectJs(filename)</code>，与 <code>includeJs</code> 不同的是，加载的脚本可以跟当前页面不同域</li>\n<li><code>openUrl(url, httpConf, settings)</code></li>\n<li><code>open(url, callback)</code>、<code>open(url, method, callback)</code>、<code>open(url, method, data, callback)</code>、<code>open(url, settings, callback</code>，打开 <code>url</code> 页面，加载完成后触发回调函数，回电函数接收一个状态参数 <code>status</code>，该状态函数的值为 <code>success</code> 或 <code>fail</code></li>\n<li><code>reload</code></li>\n<li><code>renderBase64(format)</code>，将页面导出为 <code>format</code> 格式，该格式的可选值包括 <code>PNG</code>、<code>GIF</code> 和 <code>JPEG</code></li>\n<li><code>render(filename[, {format, quality}])</code>，将页面导出为 <code>fromat</code> 格式，系统会根据指定的 <code>filename</code> 文件名自动匹配格式，或者自定义格式，<code>quality</code> 是 0~100 的数值，用于指定导出文件的质量</li>\n<li>对于鼠标事件，<code>sendEvent(mouseEventType[, mouseX, mouseY, button=&quot;left&quot;])</code>，<code>mouseEventType</code> 指定了事件类型，可选值包括 <code>mouseup</code>、<code>mousedown</code>、<code>mousemove</code>、<code>doubleclick</code> 和 <code>click</code></li>\n<li>对于键盘事件，<code>sendEvent(keyboardEventType, keyOrKeys, [null, null, modifier])</code>，<code>keyboardEventType</code> 指定了事件类型，可选值包括 <code>keyup</code>、<code>keypress</code> 和 <code>keydown</code>，第五个参数是修饰键</li>\n<li><code>setContent(content, url)</code>，用于设定 <code>page.content</code> 和 <code>page.url</code> 属性，设定完成后会重载页面</li>\n<li><code>stop()</code></li>\n<li><code>switchToFocusedFrame()</code></li>\n<li><code>switchToFrame(frameName)</code> 或 <code>switchToFrame(framePosition)</code></li>\n<li><code>switchToMainFrame()</code></li>\n<li><code>switchToParentFrame()</code></li>\n<li><code>uploadFile(selector, filename)</code>，将 <code>filename</code> 上传到表单的 <code>selector</code> 节点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟 Shift + Alt + A 键</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webPage = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> page = webPage.create();</span><br><span class=\"line\"></span><br><span class=\"line\">page.sendEvent(<span class=\"string\">'keypress'</span>, page.event.key.A, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">0x02000000</span> | <span class=\"number\">0x08000000</span>);</span><br></pre></td></tr></table></figure>\n<p>该模块包含以下事件：</p>\n<ul>\n<li><code>onAlert</code>，当页面出现 <code>alert</code> 弹出框时触发该事件，接收一个字符串参数</li>\n<li><code>onCallback</code>，当在网页调用 <code>window.callPhantom</code> 时触发该事件</li>\n<li><code>onClosing</code>，当 <code>WebPage</code> 实例被关闭时触发该事件，比如调用 <code>page.close()</code> 或 <code>window.close()</code>，接受一个 <code>closingPage</code> 参数，指向关闭的页面</li>\n<li><code>onConfirm</code>，当页面出现 <code>confirm</code> 弹出框时触发该事件，接收一个字符串参数，并返回一个布尔值</li>\n<li><code>onConsoleMessage</code>，当 JavaScript 中执行 <code>console</code> 时就会触发该事件，接收三个参数 (message, lineNumber, sourceIdentifier)</li>\n<li><code>onError</code>，当 JavaScript 出现执行错误时就会触发该事件，接受两个参数，一个是表示错误信息的字符串，一个是表示堆栈跟踪信息的数组</li>\n<li><code>onFilePicker</code></li>\n<li><code>onInitialized</code>，当 page 实例创建后且 URL 加载前触发该事件</li>\n<li><code>onLoadFinished</code>，当页面资源加载完成后触发该事件，接收一个表示加载状态的参数 <code>status</code>，可选值为 “success” 和 “fail”</li>\n<li><code>onLoadStarted</code>，当页面开始加载资源时触发该事件</li>\n<li><code>onNavigationRequested</code>，当页面跳转时触发该事件，回调函数接收四个参数，其中 <code>url</code> 表示跳转的目标地址；<code>type</code> 的可选值包括 Undefined/LinkClocked/FormSubmitted/BackOrForward/Reload/FormResubmitted/other；<code>willNavigate</code> 是一个布尔值，表示是否会发生跳转；<code>main</code> 是一个布尔值，表示事件是否来自于 main frame</li>\n<li><code>onPageCreated</code>，当新建子窗口时触发该事件，比如 <code>window.open</code></li>\n<li><code>onPrompt</code>，当页面出现 <code>prompt</code> 弹出框时触发该事件，接收一个字符串参数，返回一个字符串</li>\n<li><code>onResourceError</code>，当页面加载资源失败时触发该事件，回调函数接收一个 <code>resourceError</code> 的对象，该对象包含四个属性（id, url, errorCode, errorString）。</li>\n<li><code>onResourceReceived</code>，当页面成功加载资源后触发该事件，回调函数接收一个 <code>response</code> 对象，该对象包含多个属性（id, url, time, headers, bodySize, contentType, redirectURL, stage, status, statusText）</li>\n<li><code>onResourceRequested</code>，当页面请求资源时触发该事件，回调函数接收两个参数，一个是 <code>requestData</code> 对象，另一个是 <code>networkRequest</code> 对象。requestData 对象包含多个属性，包括（id, method, url, time, headers），<code>networkRequest</code> 对象包含多个方法，包括 (abort, changeUrl(newUrl), setHeader(key, value))</li>\n<li><code>onResourceTimeout</code>，当资源请求超时时触发该事件，回调函数接收一个 <code>request</code> 对象作为参数，该对象包含多个属性（id, method, url, time, headers, errorCode, errorString）</li>\n<li><code>onUrlChanged</code>，当 URL 发生变化时触发该事件，回调函数接收一个 <code>targetURL</code> 的参数</li>\n</ul>\n<h2 id=\"Child-Process-Module\"><a href=\"#Child-Process-Module\" class=\"headerlink\" title=\"Child Process Module\"></a>Child Process Module</h2><p>通过 <code>require(&#39;child_process&#39;)</code> 可以加载 Child Process 模块，该模块常用于创建子进程处理输出、发送邮件和调用其他语言脚本等任务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> process = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> spawn = process.spawn</span><br><span class=\"line\"><span class=\"keyword\">var</span> execFile = process.execFile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = spawn(<span class=\"string\">\"ls\"</span>, [<span class=\"string\">\"-lF\"</span>, <span class=\"string\">\"/rooot\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">child.stdout.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnSTDOUT:\"</span>, <span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">child.stderr.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnSTDERR:\"</span>, <span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"exit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnEXIT:\"</span>, code)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child.kill(\"SIGKILL\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">execFile(<span class=\"string\">\"ls\"</span>, [<span class=\"string\">\"-lF\"</span>, <span class=\"string\">\"/usr\"</span>], <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"execFileSTDOUT:\"</span>, <span class=\"built_in\">JSON</span>.stringify(stdout))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"execFileSTDERR:\"</span>, <span class=\"built_in\">JSON</span>.stringify(stderr))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"File-System-Module\"><a href=\"#File-System-Module\" class=\"headerlink\" title=\"File System Module\"></a>File System Module</h2><p>通过 <code>require(&#39;fs&#39;)</code> 可以加载 File System 模块，该模块常用于处理文件和目录相关的任务。</p>\n<p>该模块包含以下属性：</p>\n<ul>\n<li><code>separator</code>，字符串，路径分隔符</li>\n<li><code>workingDirectory</code>，字符串，当前工作路径</li>\n</ul>\n<p>该模块包含以下方法：</p>\n<ul>\n<li><code>absolute(path)</code>，如果 <code>path</code> 是绝对路径，则返回 <code>path</code>；如果 <code>path</code> 是相对路径，则返回该相对路径相对当前工作路径的路径</li>\n<li><code>changeWorkingDirectory(path)</code>，修改当前工作路径，如果修改成功，则返回 true，否则返回 false</li>\n<li><code>copyTree(src, dest)</code>，将 <code>src</code> 路径下的文件拷贝到 <code>dest</code> 路径下，默认递归拷贝，如果拷贝失败，则抛出错误并中断执行</li>\n<li><code>copy(src, dest)</code>，将 <code>src</code> 文件拷贝为 <code>dest</code> 文件，如果找不到 <code>src</code> 文件或无法创建 <code>dest</code> 文件，则抛出错误并中断执行</li>\n<li><code>exissts(string)</code>，判断文件是否存在，返回一个布尔值，同样适用于软链接</li>\n<li><code>isAbsolute(string)</code>，判断路径是否是绝对路径，返回布尔值</li>\n<li><code>isDirectory(string)</code>，判断路径是否是目录，返回布尔值</li>\n<li><code>isExecutable(string)</code>，判断路径是否是可执行文件，返回布尔值</li>\n<li><code>isFile(string)</code>，判断路径是否是文件，返回布尔值</li>\n<li><code>isLink(string)</code>，判断路径是否是软链接，返回布尔值</li>\n<li><code>isReadable(string)</code>，判断文件是否可读，返回布尔值</li>\n<li><code>isWritable(stirng)</code>，判断文件是否可写，返回布尔值</li>\n<li><code>list(string)</code>，参数 <code>string</code> 表示相对路径，列出当前路径下的所有文件和目录</li>\n<li><code>makeDirectory(string)</code>，根据指定路径创建目录，返回值为布尔值</li>\n<li><code>makeTree(string)</code>，递归创建目录，返回值为布尔值，如果目标目录已存在，同样返回 true</li>\n<li><code>move(src, dest)</code>，将 <code>src</code> 移动到 <code>dest</code>，如果 <code>src</code> 不存在、无法删除或无法创建 <code>dest</code> 文件，则抛出错误</li>\n<li><code>open(path，{ mode, charset })</code>，第二个参数接收包含两个属性，其中 <code>mode</code> 的值是 ‘r’、’w’、’a/+’、’b’ 之一，<code>charset</code> 是字符串编码名称。该方法返回一个 Stream 对象，开发者在使用完 Stream 之后有必要显式关闭它。</li>\n<li><code>readLink(string)</code>，该方法返回软链接指向的真实文件或目录的绝对路径，如果传入的不是软链接，则返回空字符串</li>\n<li><code>read(path, {mode, charset})</code>，打开 <code>path</code> 指定的文件并以字符串的形式返回所有内容</li>\n<li><code>removeDirectory(string)</code>，删除目录，删除时目录需要为空，否则会抛出错误</li>\n<li><code>removeTree(string)</code>，递归删除目录</li>\n<li><code>remove(string)</code>，删除文件</li>\n<li><code>size(string)</code>，如果文件存在，则返回表示文件大小的数值</li>\n<li><code>touch(string)</code>，创建空文件，如果文件已存在则不会抛出错误</li>\n<li><code>write(src, content, {mode, charset})</code>，如果无法向目标文件写入数据，则抛出错误并中断后续执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'LIST: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.list());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ABSOLUTE(): '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.absolute(<span class=\"string\">'../'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'CHANGEWORKINGDIRECTORY: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.changeWorkingDirectory(<span class=\"string\">'../'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.workingDirectory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'EXISTS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.exists(<span class=\"string\">'./index.js'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.exists(<span class=\"string\">'./index.html'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">phantom.exit(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"System-Module\"><a href=\"#System-Module\" class=\"headerlink\" title=\"System Module\"></a>System Module</h2><p>通过 <code>require(&#39;system&#39;)</code> 可以加载 System 模块，该模块包含以下属性：</p>\n<ul>\n<li><code>os</code>，只读对象，操作系统信息</li>\n<li><code>pid</code>，只读数值，进程 ID</li>\n<li><code>env</code>，对象，键值对形式的环境变量</li>\n<li><code>args</code>，字符串数组，从终端传入的参数，数组中的第一个元素一定是脚本名称。</li>\n<li><code>platform</code>，只读字符串，平台名称，总是返回 “phantomjs”</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ARGS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.args);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'OS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(system.os));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ENV: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(system.env));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'PID: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.pid);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'PLATFORM: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.platform);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Web-Server-Module\"><a href=\"#Web-Server-Module\" class=\"headerlink\" title=\"Web Server Module\"></a>Web Server Module</h2><p>通过 <code>require(&#39;webserver&#39;)</code> 可以加载 Web Server 模块，该模块包含以下属性：</p>\n<ul>\n<li><code>port</code>，只读属性，服务器监听的端口</li>\n</ul>\n<p>包含以下方法：</p>\n<ul>\n<li><code>close()</code>，该方法用于关闭服务器</li>\n<li><code>listen()</code>，该方法用于监听指定的端口，该方法接收三个参数，第一个参数是监听端口，既可以是 port（比如 8080），也可以是 ipaddress:port（比如 127.0.0.1:8080）；第二个参数是一个可选对象，该对象目前只包含属性 <code>keepAlive</code>，如果值为 true，则使用持久连接；最后一个参数是一个回调函数，该回调函数接收 request 和 response 两个参数。</li>\n</ul>\n<p>回调函数中的 <code>request</code> 对象包含以下属性：</p>\n<ul>\n<li><code>method</code>，请求方法，比如 <code>GET</code> 和 <code>POST</code></li>\n<li><code>url</code>，返回请求 URL 的路径和查询字符串部分</li>\n<li><code>httpVersion</code>，HTTP 版本</li>\n<li><code>headers</code>，键值对形式的 HTTP 头信息</li>\n<li><code>post</code>，请求体（对于 <code>POST</code> 和 <code>PUT</code> 请求有效）</li>\n<li><code>postRaw</code>，如果 <code>Content-Type: application/x-www-form-urlencoded</code>，post 的原始内容就会保存在该属性中，且 post 中的数据会被转义</li>\n</ul>\n<p>回调函数中的 <code>response</code> 对象包含以下属性和方法：</p>\n<ul>\n<li><code>headers</code>，键值对形式的 HTTP 请求头，该属性必须调用 <code>write()</code> 之前配置好</li>\n<li><code>statusCode</code>，设置返回的 HTTP 状态码</li>\n<li><code>setHeader(name, value)</code>，设置头信息</li>\n<li><code>header(name)</code>，获取头信息</li>\n<li><code>setEncoding(encoding)</code>，设置数据的编码格式，默认值为 UTF-8，如果数据是二进制数据，则应该设为 “binary”</li>\n<li><code>write(data)</code>，向响应体发送数据块，可以反复调用</li>\n<li><code>writeHead(statusCode, headers)</code>，向请求发送响应头信息，<code>statusCode</code> 是一个三位的 HTTP 状态码，<code>headers</code> 是响应头信息</li>\n<li><code>close()</code>，关闭 HTTP 连接。为了避免客户端检测到连接中断，最后最好调用一下 <code>write()</code>，比如 <code>response.write(&quot;&quot;)</code></li>\n<li><code>closeGracefully()</code>，<code>close()</code> 的温和版本，确保优先发送响应头信息并在最后发送 <code>response.write(&quot;&quot;)</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webserver = <span class=\"built_in\">require</span>(<span class=\"string\">'webserver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = webserver.create();</span><br><span class=\"line\"><span class=\"keyword\">var</span> service = server.listen(<span class=\"string\">'127.0.0.1:8989'</span>, &#123;</span><br><span class=\"line\">    keepAlive: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">    res.write(<span class=\"string\">'&lt;html&gt;&lt;body&gt;Hello!Sean&lt;/body&gt;&lt;/html&gt;'</span>);</span><br><span class=\"line\">    res.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is runing at \"</span> + server.port);</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践演练\"><a href=\"#实践演练\" class=\"headerlink\" title=\"实践演练\"></a>实践演练</h2><h5 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h5><ul>\n<li><a href=\"http://phantomjs.org/documentation/\" target=\"_blank\" rel=\"external\">PhantomJS 官方文档</a></li>\n<li><a href=\"http://phantomjs.org/api/\" target=\"_blank\" rel=\"external\">PhantomJS 官方 API</a></li>\n</ul>\n","excerpt":"<p><a href=\"https://github.com/ariya/phantomjs/\">PhantomJS</a> 是一个脚本化的无界面 WebKit，以 JavaScript 为脚本语言实现各项功能，官方列举的使用场景包括：无界面测试，页面自动化，屏幕截图和网络监控。在 Mac 下，可以使用 Homebrew 安装最新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install phantomjs</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Command-Line-Interface\"><a href=\"#Command-Line-Interface\" class=\"headerlink\" title=\"Command Line Interface\"></a>Command Line Interface</h2><p>PhantomJS 运行在终端中，通过以下格式进行调用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">phantomjs [options] somescript.js [arg1[, arg2 [, ...]]]</span><br></pre></td></tr></table></figure>\n<p>如果在终端直接执行 <code>phantomjs</code> 命令，则进入 REPL 环境。通过 <code>phantomjs --help</code> 命令可以查看详细的 <code>options</code> 参数。实际上有两种方式设置 <code>options</code>，一种是如上所示的终端传入命令的方式，另一种是将 <code>options</code> 写入一个 JSON 格式的配置文件，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --ignore-ssl-errors=true */</span></span><br><span class=\"line\">    <span class=\"string\">\"ignoreSslErrors\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --max-disk-cache-size=1000 */</span></span><br><span class=\"line\">    <span class=\"string\">\"maxDiskCacheSize\"</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">    <span class=\"comment\">/* Same as: --output-encoding=utf8 */</span></span><br><span class=\"line\">    <span class=\"string\">\"outputEncoding\"</span>: <span class=\"string\">\"utf8\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在终端中指定该配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">phantomjs --config=/path/to/config.json somescript.js [arg1[, arg2 [, ...]]]</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，并不是所有的 <code>options</code> 参数都可以直接转换为 JSON 中的键名，特殊的 <code>options</code> 参数包括：</p>\n<ul>\n<li><code>--disk-cache</code> =&gt; <code>diskCacheEnabled</code></li>\n<li><code>--load-images</code> =&gt; <code>autoLoadImages</code></li>\n<li><code>--web-security</code> =&gt; <code>webSecurityEnabled</code></li>\n<li><code>--local-storage-path</code> =&gt; <code>offlineStoragePath</code></li>\n<li><code>--local-storage-quota</code> =&gt; <code>offlineStorageDefaultQuota</code></li>\n<li><code>--local-to-remote-url-access</code> =&gt; <code>localToRemoteUrlAccessEnabled</code></li>\n</ul>\n<h2 id=\"Phantom-Object\"><a href=\"#Phantom-Object\" class=\"headerlink\" title=\"Phantom Object\"></a>Phantom Object</h2><p><code>phantom</code> 对象挂载在 window 对象下面，包含以下属性：</p>\n<ul>\n<li><code>phantom.cookies</code>，对象数组，获取或设置 cookies，cookies 信息存储在 CookieJar 中</li>\n<li><code>phantom.version</code>，只读对象，返回当前 PhantomJS 的版本信息，类似 <code>{ &quot;major&quot;: 2, &quot;minor&quot;: 1, &quot;patch&quot;: 1 }</code></li>\n<li><code>phantom.libraryPath</code>，字符串，为 <code>injectJS()</code> 设置查找路径</li>\n<li><code>phantom.cookiesEnabled</code>，布尔值，决定是否使用 CookieJar，默认值为 <code>true</code></li>\n</ul>\n<p>包含以下方法：</p>\n<ul>\n<li><code>phantom.injectJS(filename)</code>，该方法用于执行外部脚本，如果无法根据传入的 <code>filename</code> 找到脚本，就使用 <code>libraryPath</code> 指定的路径查找脚本。脚本注入成功后返回 true，否则返回 false</li>\n<li><code>phantom.addCookie(Object)</code>，向 CookieJar 添加 cookie 信息，操作成功返回 true，否则返回 false</li>\n<li><code>phantom.clearCookies()</code>，清空 CookieJar 中的 cookie 信息，无返回值。</li>\n<li><code>phantom.deleteCookie(cookieName)</code>，删除 CookieJar 中包含 <code>cookieName</code> 属性的 cookie，操作成功返回 true，否则返回 false</li>\n<li><code>phantom.exit(returnValue)</code>，结束程序，携带退出码 <code>returnValue</code>，默认退出码为 0</li>\n</ul>\n<p>包含以下事件处理器：</p>\n<ul>\n<li><code>onError</code>，用于处理 <code>page.onError</code> 没有捕获的 JavaScript 执行错误，常用于捕捉全局错误，接收两个参数，一个是错误信息，另一个是数组形式的堆栈跟踪信息</li>\n</ul>\n<h2 id=\"Web-Page-module\"><a href=\"#Web-Page-module\" class=\"headerlink\" title=\"Web Page module\"></a>Web Page module</h2><p>通过 <code>require(webpage)</code> 可以加载该模块，使用 <code>create()</code> 方法可以创建该模块的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpage = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> page = webpage.create();</span><br></pre></td></tr></table></figure>\n<p>该模块包含以下属性：</p>\n<ul>\n<li><code>canGoBack</code>，回退一页</li>\n<li><code>canGoForward</code>，前进一页</li>\n<li><code>clipRect</code>，对象，该属性规定了 <code>page.render()</code> 方法对页面的裁减尺寸，默认裁剪整个页面</li>\n<li><code>content</code>，字符串，main frame 的原始内容（包含 HTML 元素），通过修改该属性可以设置新的页面内容</li>\n<li><code>cookies</code>，设置或获取当前页面的 cookie</li>\n<li><code>customHeaders</code>，对象，给发送给服务器的 HTTP 请求头添加额外的信息，默认值为空对象 <code>{}</code>，头信息的键值会被编码为 <code>US-ASCII</code> 字符</li>\n<li><code>event</code>，键盘等事件</li>\n<li><code>focusedFrameName</code>，当前激活的 Frame 页面名称</li>\n<li><code>frameContent</code>，字符串，当前激活的 Frame 的页面内容，修改该属性将会以新内容重载该页面</li>\n<li><code>frameName</code>，字符串，当前激活的 Frame 的页面名称</li>\n<li><code>framePlainText</code>，字符串，当前激活的 Frame 的页面内容，无 HTML 标签</li>\n<li><code>frameTitle</code>，字符串，当前激活的 Frame 的页面标题</li>\n<li><code>frameUrl</code>，只读字符串，当前激活的 Frame 的页面 URL</li>\n<li><code>framesCount</code>，Frame 的数量</li>\n<li><code>framesName</code>，所有 Frame 的名称</li>\n<li><code>libraryPath</code>，字符串，为 <code>page.injectJS</code> 设置默认检索路径</li>\n<li><code>navigationLocked</code>，布尔值，是否离开当前页面，默认值为 false</li>\n<li><code>offlineStoragePath</code>，字符串，离线资源的存储位置</li>\n<li><code>offlineStorageQuota</code>，数值，允许离线存储的大小</li>\n<li><code>ownsPages</code></li>\n<li><code>pagesWindowName</code></li>\n<li><code>pages</code></li>\n<li><code>paperSize</code>，对象，定义了生成 PDF 的尺寸</li>\n<li><code>plainText</code>，只读字符串，页面内容，无 HTML 标签</li>\n<li><code>scrollPosition</code>，对象，滚动位置</li>\n<li><code>title</code></li>\n<li><code>url</code>，字符串，当前页面的 URL</li>\n<li><code>viewportSize</code>，对象，常用于在初始化页面前设定 viewport 的大小，比如 <code>landscape</code> 和 <code>portrait</code>，该对象包含 <code>width</code> 和 <code>height</code> 两个属性</li>\n<li><code>windowName</code></li>\n<li><code>zoomFactor</code>，数值，指定 <code>page.render</code> 和 <code>page.renderBase64</code> 方法的放大系数，默认值为 1，即 100% 放大</li>\n<li><code>settings</code>，对象，只能在调用 <code>page.open</code> 方法初始化页面时调用该页面，其他时间定义该属性无效。该对象包含以下属性：<ul>\n<li><code>javascriptEnabled</code>，是否允许在当前页面执行 JavaScript</li>\n<li><code>loadImages</code>，是否允许加载图片</li>\n<li><code>localToRemoteUrlAccessEnabled</code>，是否允许使用本地资源响应远程 URL </li>\n<li><code>userAgent</code>，用户代理</li>\n<li><code>userName</code>，HTTP 验证的用户名</li>\n<li><code>password</code>，HTTP 验证的密码</li>\n<li><code>XSSAuditingEnabled</code>，是否监控跨域请求</li>\n<li><code>webSecurityEnabled</code>，是否启用网页安全</li>\n<li><code>resourceTimeout</code>，定义资源请求的延时时间，超时之后将会触发 <code>onResourceTimeout</code> 事件</li>\n</ul>\n</li>\n</ul>\n<p>该模块包含以下方法：</p>\n<ul>\n<li><code>addCookie(cookie)</code>，为页面添加 cookie 信息，返回布尔值</li>\n<li><code>clearCookies()</code>，清除当前 URL 下的所有 cookie 信息</li>\n<li><code>close()</code>，关闭当前页面并清空内存</li>\n<li><code>deleteCookie(cookieName)</code>，删除当前 URL 下所有包含 <code>cookieName</code> 属性的 cookie 信息，返回布尔值</li>\n<li><code>evaluteAsync(function, [delayMillis, arg1, arg2, ...])</code>，在当前页面异步执行代码，第二个参数定义了延迟执行的时间</li>\n<li><code>evaluteJavaScript(str)</code>，在当前页面执行代码，代码必须写为字符串的形式</li>\n<li><code>evalute(function, arg1, arg2, ...)</code>，在当前页面执行代码</li>\n<li><code>getPage(windowName)</code></li>\n<li><code>goBack()</code></li>\n<li><code>goForward()</code></li>\n<li><code>go(index)</code></li>\n<li><code>includeJs(url, callback)</code>，向当前页面添加额外的脚本，且当脚本执行完毕后调用回调函数</li>\n<li><code>injectJs(filename)</code>，与 <code>includeJs</code> 不同的是，加载的脚本可以跟当前页面不同域</li>\n<li><code>openUrl(url, httpConf, settings)</code></li>\n<li><code>open(url, callback)</code>、<code>open(url, method, callback)</code>、<code>open(url, method, data, callback)</code>、<code>open(url, settings, callback</code>，打开 <code>url</code> 页面，加载完成后触发回调函数，回电函数接收一个状态参数 <code>status</code>，该状态函数的值为 <code>success</code> 或 <code>fail</code></li>\n<li><code>reload</code></li>\n<li><code>renderBase64(format)</code>，将页面导出为 <code>format</code> 格式，该格式的可选值包括 <code>PNG</code>、<code>GIF</code> 和 <code>JPEG</code></li>\n<li><code>render(filename[, {format, quality}])</code>，将页面导出为 <code>fromat</code> 格式，系统会根据指定的 <code>filename</code> 文件名自动匹配格式，或者自定义格式，<code>quality</code> 是 0~100 的数值，用于指定导出文件的质量</li>\n<li>对于鼠标事件，<code>sendEvent(mouseEventType[, mouseX, mouseY, button=&quot;left&quot;])</code>，<code>mouseEventType</code> 指定了事件类型，可选值包括 <code>mouseup</code>、<code>mousedown</code>、<code>mousemove</code>、<code>doubleclick</code> 和 <code>click</code></li>\n<li>对于键盘事件，<code>sendEvent(keyboardEventType, keyOrKeys, [null, null, modifier])</code>，<code>keyboardEventType</code> 指定了事件类型，可选值包括 <code>keyup</code>、<code>keypress</code> 和 <code>keydown</code>，第五个参数是修饰键</li>\n<li><code>setContent(content, url)</code>，用于设定 <code>page.content</code> 和 <code>page.url</code> 属性，设定完成后会重载页面</li>\n<li><code>stop()</code></li>\n<li><code>switchToFocusedFrame()</code></li>\n<li><code>switchToFrame(frameName)</code> 或 <code>switchToFrame(framePosition)</code></li>\n<li><code>switchToMainFrame()</code></li>\n<li><code>switchToParentFrame()</code></li>\n<li><code>uploadFile(selector, filename)</code>，将 <code>filename</code> 上传到表单的 <code>selector</code> 节点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟 Shift + Alt + A 键</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webPage = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> page = webPage.create();</span><br><span class=\"line\"></span><br><span class=\"line\">page.sendEvent(<span class=\"string\">'keypress'</span>, page.event.key.A, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">0x02000000</span> | <span class=\"number\">0x08000000</span>);</span><br></pre></td></tr></table></figure>\n<p>该模块包含以下事件：</p>\n<ul>\n<li><code>onAlert</code>，当页面出现 <code>alert</code> 弹出框时触发该事件，接收一个字符串参数</li>\n<li><code>onCallback</code>，当在网页调用 <code>window.callPhantom</code> 时触发该事件</li>\n<li><code>onClosing</code>，当 <code>WebPage</code> 实例被关闭时触发该事件，比如调用 <code>page.close()</code> 或 <code>window.close()</code>，接受一个 <code>closingPage</code> 参数，指向关闭的页面</li>\n<li><code>onConfirm</code>，当页面出现 <code>confirm</code> 弹出框时触发该事件，接收一个字符串参数，并返回一个布尔值</li>\n<li><code>onConsoleMessage</code>，当 JavaScript 中执行 <code>console</code> 时就会触发该事件，接收三个参数 (message, lineNumber, sourceIdentifier)</li>\n<li><code>onError</code>，当 JavaScript 出现执行错误时就会触发该事件，接受两个参数，一个是表示错误信息的字符串，一个是表示堆栈跟踪信息的数组</li>\n<li><code>onFilePicker</code></li>\n<li><code>onInitialized</code>，当 page 实例创建后且 URL 加载前触发该事件</li>\n<li><code>onLoadFinished</code>，当页面资源加载完成后触发该事件，接收一个表示加载状态的参数 <code>status</code>，可选值为 “success” 和 “fail”</li>\n<li><code>onLoadStarted</code>，当页面开始加载资源时触发该事件</li>\n<li><code>onNavigationRequested</code>，当页面跳转时触发该事件，回调函数接收四个参数，其中 <code>url</code> 表示跳转的目标地址；<code>type</code> 的可选值包括 Undefined/LinkClocked/FormSubmitted/BackOrForward/Reload/FormResubmitted/other；<code>willNavigate</code> 是一个布尔值，表示是否会发生跳转；<code>main</code> 是一个布尔值，表示事件是否来自于 main frame</li>\n<li><code>onPageCreated</code>，当新建子窗口时触发该事件，比如 <code>window.open</code></li>\n<li><code>onPrompt</code>，当页面出现 <code>prompt</code> 弹出框时触发该事件，接收一个字符串参数，返回一个字符串</li>\n<li><code>onResourceError</code>，当页面加载资源失败时触发该事件，回调函数接收一个 <code>resourceError</code> 的对象，该对象包含四个属性（id, url, errorCode, errorString）。</li>\n<li><code>onResourceReceived</code>，当页面成功加载资源后触发该事件，回调函数接收一个 <code>response</code> 对象，该对象包含多个属性（id, url, time, headers, bodySize, contentType, redirectURL, stage, status, statusText）</li>\n<li><code>onResourceRequested</code>，当页面请求资源时触发该事件，回调函数接收两个参数，一个是 <code>requestData</code> 对象，另一个是 <code>networkRequest</code> 对象。requestData 对象包含多个属性，包括（id, method, url, time, headers），<code>networkRequest</code> 对象包含多个方法，包括 (abort, changeUrl(newUrl), setHeader(key, value))</li>\n<li><code>onResourceTimeout</code>，当资源请求超时时触发该事件，回调函数接收一个 <code>request</code> 对象作为参数，该对象包含多个属性（id, method, url, time, headers, errorCode, errorString）</li>\n<li><code>onUrlChanged</code>，当 URL 发生变化时触发该事件，回调函数接收一个 <code>targetURL</code> 的参数</li>\n</ul>\n<h2 id=\"Child-Process-Module\"><a href=\"#Child-Process-Module\" class=\"headerlink\" title=\"Child Process Module\"></a>Child Process Module</h2><p>通过 <code>require(&#39;child_process&#39;)</code> 可以加载 Child Process 模块，该模块常用于创建子进程处理输出、发送邮件和调用其他语言脚本等任务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> process = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> spawn = process.spawn</span><br><span class=\"line\"><span class=\"keyword\">var</span> execFile = process.execFile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = spawn(<span class=\"string\">\"ls\"</span>, [<span class=\"string\">\"-lF\"</span>, <span class=\"string\">\"/rooot\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">child.stdout.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnSTDOUT:\"</span>, <span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">child.stderr.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnSTDERR:\"</span>, <span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"exit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"spawnEXIT:\"</span>, code)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//child.kill(\"SIGKILL\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">execFile(<span class=\"string\">\"ls\"</span>, [<span class=\"string\">\"-lF\"</span>, <span class=\"string\">\"/usr\"</span>], <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"execFileSTDOUT:\"</span>, <span class=\"built_in\">JSON</span>.stringify(stdout))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"execFileSTDERR:\"</span>, <span class=\"built_in\">JSON</span>.stringify(stderr))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"File-System-Module\"><a href=\"#File-System-Module\" class=\"headerlink\" title=\"File System Module\"></a>File System Module</h2><p>通过 <code>require(&#39;fs&#39;)</code> 可以加载 File System 模块，该模块常用于处理文件和目录相关的任务。</p>\n<p>该模块包含以下属性：</p>\n<ul>\n<li><code>separator</code>，字符串，路径分隔符</li>\n<li><code>workingDirectory</code>，字符串，当前工作路径</li>\n</ul>\n<p>该模块包含以下方法：</p>\n<ul>\n<li><code>absolute(path)</code>，如果 <code>path</code> 是绝对路径，则返回 <code>path</code>；如果 <code>path</code> 是相对路径，则返回该相对路径相对当前工作路径的路径</li>\n<li><code>changeWorkingDirectory(path)</code>，修改当前工作路径，如果修改成功，则返回 true，否则返回 false</li>\n<li><code>copyTree(src, dest)</code>，将 <code>src</code> 路径下的文件拷贝到 <code>dest</code> 路径下，默认递归拷贝，如果拷贝失败，则抛出错误并中断执行</li>\n<li><code>copy(src, dest)</code>，将 <code>src</code> 文件拷贝为 <code>dest</code> 文件，如果找不到 <code>src</code> 文件或无法创建 <code>dest</code> 文件，则抛出错误并中断执行</li>\n<li><code>exissts(string)</code>，判断文件是否存在，返回一个布尔值，同样适用于软链接</li>\n<li><code>isAbsolute(string)</code>，判断路径是否是绝对路径，返回布尔值</li>\n<li><code>isDirectory(string)</code>，判断路径是否是目录，返回布尔值</li>\n<li><code>isExecutable(string)</code>，判断路径是否是可执行文件，返回布尔值</li>\n<li><code>isFile(string)</code>，判断路径是否是文件，返回布尔值</li>\n<li><code>isLink(string)</code>，判断路径是否是软链接，返回布尔值</li>\n<li><code>isReadable(string)</code>，判断文件是否可读，返回布尔值</li>\n<li><code>isWritable(stirng)</code>，判断文件是否可写，返回布尔值</li>\n<li><code>list(string)</code>，参数 <code>string</code> 表示相对路径，列出当前路径下的所有文件和目录</li>\n<li><code>makeDirectory(string)</code>，根据指定路径创建目录，返回值为布尔值</li>\n<li><code>makeTree(string)</code>，递归创建目录，返回值为布尔值，如果目标目录已存在，同样返回 true</li>\n<li><code>move(src, dest)</code>，将 <code>src</code> 移动到 <code>dest</code>，如果 <code>src</code> 不存在、无法删除或无法创建 <code>dest</code> 文件，则抛出错误</li>\n<li><code>open(path，{ mode, charset })</code>，第二个参数接收包含两个属性，其中 <code>mode</code> 的值是 ‘r’、’w’、’a/+’、’b’ 之一，<code>charset</code> 是字符串编码名称。该方法返回一个 Stream 对象，开发者在使用完 Stream 之后有必要显式关闭它。</li>\n<li><code>readLink(string)</code>，该方法返回软链接指向的真实文件或目录的绝对路径，如果传入的不是软链接，则返回空字符串</li>\n<li><code>read(path, {mode, charset})</code>，打开 <code>path</code> 指定的文件并以字符串的形式返回所有内容</li>\n<li><code>removeDirectory(string)</code>，删除目录，删除时目录需要为空，否则会抛出错误</li>\n<li><code>removeTree(string)</code>，递归删除目录</li>\n<li><code>remove(string)</code>，删除文件</li>\n<li><code>size(string)</code>，如果文件存在，则返回表示文件大小的数值</li>\n<li><code>touch(string)</code>，创建空文件，如果文件已存在则不会抛出错误</li>\n<li><code>write(src, content, {mode, charset})</code>，如果无法向目标文件写入数据，则抛出错误并中断后续执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'LIST: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.list());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ABSOLUTE(): '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.absolute(<span class=\"string\">'../'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'CHANGEWORKINGDIRECTORY: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.changeWorkingDirectory(<span class=\"string\">'../'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.workingDirectory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'EXISTS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.exists(<span class=\"string\">'./index.js'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fs.exists(<span class=\"string\">'./index.html'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">phantom.exit(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"System-Module\"><a href=\"#System-Module\" class=\"headerlink\" title=\"System Module\"></a>System Module</h2><p>通过 <code>require(&#39;system&#39;)</code> 可以加载 System 模块，该模块包含以下属性：</p>\n<ul>\n<li><code>os</code>，只读对象，操作系统信息</li>\n<li><code>pid</code>，只读数值，进程 ID</li>\n<li><code>env</code>，对象，键值对形式的环境变量</li>\n<li><code>args</code>，字符串数组，从终端传入的参数，数组中的第一个元素一定是脚本名称。</li>\n<li><code>platform</code>，只读字符串，平台名称，总是返回 “phantomjs”</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ARGS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.args);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'OS: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(system.os));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ENV: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(system.env));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'PID: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.pid);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'PLATFORM: '</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(system.platform);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Web-Server-Module\"><a href=\"#Web-Server-Module\" class=\"headerlink\" title=\"Web Server Module\"></a>Web Server Module</h2><p>通过 <code>require(&#39;webserver&#39;)</code> 可以加载 Web Server 模块，该模块包含以下属性：</p>\n<ul>\n<li><code>port</code>，只读属性，服务器监听的端口</li>\n</ul>\n<p>包含以下方法：</p>\n<ul>\n<li><code>close()</code>，该方法用于关闭服务器</li>\n<li><code>listen()</code>，该方法用于监听指定的端口，该方法接收三个参数，第一个参数是监听端口，既可以是 port（比如 8080），也可以是 ipaddress:port（比如 127.0.0.1:8080）；第二个参数是一个可选对象，该对象目前只包含属性 <code>keepAlive</code>，如果值为 true，则使用持久连接；最后一个参数是一个回调函数，该回调函数接收 request 和 response 两个参数。</li>\n</ul>\n<p>回调函数中的 <code>request</code> 对象包含以下属性：</p>\n<ul>\n<li><code>method</code>，请求方法，比如 <code>GET</code> 和 <code>POST</code></li>\n<li><code>url</code>，返回请求 URL 的路径和查询字符串部分</li>\n<li><code>httpVersion</code>，HTTP 版本</li>\n<li><code>headers</code>，键值对形式的 HTTP 头信息</li>\n<li><code>post</code>，请求体（对于 <code>POST</code> 和 <code>PUT</code> 请求有效）</li>\n<li><code>postRaw</code>，如果 <code>Content-Type: application/x-www-form-urlencoded</code>，post 的原始内容就会保存在该属性中，且 post 中的数据会被转义</li>\n</ul>\n<p>回调函数中的 <code>response</code> 对象包含以下属性和方法：</p>\n<ul>\n<li><code>headers</code>，键值对形式的 HTTP 请求头，该属性必须调用 <code>write()</code> 之前配置好</li>\n<li><code>statusCode</code>，设置返回的 HTTP 状态码</li>\n<li><code>setHeader(name, value)</code>，设置头信息</li>\n<li><code>header(name)</code>，获取头信息</li>\n<li><code>setEncoding(encoding)</code>，设置数据的编码格式，默认值为 UTF-8，如果数据是二进制数据，则应该设为 “binary”</li>\n<li><code>write(data)</code>，向响应体发送数据块，可以反复调用</li>\n<li><code>writeHead(statusCode, headers)</code>，向请求发送响应头信息，<code>statusCode</code> 是一个三位的 HTTP 状态码，<code>headers</code> 是响应头信息</li>\n<li><code>close()</code>，关闭 HTTP 连接。为了避免客户端检测到连接中断，最后最好调用一下 <code>write()</code>，比如 <code>response.write(&quot;&quot;)</code></li>\n<li><code>closeGracefully()</code>，<code>close()</code> 的温和版本，确保优先发送响应头信息并在最后发送 <code>response.write(&quot;&quot;)</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webserver = <span class=\"built_in\">require</span>(<span class=\"string\">'webserver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = webserver.create();</span><br><span class=\"line\"><span class=\"keyword\">var</span> service = server.listen(<span class=\"string\">'127.0.0.1:8989'</span>, &#123;</span><br><span class=\"line\">    keepAlive: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">    res.write(<span class=\"string\">'&lt;html&gt;&lt;body&gt;Hello!Sean&lt;/body&gt;&lt;/html&gt;'</span>);</span><br><span class=\"line\">    res.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is runing at \"</span> + server.port);</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践演练\"><a href=\"#实践演练\" class=\"headerlink\" title=\"实践演练\"></a>实践演练</h2><h5 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h5><ul>\n<li><a href=\"http://phantomjs.org/documentation/\">PhantomJS 官方文档</a></li>\n<li><a href=\"http://phantomjs.org/api/\">PhantomJS 官方 API</a></li>\n</ul>"},{"title":"GET vs POST","date":"2016-04-11T05:54:12.000Z","desc":"辨析 HTTP 中 get 请求和 post 请求的差异","_content":"\n发起 HTTP 请求有四种基本方法：PUT、DELETE、POST 和 GET，通俗讲可以认为对应于增删改查四个方面。根据 HTTP 规范，GET 请求用于获取信息，是安全和幂等的，这里的安全并不代表不会泄露信息，而是说它用来获取信息，查询数据库，不会影响数据库的数据，也不会影响资源的状态；POST 请求则有可能会修改服务器上数据库的数据和资源的状态。\n\n对于 `<form></form>` 标签，其 `action` 属性的默认值是 GET，可以修改为 POST。使用 GET 时，表单数据中的数据会被转义并以查询字符串的形式追加到 URL 的尾部；使用 POST 时，表单数据会依附请求体发送给服务器。\n\n<!-- more -->\n\n下面的表格从多方面比较了两者的差异：\n\n| 维度                       | GET（HTTP）        | POST（HTTP）      |\n|---------------------------|--------------------|-------------------|\n| 历史记录 | 由于数据被添加到了 URL 中，所以会保留在浏览器的历史记录之中 | 数据不会保留在浏览器的历史记录之中 |\n| 书签 | 可收藏为书签 | 不可收藏为书签 |\n| 后退和重新提交 | 如果 HTML 被浏览器缓存了，则重新执行 GET 请求可能不会向服务器重新提交数据 | 浏览器应该提醒用户：数据需要重新提交 | \n| 编码格式| \"application/x-www-form-urlencoded\" | \"multipart/form-data\"（主要用于二进制数据）或 \"application/x-www-form-urlencoded\" |\n| 参数 | 长度受限于 URL 的长度，通常在 2K 以内，具体长度取决于浏览器和服务器 | 可发送参数，包括上传的文件等 |\n| 是否可以修改 | 可被脚本修改 | 比较难修改 |\n| 数据类型是否有限制 | 只接受 ASCII 字符，其他字符会被转义 | 无限制，可接收二进制数据 |\n| 安全性 | GET 相比于 POST 的安全性低，因为发送的数据在 URL 中可见，且可以被浏览器历史记录、服务器日志记录 | POST 的参数不会被浏览器历史记录和服务器日记记录 |\n| 数据长度限制 | 受限于 URL 的长度，通常小于 2K，具体限制取决于浏览器和服务器 | 无限制，实际上也受限于服务器，但相比 GET 要长很多 |\n| 可用性 | GET 请求不应该用于发送密码等私密信息 | POST 请求可用于发送密码等私密信息 |\n| 可见性 | GET 请求对任何人都可见并且有长度限制 | POST 请求的数据不会显示在 URL 中 |\n| 缓存 | 可被缓存 | 不可被缓存 |\n\n## 优点和缺点\n\n当使用 GET 请求发送表单数据时：\n\n- 表单数据只能是 ASCII 字符，其他字符需要被转义为 ASCII 格式，但 POST 请求可以处理二进制数据、图片和其他文件\n- 所有的表单数据对于 URL 都是可见的，而且会被缓存在浏览器的历史记录中，降低了安全性\n- GET 请求的一个优势是表单数据可以被收藏为书签，也可以直接用于填充表单数据\n- 表单数据的长度会受到 URL 长度的限制\n- 易于遭受脚本攻击\n\n## 服务器端\n\n由于 GET 和 POST 对数据的编码方式不同，所以在服务端解码数据的方式也不同。在 ASP 中，服务端使用 `Request.QueryString` 获取 GET 请求参数，使用 `Request.Form` 获取 POST 请求参数。\n\n## HTTPS\n\n使用 HTTPS 发起 GET 请求是否会更安全些呢？我们就做如下的请求来回答这一问题：\n\n```bash\nGET https://www.example.com/login.php?user=mickey&passwd=mini\n```\n\n假设有人监视了这一 GET 请求，那么他只会看到如下信息：\n\n- 这是一个 HTTPS 链接\n- 域名 `www.example.com`\n- 请求的长度\n- 响应的长度\n\nURL 路径以及查询字符串都是不可见的。由此可见，在这些方面，GET 请求和 POST 请求的安全性相同。但是，浏览器仍然会记录 URL，所以无论是 HTTP 还是 HTTPS，使用 GET 发送敏感信息仍是不安全的。\n\n###### 参考资料\n\n- [GET vs. POST](http://www.diffen.com/difference/GET_%28HTTP%29_vs_POST_%28HTTP%29%23Differences_in_Server-Side_Processing)\n- [浅谈 HTTP 中的 GET 和 POST 的区别](http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html)","source":"_posts/GET-vs-POST.md","raw":"title: GET vs POST\ndate: 2016-04-11 13:54:12\ndesc: 辨析 HTTP 中 get 请求和 post 请求的差异\n---\n\n发起 HTTP 请求有四种基本方法：PUT、DELETE、POST 和 GET，通俗讲可以认为对应于增删改查四个方面。根据 HTTP 规范，GET 请求用于获取信息，是安全和幂等的，这里的安全并不代表不会泄露信息，而是说它用来获取信息，查询数据库，不会影响数据库的数据，也不会影响资源的状态；POST 请求则有可能会修改服务器上数据库的数据和资源的状态。\n\n对于 `<form></form>` 标签，其 `action` 属性的默认值是 GET，可以修改为 POST。使用 GET 时，表单数据中的数据会被转义并以查询字符串的形式追加到 URL 的尾部；使用 POST 时，表单数据会依附请求体发送给服务器。\n\n<!-- more -->\n\n下面的表格从多方面比较了两者的差异：\n\n| 维度                       | GET（HTTP）        | POST（HTTP）      |\n|---------------------------|--------------------|-------------------|\n| 历史记录 | 由于数据被添加到了 URL 中，所以会保留在浏览器的历史记录之中 | 数据不会保留在浏览器的历史记录之中 |\n| 书签 | 可收藏为书签 | 不可收藏为书签 |\n| 后退和重新提交 | 如果 HTML 被浏览器缓存了，则重新执行 GET 请求可能不会向服务器重新提交数据 | 浏览器应该提醒用户：数据需要重新提交 | \n| 编码格式| \"application/x-www-form-urlencoded\" | \"multipart/form-data\"（主要用于二进制数据）或 \"application/x-www-form-urlencoded\" |\n| 参数 | 长度受限于 URL 的长度，通常在 2K 以内，具体长度取决于浏览器和服务器 | 可发送参数，包括上传的文件等 |\n| 是否可以修改 | 可被脚本修改 | 比较难修改 |\n| 数据类型是否有限制 | 只接受 ASCII 字符，其他字符会被转义 | 无限制，可接收二进制数据 |\n| 安全性 | GET 相比于 POST 的安全性低，因为发送的数据在 URL 中可见，且可以被浏览器历史记录、服务器日志记录 | POST 的参数不会被浏览器历史记录和服务器日记记录 |\n| 数据长度限制 | 受限于 URL 的长度，通常小于 2K，具体限制取决于浏览器和服务器 | 无限制，实际上也受限于服务器，但相比 GET 要长很多 |\n| 可用性 | GET 请求不应该用于发送密码等私密信息 | POST 请求可用于发送密码等私密信息 |\n| 可见性 | GET 请求对任何人都可见并且有长度限制 | POST 请求的数据不会显示在 URL 中 |\n| 缓存 | 可被缓存 | 不可被缓存 |\n\n## 优点和缺点\n\n当使用 GET 请求发送表单数据时：\n\n- 表单数据只能是 ASCII 字符，其他字符需要被转义为 ASCII 格式，但 POST 请求可以处理二进制数据、图片和其他文件\n- 所有的表单数据对于 URL 都是可见的，而且会被缓存在浏览器的历史记录中，降低了安全性\n- GET 请求的一个优势是表单数据可以被收藏为书签，也可以直接用于填充表单数据\n- 表单数据的长度会受到 URL 长度的限制\n- 易于遭受脚本攻击\n\n## 服务器端\n\n由于 GET 和 POST 对数据的编码方式不同，所以在服务端解码数据的方式也不同。在 ASP 中，服务端使用 `Request.QueryString` 获取 GET 请求参数，使用 `Request.Form` 获取 POST 请求参数。\n\n## HTTPS\n\n使用 HTTPS 发起 GET 请求是否会更安全些呢？我们就做如下的请求来回答这一问题：\n\n```bash\nGET https://www.example.com/login.php?user=mickey&passwd=mini\n```\n\n假设有人监视了这一 GET 请求，那么他只会看到如下信息：\n\n- 这是一个 HTTPS 链接\n- 域名 `www.example.com`\n- 请求的长度\n- 响应的长度\n\nURL 路径以及查询字符串都是不可见的。由此可见，在这些方面，GET 请求和 POST 请求的安全性相同。但是，浏览器仍然会记录 URL，所以无论是 HTTP 还是 HTTPS，使用 GET 发送敏感信息仍是不安全的。\n\n###### 参考资料\n\n- [GET vs. POST](http://www.diffen.com/difference/GET_%28HTTP%29_vs_POST_%28HTTP%29%23Differences_in_Server-Side_Processing)\n- [浅谈 HTTP 中的 GET 和 POST 的区别](http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html)","slug":"GET-vs-POST","published":1,"updated":"2016-04-11T14:10:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaro70005fsdialoq9n06","content":"<p>发起 HTTP 请求有四种基本方法：PUT、DELETE、POST 和 GET，通俗讲可以认为对应于增删改查四个方面。根据 HTTP 规范，GET 请求用于获取信息，是安全和幂等的，这里的安全并不代表不会泄露信息，而是说它用来获取信息，查询数据库，不会影响数据库的数据，也不会影响资源的状态；POST 请求则有可能会修改服务器上数据库的数据和资源的状态。</p>\n<p>对于 <code>&lt;form&gt;&lt;/form&gt;</code> 标签，其 <code>action</code> 属性的默认值是 GET，可以修改为 POST。使用 GET 时，表单数据中的数据会被转义并以查询字符串的形式追加到 URL 的尾部；使用 POST 时，表单数据会依附请求体发送给服务器。</p>\n<a id=\"more\"></a>\n<p>下面的表格从多方面比较了两者的差异：</p>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>GET（HTTP）</th>\n<th>POST（HTTP）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>历史记录</td>\n<td>由于数据被添加到了 URL 中，所以会保留在浏览器的历史记录之中</td>\n<td>数据不会保留在浏览器的历史记录之中</td>\n</tr>\n<tr>\n<td>书签</td>\n<td>可收藏为书签</td>\n<td>不可收藏为书签</td>\n</tr>\n<tr>\n<td>后退和重新提交</td>\n<td>如果 HTML 被浏览器缓存了，则重新执行 GET 请求可能不会向服务器重新提交数据</td>\n<td>浏览器应该提醒用户：数据需要重新提交</td>\n</tr>\n<tr>\n<td>编码格式</td>\n<td>“application/x-www-form-urlencoded”</td>\n<td>“multipart/form-data”（主要用于二进制数据）或 “application/x-www-form-urlencoded”</td>\n</tr>\n<tr>\n<td>参数</td>\n<td>长度受限于 URL 的长度，通常在 2K 以内，具体长度取决于浏览器和服务器</td>\n<td>可发送参数，包括上传的文件等</td>\n</tr>\n<tr>\n<td>是否可以修改</td>\n<td>可被脚本修改</td>\n<td>比较难修改</td>\n</tr>\n<tr>\n<td>数据类型是否有限制</td>\n<td>只接受 ASCII 字符，其他字符会被转义</td>\n<td>无限制，可接收二进制数据</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>GET 相比于 POST 的安全性低，因为发送的数据在 URL 中可见，且可以被浏览器历史记录、服务器日志记录</td>\n<td>POST 的参数不会被浏览器历史记录和服务器日记记录</td>\n</tr>\n<tr>\n<td>数据长度限制</td>\n<td>受限于 URL 的长度，通常小于 2K，具体限制取决于浏览器和服务器</td>\n<td>无限制，实际上也受限于服务器，但相比 GET 要长很多</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>GET 请求不应该用于发送密码等私密信息</td>\n<td>POST 请求可用于发送密码等私密信息</td>\n</tr>\n<tr>\n<td>可见性</td>\n<td>GET 请求对任何人都可见并且有长度限制</td>\n<td>POST 请求的数据不会显示在 URL 中</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>可被缓存</td>\n<td>不可被缓存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"优点和缺点\"><a href=\"#优点和缺点\" class=\"headerlink\" title=\"优点和缺点\"></a>优点和缺点</h2><p>当使用 GET 请求发送表单数据时：</p>\n<ul>\n<li>表单数据只能是 ASCII 字符，其他字符需要被转义为 ASCII 格式，但 POST 请求可以处理二进制数据、图片和其他文件</li>\n<li>所有的表单数据对于 URL 都是可见的，而且会被缓存在浏览器的历史记录中，降低了安全性</li>\n<li>GET 请求的一个优势是表单数据可以被收藏为书签，也可以直接用于填充表单数据</li>\n<li>表单数据的长度会受到 URL 长度的限制</li>\n<li>易于遭受脚本攻击</li>\n</ul>\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><p>由于 GET 和 POST 对数据的编码方式不同，所以在服务端解码数据的方式也不同。在 ASP 中，服务端使用 <code>Request.QueryString</code> 获取 GET 请求参数，使用 <code>Request.Form</code> 获取 POST 请求参数。</p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>使用 HTTPS 发起 GET 请求是否会更安全些呢？我们就做如下的请求来回答这一问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET https://www.example.com/login.php?user=mickey&amp;passwd=mini</span><br></pre></td></tr></table></figure>\n<p>假设有人监视了这一 GET 请求，那么他只会看到如下信息：</p>\n<ul>\n<li>这是一个 HTTPS 链接</li>\n<li>域名 <code>www.example.com</code></li>\n<li>请求的长度</li>\n<li>响应的长度</li>\n</ul>\n<p>URL 路径以及查询字符串都是不可见的。由此可见，在这些方面，GET 请求和 POST 请求的安全性相同。但是，浏览器仍然会记录 URL，所以无论是 HTTP 还是 HTTPS，使用 GET 发送敏感信息仍是不安全的。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://www.diffen.com/difference/GET_%28HTTP%29_vs_POST_%28HTTP%29%23Differences_in_Server-Side_Processing\" target=\"_blank\" rel=\"external\">GET vs. POST</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html\" target=\"_blank\" rel=\"external\">浅谈 HTTP 中的 GET 和 POST 的区别</a></li>\n</ul>\n","excerpt":"<p>发起 HTTP 请求有四种基本方法：PUT、DELETE、POST 和 GET，通俗讲可以认为对应于增删改查四个方面。根据 HTTP 规范，GET 请求用于获取信息，是安全和幂等的，这里的安全并不代表不会泄露信息，而是说它用来获取信息，查询数据库，不会影响数据库的数据，也不会影响资源的状态；POST 请求则有可能会修改服务器上数据库的数据和资源的状态。</p>\n<p>对于 <code>&lt;form&gt;&lt;/form&gt;</code> 标签，其 <code>action</code> 属性的默认值是 GET，可以修改为 POST。使用 GET 时，表单数据中的数据会被转义并以查询字符串的形式追加到 URL 的尾部；使用 POST 时，表单数据会依附请求体发送给服务器。</p>","more":"<p>下面的表格从多方面比较了两者的差异：</p>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>GET（HTTP）</th>\n<th>POST（HTTP）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>历史记录</td>\n<td>由于数据被添加到了 URL 中，所以会保留在浏览器的历史记录之中</td>\n<td>数据不会保留在浏览器的历史记录之中</td>\n</tr>\n<tr>\n<td>书签</td>\n<td>可收藏为书签</td>\n<td>不可收藏为书签</td>\n</tr>\n<tr>\n<td>后退和重新提交</td>\n<td>如果 HTML 被浏览器缓存了，则重新执行 GET 请求可能不会向服务器重新提交数据</td>\n<td>浏览器应该提醒用户：数据需要重新提交</td>\n</tr>\n<tr>\n<td>编码格式</td>\n<td>“application/x-www-form-urlencoded”</td>\n<td>“multipart/form-data”（主要用于二进制数据）或 “application/x-www-form-urlencoded”</td>\n</tr>\n<tr>\n<td>参数</td>\n<td>长度受限于 URL 的长度，通常在 2K 以内，具体长度取决于浏览器和服务器</td>\n<td>可发送参数，包括上传的文件等</td>\n</tr>\n<tr>\n<td>是否可以修改</td>\n<td>可被脚本修改</td>\n<td>比较难修改</td>\n</tr>\n<tr>\n<td>数据类型是否有限制</td>\n<td>只接受 ASCII 字符，其他字符会被转义</td>\n<td>无限制，可接收二进制数据</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>GET 相比于 POST 的安全性低，因为发送的数据在 URL 中可见，且可以被浏览器历史记录、服务器日志记录</td>\n<td>POST 的参数不会被浏览器历史记录和服务器日记记录</td>\n</tr>\n<tr>\n<td>数据长度限制</td>\n<td>受限于 URL 的长度，通常小于 2K，具体限制取决于浏览器和服务器</td>\n<td>无限制，实际上也受限于服务器，但相比 GET 要长很多</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>GET 请求不应该用于发送密码等私密信息</td>\n<td>POST 请求可用于发送密码等私密信息</td>\n</tr>\n<tr>\n<td>可见性</td>\n<td>GET 请求对任何人都可见并且有长度限制</td>\n<td>POST 请求的数据不会显示在 URL 中</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>可被缓存</td>\n<td>不可被缓存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"优点和缺点\"><a href=\"#优点和缺点\" class=\"headerlink\" title=\"优点和缺点\"></a>优点和缺点</h2><p>当使用 GET 请求发送表单数据时：</p>\n<ul>\n<li>表单数据只能是 ASCII 字符，其他字符需要被转义为 ASCII 格式，但 POST 请求可以处理二进制数据、图片和其他文件</li>\n<li>所有的表单数据对于 URL 都是可见的，而且会被缓存在浏览器的历史记录中，降低了安全性</li>\n<li>GET 请求的一个优势是表单数据可以被收藏为书签，也可以直接用于填充表单数据</li>\n<li>表单数据的长度会受到 URL 长度的限制</li>\n<li>易于遭受脚本攻击</li>\n</ul>\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><p>由于 GET 和 POST 对数据的编码方式不同，所以在服务端解码数据的方式也不同。在 ASP 中，服务端使用 <code>Request.QueryString</code> 获取 GET 请求参数，使用 <code>Request.Form</code> 获取 POST 请求参数。</p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>使用 HTTPS 发起 GET 请求是否会更安全些呢？我们就做如下的请求来回答这一问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET https://www.example.com/login.php?user=mickey&amp;passwd=mini</span><br></pre></td></tr></table></figure>\n<p>假设有人监视了这一 GET 请求，那么他只会看到如下信息：</p>\n<ul>\n<li>这是一个 HTTPS 链接</li>\n<li>域名 <code>www.example.com</code></li>\n<li>请求的长度</li>\n<li>响应的长度</li>\n</ul>\n<p>URL 路径以及查询字符串都是不可见的。由此可见，在这些方面，GET 请求和 POST 请求的安全性相同。但是，浏览器仍然会记录 URL，所以无论是 HTTP 还是 HTTPS，使用 GET 发送敏感信息仍是不安全的。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://www.diffen.com/difference/GET_%28HTTP%29_vs_POST_%28HTTP%29%23Differences_in_Server-Side_Processing\">GET vs. POST</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html\">浅谈 HTTP 中的 GET 和 POST 的区别</a></li>\n</ul>"},{"title":"HTML5 Canvas","date":"2016-02-16T05:17:10.000Z","desc":"html canvas 的基础知识","_content":"\nCanvas 是 HTML5 新引进的特性，通过 Canvas 技术可以使用 JavaScript 在浏览器中绘制图形。目前主流浏览器（IE9+）都支持该特性。创建一个最简单的 canvas 只需要两步，第一步是创建一个 canvas 标签： \n\n```html\n<canvas id=\"canvas\"></canvas>\n```\n\n接下来使用 JavaScript 获取 canvas 的上下文：\n\n```js\nconst canvas = document.querySelector('#canvas');\nconst ctx = canvas.getContext('2d');\n```\n\n<!-- more -->\n\n大功告成！\n\n## 修改大小\n\ncanvas 画布的默认尺寸为 300px * 150px，如果想要修改该尺寸，可以在 canvas 标签上添加 width 和 height 属性：\n\n```html\n<canvas id=\"canvas\" width=\"500\" height=\"500\"></canvas>\n```\n\nwidth 和 height 属性不仅仅指定了画布的大小，而且同时制定了画布的分辨率。另一个值得注意的是，不用给这两个属性值添加单位。如果画布的尺寸不确定，还可以使用 JavaScript 进行控制：\n\n```js\ncanvas.width = 500;\ncanvas.height = 500;\n```\n\n## 画线\n\n在 canvas 中画线只需要三行代码：\n\n```js\n// move context to position (100, 100)\nctx.moveTo(100, 100);\n\n// draw a line from current position of context to (500, 500)\nctx.lineTo(500, 500)\n\n// all above was not executed util calling stroke or fill method\nctx.stroke()\n```\n\n下面是常用的 context 方法：\n\n- `lienWidth`, 设置线段的粗细\n- `lineCap`, 设置线段两端的样式： `butt(default)` / `round` / `square`\n- `lineJoin`, 设置两条线段连接处的样式：`miter(default)` / `bevel` / `round`\n- `strokeStyle`, 设置线段的颜色\n- `stroke`，绘制线段\n- `fillStyle`, 设置填充区域的颜色\n- `fill`, 填充一段区域\n\n> 使用 `beginPath()` 和 `closePath()` 可以绘制多条独立的线段：\n\n```js\nctx.beginPath() \nctx.moveTo(100, 100);\nctx.lineTo(500, 500);\nctx.lineTo(100, 500);\nctx.closePath();\nctx.fillStyle = \"green\";\nctx.fill();\n\nctx.beginPath();\nctx.moveTo(200, 100);\nctx.lineTo(300, 200);\nctx.closePath();\nctx.lineWidth = 20;\nctx.strokeStyle = \"yellow\";\n```\n\n## 绘制矩形\n\n`ctx.rect(x, y, width, height)` 方法可以用来绘制一个矩形:\n\n```js\ncxt.beginPath();\ncxt.rect(0, 0, 100, 100);\ncxt.closePath();\n\ncxt.lineWidth = 10;\ncxt.fillStyle = 'red';\ncxt.strokeStyle = 'blue';\n\ncxt.fill();\ncxt.stroke();\n```\n\n下面是两个更简洁的矩形绘制方法：\n\n```js\ncxt.lineWidth = 10;\ncxt.fillStyle = 'red';\ncxt.strokeStyle = 'blue';\n\ncxt.fillRect(0, 0, 100, 100);\ncxt.strokeRect(0, 0, 100, 100);\n```\n\n## 画圆\n\n`ctx.arc(x, y, r, startAngle, endAngle, anticlockwise)` 方法可以用来绘制一个圆形，圆形位于 (x, y)，半径为 r，起始点为 `startAngle`，终点为 `endAngle`，`anticlockwise` 决定旋转方向，默认值为顺时针方向。\n\n<canvas id=\"arc-canvas-demo\"></canvas>\n\n<style>\n#arc-canvas-demo {\n    display: block;\n    width: 100px;\n    height: 100px;\n    margin: 0 auto;\n}\n</style>\n\n<script>\n(function() {\n    \"use strict\";\n    var canvas = document.querySelector('#arc-canvas-demo');\n    var ctx = canvas.getContext('2d');\n    if (ctx) {\n        canvas.width = 100;\n        canvas.height = 100;\n        ctx.beginPath();\n        ctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\n        ctx.closePath()\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#42b983\";\n        ctx.fill();\n    }\n    else {\n        canvas.innerHTML = \"Update your browser to enjoy canvas :) !\"\n    }\n})();\n</script>\n\n```js\nctx.beginPath();\nctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\nctx.closePath()\nctx.lineWidth = 1;\nctx.fillStyle = \"#42b983\";\nctx.fill();\n```\n\n> `ctx.clearrect(xTopLeft, yTopLeft, xBottomRight, yBottomRight)` 方法可以用来清除特定区域。\n\n\n###### 参考资料\n\n- [Canvas 绘图详解](http://www.imooc.com/video/3492)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/HTML5-canvas.md","raw":"title: HTML5 canvas\ndate: 2016-02-16 13:17:10\ndesc: html canvas 的基础知识\n---\n\nCanvas 是 HTML5 新引进的特性，通过 Canvas 技术可以使用 JavaScript 在浏览器中绘制图形。目前主流浏览器（IE9+）都支持该特性。创建一个最简单的 canvas 只需要两步，第一步是创建一个 canvas 标签： \n\n```html\n<canvas id=\"canvas\"></canvas>\n```\n\n接下来使用 JavaScript 获取 canvas 的上下文：\n\n```js\nconst canvas = document.querySelector('#canvas');\nconst ctx = canvas.getContext('2d');\n```\n\n<!-- more -->\n\n大功告成！\n\n## 修改大小\n\ncanvas 画布的默认尺寸为 300px * 150px，如果想要修改该尺寸，可以在 canvas 标签上添加 width 和 height 属性：\n\n```html\n<canvas id=\"canvas\" width=\"500\" height=\"500\"></canvas>\n```\n\nwidth 和 height 属性不仅仅指定了画布的大小，而且同时制定了画布的分辨率。另一个值得注意的是，不用给这两个属性值添加单位。如果画布的尺寸不确定，还可以使用 JavaScript 进行控制：\n\n```js\ncanvas.width = 500;\ncanvas.height = 500;\n```\n\n## 画线\n\n在 canvas 中画线只需要三行代码：\n\n```js\n// move context to position (100, 100)\nctx.moveTo(100, 100);\n\n// draw a line from current position of context to (500, 500)\nctx.lineTo(500, 500)\n\n// all above was not executed util calling stroke or fill method\nctx.stroke()\n```\n\n下面是常用的 context 方法：\n\n- `lienWidth`, 设置线段的粗细\n- `lineCap`, 设置线段两端的样式： `butt(default)` / `round` / `square`\n- `lineJoin`, 设置两条线段连接处的样式：`miter(default)` / `bevel` / `round`\n- `strokeStyle`, 设置线段的颜色\n- `stroke`，绘制线段\n- `fillStyle`, 设置填充区域的颜色\n- `fill`, 填充一段区域\n\n> 使用 `beginPath()` 和 `closePath()` 可以绘制多条独立的线段：\n\n```js\nctx.beginPath() \nctx.moveTo(100, 100);\nctx.lineTo(500, 500);\nctx.lineTo(100, 500);\nctx.closePath();\nctx.fillStyle = \"green\";\nctx.fill();\n\nctx.beginPath();\nctx.moveTo(200, 100);\nctx.lineTo(300, 200);\nctx.closePath();\nctx.lineWidth = 20;\nctx.strokeStyle = \"yellow\";\n```\n\n## 绘制矩形\n\n`ctx.rect(x, y, width, height)` 方法可以用来绘制一个矩形:\n\n```js\ncxt.beginPath();\ncxt.rect(0, 0, 100, 100);\ncxt.closePath();\n\ncxt.lineWidth = 10;\ncxt.fillStyle = 'red';\ncxt.strokeStyle = 'blue';\n\ncxt.fill();\ncxt.stroke();\n```\n\n下面是两个更简洁的矩形绘制方法：\n\n```js\ncxt.lineWidth = 10;\ncxt.fillStyle = 'red';\ncxt.strokeStyle = 'blue';\n\ncxt.fillRect(0, 0, 100, 100);\ncxt.strokeRect(0, 0, 100, 100);\n```\n\n## 画圆\n\n`ctx.arc(x, y, r, startAngle, endAngle, anticlockwise)` 方法可以用来绘制一个圆形，圆形位于 (x, y)，半径为 r，起始点为 `startAngle`，终点为 `endAngle`，`anticlockwise` 决定旋转方向，默认值为顺时针方向。\n\n<canvas id=\"arc-canvas-demo\"></canvas>\n\n<style>\n#arc-canvas-demo {\n    display: block;\n    width: 100px;\n    height: 100px;\n    margin: 0 auto;\n}\n</style>\n\n<script>\n(function() {\n    \"use strict\";\n    var canvas = document.querySelector('#arc-canvas-demo');\n    var ctx = canvas.getContext('2d');\n    if (ctx) {\n        canvas.width = 100;\n        canvas.height = 100;\n        ctx.beginPath();\n        ctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\n        ctx.closePath()\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#42b983\";\n        ctx.fill();\n    }\n    else {\n        canvas.innerHTML = \"Update your browser to enjoy canvas :) !\"\n    }\n})();\n</script>\n\n```js\nctx.beginPath();\nctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\nctx.closePath()\nctx.lineWidth = 1;\nctx.fillStyle = \"#42b983\";\nctx.fill();\n```\n\n> `ctx.clearrect(xTopLeft, yTopLeft, xBottomRight, yBottomRight)` 方法可以用来清除特定区域。\n\n\n###### 参考资料\n\n- [Canvas 绘图详解](http://www.imooc.com/video/3492)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"HTML5-canvas","published":1,"updated":"2016-04-06T06:40:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaro90006fsdijh0adu8z","content":"<p>Canvas 是 HTML5 新引进的特性，通过 Canvas 技术可以使用 JavaScript 在浏览器中绘制图形。目前主流浏览器（IE9+）都支持该特性。创建一个最简单的 canvas 只需要两步，第一步是创建一个 canvas 标签： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来使用 JavaScript 获取 canvas 的上下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#canvas'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>大功告成！</p>\n<h2 id=\"修改大小\"><a href=\"#修改大小\" class=\"headerlink\" title=\"修改大小\"></a>修改大小</h2><p>canvas 画布的默认尺寸为 300px * 150px，如果想要修改该尺寸，可以在 canvas 标签上添加 width 和 height 属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>width 和 height 属性不仅仅指定了画布的大小，而且同时制定了画布的分辨率。另一个值得注意的是，不用给这两个属性值添加单位。如果画布的尺寸不确定，还可以使用 JavaScript 进行控制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.width = <span class=\"number\">500</span>;</span><br><span class=\"line\">canvas.height = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"画线\"><a href=\"#画线\" class=\"headerlink\" title=\"画线\"></a>画线</h2><p>在 canvas 中画线只需要三行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// move context to position (100, 100)</span></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// draw a line from current position of context to (500, 500)</span></span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">500</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// all above was not executed util calling stroke or fill method</span></span><br><span class=\"line\">ctx.stroke()</span><br></pre></td></tr></table></figure>\n<p>下面是常用的 context 方法：</p>\n<ul>\n<li><code>lienWidth</code>, 设置线段的粗细</li>\n<li><code>lineCap</code>, 设置线段两端的样式： <code>butt(default)</code> / <code>round</code> / <code>square</code></li>\n<li><code>lineJoin</code>, 设置两条线段连接处的样式：<code>miter(default)</code> / <code>bevel</code> / <code>round</code></li>\n<li><code>strokeStyle</code>, 设置线段的颜色</li>\n<li><code>stroke</code>，绘制线段</li>\n<li><code>fillStyle</code>, 设置填充区域的颜色</li>\n<li><code>fill</code>, 填充一段区域</li>\n</ul>\n<blockquote>\n<p>使用 <code>beginPath()</code> 和 <code>closePath()</code> 可以绘制多条独立的线段：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctx.beginPath() </span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">ctx.closePath();</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"green\"</span>;</span><br><span class=\"line\">ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">ctx.closePath();</span><br><span class=\"line\">ctx.lineWidth = <span class=\"number\">20</span>;</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p><code>ctx.rect(x, y, width, height)</code> 方法可以用来绘制一个矩形:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cxt.beginPath();</span><br><span class=\"line\">cxt.rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">cxt.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.lineWidth = <span class=\"number\">10</span>;</span><br><span class=\"line\">cxt.fillStyle = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">cxt.strokeStyle = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.fill();</span><br><span class=\"line\">cxt.stroke();</span><br></pre></td></tr></table></figure>\n<p>下面是两个更简洁的矩形绘制方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cxt.lineWidth = <span class=\"number\">10</span>;</span><br><span class=\"line\">cxt.fillStyle = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">cxt.strokeStyle = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">cxt.strokeRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"画圆\"><a href=\"#画圆\" class=\"headerlink\" title=\"画圆\"></a>画圆</h2><p><code>ctx.arc(x, y, r, startAngle, endAngle, anticlockwise)</code> 方法可以用来绘制一个圆形，圆形位于 (x, y)，半径为 r，起始点为 <code>startAngle</code>，终点为 <code>endAngle</code>，<code>anticlockwise</code> 决定旋转方向，默认值为顺时针方向。</p>\n<canvas id=\"arc-canvas-demo\"></canvas>\n\n<style>\n#arc-canvas-demo {\n    display: block;\n    width: 100px;\n    height: 100px;\n    margin: 0 auto;\n}\n</style>\n\n<script>\n(function() {\n    \"use strict\";\n    var canvas = document.querySelector('#arc-canvas-demo');\n    var ctx = canvas.getContext('2d');\n    if (ctx) {\n        canvas.width = 100;\n        canvas.height = 100;\n        ctx.beginPath();\n        ctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\n        ctx.closePath()\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#42b983\";\n        ctx.fill();\n    }\n    else {\n        canvas.innerHTML = \"Update your browser to enjoy canvas :) !\"\n    }\n})();\n</script>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.arc(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"number\">1.5</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">ctx.closePath()</span><br><span class=\"line\">ctx.lineWidth = <span class=\"number\">1</span>;</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"#42b983\"</span>;</span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>ctx.clearrect(xTopLeft, yTopLeft, xBottomRight, yBottomRight)</code> 方法可以用来清除特定区域。</p>\n</blockquote>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://www.imooc.com/video/3492\" target=\"_blank\" rel=\"external\">Canvas 绘图详解</a></li>\n</ul>\n","excerpt":"<p>Canvas 是 HTML5 新引进的特性，通过 Canvas 技术可以使用 JavaScript 在浏览器中绘制图形。目前主流浏览器（IE9+）都支持该特性。创建一个最简单的 canvas 只需要两步，第一步是创建一个 canvas 标签： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来使用 JavaScript 获取 canvas 的上下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#canvas'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></figure>","more":"<p>大功告成！</p>\n<h2 id=\"修改大小\"><a href=\"#修改大小\" class=\"headerlink\" title=\"修改大小\"></a>修改大小</h2><p>canvas 画布的默认尺寸为 300px * 150px，如果想要修改该尺寸，可以在 canvas 标签上添加 width 和 height 属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>width 和 height 属性不仅仅指定了画布的大小，而且同时制定了画布的分辨率。另一个值得注意的是，不用给这两个属性值添加单位。如果画布的尺寸不确定，还可以使用 JavaScript 进行控制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.width = <span class=\"number\">500</span>;</span><br><span class=\"line\">canvas.height = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"画线\"><a href=\"#画线\" class=\"headerlink\" title=\"画线\"></a>画线</h2><p>在 canvas 中画线只需要三行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// move context to position (100, 100)</span></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// draw a line from current position of context to (500, 500)</span></span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">500</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// all above was not executed util calling stroke or fill method</span></span><br><span class=\"line\">ctx.stroke()</span><br></pre></td></tr></table></figure>\n<p>下面是常用的 context 方法：</p>\n<ul>\n<li><code>lienWidth</code>, 设置线段的粗细</li>\n<li><code>lineCap</code>, 设置线段两端的样式： <code>butt(default)</code> / <code>round</code> / <code>square</code></li>\n<li><code>lineJoin</code>, 设置两条线段连接处的样式：<code>miter(default)</code> / <code>bevel</code> / <code>round</code></li>\n<li><code>strokeStyle</code>, 设置线段的颜色</li>\n<li><code>stroke</code>，绘制线段</li>\n<li><code>fillStyle</code>, 设置填充区域的颜色</li>\n<li><code>fill</code>, 填充一段区域</li>\n</ul>\n<blockquote>\n<p>使用 <code>beginPath()</code> 和 <code>closePath()</code> 可以绘制多条独立的线段：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctx.beginPath() </span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">ctx.closePath();</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"green\"</span>;</span><br><span class=\"line\">ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">ctx.closePath();</span><br><span class=\"line\">ctx.lineWidth = <span class=\"number\">20</span>;</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p><code>ctx.rect(x, y, width, height)</code> 方法可以用来绘制一个矩形:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cxt.beginPath();</span><br><span class=\"line\">cxt.rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">cxt.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.lineWidth = <span class=\"number\">10</span>;</span><br><span class=\"line\">cxt.fillStyle = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">cxt.strokeStyle = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.fill();</span><br><span class=\"line\">cxt.stroke();</span><br></pre></td></tr></table></figure>\n<p>下面是两个更简洁的矩形绘制方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cxt.lineWidth = <span class=\"number\">10</span>;</span><br><span class=\"line\">cxt.fillStyle = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">cxt.strokeStyle = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cxt.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">cxt.strokeRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"画圆\"><a href=\"#画圆\" class=\"headerlink\" title=\"画圆\"></a>画圆</h2><p><code>ctx.arc(x, y, r, startAngle, endAngle, anticlockwise)</code> 方法可以用来绘制一个圆形，圆形位于 (x, y)，半径为 r，起始点为 <code>startAngle</code>，终点为 <code>endAngle</code>，<code>anticlockwise</code> 决定旋转方向，默认值为顺时针方向。</p>\n<canvas id=\"arc-canvas-demo\"></canvas>\n\n<style>\n#arc-canvas-demo {\n    display: block;\n    width: 100px;\n    height: 100px;\n    margin: 0 auto;\n}\n</style>\n\n<script>\n(function() {\n    \"use strict\";\n    var canvas = document.querySelector('#arc-canvas-demo');\n    var ctx = canvas.getContext('2d');\n    if (ctx) {\n        canvas.width = 100;\n        canvas.height = 100;\n        ctx.beginPath();\n        ctx.arc(50, 50, 50, 0, 1.5 * Math.PI);\n        ctx.closePath()\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#42b983\";\n        ctx.fill();\n    }\n    else {\n        canvas.innerHTML = \"Update your browser to enjoy canvas :) !\"\n    }\n})();\n</script>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.arc(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"number\">1.5</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">ctx.closePath()</span><br><span class=\"line\">ctx.lineWidth = <span class=\"number\">1</span>;</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"#42b983\"</span>;</span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>ctx.clearrect(xTopLeft, yTopLeft, xBottomRight, yBottomRight)</code> 方法可以用来清除特定区域。</p>\n</blockquote>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://www.imooc.com/video/3492\">Canvas 绘图详解</a></li>\n</ul>"},{"title":"JavaScript 常见问题和解决方式","date":"2016-03-12T12:22:26.000Z","desc":"本文总结了 JavaScript 常见的问题，并对其做出了详细的解析。","_content":"\nJavaScript 因其历史原因一直存在诸多缺陷，本文所讨论的只是其中的一小部分，适合为初学者答疑解惑，此外文中观点尚存在不足之处，或者对部分问题 ES6 已经提出了新的解决方案。\n\n<!-- more -->\n\n## 类型判断\n\n使用 typeof 运算符判断一个原始值变量的类型是没有问题的，但如果判断的是引用值类型就会有局限性，比如 `null` 和数组的结果都是 `object`。要想判断变量属于哪种内置类型，最靠谱的方式是调用 `Object.prototype.toString` 方法：\n\n```js\nObject.prototype.toString.call([])\n// => \"[object Array]\"\n```\n\n在 JavaScript 规范（ECMA-262 19.1.3.6）中详细解释了 `Object.prototype.toString` 的解析过程：\n\n1. 如果 `this` 的值为 `undefined`，则返回字符串 `\"[object Undefined]\"`\n2. 如果 `this` 的值为 `null`，则返回字符串 `\"[object Null]\"`\n3. 使用 `O` 表示 `ToObject(this)` 的值\n4. 使用 `isArray` 表示 `IsArray(O)` 的值\n5. 如果 `isArray` 不是正常值（比如抛出错误），则中断执行\n6. 如果 `isArray === true`，则 `builtinTag = \"Array\"`，之后执行第 16 步\n7. 如果 `O` 是一个 exotic 字符串对象，则 `builtinTag = \"String\"`，之后执行第 16 步\n8. 如果 `O` 拥有内部属性 `[[ParameterMap]]`，则 `builtinTag = \"Arguments\"`，跳到第 16 步\n9. 如果 `O` 拥有内部方法 `[[Call]]`，则 `builtinTag = \"Function\"`，跳到第 16 步\n10. 如果 `O` 拥有内部属性 `[[ErrorData]]`，则 `builtinTag = \"Error\"`，跳到第 16 步\n11. 如果 `O` 拥有内部属性 `[[BooleanData]]`，则 `builtinTag = \"Boolean\"`，跳到第 16 步\n12. 如果 `O` 拥有内部属性 `[[NumberData]]`，则 `builtinTag = \"Number\"`，跳到第 16 步\n13. 如果 `O` 拥有内部属性 `[[DateValue]]`，则 `builtinTag = \"Date\"`，跳到第 16 步\n14. 如果 `O` 拥有内部属性 `[[RegExpMather]]`，则 `builtinTag = \"RegExp\"`，跳到第 16 步\n15. 如果第 6 ~ 14 步都不符合，则 `builtinTag = \"Object\"`，跳到第 16 步\n16. 使用 `tag` 表示 `Get (O, @@toStringTag)` 的值\n17. 如果 `tag` 不是正常值，则中断执行\n18. 如果 `Type(tag)` 不是一个字符串，则 `tag = builtinTag`\n19. 返回一个 `\"[object\" + tag + \"]\"` 形式的字符串\n\n<div class=\"tip\">\n开发者喜欢使用该方法获取内部属性 `[[Class]]` 的字符串值，用于检测内建对象的类型。值得注意的是，这一方法只对内建对象有效，对宿主对象等其他类型的对象则不具有可信度。\n</div>\n\n## 局部变量泄漏到全局\n\n有如下所示的代码，猜测一下输出结果：\n\n```js\n(function(){\n    var a = b = 3;\n})();\n\nconsole.log(a);\nconsole.log(b);\n```\n\n很多时候不经意间，某些变量就会泄漏为全局变量，比如这里的变量 b。上述代码等同于：\n\n```js\n(function(){\n    b = 3;\n    var a = b;\n})();\n```\n\nES6 支持块级作用域，使用时需要遵循两个条件：一是添加 `\"use strict;\"` 字符串，声明严格模式；而是使用 `let` 和 `const` 声明变量。如果不能使用 ES6 的块级作用域，那么声明变量时要做到使用单独一行声明单个变量，比如：\n\n```js\nvar b = 3;\nvar a = b;\n```\n\n## 立即执行函数\n\n使用立即执行函数的好处是模块化和块级作用域。目前 ES6 对这两个方面都有相应的支持，所以除非为了保持兼容性，ES6 会是更好的开发方式。\n\n在浏览器环境中，立即调用函数中的 `this` 指向全局变量 `window`：\n\n```js\n(function () {\n    console.log(this);\n    console.log(this === window);\n    // => true\n})();\n```\n\n## 严格模式\n\n1. 使用 `'use strict;'` 声明严格模式\n1. 全局变量必须显示声明\n1. 禁止使用 with 语句，限制动态绑定\n1. `eval()` 的作用域为独立作用域，独立于全局作用域和函数作用域之外，生成的变量只能用于 eval 内部\n1. 禁止 `this` 关键字指向全局对象\n1. 禁止使用 `delete` 删除变量，只有 `configurable === true` 的属性可以被删除\n1. 对可读属性赋值、对禁止扩展的对象添加属性、删除不可删除属性都会报错\n1. 禁止在对象中添加重名属性\n1. 不允许对 arguments 赋值\n1. 禁止使用 arguments.callee\n1. 必须在顶层作用域声明函数\n1. 新增保留字\n\n## 浮点数的精度问题\n\n对于使用 IEEE 754 存储双精度 64 位浮点数的语言都会遇到这个问题，且最简单的复现方式就是计算 `0.1 + 0.2`。这一表达式的值不等于 `0.3`，其原因就是 IEEE 754 不能正确表示 0.1。IEEE 754 规定的浮点数由一位符号位 `s`、五十二位小数位 `m` 和十一位指数位组成 `e`：\n\n$$s \\times m \\times 2^e$$\n\nJavaScript 规定 e 的范围为 `[-1074, 971]`，则 `Number.MAX_VALUE` 的值为：\n\n$$ 1 \\times ( 2^{53} - 1) \\times 2^{971} $$\n\n了解以上基础知识后求取 `0.1` 和 `0.2` 的二进制表示：\n\n```js\n(0.1).toString(2)\n// => \"0.0001100110011001100110011001100110011001100110011001101\"\n\n(0.2).toString(2)\n// => \"0.001100110011001100110011001100110011001100110011001101\"\n\n(0.1 + 0.2).toString(2)\n// => \"0.0100110011001100110011001100110011001100110011001101\"\n```\n\n关于这一问题的详细解析和其他问题，建议参考文章：\n\n- [http://www.cnblogs.com/zichi/p/5034201.html](http://www.cnblogs.com/zichi/p/5034201.html)\n- [http://www.cnblogs.com/zichi/p/5043540.html](http://www.cnblogs.com/zichi/p/5043540.html)\n\n## setTimeout\n\nJavaScript 是单线程语言，异步事件的优先级低于其他代码，`setTimeout(callback, 0)` 表示加入事件队列以异步的方式执行，且在事件队列中优先执行：\n\n```js\n(function() {\n    console.log(1); \n    setTimeout(function(){console.log(2)}, 1000); \n    setTimeout(function(){console.log(3)}, 0); \n    console.log(4);\n})();\n```\n\n## Object key\n\n```js\nvar a={},\n    b={key:'b'},\n    c={key:'c'};\n \na[b]=123;\na[c]=456;\n \nconsole.log(a[b]);\n// => 456\n```\n\n上面的代码有一个特点，就是没有使用字符串或 Symbol 作为对象的属性名，所以系统会将其转换为字符串，相当于：\n\n```js\na[Object.prototype.toString.call(b)]=123;\na[Object.prototype.toString.call(c)]=456;\n\n// equal to\na[\"[object Object]\"]=123;\na[\"[object Object]\"]=456;\n```\n\n## eval 作用域\n\n```js\nvar y = 1;\n\nif (function f(){}) {\n    y += typeof f;\n}\n\nconsole.log(y);\n// => \"1undefined\"\n```\n\n在上面的代码中，最奇怪的有点在于 `typeof f === \"undefined\"`。之所以有这样的结果，是因为 if 条件语句是使用 `eval()` 解析的。由于 `eval(function f(){})` 只会返回值而不会向全局作用域暴漏变量 `f`，所以执行 `typeof f` 时并没有找到函数 `f`，则值为 undefined。\n\n## 私有方法\n\n在 JavaScript 中模拟私有方法的缺点就是内存占用高：\n\n```js\nvar Employee = function (name, company, salary) {\n    this.name = name || \"\";       \n    this.company = company || \"\"; \n    this.salary = salary || 5000; \n\n    // Private method\n    var increaseSalary = function () {\n        this.salary = this.salary + 1000;\n    };\n\n    // Public method\n    this.dispalyIncreasedSalary = function() {\n        increaseSlary();\n        console.log(this.salary);\n    };\n};\n\nvar emp1 = new Employee(\"John\",\"Pluto\",3000);\nvar emp2 = new Employee(\"Merry\",\"Pluto\",2000);\nvar emp3 = new Employee(\"Ren\",\"Pluto\",2500);\n```\n\n对于 `Employee` 的每一个实例 emp1 / emp2 / emp3，它们都拥有各自的一个 `increaseSalary` 方法，所以除非确有必要，尽量不要使用私有方法。\n\n## delete 操作符\n\n```js\nvar output = (function(x){\n    delete x;\n    return x;\n})(0);\n\nconsole.log(output);\n// => 0\n```\n\n`delete` 操作符用于删除对象的属性，对于其他变量无效。\n\n```js\nvar Employee = {\n  company: 'xyz'\n}\nvar emp1 = Object.create(Employee);\ndelete emp1.company;\nconsole.log(emp1.company);\n// => \"xyz\"\n```\n\n在上面的代码中，emp1 通过原形链继承了 `Employee` 的属性 `company`，emp1 本身并没有 `company` 属性，即 `emp1.company === emp1.__proto__.company`，所以 `delete` 操作是无效的。\n\n## 延迟定义\n\n```js\n// 第一种声明方式\nvar foo = function(){ \n    // Some code\n}; \n\n// 第二种声明方式\nfunction bar(){ \n    // Some code\n}; \n```\n\n这两种声明方式的差异在于，`foo()` 在运行时定义，而 `bar()` 在解析时定义。\n\n```js\nfoo();\n// 执行 foo() 时，foo 的值为 undefined\nvar foo = function(){ \n    console.log(\"Hi I am inside Foo\");\n}; \n\nbar();\n// 执行 bar() 时，由于 bar() 已经被 JavaScript 引擎解析过了，所以不会报错\nfunction bar(){ \n    console.log(\"Hi I am inside Foo\");\n};\n```\n\n根据这一特点，我们可以根据需要延迟定义某些功能：\n\n```js\nif(testCondition) { \n    var foo = function(){ \n        console.log(\"inside Foo with testCondition True value\");\n    }; \n}else{\n    var foo = function(){ \n        console.log(\"inside Foo with testCondition false value\");\n    }; \n}\n```\n\n在上面的代码中，布尔值 `testCondition` 决定了是定义何种功能的 `foo()` 函数，在定义之前，`foo` 只是一个原始值 `undefined`，并没有引用具体的函数。\n\n###### 参考资料\n\n- [25 Essential JavaScript Interview Questions](https://www.toptal.com/javascript/interview-questions)\n- [21 Essential JavaScript Tech Interview Practive Questions answers](https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers)\n","source":"_posts/JavaScript 常见问题和解决方式.md","raw":"title: JavaScript 常见问题和解决方式\ndate: 2016-03-12 20:22:26\ndesc: 本文总结了 JavaScript 常见的问题，并对其做出了详细的解析。\n---\n\nJavaScript 因其历史原因一直存在诸多缺陷，本文所讨论的只是其中的一小部分，适合为初学者答疑解惑，此外文中观点尚存在不足之处，或者对部分问题 ES6 已经提出了新的解决方案。\n\n<!-- more -->\n\n## 类型判断\n\n使用 typeof 运算符判断一个原始值变量的类型是没有问题的，但如果判断的是引用值类型就会有局限性，比如 `null` 和数组的结果都是 `object`。要想判断变量属于哪种内置类型，最靠谱的方式是调用 `Object.prototype.toString` 方法：\n\n```js\nObject.prototype.toString.call([])\n// => \"[object Array]\"\n```\n\n在 JavaScript 规范（ECMA-262 19.1.3.6）中详细解释了 `Object.prototype.toString` 的解析过程：\n\n1. 如果 `this` 的值为 `undefined`，则返回字符串 `\"[object Undefined]\"`\n2. 如果 `this` 的值为 `null`，则返回字符串 `\"[object Null]\"`\n3. 使用 `O` 表示 `ToObject(this)` 的值\n4. 使用 `isArray` 表示 `IsArray(O)` 的值\n5. 如果 `isArray` 不是正常值（比如抛出错误），则中断执行\n6. 如果 `isArray === true`，则 `builtinTag = \"Array\"`，之后执行第 16 步\n7. 如果 `O` 是一个 exotic 字符串对象，则 `builtinTag = \"String\"`，之后执行第 16 步\n8. 如果 `O` 拥有内部属性 `[[ParameterMap]]`，则 `builtinTag = \"Arguments\"`，跳到第 16 步\n9. 如果 `O` 拥有内部方法 `[[Call]]`，则 `builtinTag = \"Function\"`，跳到第 16 步\n10. 如果 `O` 拥有内部属性 `[[ErrorData]]`，则 `builtinTag = \"Error\"`，跳到第 16 步\n11. 如果 `O` 拥有内部属性 `[[BooleanData]]`，则 `builtinTag = \"Boolean\"`，跳到第 16 步\n12. 如果 `O` 拥有内部属性 `[[NumberData]]`，则 `builtinTag = \"Number\"`，跳到第 16 步\n13. 如果 `O` 拥有内部属性 `[[DateValue]]`，则 `builtinTag = \"Date\"`，跳到第 16 步\n14. 如果 `O` 拥有内部属性 `[[RegExpMather]]`，则 `builtinTag = \"RegExp\"`，跳到第 16 步\n15. 如果第 6 ~ 14 步都不符合，则 `builtinTag = \"Object\"`，跳到第 16 步\n16. 使用 `tag` 表示 `Get (O, @@toStringTag)` 的值\n17. 如果 `tag` 不是正常值，则中断执行\n18. 如果 `Type(tag)` 不是一个字符串，则 `tag = builtinTag`\n19. 返回一个 `\"[object\" + tag + \"]\"` 形式的字符串\n\n<div class=\"tip\">\n开发者喜欢使用该方法获取内部属性 `[[Class]]` 的字符串值，用于检测内建对象的类型。值得注意的是，这一方法只对内建对象有效，对宿主对象等其他类型的对象则不具有可信度。\n</div>\n\n## 局部变量泄漏到全局\n\n有如下所示的代码，猜测一下输出结果：\n\n```js\n(function(){\n    var a = b = 3;\n})();\n\nconsole.log(a);\nconsole.log(b);\n```\n\n很多时候不经意间，某些变量就会泄漏为全局变量，比如这里的变量 b。上述代码等同于：\n\n```js\n(function(){\n    b = 3;\n    var a = b;\n})();\n```\n\nES6 支持块级作用域，使用时需要遵循两个条件：一是添加 `\"use strict;\"` 字符串，声明严格模式；而是使用 `let` 和 `const` 声明变量。如果不能使用 ES6 的块级作用域，那么声明变量时要做到使用单独一行声明单个变量，比如：\n\n```js\nvar b = 3;\nvar a = b;\n```\n\n## 立即执行函数\n\n使用立即执行函数的好处是模块化和块级作用域。目前 ES6 对这两个方面都有相应的支持，所以除非为了保持兼容性，ES6 会是更好的开发方式。\n\n在浏览器环境中，立即调用函数中的 `this` 指向全局变量 `window`：\n\n```js\n(function () {\n    console.log(this);\n    console.log(this === window);\n    // => true\n})();\n```\n\n## 严格模式\n\n1. 使用 `'use strict;'` 声明严格模式\n1. 全局变量必须显示声明\n1. 禁止使用 with 语句，限制动态绑定\n1. `eval()` 的作用域为独立作用域，独立于全局作用域和函数作用域之外，生成的变量只能用于 eval 内部\n1. 禁止 `this` 关键字指向全局对象\n1. 禁止使用 `delete` 删除变量，只有 `configurable === true` 的属性可以被删除\n1. 对可读属性赋值、对禁止扩展的对象添加属性、删除不可删除属性都会报错\n1. 禁止在对象中添加重名属性\n1. 不允许对 arguments 赋值\n1. 禁止使用 arguments.callee\n1. 必须在顶层作用域声明函数\n1. 新增保留字\n\n## 浮点数的精度问题\n\n对于使用 IEEE 754 存储双精度 64 位浮点数的语言都会遇到这个问题，且最简单的复现方式就是计算 `0.1 + 0.2`。这一表达式的值不等于 `0.3`，其原因就是 IEEE 754 不能正确表示 0.1。IEEE 754 规定的浮点数由一位符号位 `s`、五十二位小数位 `m` 和十一位指数位组成 `e`：\n\n$$s \\times m \\times 2^e$$\n\nJavaScript 规定 e 的范围为 `[-1074, 971]`，则 `Number.MAX_VALUE` 的值为：\n\n$$ 1 \\times ( 2^{53} - 1) \\times 2^{971} $$\n\n了解以上基础知识后求取 `0.1` 和 `0.2` 的二进制表示：\n\n```js\n(0.1).toString(2)\n// => \"0.0001100110011001100110011001100110011001100110011001101\"\n\n(0.2).toString(2)\n// => \"0.001100110011001100110011001100110011001100110011001101\"\n\n(0.1 + 0.2).toString(2)\n// => \"0.0100110011001100110011001100110011001100110011001101\"\n```\n\n关于这一问题的详细解析和其他问题，建议参考文章：\n\n- [http://www.cnblogs.com/zichi/p/5034201.html](http://www.cnblogs.com/zichi/p/5034201.html)\n- [http://www.cnblogs.com/zichi/p/5043540.html](http://www.cnblogs.com/zichi/p/5043540.html)\n\n## setTimeout\n\nJavaScript 是单线程语言，异步事件的优先级低于其他代码，`setTimeout(callback, 0)` 表示加入事件队列以异步的方式执行，且在事件队列中优先执行：\n\n```js\n(function() {\n    console.log(1); \n    setTimeout(function(){console.log(2)}, 1000); \n    setTimeout(function(){console.log(3)}, 0); \n    console.log(4);\n})();\n```\n\n## Object key\n\n```js\nvar a={},\n    b={key:'b'},\n    c={key:'c'};\n \na[b]=123;\na[c]=456;\n \nconsole.log(a[b]);\n// => 456\n```\n\n上面的代码有一个特点，就是没有使用字符串或 Symbol 作为对象的属性名，所以系统会将其转换为字符串，相当于：\n\n```js\na[Object.prototype.toString.call(b)]=123;\na[Object.prototype.toString.call(c)]=456;\n\n// equal to\na[\"[object Object]\"]=123;\na[\"[object Object]\"]=456;\n```\n\n## eval 作用域\n\n```js\nvar y = 1;\n\nif (function f(){}) {\n    y += typeof f;\n}\n\nconsole.log(y);\n// => \"1undefined\"\n```\n\n在上面的代码中，最奇怪的有点在于 `typeof f === \"undefined\"`。之所以有这样的结果，是因为 if 条件语句是使用 `eval()` 解析的。由于 `eval(function f(){})` 只会返回值而不会向全局作用域暴漏变量 `f`，所以执行 `typeof f` 时并没有找到函数 `f`，则值为 undefined。\n\n## 私有方法\n\n在 JavaScript 中模拟私有方法的缺点就是内存占用高：\n\n```js\nvar Employee = function (name, company, salary) {\n    this.name = name || \"\";       \n    this.company = company || \"\"; \n    this.salary = salary || 5000; \n\n    // Private method\n    var increaseSalary = function () {\n        this.salary = this.salary + 1000;\n    };\n\n    // Public method\n    this.dispalyIncreasedSalary = function() {\n        increaseSlary();\n        console.log(this.salary);\n    };\n};\n\nvar emp1 = new Employee(\"John\",\"Pluto\",3000);\nvar emp2 = new Employee(\"Merry\",\"Pluto\",2000);\nvar emp3 = new Employee(\"Ren\",\"Pluto\",2500);\n```\n\n对于 `Employee` 的每一个实例 emp1 / emp2 / emp3，它们都拥有各自的一个 `increaseSalary` 方法，所以除非确有必要，尽量不要使用私有方法。\n\n## delete 操作符\n\n```js\nvar output = (function(x){\n    delete x;\n    return x;\n})(0);\n\nconsole.log(output);\n// => 0\n```\n\n`delete` 操作符用于删除对象的属性，对于其他变量无效。\n\n```js\nvar Employee = {\n  company: 'xyz'\n}\nvar emp1 = Object.create(Employee);\ndelete emp1.company;\nconsole.log(emp1.company);\n// => \"xyz\"\n```\n\n在上面的代码中，emp1 通过原形链继承了 `Employee` 的属性 `company`，emp1 本身并没有 `company` 属性，即 `emp1.company === emp1.__proto__.company`，所以 `delete` 操作是无效的。\n\n## 延迟定义\n\n```js\n// 第一种声明方式\nvar foo = function(){ \n    // Some code\n}; \n\n// 第二种声明方式\nfunction bar(){ \n    // Some code\n}; \n```\n\n这两种声明方式的差异在于，`foo()` 在运行时定义，而 `bar()` 在解析时定义。\n\n```js\nfoo();\n// 执行 foo() 时，foo 的值为 undefined\nvar foo = function(){ \n    console.log(\"Hi I am inside Foo\");\n}; \n\nbar();\n// 执行 bar() 时，由于 bar() 已经被 JavaScript 引擎解析过了，所以不会报错\nfunction bar(){ \n    console.log(\"Hi I am inside Foo\");\n};\n```\n\n根据这一特点，我们可以根据需要延迟定义某些功能：\n\n```js\nif(testCondition) { \n    var foo = function(){ \n        console.log(\"inside Foo with testCondition True value\");\n    }; \n}else{\n    var foo = function(){ \n        console.log(\"inside Foo with testCondition false value\");\n    }; \n}\n```\n\n在上面的代码中，布尔值 `testCondition` 决定了是定义何种功能的 `foo()` 函数，在定义之前，`foo` 只是一个原始值 `undefined`，并没有引用具体的函数。\n\n###### 参考资料\n\n- [25 Essential JavaScript Interview Questions](https://www.toptal.com/javascript/interview-questions)\n- [21 Essential JavaScript Tech Interview Practive Questions answers](https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers)\n","slug":"JavaScript 常见问题和解决方式","published":1,"updated":"2016-04-01T10:03:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaroa0007fsdip1hejiq6","content":"<p>JavaScript 因其历史原因一直存在诸多缺陷，本文所讨论的只是其中的一小部分，适合为初学者答疑解惑，此外文中观点尚存在不足之处，或者对部分问题 ES6 已经提出了新的解决方案。</p>\n<a id=\"more\"></a>\n<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><p>使用 typeof 运算符判断一个原始值变量的类型是没有问题的，但如果判断的是引用值类型就会有局限性，比如 <code>null</code> 和数组的结果都是 <code>object</code>。要想判断变量属于哪种内置类型，最靠谱的方式是调用 <code>Object.prototype.toString</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"[object Array]\"</span></span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 规范（ECMA-262 19.1.3.6）中详细解释了 <code>Object.prototype.toString</code> 的解析过程：</p>\n<ol>\n<li>如果 <code>this</code> 的值为 <code>undefined</code>，则返回字符串 <code>&quot;[object Undefined]&quot;</code></li>\n<li>如果 <code>this</code> 的值为 <code>null</code>，则返回字符串 <code>&quot;[object Null]&quot;</code></li>\n<li>使用 <code>O</code> 表示 <code>ToObject(this)</code> 的值</li>\n<li>使用 <code>isArray</code> 表示 <code>IsArray(O)</code> 的值</li>\n<li>如果 <code>isArray</code> 不是正常值（比如抛出错误），则中断执行</li>\n<li>如果 <code>isArray === true</code>，则 <code>builtinTag = &quot;Array&quot;</code>，之后执行第 16 步</li>\n<li>如果 <code>O</code> 是一个 exotic 字符串对象，则 <code>builtinTag = &quot;String&quot;</code>，之后执行第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[ParameterMap]]</code>，则 <code>builtinTag = &quot;Arguments&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部方法 <code>[[Call]]</code>，则 <code>builtinTag = &quot;Function&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[ErrorData]]</code>，则 <code>builtinTag = &quot;Error&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[BooleanData]]</code>，则 <code>builtinTag = &quot;Boolean&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[NumberData]]</code>，则 <code>builtinTag = &quot;Number&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[DateValue]]</code>，则 <code>builtinTag = &quot;Date&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[RegExpMather]]</code>，则 <code>builtinTag = &quot;RegExp&quot;</code>，跳到第 16 步</li>\n<li>如果第 6 ~ 14 步都不符合，则 <code>builtinTag = &quot;Object&quot;</code>，跳到第 16 步</li>\n<li>使用 <code>tag</code> 表示 <code>Get (O, @@toStringTag)</code> 的值</li>\n<li>如果 <code>tag</code> 不是正常值，则中断执行</li>\n<li>如果 <code>Type(tag)</code> 不是一个字符串，则 <code>tag = builtinTag</code></li>\n<li>返回一个 <code>&quot;[object&quot; + tag + &quot;]&quot;</code> 形式的字符串</li>\n</ol>\n<div class=\"tip\"><br>开发者喜欢使用该方法获取内部属性 <code>[[Class]]</code> 的字符串值，用于检测内建对象的类型。值得注意的是，这一方法只对内建对象有效，对宿主对象等其他类型的对象则不具有可信度。<br></div>\n\n<h2 id=\"局部变量泄漏到全局\"><a href=\"#局部变量泄漏到全局\" class=\"headerlink\" title=\"局部变量泄漏到全局\"></a>局部变量泄漏到全局</h2><p>有如下所示的代码，猜测一下输出结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<p>很多时候不经意间，某些变量就会泄漏为全局变量，比如这里的变量 b。上述代码等同于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>ES6 支持块级作用域，使用时需要遵循两个条件：一是添加 <code>&quot;use strict;&quot;</code> 字符串，声明严格模式；而是使用 <code>let</code> 和 <code>const</code> 声明变量。如果不能使用 ES6 的块级作用域，那么声明变量时要做到使用单独一行声明单个变量，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>使用立即执行函数的好处是模块化和块级作用域。目前 ES6 对这两个方面都有相应的支持，所以除非为了保持兼容性，ES6 会是更好的开发方式。</p>\n<p>在浏览器环境中，立即调用函数中的 <code>this</code> 指向全局变量 <code>window</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><ol>\n<li>使用 <code>&#39;use strict;&#39;</code> 声明严格模式</li>\n<li>全局变量必须显示声明</li>\n<li>禁止使用 with 语句，限制动态绑定</li>\n<li><code>eval()</code> 的作用域为独立作用域，独立于全局作用域和函数作用域之外，生成的变量只能用于 eval 内部</li>\n<li>禁止 <code>this</code> 关键字指向全局对象</li>\n<li>禁止使用 <code>delete</code> 删除变量，只有 <code>configurable === true</code> 的属性可以被删除</li>\n<li>对可读属性赋值、对禁止扩展的对象添加属性、删除不可删除属性都会报错</li>\n<li>禁止在对象中添加重名属性</li>\n<li>不允许对 arguments 赋值</li>\n<li>禁止使用 arguments.callee</li>\n<li>必须在顶层作用域声明函数</li>\n<li>新增保留字</li>\n</ol>\n<h2 id=\"浮点数的精度问题\"><a href=\"#浮点数的精度问题\" class=\"headerlink\" title=\"浮点数的精度问题\"></a>浮点数的精度问题</h2><p>对于使用 IEEE 754 存储双精度 64 位浮点数的语言都会遇到这个问题，且最简单的复现方式就是计算 <code>0.1 + 0.2</code>。这一表达式的值不等于 <code>0.3</code>，其原因就是 IEEE 754 不能正确表示 0.1。IEEE 754 规定的浮点数由一位符号位 <code>s</code>、五十二位小数位 <code>m</code> 和十一位指数位组成 <code>e</code>：</p>\n<p>$$s \\times m \\times 2^e$$</p>\n<p>JavaScript 规定 e 的范围为 <code>[-1074, 971]</code>，则 <code>Number.MAX_VALUE</code> 的值为：</p>\n<p>$$ 1 \\times ( 2^{53} - 1) \\times 2^{971} $$</p>\n<p>了解以上基础知识后求取 <code>0.1</code> 和 <code>0.2</code> 的二进制表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.0001100110011001100110011001100110011001100110011001101\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0.2</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.001100110011001100110011001100110011001100110011001101\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.0100110011001100110011001100110011001100110011001101\"</span></span><br></pre></td></tr></table></figure>\n<p>关于这一问题的详细解析和其他问题，建议参考文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5034201.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zichi/p/5034201.html</a></li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5043540.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zichi/p/5043540.html</a></li>\n</ul>\n<h2 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h2><p>JavaScript 是单线程语言，异步事件的优先级低于其他代码，<code>setTimeout(callback, 0)</code> 表示加入事件队列以异步的方式执行，且在事件队列中优先执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>); </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)&#125;, <span class=\"number\">1000</span>); </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)&#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-key\"><a href=\"#Object-key\" class=\"headerlink\" title=\"Object key\"></a>Object key</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=&#123;&#125;,</span><br><span class=\"line\">    b=&#123;key:<span class=\"string\">'b'</span>&#125;,</span><br><span class=\"line\">    c=&#123;key:<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a[b]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[c]=<span class=\"number\">456</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[b]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 456</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码有一个特点，就是没有使用字符串或 Symbol 作为对象的属性名，所以系统会将其转换为字符串，相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a[<span class=\"built_in\">Object</span>.prototype.toString.call(b)]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[<span class=\"built_in\">Object</span>.prototype.toString.call(c)]=<span class=\"number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equal to</span></span><br><span class=\"line\">a[<span class=\"string\">\"[object Object]\"</span>]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[<span class=\"string\">\"[object Object]\"</span>]=<span class=\"number\">456</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"eval-作用域\"><a href=\"#eval-作用域\" class=\"headerlink\" title=\"eval 作用域\"></a>eval 作用域</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;) &#123;</span><br><span class=\"line\">    y += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"1undefined\"</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，最奇怪的有点在于 <code>typeof f === &quot;undefined&quot;</code>。之所以有这样的结果，是因为 if 条件语句是使用 <code>eval()</code> 解析的。由于 <code>eval(function f(){})</code> 只会返回值而不会向全局作用域暴漏变量 <code>f</code>，所以执行 <code>typeof f</code> 时并没有找到函数 <code>f</code>，则值为 undefined。</p>\n<h2 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h2><p>在 JavaScript 中模拟私有方法的缺点就是内存占用高：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Employee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, company, salary</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">\"\"</span>;       </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.company = company || <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.salary = salary || <span class=\"number\">5000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private method</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSalary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = <span class=\"keyword\">this</span>.salary + <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public method</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispalyIncreasedSalary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        increaseSlary();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.salary);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> emp1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"John\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Merry\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp3 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Ren\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">2500</span>);</span><br></pre></td></tr></table></figure>\n<p>对于 <code>Employee</code> 的每一个实例 emp1 / emp2 / emp3，它们都拥有各自的一个 <code>increaseSalary</code> 方法，所以除非确有必要，尽量不要使用私有方法。</p>\n<h2 id=\"delete-操作符\"><a href=\"#delete-操作符\" class=\"headerlink\" title=\"delete 操作符\"></a>delete 操作符</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> output = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(output);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0</span></span><br></pre></td></tr></table></figure>\n<p><code>delete</code> 操作符用于删除对象的属性，对于其他变量无效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Employee = &#123;</span><br><span class=\"line\">  company: <span class=\"string\">'xyz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp1 = <span class=\"built_in\">Object</span>.create(Employee);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> emp1.company;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(emp1.company);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"xyz\"</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，emp1 通过原形链继承了 <code>Employee</code> 的属性 <code>company</code>，emp1 本身并没有 <code>company</code> 属性，即 <code>emp1.company === emp1.__proto__.company</code>，所以 <code>delete</code> 操作是无效的。</p>\n<h2 id=\"延迟定义\"><a href=\"#延迟定义\" class=\"headerlink\" title=\"延迟定义\"></a>延迟定义</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种声明方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Some code</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种声明方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Some code</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这两种声明方式的差异在于，<code>foo()</code> 在运行时定义，而 <code>bar()</code> 在解析时定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"comment\">// 执行 foo() 时，foo 的值为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hi I am inside Foo\"</span>);</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">bar();</span><br><span class=\"line\"><span class=\"comment\">// 执行 bar() 时，由于 bar() 已经被 JavaScript 引擎解析过了，所以不会报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hi I am inside Foo\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>根据这一特点，我们可以根据需要延迟定义某些功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(testCondition) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inside Foo with testCondition True value\"</span>);</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inside Foo with testCondition false value\"</span>);</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，布尔值 <code>testCondition</code> 决定了是定义何种功能的 <code>foo()</code> 函数，在定义之前，<code>foo</code> 只是一个原始值 <code>undefined</code>，并没有引用具体的函数。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://www.toptal.com/javascript/interview-questions\" target=\"_blank\" rel=\"external\">25 Essential JavaScript Interview Questions</a></li>\n<li><a href=\"https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers\" target=\"_blank\" rel=\"external\">21 Essential JavaScript Tech Interview Practive Questions answers</a></li>\n</ul>\n","excerpt":"<p>JavaScript 因其历史原因一直存在诸多缺陷，本文所讨论的只是其中的一小部分，适合为初学者答疑解惑，此外文中观点尚存在不足之处，或者对部分问题 ES6 已经提出了新的解决方案。</p>","more":"<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><p>使用 typeof 运算符判断一个原始值变量的类型是没有问题的，但如果判断的是引用值类型就会有局限性，比如 <code>null</code> 和数组的结果都是 <code>object</code>。要想判断变量属于哪种内置类型，最靠谱的方式是调用 <code>Object.prototype.toString</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"[object Array]\"</span></span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 规范（ECMA-262 19.1.3.6）中详细解释了 <code>Object.prototype.toString</code> 的解析过程：</p>\n<ol>\n<li>如果 <code>this</code> 的值为 <code>undefined</code>，则返回字符串 <code>&quot;[object Undefined]&quot;</code></li>\n<li>如果 <code>this</code> 的值为 <code>null</code>，则返回字符串 <code>&quot;[object Null]&quot;</code></li>\n<li>使用 <code>O</code> 表示 <code>ToObject(this)</code> 的值</li>\n<li>使用 <code>isArray</code> 表示 <code>IsArray(O)</code> 的值</li>\n<li>如果 <code>isArray</code> 不是正常值（比如抛出错误），则中断执行</li>\n<li>如果 <code>isArray === true</code>，则 <code>builtinTag = &quot;Array&quot;</code>，之后执行第 16 步</li>\n<li>如果 <code>O</code> 是一个 exotic 字符串对象，则 <code>builtinTag = &quot;String&quot;</code>，之后执行第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[ParameterMap]]</code>，则 <code>builtinTag = &quot;Arguments&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部方法 <code>[[Call]]</code>，则 <code>builtinTag = &quot;Function&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[ErrorData]]</code>，则 <code>builtinTag = &quot;Error&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[BooleanData]]</code>，则 <code>builtinTag = &quot;Boolean&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[NumberData]]</code>，则 <code>builtinTag = &quot;Number&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[DateValue]]</code>，则 <code>builtinTag = &quot;Date&quot;</code>，跳到第 16 步</li>\n<li>如果 <code>O</code> 拥有内部属性 <code>[[RegExpMather]]</code>，则 <code>builtinTag = &quot;RegExp&quot;</code>，跳到第 16 步</li>\n<li>如果第 6 ~ 14 步都不符合，则 <code>builtinTag = &quot;Object&quot;</code>，跳到第 16 步</li>\n<li>使用 <code>tag</code> 表示 <code>Get (O, @@toStringTag)</code> 的值</li>\n<li>如果 <code>tag</code> 不是正常值，则中断执行</li>\n<li>如果 <code>Type(tag)</code> 不是一个字符串，则 <code>tag = builtinTag</code></li>\n<li>返回一个 <code>&quot;[object&quot; + tag + &quot;]&quot;</code> 形式的字符串</li>\n</ol>\n<div class=\"tip\"><br>开发者喜欢使用该方法获取内部属性 <code>[[Class]]</code> 的字符串值，用于检测内建对象的类型。值得注意的是，这一方法只对内建对象有效，对宿主对象等其他类型的对象则不具有可信度。<br></div>\n\n<h2 id=\"局部变量泄漏到全局\"><a href=\"#局部变量泄漏到全局\" class=\"headerlink\" title=\"局部变量泄漏到全局\"></a>局部变量泄漏到全局</h2><p>有如下所示的代码，猜测一下输出结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<p>很多时候不经意间，某些变量就会泄漏为全局变量，比如这里的变量 b。上述代码等同于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>ES6 支持块级作用域，使用时需要遵循两个条件：一是添加 <code>&quot;use strict;&quot;</code> 字符串，声明严格模式；而是使用 <code>let</code> 和 <code>const</code> 声明变量。如果不能使用 ES6 的块级作用域，那么声明变量时要做到使用单独一行声明单个变量，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>使用立即执行函数的好处是模块化和块级作用域。目前 ES6 对这两个方面都有相应的支持，所以除非为了保持兼容性，ES6 会是更好的开发方式。</p>\n<p>在浏览器环境中，立即调用函数中的 <code>this</code> 指向全局变量 <code>window</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><ol>\n<li>使用 <code>&#39;use strict;&#39;</code> 声明严格模式</li>\n<li>全局变量必须显示声明</li>\n<li>禁止使用 with 语句，限制动态绑定</li>\n<li><code>eval()</code> 的作用域为独立作用域，独立于全局作用域和函数作用域之外，生成的变量只能用于 eval 内部</li>\n<li>禁止 <code>this</code> 关键字指向全局对象</li>\n<li>禁止使用 <code>delete</code> 删除变量，只有 <code>configurable === true</code> 的属性可以被删除</li>\n<li>对可读属性赋值、对禁止扩展的对象添加属性、删除不可删除属性都会报错</li>\n<li>禁止在对象中添加重名属性</li>\n<li>不允许对 arguments 赋值</li>\n<li>禁止使用 arguments.callee</li>\n<li>必须在顶层作用域声明函数</li>\n<li>新增保留字</li>\n</ol>\n<h2 id=\"浮点数的精度问题\"><a href=\"#浮点数的精度问题\" class=\"headerlink\" title=\"浮点数的精度问题\"></a>浮点数的精度问题</h2><p>对于使用 IEEE 754 存储双精度 64 位浮点数的语言都会遇到这个问题，且最简单的复现方式就是计算 <code>0.1 + 0.2</code>。这一表达式的值不等于 <code>0.3</code>，其原因就是 IEEE 754 不能正确表示 0.1。IEEE 754 规定的浮点数由一位符号位 <code>s</code>、五十二位小数位 <code>m</code> 和十一位指数位组成 <code>e</code>：</p>\n<p>$$s \\times m \\times 2^e$$</p>\n<p>JavaScript 规定 e 的范围为 <code>[-1074, 971]</code>，则 <code>Number.MAX_VALUE</code> 的值为：</p>\n<p>$$ 1 \\times ( 2^{53} - 1) \\times 2^{971} $$</p>\n<p>了解以上基础知识后求取 <code>0.1</code> 和 <code>0.2</code> 的二进制表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.0001100110011001100110011001100110011001100110011001101\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0.2</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.001100110011001100110011001100110011001100110011001101\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).toString(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"0.0100110011001100110011001100110011001100110011001101\"</span></span><br></pre></td></tr></table></figure>\n<p>关于这一问题的详细解析和其他问题，建议参考文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5034201.html\">http://www.cnblogs.com/zichi/p/5034201.html</a></li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5043540.html\">http://www.cnblogs.com/zichi/p/5043540.html</a></li>\n</ul>\n<h2 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h2><p>JavaScript 是单线程语言，异步事件的优先级低于其他代码，<code>setTimeout(callback, 0)</code> 表示加入事件队列以异步的方式执行，且在事件队列中优先执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>); </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)&#125;, <span class=\"number\">1000</span>); </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)&#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-key\"><a href=\"#Object-key\" class=\"headerlink\" title=\"Object key\"></a>Object key</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=&#123;&#125;,</span><br><span class=\"line\">    b=&#123;key:<span class=\"string\">'b'</span>&#125;,</span><br><span class=\"line\">    c=&#123;key:<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a[b]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[c]=<span class=\"number\">456</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[b]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 456</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码有一个特点，就是没有使用字符串或 Symbol 作为对象的属性名，所以系统会将其转换为字符串，相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a[<span class=\"built_in\">Object</span>.prototype.toString.call(b)]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[<span class=\"built_in\">Object</span>.prototype.toString.call(c)]=<span class=\"number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equal to</span></span><br><span class=\"line\">a[<span class=\"string\">\"[object Object]\"</span>]=<span class=\"number\">123</span>;</span><br><span class=\"line\">a[<span class=\"string\">\"[object Object]\"</span>]=<span class=\"number\">456</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"eval-作用域\"><a href=\"#eval-作用域\" class=\"headerlink\" title=\"eval 作用域\"></a>eval 作用域</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;) &#123;</span><br><span class=\"line\">    y += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"1undefined\"</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，最奇怪的有点在于 <code>typeof f === &quot;undefined&quot;</code>。之所以有这样的结果，是因为 if 条件语句是使用 <code>eval()</code> 解析的。由于 <code>eval(function f(){})</code> 只会返回值而不会向全局作用域暴漏变量 <code>f</code>，所以执行 <code>typeof f</code> 时并没有找到函数 <code>f</code>，则值为 undefined。</p>\n<h2 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h2><p>在 JavaScript 中模拟私有方法的缺点就是内存占用高：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Employee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, company, salary</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">\"\"</span>;       </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.company = company || <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.salary = salary || <span class=\"number\">5000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private method</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSalary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = <span class=\"keyword\">this</span>.salary + <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public method</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispalyIncreasedSalary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        increaseSlary();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.salary);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> emp1 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"John\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp2 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Merry\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp3 = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Ren\"</span>,<span class=\"string\">\"Pluto\"</span>,<span class=\"number\">2500</span>);</span><br></pre></td></tr></table></figure>\n<p>对于 <code>Employee</code> 的每一个实例 emp1 / emp2 / emp3，它们都拥有各自的一个 <code>increaseSalary</code> 方法，所以除非确有必要，尽量不要使用私有方法。</p>\n<h2 id=\"delete-操作符\"><a href=\"#delete-操作符\" class=\"headerlink\" title=\"delete 操作符\"></a>delete 操作符</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> output = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(output);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 0</span></span><br></pre></td></tr></table></figure>\n<p><code>delete</code> 操作符用于删除对象的属性，对于其他变量无效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Employee = &#123;</span><br><span class=\"line\">  company: <span class=\"string\">'xyz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emp1 = <span class=\"built_in\">Object</span>.create(Employee);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> emp1.company;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(emp1.company);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"xyz\"</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，emp1 通过原形链继承了 <code>Employee</code> 的属性 <code>company</code>，emp1 本身并没有 <code>company</code> 属性，即 <code>emp1.company === emp1.__proto__.company</code>，所以 <code>delete</code> 操作是无效的。</p>\n<h2 id=\"延迟定义\"><a href=\"#延迟定义\" class=\"headerlink\" title=\"延迟定义\"></a>延迟定义</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种声明方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Some code</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种声明方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Some code</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这两种声明方式的差异在于，<code>foo()</code> 在运行时定义，而 <code>bar()</code> 在解析时定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"comment\">// 执行 foo() 时，foo 的值为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hi I am inside Foo\"</span>);</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">bar();</span><br><span class=\"line\"><span class=\"comment\">// 执行 bar() 时，由于 bar() 已经被 JavaScript 引擎解析过了，所以不会报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hi I am inside Foo\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>根据这一特点，我们可以根据需要延迟定义某些功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(testCondition) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inside Foo with testCondition True value\"</span>);</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inside Foo with testCondition false value\"</span>);</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，布尔值 <code>testCondition</code> 决定了是定义何种功能的 <code>foo()</code> 函数，在定义之前，<code>foo</code> 只是一个原始值 <code>undefined</code>，并没有引用具体的函数。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://www.toptal.com/javascript/interview-questions\">25 Essential JavaScript Interview Questions</a></li>\n<li><a href=\"https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers\">21 Essential JavaScript Tech Interview Practive Questions answers</a></li>\n</ul>"},{"title":"Lazy Loading Images on the Web","date":"2016-02-17T04:00:04.000Z","desc":"introduction of three methods to lazy loading images on the web","_content":"\n> Summarized from [《Lazy Loading Images on the Web》](http://developer.telerik.com/featured/lazy-loading-images-on-the-web/).\n\nLazy loading images on the web means only download images which are in or near the viewport, and don't load any other images that visitors will not likely see. To accomplish this effect, we just need a little bit of JavaScript.\n\nAt its most basic implementation always need to do:\n\n- Build HTML with special data attribute\n- Watch changes to the viewport or scrolling\n- Swap the data attribute to src attribute\n\n<!-- more -->\n\n## Plain JavaScript\n\nThe first step is creating HTML element with data attribute:\n\n```html\n<img data-src=\"path/to/source\" alt=\"\">\n```\n\nSecond, using `getBoundingClientRect()` to test whether an image is within the viewport:\n\n```js\nfunction isElementInViewport (el) {\n    var rect = el.getBoundingClientRect();\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n}\n```\n\nLast, geting all of images that we want to lazy load and swap the `data-src` value to `src` value:\n\n```js\n//these handlers will be removed once the images have loaded\nwindow.addEventListener(\"DOMContentLoaded\", lazyLoadImages);\nwindow.addEventListener(\"load\", lazyLoadImages);\nwindow.addEventListener(\"resize\", lazyLoadImages);\nwindow.addEventListener(\"scroll\", lazyLoadImages);\n\nfunction lazyLoadImages() {\n    var images = document.querySelectorAll(\"#main-wrapper img[data-src]\"),\n        item;\n\n    // load images that have entered the viewport\n    [].forEach.call(images, function (item) {\n        if (isElementInViewport(item)) {\n            item.setAttribute(\"src\",item.getAttribute(\"data-src\"));\n            item.removeAttribute(\"data-src\")\n        }\n    })\n\n    // if all the images are loaded, stop calling the handler\n    if (images.length == 0) {\n        window.removeEventListener(\"DOMContentLoaded\", lazyLoadImages);\n        window.removeEventListener(\"load\", lazyLoadImages);\n        window.removeEventListener(\"resize\", lazyLoadImages);\n        window.removeEventListener(\"scroll\", lazyLoadImages);\n    }\n}\n```\n\n## Plugin && Library\n\nThe following is some jquery plugins or libraries that can do similarly works:\n\n- [https://github.com/tuupola/jquery_lazyload](https://github.com/tuupola/jquery_lazyload)\n- [http://dinbror.dk/blazy/](http://dinbror.dk/blazy/)\n- [http://luis-almeida.github.io/unveil/](http://luis-almeida.github.io/unveil/)\n- [https://github.com/ressio/lazy-load-xt](https://github.com/ressio/lazy-load-xt)\n\n## Responsive images service\n\nWhy we need this? Using this service to get responsive images. For example, we can upload a huge image in backend and download appropriate image based on the device's screen size and pixel density to compresse response size.\n\n> Before generating different dimensions images, it's better to use image compression tool to reduce file size, such like [https://tinypng.com/](https://tinypng.com/). \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Lazy-loading-images-on-the-web.md","raw":"title: Lazy loading images on the web\ndate: 2016-02-17 12:00:04\ndesc: introduction of three methods to lazy loading images on the web\n---\n\n> Summarized from [《Lazy Loading Images on the Web》](http://developer.telerik.com/featured/lazy-loading-images-on-the-web/).\n\nLazy loading images on the web means only download images which are in or near the viewport, and don't load any other images that visitors will not likely see. To accomplish this effect, we just need a little bit of JavaScript.\n\nAt its most basic implementation always need to do:\n\n- Build HTML with special data attribute\n- Watch changes to the viewport or scrolling\n- Swap the data attribute to src attribute\n\n<!-- more -->\n\n## Plain JavaScript\n\nThe first step is creating HTML element with data attribute:\n\n```html\n<img data-src=\"path/to/source\" alt=\"\">\n```\n\nSecond, using `getBoundingClientRect()` to test whether an image is within the viewport:\n\n```js\nfunction isElementInViewport (el) {\n    var rect = el.getBoundingClientRect();\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n}\n```\n\nLast, geting all of images that we want to lazy load and swap the `data-src` value to `src` value:\n\n```js\n//these handlers will be removed once the images have loaded\nwindow.addEventListener(\"DOMContentLoaded\", lazyLoadImages);\nwindow.addEventListener(\"load\", lazyLoadImages);\nwindow.addEventListener(\"resize\", lazyLoadImages);\nwindow.addEventListener(\"scroll\", lazyLoadImages);\n\nfunction lazyLoadImages() {\n    var images = document.querySelectorAll(\"#main-wrapper img[data-src]\"),\n        item;\n\n    // load images that have entered the viewport\n    [].forEach.call(images, function (item) {\n        if (isElementInViewport(item)) {\n            item.setAttribute(\"src\",item.getAttribute(\"data-src\"));\n            item.removeAttribute(\"data-src\")\n        }\n    })\n\n    // if all the images are loaded, stop calling the handler\n    if (images.length == 0) {\n        window.removeEventListener(\"DOMContentLoaded\", lazyLoadImages);\n        window.removeEventListener(\"load\", lazyLoadImages);\n        window.removeEventListener(\"resize\", lazyLoadImages);\n        window.removeEventListener(\"scroll\", lazyLoadImages);\n    }\n}\n```\n\n## Plugin && Library\n\nThe following is some jquery plugins or libraries that can do similarly works:\n\n- [https://github.com/tuupola/jquery_lazyload](https://github.com/tuupola/jquery_lazyload)\n- [http://dinbror.dk/blazy/](http://dinbror.dk/blazy/)\n- [http://luis-almeida.github.io/unveil/](http://luis-almeida.github.io/unveil/)\n- [https://github.com/ressio/lazy-load-xt](https://github.com/ressio/lazy-load-xt)\n\n## Responsive images service\n\nWhy we need this? Using this service to get responsive images. For example, we can upload a huge image in backend and download appropriate image based on the device's screen size and pixel density to compresse response size.\n\n> Before generating different dimensions images, it's better to use image compression tool to reduce file size, such like [https://tinypng.com/](https://tinypng.com/). \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Lazy-loading-images-on-the-web","published":1,"updated":"2016-02-24T05:31:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaroc0008fsdifqoelhz5","content":"<blockquote>\n<p>Summarized from <a href=\"http://developer.telerik.com/featured/lazy-loading-images-on-the-web/\" target=\"_blank\" rel=\"external\">《Lazy Loading Images on the Web》</a>.</p>\n</blockquote>\n<p>Lazy loading images on the web means only download images which are in or near the viewport, and don’t load any other images that visitors will not likely see. To accomplish this effect, we just need a little bit of JavaScript.</p>\n<p>At its most basic implementation always need to do:</p>\n<ul>\n<li>Build HTML with special data attribute</li>\n<li>Watch changes to the viewport or scrolling</li>\n<li>Swap the data attribute to src attribute</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Plain-JavaScript\"><a href=\"#Plain-JavaScript\" class=\"headerlink\" title=\"Plain JavaScript\"></a>Plain JavaScript</h2><p>The first step is creating HTML element with data attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"path/to/source\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Second, using <code>getBoundingClientRect()</code> to test whether an image is within the viewport:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElementInViewport</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = el.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        rect.top &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        rect.left &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        rect.bottom &lt;= (<span class=\"built_in\">window</span>.innerHeight || <span class=\"built_in\">document</span>.documentElement.clientHeight) &amp;&amp;</span><br><span class=\"line\">        rect.right &lt;= (<span class=\"built_in\">window</span>.innerWidth || <span class=\"built_in\">document</span>.documentElement.clientWidth)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Last, geting all of images that we want to lazy load and swap the <code>data-src</code> value to <code>src</code> value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//these handlers will be removed once the images have loaded</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"resize\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, lazyLoadImages);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyLoadImages</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#main-wrapper img[data-src]\"</span>),</span><br><span class=\"line\">        item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// load images that have entered the viewport</span></span><br><span class=\"line\">    [].forEach.call(images, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isElementInViewport(item)) &#123;</span><br><span class=\"line\">            item.setAttribute(<span class=\"string\">\"src\"</span>,item.getAttribute(<span class=\"string\">\"data-src\"</span>));</span><br><span class=\"line\">            item.removeAttribute(<span class=\"string\">\"data-src\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if all the images are loaded, stop calling the handler</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (images.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"load\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"resize\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"scroll\"</span>, lazyLoadImages);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Plugin-amp-amp-Library\"><a href=\"#Plugin-amp-amp-Library\" class=\"headerlink\" title=\"Plugin &amp;&amp; Library\"></a>Plugin &amp;&amp; Library</h2><p>The following is some jquery plugins or libraries that can do similarly works:</p>\n<ul>\n<li><a href=\"https://github.com/tuupola/jquery_lazyload\" target=\"_blank\" rel=\"external\">https://github.com/tuupola/jquery_lazyload</a></li>\n<li><a href=\"http://dinbror.dk/blazy/\" target=\"_blank\" rel=\"external\">http://dinbror.dk/blazy/</a></li>\n<li><a href=\"http://luis-almeida.github.io/unveil/\" target=\"_blank\" rel=\"external\">http://luis-almeida.github.io/unveil/</a></li>\n<li><a href=\"https://github.com/ressio/lazy-load-xt\" target=\"_blank\" rel=\"external\">https://github.com/ressio/lazy-load-xt</a></li>\n</ul>\n<h2 id=\"Responsive-images-service\"><a href=\"#Responsive-images-service\" class=\"headerlink\" title=\"Responsive images service\"></a>Responsive images service</h2><p>Why we need this? Using this service to get responsive images. For example, we can upload a huge image in backend and download appropriate image based on the device’s screen size and pixel density to compresse response size.</p>\n<blockquote>\n<p>Before generating different dimensions images, it’s better to use image compression tool to reduce file size, such like <a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"external\">https://tinypng.com/</a>. </p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>Summarized from <a href=\"http://developer.telerik.com/featured/lazy-loading-images-on-the-web/\">《Lazy Loading Images on the Web》</a>.</p>\n</blockquote>\n<p>Lazy loading images on the web means only download images which are in or near the viewport, and don’t load any other images that visitors will not likely see. To accomplish this effect, we just need a little bit of JavaScript.</p>\n<p>At its most basic implementation always need to do:</p>\n<ul>\n<li>Build HTML with special data attribute</li>\n<li>Watch changes to the viewport or scrolling</li>\n<li>Swap the data attribute to src attribute</li>\n</ul>","more":"<h2 id=\"Plain-JavaScript\"><a href=\"#Plain-JavaScript\" class=\"headerlink\" title=\"Plain JavaScript\"></a>Plain JavaScript</h2><p>The first step is creating HTML element with data attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"path/to/source\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Second, using <code>getBoundingClientRect()</code> to test whether an image is within the viewport:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElementInViewport</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = el.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        rect.top &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        rect.left &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        rect.bottom &lt;= (<span class=\"built_in\">window</span>.innerHeight || <span class=\"built_in\">document</span>.documentElement.clientHeight) &amp;&amp;</span><br><span class=\"line\">        rect.right &lt;= (<span class=\"built_in\">window</span>.innerWidth || <span class=\"built_in\">document</span>.documentElement.clientWidth)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Last, geting all of images that we want to lazy load and swap the <code>data-src</code> value to <code>src</code> value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//these handlers will be removed once the images have loaded</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"resize\"</span>, lazyLoadImages);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, lazyLoadImages);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyLoadImages</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#main-wrapper img[data-src]\"</span>),</span><br><span class=\"line\">        item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// load images that have entered the viewport</span></span><br><span class=\"line\">    [].forEach.call(images, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isElementInViewport(item)) &#123;</span><br><span class=\"line\">            item.setAttribute(<span class=\"string\">\"src\"</span>,item.getAttribute(<span class=\"string\">\"data-src\"</span>));</span><br><span class=\"line\">            item.removeAttribute(<span class=\"string\">\"data-src\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if all the images are loaded, stop calling the handler</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (images.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"load\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"resize\"</span>, lazyLoadImages);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"scroll\"</span>, lazyLoadImages);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Plugin-amp-amp-Library\"><a href=\"#Plugin-amp-amp-Library\" class=\"headerlink\" title=\"Plugin &amp;&amp; Library\"></a>Plugin &amp;&amp; Library</h2><p>The following is some jquery plugins or libraries that can do similarly works:</p>\n<ul>\n<li><a href=\"https://github.com/tuupola/jquery_lazyload\">https://github.com/tuupola/jquery_lazyload</a></li>\n<li><a href=\"http://dinbror.dk/blazy/\">http://dinbror.dk/blazy/</a></li>\n<li><a href=\"http://luis-almeida.github.io/unveil/\">http://luis-almeida.github.io/unveil/</a></li>\n<li><a href=\"https://github.com/ressio/lazy-load-xt\">https://github.com/ressio/lazy-load-xt</a></li>\n</ul>\n<h2 id=\"Responsive-images-service\"><a href=\"#Responsive-images-service\" class=\"headerlink\" title=\"Responsive images service\"></a>Responsive images service</h2><p>Why we need this? Using this service to get responsive images. For example, we can upload a huge image in backend and download appropriate image based on the device’s screen size and pixel density to compresse response size.</p>\n<blockquote>\n<p>Before generating different dimensions images, it’s better to use image compression tool to reduce file size, such like <a href=\"https://tinypng.com/\">https://tinypng.com/</a>. </p>\n</blockquote>"},{"title":"Pug","date":"2015-12-03T05:24:27.000Z","_content":"\n<div class=\"tip\">\n    由于商标版权问题，Jade 已经改名为了 Pug，详见 [issue](https://github.com/pugjs/jade/issues/2184)。\n</div>\n\n如果你熟悉 Sublime Text 和 Emmet 的组合，那么 Pug 也会是你的菜。Pug 类似于 Python，都采用了对缩进敏感的语法形式，比如下面这段代码创建了一个无序列表：\n\n```javascript\nul(class=\"inline\")\n    li  Item C\n    li  Item A\n    li  Item B\n```\n\n<!-- more -->\n\n## 属性\n\nPug 的另一大特点就是和 JavaScript 的融合度很高，比如设置属性：\n\n```javascript\n- var authenticated = true\nbody(class= authenticated ? 'authed' : 'anon')\n- var currentUrl = '/about'\na(class={active: currentUrl === '/'} href='/') Home\na(class={active: currentUrl === '/about'} href='/about') About\n```\n\n此外，给标签设置行内样式时，需要以对象的形式赋值给 style：\n\n```javascript\na(style={color: 'red', background: 'green'})\n```\n\n## 插值\n\nPug 提供了字符串插值和标签插值。其中，字符串插值由于要考虑到安全性问题，所以又分成了转义和不转义两种情况：\n\n```javascript\n// 转义插值 #{}\n- var theGreat = \"<span>escape!</span>\";\np This will be safe: #{theGreat}\n\n// 不转义插值 !{}\n- var theGreat = \"<span>escape!</span>\";\np This will be safe: !{theGreat}\n\n// 标签插值\np #[a(href=\"Pug-lang.com\") Pug]\n```\n\n编译结果：\n\n```html\n<!-- 转义插值 #{}-->\n<p>This will be safe: &lt;span&gt;escape!&lt;/span&gt;</p>\n\n<!-- 不转义插值 !{}-->\n<p>This will be safe: <span>escape!</span></p>\n\n<!-- 标签插值-->\n<p><a href=\"Pug-lang.com\">Pug</a></p>\n```\n\n## 逻辑语句\n\nPug 提供了条件、分支、循环、遍历四种逻辑语句，这四种语句继承自 JavaScript，只是语法上有些差异:\n\n- 条件语句：if ... else if ... else\n- 分支语句：case ... when ... default\n- 循环语句：while\n- 遍历数组：each $elem in [elem...]\n- 遍历对象：each $key, $value in {key: value}\n\n```javascript\n// 分支语句\n- var friends = 10\ncase friends\n    when 0\n        p you have no friends\n    when 1\n        p you have a friend\n    default\n        p you have #{friends} friends\n```\n\n## mixin\n\nPug 和 Sass 都提供了 mixin 语法来实现代码的复用，两者语法也很相似：\n\n```javascript\nmixin list(id, ...items)\n    ul(id=id)\n        each item in items\n            li= item\n\n+list('my-list', 1, 2, 3, 4)\n```\n\nmixin 一般放在独立的文件中，需要使用 `include` 指令导入到其他文件中。\n\n## extends\n\n`extends` 是 Pug 的模板继承语法，通过 `extends filename.Pug` 可以将模板文件导入到其他文件中。继承机制基本上是一个复制代码片段的过程，为了能够动态修改其中的部分内容，Pug 提供了 `block` 语法：\n\n```javascript\n// 声明 block\nblock content\n    p Hello\n\n// 修改 block\n// 同名重新赋值\nblock content\n    p Hi\n\n// 前置追加\nblock append content\n    p APPEND\n\n// 后置追加\nblock prepend content\n    p PREPEND\n```\n","source":"_posts/Pug.md","raw":"title: Pug\ndate: 2015-12-03 13:24:27\n---\n\n<div class=\"tip\">\n    由于商标版权问题，Jade 已经改名为了 Pug，详见 [issue](https://github.com/pugjs/jade/issues/2184)。\n</div>\n\n如果你熟悉 Sublime Text 和 Emmet 的组合，那么 Pug 也会是你的菜。Pug 类似于 Python，都采用了对缩进敏感的语法形式，比如下面这段代码创建了一个无序列表：\n\n```javascript\nul(class=\"inline\")\n    li  Item C\n    li  Item A\n    li  Item B\n```\n\n<!-- more -->\n\n## 属性\n\nPug 的另一大特点就是和 JavaScript 的融合度很高，比如设置属性：\n\n```javascript\n- var authenticated = true\nbody(class= authenticated ? 'authed' : 'anon')\n- var currentUrl = '/about'\na(class={active: currentUrl === '/'} href='/') Home\na(class={active: currentUrl === '/about'} href='/about') About\n```\n\n此外，给标签设置行内样式时，需要以对象的形式赋值给 style：\n\n```javascript\na(style={color: 'red', background: 'green'})\n```\n\n## 插值\n\nPug 提供了字符串插值和标签插值。其中，字符串插值由于要考虑到安全性问题，所以又分成了转义和不转义两种情况：\n\n```javascript\n// 转义插值 #{}\n- var theGreat = \"<span>escape!</span>\";\np This will be safe: #{theGreat}\n\n// 不转义插值 !{}\n- var theGreat = \"<span>escape!</span>\";\np This will be safe: !{theGreat}\n\n// 标签插值\np #[a(href=\"Pug-lang.com\") Pug]\n```\n\n编译结果：\n\n```html\n<!-- 转义插值 #{}-->\n<p>This will be safe: &lt;span&gt;escape!&lt;/span&gt;</p>\n\n<!-- 不转义插值 !{}-->\n<p>This will be safe: <span>escape!</span></p>\n\n<!-- 标签插值-->\n<p><a href=\"Pug-lang.com\">Pug</a></p>\n```\n\n## 逻辑语句\n\nPug 提供了条件、分支、循环、遍历四种逻辑语句，这四种语句继承自 JavaScript，只是语法上有些差异:\n\n- 条件语句：if ... else if ... else\n- 分支语句：case ... when ... default\n- 循环语句：while\n- 遍历数组：each $elem in [elem...]\n- 遍历对象：each $key, $value in {key: value}\n\n```javascript\n// 分支语句\n- var friends = 10\ncase friends\n    when 0\n        p you have no friends\n    when 1\n        p you have a friend\n    default\n        p you have #{friends} friends\n```\n\n## mixin\n\nPug 和 Sass 都提供了 mixin 语法来实现代码的复用，两者语法也很相似：\n\n```javascript\nmixin list(id, ...items)\n    ul(id=id)\n        each item in items\n            li= item\n\n+list('my-list', 1, 2, 3, 4)\n```\n\nmixin 一般放在独立的文件中，需要使用 `include` 指令导入到其他文件中。\n\n## extends\n\n`extends` 是 Pug 的模板继承语法，通过 `extends filename.Pug` 可以将模板文件导入到其他文件中。继承机制基本上是一个复制代码片段的过程，为了能够动态修改其中的部分内容，Pug 提供了 `block` 语法：\n\n```javascript\n// 声明 block\nblock content\n    p Hello\n\n// 修改 block\n// 同名重新赋值\nblock content\n    p Hi\n\n// 前置追加\nblock append content\n    p APPEND\n\n// 后置追加\nblock prepend content\n    p PREPEND\n```\n","slug":"Pug","published":1,"updated":"2016-03-27T07:36:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarog0009fsdilx9bbfom","content":"<div class=\"tip\"><br>    由于商标版权问题，Jade 已经改名为了 Pug，详见 <a href=\"https://github.com/pugjs/jade/issues/2184\" target=\"_blank\" rel=\"external\">issue</a>。<br></div>\n\n<p>如果你熟悉 Sublime Text 和 Emmet 的组合，那么 Pug 也会是你的菜。Pug 类似于 Python，都采用了对缩进敏感的语法形式，比如下面这段代码创建了一个无序列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">ul(<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"inline\"</span>)</span><br><span class=\"line\">    li  Item C</span><br><span class=\"line\">    li  Item A</span><br><span class=\"line\">    li  Item B</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>Pug 的另一大特点就是和 JavaScript 的融合度很高，比如设置属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">var</span> authenticated = <span class=\"literal\">true</span></span><br><span class=\"line\">body(<span class=\"class\"><span class=\"keyword\">class</span></span>= authenticated ? <span class=\"string\">'authed'</span> : <span class=\"string\">'anon'</span>)</span><br><span class=\"line\">- <span class=\"keyword\">var</span> currentUrl = <span class=\"string\">'/about'</span></span><br><span class=\"line\">a(<span class=\"class\"><span class=\"keyword\">class</span></span>=&#123;active: currentUrl === <span class=\"string\">'/'</span>&#125; href=<span class=\"string\">'/'</span>) Home</span><br><span class=\"line\">a(<span class=\"class\"><span class=\"keyword\">class</span></span>=&#123;active: currentUrl === <span class=\"string\">'/about'</span>&#125; href=<span class=\"string\">'/about'</span>) About</span><br></pre></td></tr></table></figure>\n<p>此外，给标签设置行内样式时，需要以对象的形式赋值给 style：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">a(style=&#123;color: <span class=\"string\">'red'</span>, background: <span class=\"string\">'green'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><p>Pug 提供了字符串插值和标签插值。其中，字符串插值由于要考虑到安全性问题，所以又分成了转义和不转义两种情况：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 转义插值 #&#123;&#125;</span><br><span class=\"line\">- var theGreat = \"&lt;span&gt;escape!&lt;/span&gt;\";</span><br><span class=\"line\">p This will be safe: #&#123;theGreat&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 不转义插值 !&#123;&#125;</span><br><span class=\"line\">- var theGreat = \"&lt;span&gt;escape!&lt;/span&gt;\";</span><br><span class=\"line\">p This will be safe: !&#123;theGreat&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 标签插值</span><br><span class=\"line\">p #[a(href=\"Pug-lang.com\") Pug]</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 转义插值 #&#123;&#125;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This will be safe: &amp;lt;span&amp;gt;escape!&amp;lt;/span&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不转义插值 !&#123;&#125;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This will be safe: <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>escape!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签插值--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Pug-lang.com\"</span>&gt;</span>Pug<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑语句\"><a href=\"#逻辑语句\" class=\"headerlink\" title=\"逻辑语句\"></a>逻辑语句</h2><p>Pug 提供了条件、分支、循环、遍历四种逻辑语句，这四种语句继承自 JavaScript，只是语法上有些差异:</p>\n<ul>\n<li>条件语句：if … else if … else</li>\n<li>分支语句：case … when … default</li>\n<li>循环语句：while</li>\n<li>遍历数组：each $elem in [elem…]</li>\n<li>遍历对象：each $key, $value in {key: value}</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 分支语句</span><br><span class=\"line\">- var friends = 10</span><br><span class=\"line\">case friends</span><br><span class=\"line\">    when 0</span><br><span class=\"line\">        p you have no friends</span><br><span class=\"line\">    when 1</span><br><span class=\"line\">        p you have a friend</span><br><span class=\"line\">    default</span><br><span class=\"line\">        p you have #&#123;friends&#125; friends</span><br></pre></td></tr></table></figure>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>Pug 和 Sass 都提供了 mixin 语法来实现代码的复用，两者语法也很相似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mixin list(id, ...items)</span><br><span class=\"line\">    ul(id=id)</span><br><span class=\"line\">        each item <span class=\"keyword\">in</span> items</span><br><span class=\"line\">            li= item</span><br><span class=\"line\"></span><br><span class=\"line\">+list(<span class=\"string\">'my-list'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>mixin 一般放在独立的文件中，需要使用 <code>include</code> 指令导入到其他文件中。</p>\n<h2 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h2><p><code>extends</code> 是 Pug 的模板继承语法，通过 <code>extends filename.Pug</code> 可以将模板文件导入到其他文件中。继承机制基本上是一个复制代码片段的过程，为了能够动态修改其中的部分内容，Pug 提供了 <code>block</code> 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明 block</span></span><br><span class=\"line\">block content</span><br><span class=\"line\">    p Hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改 block</span></span><br><span class=\"line\"><span class=\"comment\">// 同名重新赋值</span></span><br><span class=\"line\">block content</span><br><span class=\"line\">    p Hi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前置追加</span></span><br><span class=\"line\">block append content</span><br><span class=\"line\">    p APPEND</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后置追加</span></span><br><span class=\"line\">block prepend content</span><br><span class=\"line\">    p PREPEND</span><br></pre></td></tr></table></figure>\n","excerpt":"<div class=\"tip\"><br>    由于商标版权问题，Jade 已经改名为了 Pug，详见 <a href=\"https://github.com/pugjs/jade/issues/2184\">issue</a>。<br></div>\n\n<p>如果你熟悉 Sublime Text 和 Emmet 的组合，那么 Pug 也会是你的菜。Pug 类似于 Python，都采用了对缩进敏感的语法形式，比如下面这段代码创建了一个无序列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">ul(<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"inline\"</span>)</span><br><span class=\"line\">    li  Item C</span><br><span class=\"line\">    li  Item A</span><br><span class=\"line\">    li  Item B</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>Pug 的另一大特点就是和 JavaScript 的融合度很高，比如设置属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">var</span> authenticated = <span class=\"literal\">true</span></span><br><span class=\"line\">body(<span class=\"class\"><span class=\"keyword\">class</span></span>= authenticated ? <span class=\"string\">'authed'</span> : <span class=\"string\">'anon'</span>)</span><br><span class=\"line\">- <span class=\"keyword\">var</span> currentUrl = <span class=\"string\">'/about'</span></span><br><span class=\"line\">a(<span class=\"class\"><span class=\"keyword\">class</span></span>=&#123;active: currentUrl === <span class=\"string\">'/'</span>&#125; href=<span class=\"string\">'/'</span>) Home</span><br><span class=\"line\">a(<span class=\"class\"><span class=\"keyword\">class</span></span>=&#123;active: currentUrl === <span class=\"string\">'/about'</span>&#125; href=<span class=\"string\">'/about'</span>) About</span><br></pre></td></tr></table></figure>\n<p>此外，给标签设置行内样式时，需要以对象的形式赋值给 style：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">a(style=&#123;color: <span class=\"string\">'red'</span>, background: <span class=\"string\">'green'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><p>Pug 提供了字符串插值和标签插值。其中，字符串插值由于要考虑到安全性问题，所以又分成了转义和不转义两种情况：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 转义插值 #&#123;&#125;</span><br><span class=\"line\">- var theGreat = \"&lt;span&gt;escape!&lt;/span&gt;\";</span><br><span class=\"line\">p This will be safe: #&#123;theGreat&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 不转义插值 !&#123;&#125;</span><br><span class=\"line\">- var theGreat = \"&lt;span&gt;escape!&lt;/span&gt;\";</span><br><span class=\"line\">p This will be safe: !&#123;theGreat&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 标签插值</span><br><span class=\"line\">p #[a(href=\"Pug-lang.com\") Pug]</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 转义插值 #&#123;&#125;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This will be safe: &amp;lt;span&amp;gt;escape!&amp;lt;/span&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不转义插值 !&#123;&#125;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This will be safe: <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>escape!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签插值--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Pug-lang.com\"</span>&gt;</span>Pug<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑语句\"><a href=\"#逻辑语句\" class=\"headerlink\" title=\"逻辑语句\"></a>逻辑语句</h2><p>Pug 提供了条件、分支、循环、遍历四种逻辑语句，这四种语句继承自 JavaScript，只是语法上有些差异:</p>\n<ul>\n<li>条件语句：if … else if … else</li>\n<li>分支语句：case … when … default</li>\n<li>循环语句：while</li>\n<li>遍历数组：each $elem in [elem…]</li>\n<li>遍历对象：each $key, $value in {key: value}</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 分支语句</span><br><span class=\"line\">- var friends = 10</span><br><span class=\"line\">case friends</span><br><span class=\"line\">    when 0</span><br><span class=\"line\">        p you have no friends</span><br><span class=\"line\">    when 1</span><br><span class=\"line\">        p you have a friend</span><br><span class=\"line\">    default</span><br><span class=\"line\">        p you have #&#123;friends&#125; friends</span><br></pre></td></tr></table></figure>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>Pug 和 Sass 都提供了 mixin 语法来实现代码的复用，两者语法也很相似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mixin list(id, ...items)</span><br><span class=\"line\">    ul(id=id)</span><br><span class=\"line\">        each item <span class=\"keyword\">in</span> items</span><br><span class=\"line\">            li= item</span><br><span class=\"line\"></span><br><span class=\"line\">+list(<span class=\"string\">'my-list'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>mixin 一般放在独立的文件中，需要使用 <code>include</code> 指令导入到其他文件中。</p>\n<h2 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h2><p><code>extends</code> 是 Pug 的模板继承语法，通过 <code>extends filename.Pug</code> 可以将模板文件导入到其他文件中。继承机制基本上是一个复制代码片段的过程，为了能够动态修改其中的部分内容，Pug 提供了 <code>block</code> 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明 block</span></span><br><span class=\"line\">block content</span><br><span class=\"line\">    p Hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改 block</span></span><br><span class=\"line\"><span class=\"comment\">// 同名重新赋值</span></span><br><span class=\"line\">block content</span><br><span class=\"line\">    p Hi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前置追加</span></span><br><span class=\"line\">block append content</span><br><span class=\"line\">    p APPEND</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后置追加</span></span><br><span class=\"line\">block prepend content</span><br><span class=\"line\">    p PREPEND</span><br></pre></td></tr></table></figure>"},{"title":"React 组件的生命周期","date":"2015-11-23T01:56:00.000Z","_content":"\n在 React 所实践的组件化中，非常重要的一点就是组件的生命周期，简而言之是组件的挂载、更新和卸载流程。下图详细列述了 React 组件在整个生命周期中所涉及的方法和行为：\n\n![React 组件的生命周期](/img/react-lifecycle.png)\n\n<!-- more -->\n\n在组件实例创建之初，会依序调用 `getDefaultProps()`、`getInitialState()` 方法初始化数据。在 ES6 中，可以简写为：\n\n```js\nstatic defaultProps = {\n    key: value\n};\n\nstate = {\n    key: value\n};\n```\n\n对于从父组件传递来的 props，React 提供了 `propTypes` 配置对象来校验数据类型或格式，常用类型如下：\n\n```js\n// 布尔值\nReact.PropTypes.bool                              \n// 数值\nReact.PropTypes.number                            \n// 字符串\nReact.PropTypes.string                            \n// 函数\nReact.PropTypes.func                              \n// 数组\nReact.PropTypes.array                             \n// 对象\nReact.PropTypes.object                            \n// 数值、字符串、DOM 元素及包含这些类型的数组\nReact.PropTypes.node                              \n// React 元素\nReact.PropTypes.element                           \n// 对象实例\nReact.PropTypes.instanceOf(Message)               \n// 数组包含的值之一\nReact.PropTypes.oneOf(['News' 'Photos'])          \n// 数组包含的类型之一\nReact.PropTypes.oneOfType([                       \n    React.PropTypes.string,         \n    React.PropTypes.number,         \n    React.PropTypes.instanceOf(Message)                                  \n])                                               \n// 数值数组\nReact.PropTypes.arrayOf(React.PropTypes.number)   \n// 对象的属性值为数值类型\nReact.PropTypes.objectOf(React.PropTypes.number)  \n// 组合类型\nReact.PropTypes.shape({                           \n    React.PropTypes.string                                   \n    React.PropTypes.number                                   \n})                                                 \n// 任何类型，必填\nReact.PropTypes.any.isRequired                    \n// 自定义规则\ncustomProp: function(props propName componentName) {\n    if (!/matchme/.test(props[propName])) {\n        return new Error('Validation failed!');\n    }\n}\n```\n\n## mount\n\n在组件的挂载过程中，会依次调用 componentWillMount()、render() 和 componentDidMount()。挂载完成后，`componentWillMount()` 和 `componentDidMount()` 将不会再被触发，`render()` 则会根据 props 和 state 的变化多次执行。\n\n在 componentDidMount() 调用之前，只能得到由 render() 返回的虚拟 DOM；在该方法执行时，真实 DOM 的渲染已经完成，此时，可以通过 React 内建的 `getDOMNode()` 访问真实的 DOM。\n\n## update\n\n挂载结束后，组件处于监听状态，监听 props 和 state 的变化。props 和 state 的差异在于：state 用于配置组件内的状态，props 则用于在组件间传递数据。\n\n在实际开发中，这一阶段调用的核心都是围绕 state 展开的。state changed 之后，系统会立即调用 `boolean shouldComponentUpdate(object nextProps, object nextState)` 方法来决定是否重新渲染页面。当遭遇性能瓶颈时，适当地通过该方法控制页面渲染的频率是为提升性能不二法门。\n\n当 props changed 时，系统会立即调用 `componentWillReciveProps(object nextProps)` 方法。该方法常被用来执行 props -> state 的更新，继而触发整个页面的渲染。\n\n在这一阶段重新渲染页面所需要的同样是 will -> render -> did 三个方法。不同之处在于，此处的 did 和 will 附加了 props 和 state 信息：\n\n```js\ncomponentWillUpdate(object nextProps, object nextState) {\n    ...\n}\n\ncomponentDidUpdate(object prevProps, object prevState) {\n    ...\n}\n```\n\n## unmount\n\n组件卸载前会执行 `componentWillUnmount()`，用于清理 `componentDidMount()` 之后创建的组件。此外，对于组件生命周期内累积的监听事件和定时器，也应当在该方法内执行解绑、清除操作。\n\n## 组件化\n\n目前组内正在构建一套 React 基础组件，方法和思路与 AlloyTeam [《致我们终将组件化的 Web》](http://www.alloyteam.com/2015/11/we-will-be-componentized-web-long-text/)一文类似。其中，作者对组件提出了五点要求，如下图所示，值得参考：\n\n![组件化的要求](/img/react-component.png)\n\n其中“规范化的接口”，也可更改为可管理的生命周期。","source":"_posts/React-组件的生命周期.md","raw":"title: React 组件的生命周期\ndate: 2015-11-23 09:56:00\n---\n\n在 React 所实践的组件化中，非常重要的一点就是组件的生命周期，简而言之是组件的挂载、更新和卸载流程。下图详细列述了 React 组件在整个生命周期中所涉及的方法和行为：\n\n![React 组件的生命周期](/img/react-lifecycle.png)\n\n<!-- more -->\n\n在组件实例创建之初，会依序调用 `getDefaultProps()`、`getInitialState()` 方法初始化数据。在 ES6 中，可以简写为：\n\n```js\nstatic defaultProps = {\n    key: value\n};\n\nstate = {\n    key: value\n};\n```\n\n对于从父组件传递来的 props，React 提供了 `propTypes` 配置对象来校验数据类型或格式，常用类型如下：\n\n```js\n// 布尔值\nReact.PropTypes.bool                              \n// 数值\nReact.PropTypes.number                            \n// 字符串\nReact.PropTypes.string                            \n// 函数\nReact.PropTypes.func                              \n// 数组\nReact.PropTypes.array                             \n// 对象\nReact.PropTypes.object                            \n// 数值、字符串、DOM 元素及包含这些类型的数组\nReact.PropTypes.node                              \n// React 元素\nReact.PropTypes.element                           \n// 对象实例\nReact.PropTypes.instanceOf(Message)               \n// 数组包含的值之一\nReact.PropTypes.oneOf(['News' 'Photos'])          \n// 数组包含的类型之一\nReact.PropTypes.oneOfType([                       \n    React.PropTypes.string,         \n    React.PropTypes.number,         \n    React.PropTypes.instanceOf(Message)                                  \n])                                               \n// 数值数组\nReact.PropTypes.arrayOf(React.PropTypes.number)   \n// 对象的属性值为数值类型\nReact.PropTypes.objectOf(React.PropTypes.number)  \n// 组合类型\nReact.PropTypes.shape({                           \n    React.PropTypes.string                                   \n    React.PropTypes.number                                   \n})                                                 \n// 任何类型，必填\nReact.PropTypes.any.isRequired                    \n// 自定义规则\ncustomProp: function(props propName componentName) {\n    if (!/matchme/.test(props[propName])) {\n        return new Error('Validation failed!');\n    }\n}\n```\n\n## mount\n\n在组件的挂载过程中，会依次调用 componentWillMount()、render() 和 componentDidMount()。挂载完成后，`componentWillMount()` 和 `componentDidMount()` 将不会再被触发，`render()` 则会根据 props 和 state 的变化多次执行。\n\n在 componentDidMount() 调用之前，只能得到由 render() 返回的虚拟 DOM；在该方法执行时，真实 DOM 的渲染已经完成，此时，可以通过 React 内建的 `getDOMNode()` 访问真实的 DOM。\n\n## update\n\n挂载结束后，组件处于监听状态，监听 props 和 state 的变化。props 和 state 的差异在于：state 用于配置组件内的状态，props 则用于在组件间传递数据。\n\n在实际开发中，这一阶段调用的核心都是围绕 state 展开的。state changed 之后，系统会立即调用 `boolean shouldComponentUpdate(object nextProps, object nextState)` 方法来决定是否重新渲染页面。当遭遇性能瓶颈时，适当地通过该方法控制页面渲染的频率是为提升性能不二法门。\n\n当 props changed 时，系统会立即调用 `componentWillReciveProps(object nextProps)` 方法。该方法常被用来执行 props -> state 的更新，继而触发整个页面的渲染。\n\n在这一阶段重新渲染页面所需要的同样是 will -> render -> did 三个方法。不同之处在于，此处的 did 和 will 附加了 props 和 state 信息：\n\n```js\ncomponentWillUpdate(object nextProps, object nextState) {\n    ...\n}\n\ncomponentDidUpdate(object prevProps, object prevState) {\n    ...\n}\n```\n\n## unmount\n\n组件卸载前会执行 `componentWillUnmount()`，用于清理 `componentDidMount()` 之后创建的组件。此外，对于组件生命周期内累积的监听事件和定时器，也应当在该方法内执行解绑、清除操作。\n\n## 组件化\n\n目前组内正在构建一套 React 基础组件，方法和思路与 AlloyTeam [《致我们终将组件化的 Web》](http://www.alloyteam.com/2015/11/we-will-be-componentized-web-long-text/)一文类似。其中，作者对组件提出了五点要求，如下图所示，值得参考：\n\n![组件化的要求](/img/react-component.png)\n\n其中“规范化的接口”，也可更改为可管理的生命周期。","slug":"React-组件的生命周期","published":1,"updated":"2015-12-27T09:30:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaroj000afsdi98lbzk31","content":"<p>在 React 所实践的组件化中，非常重要的一点就是组件的生命周期，简而言之是组件的挂载、更新和卸载流程。下图详细列述了 React 组件在整个生命周期中所涉及的方法和行为：</p>\n<p><img src=\"/img/react-lifecycle.png\" alt=\"React 组件的生命周期\"></p>\n<a id=\"more\"></a>\n<p>在组件实例创建之初，会依序调用 <code>getDefaultProps()</code>、<code>getInitialState()</code> 方法初始化数据。在 ES6 中，可以简写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    key: value</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">state = &#123;</span><br><span class=\"line\">    key: value</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于从父组件传递来的 props，React 提供了 <code>propTypes</code> 配置对象来校验数据类型或格式，常用类型如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\">React.PropTypes.bool                              </span><br><span class=\"line\"><span class=\"comment\">// 数值</span></span><br><span class=\"line\">React.PropTypes.number                            </span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">React.PropTypes.string                            </span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\">React.PropTypes.func                              </span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\">React.PropTypes.array                             </span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">React.PropTypes.object                            </span><br><span class=\"line\"><span class=\"comment\">// 数值、字符串、DOM 元素及包含这些类型的数组</span></span><br><span class=\"line\">React.PropTypes.node                              </span><br><span class=\"line\"><span class=\"comment\">// React 元素</span></span><br><span class=\"line\">React.PropTypes.element                           </span><br><span class=\"line\"><span class=\"comment\">// 对象实例</span></span><br><span class=\"line\">React.PropTypes.instanceOf(Message)               </span><br><span class=\"line\"><span class=\"comment\">// 数组包含的值之一</span></span><br><span class=\"line\">React.PropTypes.oneOf([<span class=\"string\">'News'</span> <span class=\"string\">'Photos'</span>])          </span><br><span class=\"line\"><span class=\"comment\">// 数组包含的类型之一</span></span><br><span class=\"line\">React.PropTypes.oneOfType([                       </span><br><span class=\"line\">    React.PropTypes.string,         </span><br><span class=\"line\">    React.PropTypes.number,         </span><br><span class=\"line\">    React.PropTypes.instanceOf(Message)                                  </span><br><span class=\"line\">])                                               </span><br><span class=\"line\"><span class=\"comment\">// 数值数组</span></span><br><span class=\"line\">React.PropTypes.arrayOf(React.PropTypes.number)   </span><br><span class=\"line\"><span class=\"comment\">// 对象的属性值为数值类型</span></span><br><span class=\"line\">React.PropTypes.objectOf(React.PropTypes.number)  </span><br><span class=\"line\"><span class=\"comment\">// 组合类型</span></span><br><span class=\"line\">React.PropTypes.shape(&#123;                           </span><br><span class=\"line\">    React.PropTypes.string                                   </span><br><span class=\"line\">    React.PropTypes.number                                   </span><br><span class=\"line\">&#125;)                                                 </span><br><span class=\"line\"><span class=\"comment\">// 任何类型，必填</span></span><br><span class=\"line\">React.PropTypes.any.isRequired                    </span><br><span class=\"line\"><span class=\"comment\">// 自定义规则</span></span><br><span class=\"line\">customProp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props propName componentName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(props[propName])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Validation failed!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h2><p>在组件的挂载过程中，会依次调用 componentWillMount()、render() 和 componentDidMount()。挂载完成后，<code>componentWillMount()</code> 和 <code>componentDidMount()</code> 将不会再被触发，<code>render()</code> 则会根据 props 和 state 的变化多次执行。</p>\n<p>在 componentDidMount() 调用之前，只能得到由 render() 返回的虚拟 DOM；在该方法执行时，真实 DOM 的渲染已经完成，此时，可以通过 React 内建的 <code>getDOMNode()</code> 访问真实的 DOM。</p>\n<h2 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h2><p>挂载结束后，组件处于监听状态，监听 props 和 state 的变化。props 和 state 的差异在于：state 用于配置组件内的状态，props 则用于在组件间传递数据。</p>\n<p>在实际开发中，这一阶段调用的核心都是围绕 state 展开的。state changed 之后，系统会立即调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code> 方法来决定是否重新渲染页面。当遭遇性能瓶颈时，适当地通过该方法控制页面渲染的频率是为提升性能不二法门。</p>\n<p>当 props changed 时，系统会立即调用 <code>componentWillReciveProps(object nextProps)</code> 方法。该方法常被用来执行 props -&gt; state 的更新，继而触发整个页面的渲染。</p>\n<p>在这一阶段重新渲染页面所需要的同样是 will -&gt; render -&gt; did 三个方法。不同之处在于，此处的 did 和 will 附加了 props 和 state 信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentWillUpdate(object nextProps, object nextState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidUpdate(object prevProps, object prevState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"unmount\"><a href=\"#unmount\" class=\"headerlink\" title=\"unmount\"></a>unmount</h2><p>组件卸载前会执行 <code>componentWillUnmount()</code>，用于清理 <code>componentDidMount()</code> 之后创建的组件。此外，对于组件生命周期内累积的监听事件和定时器，也应当在该方法内执行解绑、清除操作。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>目前组内正在构建一套 React 基础组件，方法和思路与 AlloyTeam <a href=\"http://www.alloyteam.com/2015/11/we-will-be-componentized-web-long-text/\" target=\"_blank\" rel=\"external\">《致我们终将组件化的 Web》</a>一文类似。其中，作者对组件提出了五点要求，如下图所示，值得参考：</p>\n<p><img src=\"/img/react-component.png\" alt=\"组件化的要求\"></p>\n<p>其中“规范化的接口”，也可更改为可管理的生命周期。</p>\n","excerpt":"<p>在 React 所实践的组件化中，非常重要的一点就是组件的生命周期，简而言之是组件的挂载、更新和卸载流程。下图详细列述了 React 组件在整个生命周期中所涉及的方法和行为：</p>\n<p><img src=\"/img/react-lifecycle.png\" alt=\"React 组件的生命周期\"></p>","more":"<p>在组件实例创建之初，会依序调用 <code>getDefaultProps()</code>、<code>getInitialState()</code> 方法初始化数据。在 ES6 中，可以简写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    key: value</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">state = &#123;</span><br><span class=\"line\">    key: value</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于从父组件传递来的 props，React 提供了 <code>propTypes</code> 配置对象来校验数据类型或格式，常用类型如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\">React.PropTypes.bool                              </span><br><span class=\"line\"><span class=\"comment\">// 数值</span></span><br><span class=\"line\">React.PropTypes.number                            </span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">React.PropTypes.string                            </span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\">React.PropTypes.func                              </span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\">React.PropTypes.array                             </span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">React.PropTypes.object                            </span><br><span class=\"line\"><span class=\"comment\">// 数值、字符串、DOM 元素及包含这些类型的数组</span></span><br><span class=\"line\">React.PropTypes.node                              </span><br><span class=\"line\"><span class=\"comment\">// React 元素</span></span><br><span class=\"line\">React.PropTypes.element                           </span><br><span class=\"line\"><span class=\"comment\">// 对象实例</span></span><br><span class=\"line\">React.PropTypes.instanceOf(Message)               </span><br><span class=\"line\"><span class=\"comment\">// 数组包含的值之一</span></span><br><span class=\"line\">React.PropTypes.oneOf([<span class=\"string\">'News'</span> <span class=\"string\">'Photos'</span>])          </span><br><span class=\"line\"><span class=\"comment\">// 数组包含的类型之一</span></span><br><span class=\"line\">React.PropTypes.oneOfType([                       </span><br><span class=\"line\">    React.PropTypes.string,         </span><br><span class=\"line\">    React.PropTypes.number,         </span><br><span class=\"line\">    React.PropTypes.instanceOf(Message)                                  </span><br><span class=\"line\">])                                               </span><br><span class=\"line\"><span class=\"comment\">// 数值数组</span></span><br><span class=\"line\">React.PropTypes.arrayOf(React.PropTypes.number)   </span><br><span class=\"line\"><span class=\"comment\">// 对象的属性值为数值类型</span></span><br><span class=\"line\">React.PropTypes.objectOf(React.PropTypes.number)  </span><br><span class=\"line\"><span class=\"comment\">// 组合类型</span></span><br><span class=\"line\">React.PropTypes.shape(&#123;                           </span><br><span class=\"line\">    React.PropTypes.string                                   </span><br><span class=\"line\">    React.PropTypes.number                                   </span><br><span class=\"line\">&#125;)                                                 </span><br><span class=\"line\"><span class=\"comment\">// 任何类型，必填</span></span><br><span class=\"line\">React.PropTypes.any.isRequired                    </span><br><span class=\"line\"><span class=\"comment\">// 自定义规则</span></span><br><span class=\"line\">customProp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props propName componentName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(props[propName])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Validation failed!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h2><p>在组件的挂载过程中，会依次调用 componentWillMount()、render() 和 componentDidMount()。挂载完成后，<code>componentWillMount()</code> 和 <code>componentDidMount()</code> 将不会再被触发，<code>render()</code> 则会根据 props 和 state 的变化多次执行。</p>\n<p>在 componentDidMount() 调用之前，只能得到由 render() 返回的虚拟 DOM；在该方法执行时，真实 DOM 的渲染已经完成，此时，可以通过 React 内建的 <code>getDOMNode()</code> 访问真实的 DOM。</p>\n<h2 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h2><p>挂载结束后，组件处于监听状态，监听 props 和 state 的变化。props 和 state 的差异在于：state 用于配置组件内的状态，props 则用于在组件间传递数据。</p>\n<p>在实际开发中，这一阶段调用的核心都是围绕 state 展开的。state changed 之后，系统会立即调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code> 方法来决定是否重新渲染页面。当遭遇性能瓶颈时，适当地通过该方法控制页面渲染的频率是为提升性能不二法门。</p>\n<p>当 props changed 时，系统会立即调用 <code>componentWillReciveProps(object nextProps)</code> 方法。该方法常被用来执行 props -&gt; state 的更新，继而触发整个页面的渲染。</p>\n<p>在这一阶段重新渲染页面所需要的同样是 will -&gt; render -&gt; did 三个方法。不同之处在于，此处的 did 和 will 附加了 props 和 state 信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentWillUpdate(object nextProps, object nextState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidUpdate(object prevProps, object prevState) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"unmount\"><a href=\"#unmount\" class=\"headerlink\" title=\"unmount\"></a>unmount</h2><p>组件卸载前会执行 <code>componentWillUnmount()</code>，用于清理 <code>componentDidMount()</code> 之后创建的组件。此外，对于组件生命周期内累积的监听事件和定时器，也应当在该方法内执行解绑、清除操作。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>目前组内正在构建一套 React 基础组件，方法和思路与 AlloyTeam <a href=\"http://www.alloyteam.com/2015/11/we-will-be-componentized-web-long-text/\">《致我们终将组件化的 Web》</a>一文类似。其中，作者对组件提出了五点要求，如下图所示，值得参考：</p>\n<p><img src=\"/img/react-component.png\" alt=\"组件化的要求\"></p>\n<p>其中“规范化的接口”，也可更改为可管理的生命周期。</p>"},{"title":"React 组件间的消息传递","date":"2015-11-28T10:34:42.000Z","_content":"\n当我们封装了可复用的组件之后，用来驱动组件渲染内容的数据就变得愈发灵活，组件之间数据通信的问题就摆在了桌面上。React 组件间的消息传递主要集中于三种关系中：\n\n- 从父组件向子组件的消息传递\n- 从子组件向父组件的消息传递\n- 无关联组件之间的消息传递\n\n前两种关系都可以使用 React 内建的 `this.props` 对象来处理：\n\n![父子组件之间的消息传递](/img/react-component-comunication.png)\n\n<!-- more -->\n\n## 无关联组件之间的消息传递\n\n这里的“无关联”，是指两个组件既不是父子关系，也不是兄弟关系。对于这种关系，可以用一个简单的发布订阅模型来实现，这种模型又被称为观察者模式。\n\n这里选用的是基于全局对象的发布订阅模型，需要自定义事件名称：\n\n```js\n// 事件集合\nlet events = {};\n\n// 发布事件\nconst trigger = (event, ...data) => {\n    const fns = events[event];\n\n    // 如果没有对应方法\n    if (!fns || fns.length === 0) {\n        return false;\n    }\n    // 如果存在对应方法，依次执行\n    for ( let i = 0; i <= fns.length - 1; i++) {\n        fns[i](...data);\n    }\n};\n\n// 监听事件\nconst on = (event, fn) => {\n    // 如果尚没有该事件，创建一个数组来存储对应的方法\n    if (!events[event]) {\n        events[event] = [];\n    }\n    events[event].push(fn);\n};\n\n// 取消监听事件\nconst off = (event, fn) => {\n    const fns = events[event];\n\n    // 如果不存在事件集合\n    if (!fns) {\n        return false;\n    }\n    // 如果不存在事件\n    if (!fn && fns) {\n        fns.length = 0;\n    }\n    // 取消指定事件\n    else {\n        for (let i = fns.length - 1; i >= 0; i--) {\n            if (fn === fns[i]) {\n                fns.splice(i, 1);\n            }\n        }\n    }\n};\n\nconst PubSub = {\n    on: on,\n    off: off,\n    trigger: trigger\n};\n\nexport default PubSub;\n```","source":"_posts/React-组件间的消息传递.md","raw":"title: React 组件间的消息传递\ndate: 2015-11-28 18:34:42\n---\n\n当我们封装了可复用的组件之后，用来驱动组件渲染内容的数据就变得愈发灵活，组件之间数据通信的问题就摆在了桌面上。React 组件间的消息传递主要集中于三种关系中：\n\n- 从父组件向子组件的消息传递\n- 从子组件向父组件的消息传递\n- 无关联组件之间的消息传递\n\n前两种关系都可以使用 React 内建的 `this.props` 对象来处理：\n\n![父子组件之间的消息传递](/img/react-component-comunication.png)\n\n<!-- more -->\n\n## 无关联组件之间的消息传递\n\n这里的“无关联”，是指两个组件既不是父子关系，也不是兄弟关系。对于这种关系，可以用一个简单的发布订阅模型来实现，这种模型又被称为观察者模式。\n\n这里选用的是基于全局对象的发布订阅模型，需要自定义事件名称：\n\n```js\n// 事件集合\nlet events = {};\n\n// 发布事件\nconst trigger = (event, ...data) => {\n    const fns = events[event];\n\n    // 如果没有对应方法\n    if (!fns || fns.length === 0) {\n        return false;\n    }\n    // 如果存在对应方法，依次执行\n    for ( let i = 0; i <= fns.length - 1; i++) {\n        fns[i](...data);\n    }\n};\n\n// 监听事件\nconst on = (event, fn) => {\n    // 如果尚没有该事件，创建一个数组来存储对应的方法\n    if (!events[event]) {\n        events[event] = [];\n    }\n    events[event].push(fn);\n};\n\n// 取消监听事件\nconst off = (event, fn) => {\n    const fns = events[event];\n\n    // 如果不存在事件集合\n    if (!fns) {\n        return false;\n    }\n    // 如果不存在事件\n    if (!fn && fns) {\n        fns.length = 0;\n    }\n    // 取消指定事件\n    else {\n        for (let i = fns.length - 1; i >= 0; i--) {\n            if (fn === fns[i]) {\n                fns.splice(i, 1);\n            }\n        }\n    }\n};\n\nconst PubSub = {\n    on: on,\n    off: off,\n    trigger: trigger\n};\n\nexport default PubSub;\n```","slug":"React-组件间的消息传递","published":1,"updated":"2015-12-27T09:32:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarom000bfsdilohujr4t","content":"<p>当我们封装了可复用的组件之后，用来驱动组件渲染内容的数据就变得愈发灵活，组件之间数据通信的问题就摆在了桌面上。React 组件间的消息传递主要集中于三种关系中：</p>\n<ul>\n<li>从父组件向子组件的消息传递</li>\n<li>从子组件向父组件的消息传递</li>\n<li>无关联组件之间的消息传递</li>\n</ul>\n<p>前两种关系都可以使用 React 内建的 <code>this.props</code> 对象来处理：</p>\n<p><img src=\"/img/react-component-comunication.png\" alt=\"父子组件之间的消息传递\"></p>\n<a id=\"more\"></a>\n<h2 id=\"无关联组件之间的消息传递\"><a href=\"#无关联组件之间的消息传递\" class=\"headerlink\" title=\"无关联组件之间的消息传递\"></a>无关联组件之间的消息传递</h2><p>这里的“无关联”，是指两个组件既不是父子关系，也不是兄弟关系。对于这种关系，可以用一个简单的发布订阅模型来实现，这种模型又被称为观察者模式。</p>\n<p>这里选用的是基于全局对象的发布订阅模型，需要自定义事件名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件集合</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> trigger = (event, ...data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = events[event];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有对应方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在对应方法，依次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= fns.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        fns[i](...data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> on = (event, fn) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果尚没有该事件，创建一个数组来存储对应的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!events[event]) &#123;</span><br><span class=\"line\">        events[event] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    events[event].push(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消监听事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> off = (event, fn) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = events[event];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在事件集合</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn &amp;&amp; fns) &#123;</span><br><span class=\"line\">        fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 取消指定事件</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn === fns[i]) &#123;</span><br><span class=\"line\">                fns.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PubSub = &#123;</span><br><span class=\"line\">    on: on,</span><br><span class=\"line\">    off: off,</span><br><span class=\"line\">    trigger: trigger</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PubSub;</span><br></pre></td></tr></table></figure>","excerpt":"<p>当我们封装了可复用的组件之后，用来驱动组件渲染内容的数据就变得愈发灵活，组件之间数据通信的问题就摆在了桌面上。React 组件间的消息传递主要集中于三种关系中：</p>\n<ul>\n<li>从父组件向子组件的消息传递</li>\n<li>从子组件向父组件的消息传递</li>\n<li>无关联组件之间的消息传递</li>\n</ul>\n<p>前两种关系都可以使用 React 内建的 <code>this.props</code> 对象来处理：</p>\n<p><img src=\"/img/react-component-comunication.png\" alt=\"父子组件之间的消息传递\"></p>","more":"<h2 id=\"无关联组件之间的消息传递\"><a href=\"#无关联组件之间的消息传递\" class=\"headerlink\" title=\"无关联组件之间的消息传递\"></a>无关联组件之间的消息传递</h2><p>这里的“无关联”，是指两个组件既不是父子关系，也不是兄弟关系。对于这种关系，可以用一个简单的发布订阅模型来实现，这种模型又被称为观察者模式。</p>\n<p>这里选用的是基于全局对象的发布订阅模型，需要自定义事件名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件集合</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> trigger = (event, ...data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = events[event];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有对应方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在对应方法，依次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= fns.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        fns[i](...data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> on = (event, fn) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果尚没有该事件，创建一个数组来存储对应的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!events[event]) &#123;</span><br><span class=\"line\">        events[event] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    events[event].push(fn);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消监听事件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> off = (event, fn) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = events[event];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在事件集合</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn &amp;&amp; fns) &#123;</span><br><span class=\"line\">        fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 取消指定事件</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn === fns[i]) &#123;</span><br><span class=\"line\">                fns.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PubSub = &#123;</span><br><span class=\"line\">    on: on,</span><br><span class=\"line\">    off: off,</span><br><span class=\"line\">    trigger: trigger</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PubSub;</span><br></pre></td></tr></table></figure>"},{"title":"Sass","date":"2015-11-19T09:19:52.000Z","_content":"\n从 [Ben Frain](http://benfrain.com/) 的书中可以看出，他是一个勇于实践、善于学习的开发者。一直以来都很关注他的动态，当他的新书《Sass 和 Compass 设计师指南》初版时，就迫不及待地入手了，这是我和 Sass 的第一次见面。后来机缘巧合翻译了 [Sass Guidelines](http://sass-guidelin.es/zh) 和其它一些颇具实践性的 Sass 文章，零零散散至今大概有了一年的时间。\n\n以前的翻译专注于“学习”，在这篇文章之后，我将会分配更多的精力到“实践”中，做一些共享性的库或工具回馈社区。\n\n<div class=\"tip\">\n    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！\n</div>\n\n<!-- more -->\n\n## Quick Start\n\nSass 扩展了 CSS 的现有语法，并提供了一些新的语法糖。在下面的简短代码中，集合了 Sass 中最常用的模块引用 `@import`、变量和嵌套：\n\n```scss\n// 设置字符集\n@charset \"UTF-8\";\n\n// 引入模块\n@import \"reset\";\n\n// 创建变量\n$primary-color: #333;\n\n// 嵌套\nbody {\n    color: $primary-color;\n    ul {\n        list-style-type: none;\n    }\n}\n```\n\n## 插值字符串\n\nSass 中的插值字符串 `#{$var}` 有两方面的作用：动态拼接字符串和去除字符串首尾的引号。示例如下：\n\n```scss\n@mixin header($tag) {\n    #{$tag}:before {\n        content: \"#{$tag}\";\n        // 等同于 content: $tag;\n    }\n}\n\n.post-content {\n    @include header(\"h1\");\n}\n```\n\n编译结果：\n\n```css\n.post-content h1:before {\n    content: \"h1\";\n}\n```\n\n## 父级引用符：`&`\n\n可以将父级引用符 `&` 看做是一个值为父级选择器的插值语法：\n\n```scss\na {\n    text-decoration: none;\n    &:hover {\n        text-decoration: underline;\n    }\n}\n```\n\n编译结果：\n\n```css\na {\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n```\n\n## 占位符选择器\n\n占位符选择器是 Sass 特有的一种选择器，声明时以 `%` 开头，编译时不会输出到 CSS 文件中，主要用于抽象组件的公共部分，配合 `@extend` 指令实现样式的继承机制：\n\n```scss\n%font {\n    font-size: 14px;\n    font-family: \"Source Sans Pro\";\n}\n\nbody {\n    @extend %font;\n}\n```\n\n编译结果：\n\n```css\nbody {\n    font-size: 14px;\n    font-family: \"Source Sans Pro\";\n}\n```\n\n## 数据类型\n\n- 字符串 (string): \"foo\", foo\n- 数值 (number): 1.3, 13, 10px\n- 列表 (list): ( 1.5em 1em 0 2em, Helvetica, Arial, sa ns-serif )\n- 映射 (map): ( key1: value1, key2: value2 )\n- 颜色值 (color): blue, #FFFFFF, rgb, hsl, rgba, hsla\n- 布尔值 (bool): true, false\n- 空类型 (null): null\n\n## 操作符\n\n- 赋值 `:`\n- 计算 `+`、`-`、`*`、`/`、`%`\n- 比较 `==`、`!=`、`>`、`>=`、`<`、`<=`\n- 逻辑 `and`、`or`、`not`\n\n其中，`+` 除了用作算术运算之外，也可以用于拼接字符串和求取颜色值。在 Sass 中字符串分为两种：引用字符串（quoted string，外部被引号包裹）和未引用字符串（unquoted string，外部没有引号）。使用 `+` 拼接字符串时，最终生成的字符串类型为第一个运算子的字符串类型：\n\n```scss\nbody {\n    font-family: \"Source Sans \" + TC;\n    p {\n        font-family: sans- + \"serif\";\n    }\n}\n```\n\n编译结果：\n\n```css\nbody {\n  font-family: \"Source Sans TC\";\n}\n\nbody p {\n  font-family: sans-serif;\n}\n```\n\n使用 `+` 求取颜色值时，必须保证运算子具有相同的不透明度：\n\n```scss\nbody {\n    color: rgba(70, 132, 153, 1) + rgba(32, 68, 121, 1);\n    // => color: #66c8ff;\n\n    background-color: rgba(70, 132, 153, .9) + rgba(32, 68, 121, .7);\n    // alpha channels must be equal when combining colors \n    // 报错：不透明通道值必须相等\n}\n```\n\n<div class=\"tip\">\n    `/` 在 CSS 中是有意义的，为了避免和 Sass 除法运算的混淆，所有的除法操作都应该使用小括号 `()` 包裹，比如使用 `font-size: (10px / 2)` 产出 `font-size: 5px`。\n</div>\n\n## 变量标识符\n\nSass 中的变量有三种身份：普通变量、默认值变量（`!default`）和全局变量（`!global`），而且这些变量具有作用域的概念，每个代码块 `{}` 内一个作用域，整个代码文件内也有一个作用域。\n\n当我们引用普通变量时，Sass 首先会从当前作用域开始检索变量，如果找不到就上溯到父级作用域，直到递归到最顶层的作用域：\n\n```scss\n$color: orange;\n\ndiv {\n    // 对 $color 重新赋值\n    $color: blue;\n    color: $color;\n    p {\n        color: $color;\n    }\n}\n\na {\n    color: $color;\n}\n```\n\n编译结果：\n\n```css\ndiv {\n  color: blue;\n}\n\ndiv p {\n  color: blue;\n}\n\na {\n  color: orange;\n}\n```\n\n> 默认值变量往往用于主题的配置文件，起到标识默认值，方便后续的重写覆盖。在最顶层作用域下，变量默认具有全局性，此时使用 `!global` 并没有实际意义；在块级作用域中，可以通过 `!global` 将变量提升为全局变量，但这么做势必降低代码的可维护性，所以目前全局变量显得有些鸡肋。\n\n## `@` 指令\n\n- @import 模块引用\n- @media 媒体查询\n- @extend 选择器继承\n- @at-root 嵌套提取\n- @debug / @warn / @error 异常和测试\n\n`@extend` 的强大无可置疑，但是复杂性也一直为人诟病，稍微控制不当就会生成冗余的选择器。归根结底，使用 `@extend` 是为了继承组件的公有样式，所以在不影响功能的基础上，应该适当的束缚它的能力。到目前为止，最优秀的实践方式就是 `@extend` 搭配占位符选择器。\n\n```scss\n%btn {\n    color: white;\n    font-size: 20px;\n}\n\n.btn-danger {\n    @extend %btn;\n    background-color: red;\n}\n\n.btn-default {\n    @extend %btn;\n    background-color: gray;\n}\n```\n\n编译结果：\n\n```css\n.btn-danger, .btn-default {\n    color: white;\n    font-size: 20px;\n}\n\n.btn-danger {\n    background-color: red;\n}\n\n.btn-default {\n    background-color: gray;\n}\n```\n\n在这个组合中，占位符选择器本身不会被编译到 CSS 文件中，可以节省文件体积，而且 `@extend` 只继承了单一的占位符选择器，杜绝了选择器泛滥。此外，相比起 `@mixin` 来，`@extend` 搭配占位符选择器生成的结果会聚合在同一个样式集中：\n\n![@extend vs @mixin](/img/mixin-vs-extend.png)\n\n> 如果再上升一个层次分工的话，那就需要比较一下 `@mixin` 和 `@extend`。这两种方式都可以生成公有样式，但是仅此而已就是浪费了 `@mixin` 的能力。就目前的最佳实践来说，建议使用 `@extend` 搭配占位符选择器继承公有样式，使用 `@mixin` 产出动态样式。`@mixin` 的详细介绍见后续小节。\n\n\n## 控制指令\n\n- @if ... @else if ... @else ... 条件判断\n- @for $var from start through end [start, end] 循环\n- @for $var from start to end [start, end) 循环\n- @each ... in ... 遍历\n- @while\n\n`@each` 可以用来遍历 list 和 map 类型的数据，示例如下：\n\n```scss\n$btn: (\n    danger: red, \n    primary: blue, \n    warning: orange\n);\n\n@each $type, $color in $btn {\n    .btn-#{$type} {\n        color: $color;\n    }\n}\n```\n\n编译结果：\n\n```css\n.btn-danger {\n    color: red;\n}\n\n.btn-primary {\n    color: blue;\n}\n\n.btn-warning {\n    color: orange;\n}\n```\n\n## 混合宏 `@mixin`\n\n在 `@extend` 部分已经介绍到 `@mixin` 的一个功能是生成公有样式，但事实上，建议你避开使用该功能，而是着眼于使用 `@mixin` 动态生成共有样式，更优雅地实现组件复用：\n\n```scss\n@mixin btn($fontSize, $borderRadius) {\n    font-size: $fontSize;\n    border-radius: $borderRadius;\n}\n\n.btn-sm {\n    @include btn(14px, 3px);\n}\n\n.btn-lg {\n    @include btn(18px, 5px);\n}\n```\n\n编译结果：\n\n```css\n.btn-sm {\n    font-size: 14px;\n    border-radius: 3px;\n}\n\n.btn-lg {\n    font-size: 18px;\n    border-radius: 5px;\n}\n```\n\n`@mixin` 的参数除了上面示例的普通参数，还包括默认值参数和不定参数。默认值参数通过提供默认样式，可以在参数缺失时，保障代码的健壮性：\n\n```scss\n@mixin btn($fontSize, $borderRadius: 5px) {\n    font-size: $fontSize;\n    border-radius: $borderRadius;\n}\n\n.btn-lg {\n    @include btn(18px);\n}\n```\n\n编译结果：\n\n```css\n.btn-lg {\n    font-size: 18px;\n    border-radius: 5px;\n}\n```\n\n不定参数可以保存零个或多个值，最常用的地方就是为同一属性添加多个值，比如多重阴影：\n\n```scss\n@mixin box-shadow($shadows...) {\n    -moz-box-shadow: $shadows;\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n}\n\n.shadows {\n    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);\n}\n```\n\n编译结果：\n\n```css\n.shadows {\n    -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n    -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n    box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n}\n```\n\n此外，在传参时也可以使用不定参数：\n\n```scss\n@mixin colors($text, $background, $border) {\n    color: $text;\n    background-color: $background;\n    border-color: $border;\n}\n\n$values: #ff0000, #00ff00, #0000ff;\n.primary {\n    @include colors($values...);\n}\n\n$value-map: (text: #00ff00, background: #0000ff, border: #ff0000);\n.secondary {\n    @include colors($value-map...);\n}\n```\n\n编译结果：\n\n```css\n.primary {\n    color: #ff0000;\n    background-color: #00ff00;\n    border-color: #0000ff;\n}\n\n.secondary {\n    color: #00ff00;\n    background-color: #0000ff;\n    border-color: #ff0000;\n}\n```\n\n<div class=\"tip\">\n    在 `@mixin` 中配置参数时，先写普通参数，然后是默认值参数，最后是不定参数。\n</div>\n\n## 函数指令 `@function`\n\n相比起上面的继承和动态生成，`@function` 在生成方式上自由度更高。此外，还可以嵌套上面的各种指令和操作符，对数据进行筛选、在加工，生成特定样式。在下面的代码中，混合宏根据栅格的数量，动态生成容器的宽度：\n\n```scss\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function width($n) {\n    @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n.container { \n    width: width(5); \n}\n```\n\n编译结果：\n\n```css\n.container {\n    width: 240px;\n}\n```\n\n###### 参考资料\n\n- [Sass 内建函数](http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method)","source":"_posts/Sass.md","raw":"title: Sass\ndate: 2015-11-19 17:19:52\ntags:\n---\n\n从 [Ben Frain](http://benfrain.com/) 的书中可以看出，他是一个勇于实践、善于学习的开发者。一直以来都很关注他的动态，当他的新书《Sass 和 Compass 设计师指南》初版时，就迫不及待地入手了，这是我和 Sass 的第一次见面。后来机缘巧合翻译了 [Sass Guidelines](http://sass-guidelin.es/zh) 和其它一些颇具实践性的 Sass 文章，零零散散至今大概有了一年的时间。\n\n以前的翻译专注于“学习”，在这篇文章之后，我将会分配更多的精力到“实践”中，做一些共享性的库或工具回馈社区。\n\n<div class=\"tip\">\n    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！\n</div>\n\n<!-- more -->\n\n## Quick Start\n\nSass 扩展了 CSS 的现有语法，并提供了一些新的语法糖。在下面的简短代码中，集合了 Sass 中最常用的模块引用 `@import`、变量和嵌套：\n\n```scss\n// 设置字符集\n@charset \"UTF-8\";\n\n// 引入模块\n@import \"reset\";\n\n// 创建变量\n$primary-color: #333;\n\n// 嵌套\nbody {\n    color: $primary-color;\n    ul {\n        list-style-type: none;\n    }\n}\n```\n\n## 插值字符串\n\nSass 中的插值字符串 `#{$var}` 有两方面的作用：动态拼接字符串和去除字符串首尾的引号。示例如下：\n\n```scss\n@mixin header($tag) {\n    #{$tag}:before {\n        content: \"#{$tag}\";\n        // 等同于 content: $tag;\n    }\n}\n\n.post-content {\n    @include header(\"h1\");\n}\n```\n\n编译结果：\n\n```css\n.post-content h1:before {\n    content: \"h1\";\n}\n```\n\n## 父级引用符：`&`\n\n可以将父级引用符 `&` 看做是一个值为父级选择器的插值语法：\n\n```scss\na {\n    text-decoration: none;\n    &:hover {\n        text-decoration: underline;\n    }\n}\n```\n\n编译结果：\n\n```css\na {\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n```\n\n## 占位符选择器\n\n占位符选择器是 Sass 特有的一种选择器，声明时以 `%` 开头，编译时不会输出到 CSS 文件中，主要用于抽象组件的公共部分，配合 `@extend` 指令实现样式的继承机制：\n\n```scss\n%font {\n    font-size: 14px;\n    font-family: \"Source Sans Pro\";\n}\n\nbody {\n    @extend %font;\n}\n```\n\n编译结果：\n\n```css\nbody {\n    font-size: 14px;\n    font-family: \"Source Sans Pro\";\n}\n```\n\n## 数据类型\n\n- 字符串 (string): \"foo\", foo\n- 数值 (number): 1.3, 13, 10px\n- 列表 (list): ( 1.5em 1em 0 2em, Helvetica, Arial, sa ns-serif )\n- 映射 (map): ( key1: value1, key2: value2 )\n- 颜色值 (color): blue, #FFFFFF, rgb, hsl, rgba, hsla\n- 布尔值 (bool): true, false\n- 空类型 (null): null\n\n## 操作符\n\n- 赋值 `:`\n- 计算 `+`、`-`、`*`、`/`、`%`\n- 比较 `==`、`!=`、`>`、`>=`、`<`、`<=`\n- 逻辑 `and`、`or`、`not`\n\n其中，`+` 除了用作算术运算之外，也可以用于拼接字符串和求取颜色值。在 Sass 中字符串分为两种：引用字符串（quoted string，外部被引号包裹）和未引用字符串（unquoted string，外部没有引号）。使用 `+` 拼接字符串时，最终生成的字符串类型为第一个运算子的字符串类型：\n\n```scss\nbody {\n    font-family: \"Source Sans \" + TC;\n    p {\n        font-family: sans- + \"serif\";\n    }\n}\n```\n\n编译结果：\n\n```css\nbody {\n  font-family: \"Source Sans TC\";\n}\n\nbody p {\n  font-family: sans-serif;\n}\n```\n\n使用 `+` 求取颜色值时，必须保证运算子具有相同的不透明度：\n\n```scss\nbody {\n    color: rgba(70, 132, 153, 1) + rgba(32, 68, 121, 1);\n    // => color: #66c8ff;\n\n    background-color: rgba(70, 132, 153, .9) + rgba(32, 68, 121, .7);\n    // alpha channels must be equal when combining colors \n    // 报错：不透明通道值必须相等\n}\n```\n\n<div class=\"tip\">\n    `/` 在 CSS 中是有意义的，为了避免和 Sass 除法运算的混淆，所有的除法操作都应该使用小括号 `()` 包裹，比如使用 `font-size: (10px / 2)` 产出 `font-size: 5px`。\n</div>\n\n## 变量标识符\n\nSass 中的变量有三种身份：普通变量、默认值变量（`!default`）和全局变量（`!global`），而且这些变量具有作用域的概念，每个代码块 `{}` 内一个作用域，整个代码文件内也有一个作用域。\n\n当我们引用普通变量时，Sass 首先会从当前作用域开始检索变量，如果找不到就上溯到父级作用域，直到递归到最顶层的作用域：\n\n```scss\n$color: orange;\n\ndiv {\n    // 对 $color 重新赋值\n    $color: blue;\n    color: $color;\n    p {\n        color: $color;\n    }\n}\n\na {\n    color: $color;\n}\n```\n\n编译结果：\n\n```css\ndiv {\n  color: blue;\n}\n\ndiv p {\n  color: blue;\n}\n\na {\n  color: orange;\n}\n```\n\n> 默认值变量往往用于主题的配置文件，起到标识默认值，方便后续的重写覆盖。在最顶层作用域下，变量默认具有全局性，此时使用 `!global` 并没有实际意义；在块级作用域中，可以通过 `!global` 将变量提升为全局变量，但这么做势必降低代码的可维护性，所以目前全局变量显得有些鸡肋。\n\n## `@` 指令\n\n- @import 模块引用\n- @media 媒体查询\n- @extend 选择器继承\n- @at-root 嵌套提取\n- @debug / @warn / @error 异常和测试\n\n`@extend` 的强大无可置疑，但是复杂性也一直为人诟病，稍微控制不当就会生成冗余的选择器。归根结底，使用 `@extend` 是为了继承组件的公有样式，所以在不影响功能的基础上，应该适当的束缚它的能力。到目前为止，最优秀的实践方式就是 `@extend` 搭配占位符选择器。\n\n```scss\n%btn {\n    color: white;\n    font-size: 20px;\n}\n\n.btn-danger {\n    @extend %btn;\n    background-color: red;\n}\n\n.btn-default {\n    @extend %btn;\n    background-color: gray;\n}\n```\n\n编译结果：\n\n```css\n.btn-danger, .btn-default {\n    color: white;\n    font-size: 20px;\n}\n\n.btn-danger {\n    background-color: red;\n}\n\n.btn-default {\n    background-color: gray;\n}\n```\n\n在这个组合中，占位符选择器本身不会被编译到 CSS 文件中，可以节省文件体积，而且 `@extend` 只继承了单一的占位符选择器，杜绝了选择器泛滥。此外，相比起 `@mixin` 来，`@extend` 搭配占位符选择器生成的结果会聚合在同一个样式集中：\n\n![@extend vs @mixin](/img/mixin-vs-extend.png)\n\n> 如果再上升一个层次分工的话，那就需要比较一下 `@mixin` 和 `@extend`。这两种方式都可以生成公有样式，但是仅此而已就是浪费了 `@mixin` 的能力。就目前的最佳实践来说，建议使用 `@extend` 搭配占位符选择器继承公有样式，使用 `@mixin` 产出动态样式。`@mixin` 的详细介绍见后续小节。\n\n\n## 控制指令\n\n- @if ... @else if ... @else ... 条件判断\n- @for $var from start through end [start, end] 循环\n- @for $var from start to end [start, end) 循环\n- @each ... in ... 遍历\n- @while\n\n`@each` 可以用来遍历 list 和 map 类型的数据，示例如下：\n\n```scss\n$btn: (\n    danger: red, \n    primary: blue, \n    warning: orange\n);\n\n@each $type, $color in $btn {\n    .btn-#{$type} {\n        color: $color;\n    }\n}\n```\n\n编译结果：\n\n```css\n.btn-danger {\n    color: red;\n}\n\n.btn-primary {\n    color: blue;\n}\n\n.btn-warning {\n    color: orange;\n}\n```\n\n## 混合宏 `@mixin`\n\n在 `@extend` 部分已经介绍到 `@mixin` 的一个功能是生成公有样式，但事实上，建议你避开使用该功能，而是着眼于使用 `@mixin` 动态生成共有样式，更优雅地实现组件复用：\n\n```scss\n@mixin btn($fontSize, $borderRadius) {\n    font-size: $fontSize;\n    border-radius: $borderRadius;\n}\n\n.btn-sm {\n    @include btn(14px, 3px);\n}\n\n.btn-lg {\n    @include btn(18px, 5px);\n}\n```\n\n编译结果：\n\n```css\n.btn-sm {\n    font-size: 14px;\n    border-radius: 3px;\n}\n\n.btn-lg {\n    font-size: 18px;\n    border-radius: 5px;\n}\n```\n\n`@mixin` 的参数除了上面示例的普通参数，还包括默认值参数和不定参数。默认值参数通过提供默认样式，可以在参数缺失时，保障代码的健壮性：\n\n```scss\n@mixin btn($fontSize, $borderRadius: 5px) {\n    font-size: $fontSize;\n    border-radius: $borderRadius;\n}\n\n.btn-lg {\n    @include btn(18px);\n}\n```\n\n编译结果：\n\n```css\n.btn-lg {\n    font-size: 18px;\n    border-radius: 5px;\n}\n```\n\n不定参数可以保存零个或多个值，最常用的地方就是为同一属性添加多个值，比如多重阴影：\n\n```scss\n@mixin box-shadow($shadows...) {\n    -moz-box-shadow: $shadows;\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n}\n\n.shadows {\n    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);\n}\n```\n\n编译结果：\n\n```css\n.shadows {\n    -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n    -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n    box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;\n}\n```\n\n此外，在传参时也可以使用不定参数：\n\n```scss\n@mixin colors($text, $background, $border) {\n    color: $text;\n    background-color: $background;\n    border-color: $border;\n}\n\n$values: #ff0000, #00ff00, #0000ff;\n.primary {\n    @include colors($values...);\n}\n\n$value-map: (text: #00ff00, background: #0000ff, border: #ff0000);\n.secondary {\n    @include colors($value-map...);\n}\n```\n\n编译结果：\n\n```css\n.primary {\n    color: #ff0000;\n    background-color: #00ff00;\n    border-color: #0000ff;\n}\n\n.secondary {\n    color: #00ff00;\n    background-color: #0000ff;\n    border-color: #ff0000;\n}\n```\n\n<div class=\"tip\">\n    在 `@mixin` 中配置参数时，先写普通参数，然后是默认值参数，最后是不定参数。\n</div>\n\n## 函数指令 `@function`\n\n相比起上面的继承和动态生成，`@function` 在生成方式上自由度更高。此外，还可以嵌套上面的各种指令和操作符，对数据进行筛选、在加工，生成特定样式。在下面的代码中，混合宏根据栅格的数量，动态生成容器的宽度：\n\n```scss\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function width($n) {\n    @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n.container { \n    width: width(5); \n}\n```\n\n编译结果：\n\n```css\n.container {\n    width: 240px;\n}\n```\n\n###### 参考资料\n\n- [Sass 内建函数](http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method)","slug":"Sass","published":1,"updated":"2015-12-27T09:29:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaron000cfsdic399gblk","content":"<p>从 <a href=\"http://benfrain.com/\" target=\"_blank\" rel=\"external\">Ben Frain</a> 的书中可以看出，他是一个勇于实践、善于学习的开发者。一直以来都很关注他的动态，当他的新书《Sass 和 Compass 设计师指南》初版时，就迫不及待地入手了，这是我和 Sass 的第一次见面。后来机缘巧合翻译了 <a href=\"http://sass-guidelin.es/zh\" target=\"_blank\" rel=\"external\">Sass Guidelines</a> 和其它一些颇具实践性的 Sass 文章，零零散散至今大概有了一年的时间。</p>\n<p>以前的翻译专注于“学习”，在这篇文章之后，我将会分配更多的精力到“实践”中，做一些共享性的库或工具回馈社区。</p>\n<div class=\"tip\"><br>    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！<br></div>\n\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>Sass 扩展了 CSS 的现有语法，并提供了一些新的语法糖。在下面的简短代码中，集合了 Sass 中最常用的模块引用 <code>@import</code>、变量和嵌套：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置字符集</span></span><br><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"reset\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建变量</span></span><br><span class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$primary-color</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插值字符串\"><a href=\"#插值字符串\" class=\"headerlink\" title=\"插值字符串\"></a>插值字符串</h2><p>Sass 中的插值字符串 <code>#{$var}</code> 有两方面的作用：动态拼接字符串和去除字符串首尾的引号。示例如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> header(<span class=\"variable\">$tag</span>) &#123;</span><br><span class=\"line\">    #&#123;<span class=\"variable\">$tag</span>&#125;:before &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">\"#&#123;$tag&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 等同于 content: $tag;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> header(<span class=\"string\">\"h1\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"h1\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"父级引用符：-amp\"><a href=\"#父级引用符：-amp\" class=\"headerlink\" title=\"父级引用符：&amp;\"></a>父级引用符：<code>&amp;</code></h2><p>可以将父级引用符 <code>&amp;</code> 看做是一个值为父级选择器的插值语法：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"占位符选择器\"><a href=\"#占位符选择器\" class=\"headerlink\" title=\"占位符选择器\"></a>占位符选择器</h2><p>占位符选择器是 Sass 特有的一种选择器，声明时以 <code>%</code> 开头，编译时不会输出到 CSS 文件中，主要用于抽象组件的公共部分，配合 <code>@extend</code> 指令实现样式的继承机制：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">%<span class=\"attribute\">font</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans Pro\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %font;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans Pro\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>字符串 (string): “foo”, foo</li>\n<li>数值 (number): 1.3, 13, 10px</li>\n<li>列表 (list): ( 1.5em 1em 0 2em, Helvetica, Arial, sa ns-serif )</li>\n<li>映射 (map): ( key1: value1, key2: value2 )</li>\n<li>颜色值 (color): blue, #FFFFFF, rgb, hsl, rgba, hsla</li>\n<li>布尔值 (bool): true, false</li>\n<li>空类型 (null): null</li>\n</ul>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><ul>\n<li>赋值 <code>:</code></li>\n<li>计算 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li>\n<li>比较 <code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code></li>\n<li>逻辑 <code>and</code>、<code>or</code>、<code>not</code></li>\n</ul>\n<p>其中，<code>+</code> 除了用作算术运算之外，也可以用于拼接字符串和求取颜色值。在 Sass 中字符串分为两种：引用字符串（quoted string，外部被引号包裹）和未引用字符串（unquoted string，外部没有引号）。使用 <code>+</code> 拼接字符串时，最终生成的字符串类型为第一个运算子的字符串类型：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans \"</span> + TC;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-family</span>: sans- + <span class=\"string\">\"serif\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans TC\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>+</code> 求取颜色值时，必须保证运算子具有相同的不透明度：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">70</span>, <span class=\"number\">132</span>, <span class=\"number\">153</span>, <span class=\"number\">1</span>) + rgba(<span class=\"number\">32</span>, <span class=\"number\">68</span>, <span class=\"number\">121</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; color: #66c8ff;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">70</span>, <span class=\"number\">132</span>, <span class=\"number\">153</span>, .<span class=\"number\">9</span>) + rgba(<span class=\"number\">32</span>, <span class=\"number\">68</span>, <span class=\"number\">121</span>, .<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"comment\">// alpha channels must be equal when combining colors </span></span><br><span class=\"line\">    <span class=\"comment\">// 报错：不透明通道值必须相等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    <code>/</code> 在 CSS 中是有意义的，为了避免和 Sass 除法运算的混淆，所有的除法操作都应该使用小括号 <code>()</code> 包裹，比如使用 <code>font-size: (10px / 2)</code> 产出 <code>font-size: 5px</code>。<br></div>\n\n<h2 id=\"变量标识符\"><a href=\"#变量标识符\" class=\"headerlink\" title=\"变量标识符\"></a>变量标识符</h2><p>Sass 中的变量有三种身份：普通变量、默认值变量（<code>!default</code>）和全局变量（<code>!global</code>），而且这些变量具有作用域的概念，每个代码块 <code>{}</code> 内一个作用域，整个代码文件内也有一个作用域。</p>\n<p>当我们引用普通变量时，Sass 首先会从当前作用域开始检索变量，如果找不到就上溯到父级作用域，直到递归到最顶层的作用域：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$color</span>: orange;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 $color 重新赋值</span></span><br><span class=\"line\">    <span class=\"variable\">$color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认值变量往往用于主题的配置文件，起到标识默认值，方便后续的重写覆盖。在最顶层作用域下，变量默认具有全局性，此时使用 <code>!global</code> 并没有实际意义；在块级作用域中，可以通过 <code>!global</code> 将变量提升为全局变量，但这么做势必降低代码的可维护性，所以目前全局变量显得有些鸡肋。</p>\n</blockquote>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"@ 指令\"></a><code>@</code> 指令</h2><ul>\n<li>@import 模块引用</li>\n<li>@media 媒体查询</li>\n<li>@extend 选择器继承</li>\n<li>@at-root 嵌套提取</li>\n<li>@debug / @warn / @error 异常和测试</li>\n</ul>\n<p><code>@extend</code> 的强大无可置疑，但是复杂性也一直为人诟病，稍微控制不当就会生成冗余的选择器。归根结底，使用 <code>@extend</code> 是为了继承组件的公有样式，所以在不影响功能的基础上，应该适当的束缚它的能力。到目前为止，最优秀的实践方式就是 <code>@extend</code> 搭配占位符选择器。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">%btn &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %btn;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %btn;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-danger</span>, <span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个组合中，占位符选择器本身不会被编译到 CSS 文件中，可以节省文件体积，而且 <code>@extend</code> 只继承了单一的占位符选择器，杜绝了选择器泛滥。此外，相比起 <code>@mixin</code> 来，<code>@extend</code> 搭配占位符选择器生成的结果会聚合在同一个样式集中：</p>\n<p><img src=\"/img/mixin-vs-extend.png\" alt=\"@extend vs @mixin\"></p>\n<blockquote>\n<p>如果再上升一个层次分工的话，那就需要比较一下 <code>@mixin</code> 和 <code>@extend</code>。这两种方式都可以生成公有样式，但是仅此而已就是浪费了 <code>@mixin</code> 的能力。就目前的最佳实践来说，建议使用 <code>@extend</code> 搭配占位符选择器继承公有样式，使用 <code>@mixin</code> 产出动态样式。<code>@mixin</code> 的详细介绍见后续小节。</p>\n</blockquote>\n<h2 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h2><ul>\n<li>@if … @else if … @else … 条件判断</li>\n<li>@for $var from start through end [start, end] 循环</li>\n<li>@for $var from start to end [start, end) 循环</li>\n<li>@each … in … 遍历</li>\n<li>@while</li>\n</ul>\n<p><code>@each</code> 可以用来遍历 list 和 map 类型的数据，示例如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$btn</span>: (</span><br><span class=\"line\">    danger: red, </span><br><span class=\"line\">    primary: blue, </span><br><span class=\"line\">    warning: orange</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$type</span>, <span class=\"variable\">$color</span> in <span class=\"variable\">$btn</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.btn-</span>#&#123;<span class=\"variable\">$type</span>&#125; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏 @mixin\"></a>混合宏 <code>@mixin</code></h2><p>在 <code>@extend</code> 部分已经介绍到 <code>@mixin</code> 的一个功能是生成公有样式，但事实上，建议你避开使用该功能，而是着眼于使用 <code>@mixin</code> 动态生成共有样式，更优雅地实现组件复用：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> btn(<span class=\"variable\">$fontSize</span>, <span class=\"variable\">$borderRadius</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$borderRadius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-sm</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">14px</span>, 3px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">18px</span>, 5px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-sm</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@mixin</code> 的参数除了上面示例的普通参数，还包括默认值参数和不定参数。默认值参数通过提供默认样式，可以在参数缺失时，保障代码的健壮性：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> btn(<span class=\"variable\">$fontSize</span>, <span class=\"variable\">$borderRadius</span>: 5px) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$borderRadius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">18px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不定参数可以保存零个或多个值，最常用的地方就是为同一属性添加多个值，比如多重阴影：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow(<span class=\"variable\">$shadows</span>...) &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadows</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> box-shadow(<span class=\"number\">0px</span> 4px 5px <span class=\"number\">#666</span>, 2px 6px 10px <span class=\"number\">#999</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shadows</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，在传参时也可以使用不定参数：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> colors(<span class=\"variable\">$text</span>, <span class=\"variable\">$background</span>, <span class=\"variable\">$border</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$text</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$values</span>: <span class=\"number\">#ff0000</span>, <span class=\"number\">#00ff00</span>, <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.primary</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> colors(<span class=\"variable\">$values</span>...);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$value-map</span>: (text: <span class=\"number\">#00ff00</span>, background: <span class=\"number\">#0000ff</span>, border: <span class=\"number\">#ff0000</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.secondary</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> colors(<span class=\"variable\">$value-map</span>...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.secondary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    在 <code>@mixin</code> 中配置参数时，先写普通参数，然后是默认值参数，最后是不定参数。<br></div>\n\n<h2 id=\"函数指令-function\"><a href=\"#函数指令-function\" class=\"headerlink\" title=\"函数指令 @function\"></a>函数指令 <code>@function</code></h2><p>相比起上面的继承和动态生成，<code>@function</code> 在生成方式上自由度更高。此外，还可以嵌套上面的各种指令和操作符，对数据进行筛选、在加工，生成特定样式。在下面的代码中，混合宏根据栅格的数量，动态生成容器的宽度：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$grid-width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"variable\">$gutter-width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@function width(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">    @return <span class=\"variable\">$n</span> * <span class=\"variable\">$grid-width</span> + (<span class=\"variable\">$n</span> - 1) * <span class=\"variable\">$gutter-width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width(<span class=\"number\">5</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method\" target=\"_blank\" rel=\"external\">Sass 内建函数</a></li>\n</ul>\n","excerpt":"<p>从 <a href=\"http://benfrain.com/\">Ben Frain</a> 的书中可以看出，他是一个勇于实践、善于学习的开发者。一直以来都很关注他的动态，当他的新书《Sass 和 Compass 设计师指南》初版时，就迫不及待地入手了，这是我和 Sass 的第一次见面。后来机缘巧合翻译了 <a href=\"http://sass-guidelin.es/zh\">Sass Guidelines</a> 和其它一些颇具实践性的 Sass 文章，零零散散至今大概有了一年的时间。</p>\n<p>以前的翻译专注于“学习”，在这篇文章之后，我将会分配更多的精力到“实践”中，做一些共享性的库或工具回馈社区。</p>\n<div class=\"tip\"><br>    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！<br></div>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>Sass 扩展了 CSS 的现有语法，并提供了一些新的语法糖。在下面的简短代码中，集合了 Sass 中最常用的模块引用 <code>@import</code>、变量和嵌套：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置字符集</span></span><br><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"reset\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建变量</span></span><br><span class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$primary-color</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插值字符串\"><a href=\"#插值字符串\" class=\"headerlink\" title=\"插值字符串\"></a>插值字符串</h2><p>Sass 中的插值字符串 <code>#{$var}</code> 有两方面的作用：动态拼接字符串和去除字符串首尾的引号。示例如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> header(<span class=\"variable\">$tag</span>) &#123;</span><br><span class=\"line\">    #&#123;<span class=\"variable\">$tag</span>&#125;:before &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">\"#&#123;$tag&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 等同于 content: $tag;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> header(<span class=\"string\">\"h1\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"h1\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"父级引用符：-amp\"><a href=\"#父级引用符：-amp\" class=\"headerlink\" title=\"父级引用符：&amp;\"></a>父级引用符：<code>&amp;</code></h2><p>可以将父级引用符 <code>&amp;</code> 看做是一个值为父级选择器的插值语法：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"占位符选择器\"><a href=\"#占位符选择器\" class=\"headerlink\" title=\"占位符选择器\"></a>占位符选择器</h2><p>占位符选择器是 Sass 特有的一种选择器，声明时以 <code>%</code> 开头，编译时不会输出到 CSS 文件中，主要用于抽象组件的公共部分，配合 <code>@extend</code> 指令实现样式的继承机制：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">%<span class=\"attribute\">font</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans Pro\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %font;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans Pro\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>字符串 (string): “foo”, foo</li>\n<li>数值 (number): 1.3, 13, 10px</li>\n<li>列表 (list): ( 1.5em 1em 0 2em, Helvetica, Arial, sa ns-serif )</li>\n<li>映射 (map): ( key1: value1, key2: value2 )</li>\n<li>颜色值 (color): blue, #FFFFFF, rgb, hsl, rgba, hsla</li>\n<li>布尔值 (bool): true, false</li>\n<li>空类型 (null): null</li>\n</ul>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><ul>\n<li>赋值 <code>:</code></li>\n<li>计算 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li>\n<li>比较 <code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code></li>\n<li>逻辑 <code>and</code>、<code>or</code>、<code>not</code></li>\n</ul>\n<p>其中，<code>+</code> 除了用作算术运算之外，也可以用于拼接字符串和求取颜色值。在 Sass 中字符串分为两种：引用字符串（quoted string，外部被引号包裹）和未引用字符串（unquoted string，外部没有引号）。使用 <code>+</code> 拼接字符串时，最终生成的字符串类型为第一个运算子的字符串类型：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans \"</span> + TC;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-family</span>: sans- + <span class=\"string\">\"serif\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Source Sans TC\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>+</code> 求取颜色值时，必须保证运算子具有相同的不透明度：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: rgba(<span class=\"number\">70</span>, <span class=\"number\">132</span>, <span class=\"number\">153</span>, <span class=\"number\">1</span>) + rgba(<span class=\"number\">32</span>, <span class=\"number\">68</span>, <span class=\"number\">121</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; color: #66c8ff;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">70</span>, <span class=\"number\">132</span>, <span class=\"number\">153</span>, .<span class=\"number\">9</span>) + rgba(<span class=\"number\">32</span>, <span class=\"number\">68</span>, <span class=\"number\">121</span>, .<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"comment\">// alpha channels must be equal when combining colors </span></span><br><span class=\"line\">    <span class=\"comment\">// 报错：不透明通道值必须相等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    <code>/</code> 在 CSS 中是有意义的，为了避免和 Sass 除法运算的混淆，所有的除法操作都应该使用小括号 <code>()</code> 包裹，比如使用 <code>font-size: (10px / 2)</code> 产出 <code>font-size: 5px</code>。<br></div>\n\n<h2 id=\"变量标识符\"><a href=\"#变量标识符\" class=\"headerlink\" title=\"变量标识符\"></a>变量标识符</h2><p>Sass 中的变量有三种身份：普通变量、默认值变量（<code>!default</code>）和全局变量（<code>!global</code>），而且这些变量具有作用域的概念，每个代码块 <code>{}</code> 内一个作用域，整个代码文件内也有一个作用域。</p>\n<p>当我们引用普通变量时，Sass 首先会从当前作用域开始检索变量，如果找不到就上溯到父级作用域，直到递归到最顶层的作用域：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$color</span>: orange;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 $color 重新赋值</span></span><br><span class=\"line\">    <span class=\"variable\">$color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认值变量往往用于主题的配置文件，起到标识默认值，方便后续的重写覆盖。在最顶层作用域下，变量默认具有全局性，此时使用 <code>!global</code> 并没有实际意义；在块级作用域中，可以通过 <code>!global</code> 将变量提升为全局变量，但这么做势必降低代码的可维护性，所以目前全局变量显得有些鸡肋。</p>\n</blockquote>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"@ 指令\"></a><code>@</code> 指令</h2><ul>\n<li>@import 模块引用</li>\n<li>@media 媒体查询</li>\n<li>@extend 选择器继承</li>\n<li>@at-root 嵌套提取</li>\n<li>@debug / @warn / @error 异常和测试</li>\n</ul>\n<p><code>@extend</code> 的强大无可置疑，但是复杂性也一直为人诟病，稍微控制不当就会生成冗余的选择器。归根结底，使用 <code>@extend</code> 是为了继承组件的公有样式，所以在不影响功能的基础上，应该适当的束缚它的能力。到目前为止，最优秀的实践方式就是 <code>@extend</code> 搭配占位符选择器。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">%btn &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %btn;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %btn;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-danger</span>, <span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-default</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个组合中，占位符选择器本身不会被编译到 CSS 文件中，可以节省文件体积，而且 <code>@extend</code> 只继承了单一的占位符选择器，杜绝了选择器泛滥。此外，相比起 <code>@mixin</code> 来，<code>@extend</code> 搭配占位符选择器生成的结果会聚合在同一个样式集中：</p>\n<p><img src=\"/img/mixin-vs-extend.png\" alt=\"@extend vs @mixin\"></p>\n<blockquote>\n<p>如果再上升一个层次分工的话，那就需要比较一下 <code>@mixin</code> 和 <code>@extend</code>。这两种方式都可以生成公有样式，但是仅此而已就是浪费了 <code>@mixin</code> 的能力。就目前的最佳实践来说，建议使用 <code>@extend</code> 搭配占位符选择器继承公有样式，使用 <code>@mixin</code> 产出动态样式。<code>@mixin</code> 的详细介绍见后续小节。</p>\n</blockquote>\n<h2 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h2><ul>\n<li>@if … @else if … @else … 条件判断</li>\n<li>@for $var from start through end [start, end] 循环</li>\n<li>@for $var from start to end [start, end) 循环</li>\n<li>@each … in … 遍历</li>\n<li>@while</li>\n</ul>\n<p><code>@each</code> 可以用来遍历 list 和 map 类型的数据，示例如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$btn</span>: (</span><br><span class=\"line\">    danger: red, </span><br><span class=\"line\">    primary: blue, </span><br><span class=\"line\">    warning: orange</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$type</span>, <span class=\"variable\">$color</span> in <span class=\"variable\">$btn</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.btn-</span>#&#123;<span class=\"variable\">$type</span>&#125; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-danger</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏 @mixin\"></a>混合宏 <code>@mixin</code></h2><p>在 <code>@extend</code> 部分已经介绍到 <code>@mixin</code> 的一个功能是生成公有样式，但事实上，建议你避开使用该功能，而是着眼于使用 <code>@mixin</code> 动态生成共有样式，更优雅地实现组件复用：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> btn(<span class=\"variable\">$fontSize</span>, <span class=\"variable\">$borderRadius</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$borderRadius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-sm</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">14px</span>, 3px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">18px</span>, 5px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-sm</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@mixin</code> 的参数除了上面示例的普通参数，还包括默认值参数和不定参数。默认值参数通过提供默认样式，可以在参数缺失时，保障代码的健壮性：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> btn(<span class=\"variable\">$fontSize</span>, <span class=\"variable\">$borderRadius</span>: 5px) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$borderRadius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> btn(<span class=\"number\">18px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-lg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不定参数可以保存零个或多个值，最常用的地方就是为同一属性添加多个值，比如多重阴影：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow(<span class=\"variable\">$shadows</span>...) &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadows</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadows</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> box-shadow(<span class=\"number\">0px</span> 4px 5px <span class=\"number\">#666</span>, 2px 6px 10px <span class=\"number\">#999</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shadows</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"number\">#666</span>, <span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">10px</span> <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，在传参时也可以使用不定参数：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> colors(<span class=\"variable\">$text</span>, <span class=\"variable\">$background</span>, <span class=\"variable\">$border</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$text</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$values</span>: <span class=\"number\">#ff0000</span>, <span class=\"number\">#00ff00</span>, <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.primary</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> colors(<span class=\"variable\">$values</span>...);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$value-map</span>: (text: <span class=\"number\">#00ff00</span>, background: <span class=\"number\">#0000ff</span>, border: <span class=\"number\">#ff0000</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.secondary</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> colors(<span class=\"variable\">$value-map</span>...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.secondary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\"><br>    在 <code>@mixin</code> 中配置参数时，先写普通参数，然后是默认值参数，最后是不定参数。<br></div>\n\n<h2 id=\"函数指令-function\"><a href=\"#函数指令-function\" class=\"headerlink\" title=\"函数指令 @function\"></a>函数指令 <code>@function</code></h2><p>相比起上面的继承和动态生成，<code>@function</code> 在生成方式上自由度更高。此外，还可以嵌套上面的各种指令和操作符，对数据进行筛选、在加工，生成特定样式。在下面的代码中，混合宏根据栅格的数量，动态生成容器的宽度：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$grid-width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"variable\">$gutter-width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@function width(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">    @return <span class=\"variable\">$n</span> * <span class=\"variable\">$grid-width</span> + (<span class=\"variable\">$n</span> - 1) * <span class=\"variable\">$gutter-width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width(<span class=\"number\">5</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method\">Sass 内建函数</a></li>\n</ul>"},{"title":"Inline* and Absolute","date":"2015-12-06T03:32:17.000Z","_content":"\n在一个容器中，所有元素都是 inline / inline-block 类型，此时可以使用 absolute + margin 的方式实现相对定位，而且相对定位的位置就是脱离文档流之前的位置。\n\n![absolute and margin](/img/inline-and-absolute.png)\n\n<!-- more -->\n\n###### 在线示例\n\n- [absolute and marign](http://codepen.io/pinggod/pen/WrNJmE)","source":"_posts/inline-and-absolute.md","raw":"title: 'inline* and absolute'\ndate: 2015-12-06 11:32:17\n---\n\n在一个容器中，所有元素都是 inline / inline-block 类型，此时可以使用 absolute + margin 的方式实现相对定位，而且相对定位的位置就是脱离文档流之前的位置。\n\n![absolute and margin](/img/inline-and-absolute.png)\n\n<!-- more -->\n\n###### 在线示例\n\n- [absolute and marign](http://codepen.io/pinggod/pen/WrNJmE)","slug":"inline-and-absolute","published":1,"updated":"2015-12-27T09:31:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarop000dfsdim2lvk4z0","content":"<p>在一个容器中，所有元素都是 inline / inline-block 类型，此时可以使用 absolute + margin 的方式实现相对定位，而且相对定位的位置就是脱离文档流之前的位置。</p>\n<p><img src=\"/img/inline-and-absolute.png\" alt=\"absolute and margin\"></p>\n<a id=\"more\"></a>\n<h6 id=\"在线示例\"><a href=\"#在线示例\" class=\"headerlink\" title=\"在线示例\"></a>在线示例</h6><ul>\n<li><a href=\"http://codepen.io/pinggod/pen/WrNJmE\" target=\"_blank\" rel=\"external\">absolute and marign</a></li>\n</ul>\n","excerpt":"<p>在一个容器中，所有元素都是 inline / inline-block 类型，此时可以使用 absolute + margin 的方式实现相对定位，而且相对定位的位置就是脱离文档流之前的位置。</p>\n<p><img src=\"/img/inline-and-absolute.png\" alt=\"absolute and margin\"></p>","more":"<h6 id=\"在线示例\"><a href=\"#在线示例\" class=\"headerlink\" title=\"在线示例\"></a>在线示例</h6><ul>\n<li><a href=\"http://codepen.io/pinggod/pen/WrNJmE\">absolute and marign</a></li>\n</ul>"},{"title":"Truthy and Falsy","date":"2016-02-12T02:30:54.000Z","desc":"javascript knowledge of truthy value and falsy value","_content":"\nTruty value and falsy value is a little bit different from Boolean value. In JavaScript, the truthy value is strict equal to `true` when evaluated in a Boolean context, and the falsy value is evaluted to `false`.\n\nThe following value is common falsy value:\n\n- false\n- null\n- undefined\n- 0\n- NaN\n- ''\n- document.all\n\n<!-- more -->\n\nAll value are truthy value except falsy value:\n\n```js\n!!{} === true\n// => true\n\n!!document.all === false\n// => true\n```\n\n###### Reference\n\n- [MDN - Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy)\n- [MDN - Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)","source":"_posts/Truthy-and-Falsy.md","raw":"title: Truthy and Falsy\ndate: 2016-02-12 10:30:54\ndesc: javascript knowledge of truthy value and falsy value\n---\n\nTruty value and falsy value is a little bit different from Boolean value. In JavaScript, the truthy value is strict equal to `true` when evaluated in a Boolean context, and the falsy value is evaluted to `false`.\n\nThe following value is common falsy value:\n\n- false\n- null\n- undefined\n- 0\n- NaN\n- ''\n- document.all\n\n<!-- more -->\n\nAll value are truthy value except falsy value:\n\n```js\n!!{} === true\n// => true\n\n!!document.all === false\n// => true\n```\n\n###### Reference\n\n- [MDN - Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy)\n- [MDN - Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)","slug":"Truthy-and-Falsy","published":1,"updated":"2016-02-17T05:16:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaror000efsdix4cjzusy","content":"<p>Truty value and falsy value is a little bit different from Boolean value. In JavaScript, the truthy value is strict equal to <code>true</code> when evaluated in a Boolean context, and the falsy value is evaluted to <code>false</code>.</p>\n<p>The following value is common falsy value:</p>\n<ul>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>NaN</li>\n<li>‘’</li>\n<li>document.all</li>\n</ul>\n<a id=\"more\"></a>\n<p>All value are truthy value except falsy value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">!!&#123;&#125; === <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">!!<span class=\"built_in\">document</span>.all === <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h6><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"external\">MDN - Truthy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"external\">MDN - Falsy</a></li>\n</ul>\n","excerpt":"<p>Truty value and falsy value is a little bit different from Boolean value. In JavaScript, the truthy value is strict equal to <code>true</code> when evaluated in a Boolean context, and the falsy value is evaluted to <code>false</code>.</p>\n<p>The following value is common falsy value:</p>\n<ul>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>NaN</li>\n<li>‘’</li>\n<li>document.all</li>\n</ul>","more":"<p>All value are truthy value except falsy value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">!!&#123;&#125; === <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">!!<span class=\"built_in\">document</span>.all === <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h6><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">MDN - Truthy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">MDN - Falsy</a></li>\n</ul>"},{"title":"Void and Undefined","date":"2015-11-30T12:18:37.000Z","_content":"\n一直以来，`undefined` 都不是 JavaScript 的关键字或保留字，这意味着我们可以修改 window.undefined 的值。由于 undefined 会被频繁调用作为比较运算的操作数，所以在 ES5 规范之后，window.undefined 被定义为不可写、不可配置的属性。常见的 undefined 列述如下:\n\n- 变量声明后未赋值，则变量会被自动赋值为 undefined\n- 函数中定义了一些形参，如果传入的实参少于预定义的形参，那么有一些形参就会匹配不到实参，继而会被自动赋值为 undefined\n- 没有返回值的函数，默认返回 undefined\n\n`void (expression)`，void 作为一个运算符，无论表达式的内容是什么，只要跟在 void 之后都会被调用执行，执行完毕后 void 操作符返回 undefined。简而言之，使用 void 运算符有三种用处：生成 undefined；让函数立即执行；充当 `javascript:` 协议的 URI。\n\n<!-- more -->\n\n## 生成 undefined\n\n使用 `void 0` 生成 undefined 的做法由来已久，既减少了在原形链上查找 window.undefined 的时间，也避免了误用被修改过的 undefined。\n\n```js\nfunction checkLogin (loginName) {\n    if (loginName === void 0) {\n        console.log('Wrong!');\n    } \n}\n\ncheckLogin();\n// => 'Wrong!'\n```\n\n## 立即执行函数\n\n**运算符和函数组合使用，可以让函数立即执行。**实际上，有许多运算符可以让函数立即执行，比如 +、-、!、~ 以及本文提到的 void 等运算符。此外，还有最常见的小括号（分组运算符）：\n\n```js\n(function(){\n    console.log('立即执行');\n})();\n// => '立即执行'\n```\n\n## 充当 `javascript:` 协议的 URI\n\n对于网页中的点赞、收藏等按钮，如果使用 a 标签来实现的话，往往会用到 `href=\"javascript:void(0)\"` 等类似的代码，这段代码的作用是点击链接时让页面不跳转。\n\n在 href=\"javascript:void(0)\" 中，使用了一个以 `javascript:` 协议开头的 URI，浏览器默认会对冒号后面的代码求值，然后将结果显示在新的页面，但有一种情况例外，如果结果是 undefined，浏览器就不会刷新页面渲染新值了。\n\n实际上，我们有很多方式实现点赞、收藏的效果，无需使用这么 Hack 的方式——虽然这确实很方便。\n\n> `javascript:` 协议声明了 URL 的主体是任意的 javascript 代码，由 javascript 解释器编译执行，通常使用 `javascript:URL` 执行某些不改变当前页面文档的代码，要做到这一点，必须确保 URL 的最后一条语句没有返回值，比如使用 `void 0`。\n\n## 参考资料\n\n- [undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n- [void 运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void)\n- [谈谈Javascript中的void操作符](http://segmentfault.com/a/1190000000474941)\n- [JavaScript中伪协议 javascript:使用探讨](http://www.jb51.net/article/52358.htm)","source":"_posts/void-and-undefined.md","raw":"title: void and undefined\ndate: 2015-11-30 20:18:37\n---\n\n一直以来，`undefined` 都不是 JavaScript 的关键字或保留字，这意味着我们可以修改 window.undefined 的值。由于 undefined 会被频繁调用作为比较运算的操作数，所以在 ES5 规范之后，window.undefined 被定义为不可写、不可配置的属性。常见的 undefined 列述如下:\n\n- 变量声明后未赋值，则变量会被自动赋值为 undefined\n- 函数中定义了一些形参，如果传入的实参少于预定义的形参，那么有一些形参就会匹配不到实参，继而会被自动赋值为 undefined\n- 没有返回值的函数，默认返回 undefined\n\n`void (expression)`，void 作为一个运算符，无论表达式的内容是什么，只要跟在 void 之后都会被调用执行，执行完毕后 void 操作符返回 undefined。简而言之，使用 void 运算符有三种用处：生成 undefined；让函数立即执行；充当 `javascript:` 协议的 URI。\n\n<!-- more -->\n\n## 生成 undefined\n\n使用 `void 0` 生成 undefined 的做法由来已久，既减少了在原形链上查找 window.undefined 的时间，也避免了误用被修改过的 undefined。\n\n```js\nfunction checkLogin (loginName) {\n    if (loginName === void 0) {\n        console.log('Wrong!');\n    } \n}\n\ncheckLogin();\n// => 'Wrong!'\n```\n\n## 立即执行函数\n\n**运算符和函数组合使用，可以让函数立即执行。**实际上，有许多运算符可以让函数立即执行，比如 +、-、!、~ 以及本文提到的 void 等运算符。此外，还有最常见的小括号（分组运算符）：\n\n```js\n(function(){\n    console.log('立即执行');\n})();\n// => '立即执行'\n```\n\n## 充当 `javascript:` 协议的 URI\n\n对于网页中的点赞、收藏等按钮，如果使用 a 标签来实现的话，往往会用到 `href=\"javascript:void(0)\"` 等类似的代码，这段代码的作用是点击链接时让页面不跳转。\n\n在 href=\"javascript:void(0)\" 中，使用了一个以 `javascript:` 协议开头的 URI，浏览器默认会对冒号后面的代码求值，然后将结果显示在新的页面，但有一种情况例外，如果结果是 undefined，浏览器就不会刷新页面渲染新值了。\n\n实际上，我们有很多方式实现点赞、收藏的效果，无需使用这么 Hack 的方式——虽然这确实很方便。\n\n> `javascript:` 协议声明了 URL 的主体是任意的 javascript 代码，由 javascript 解释器编译执行，通常使用 `javascript:URL` 执行某些不改变当前页面文档的代码，要做到这一点，必须确保 URL 的最后一条语句没有返回值，比如使用 `void 0`。\n\n## 参考资料\n\n- [undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n- [void 运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void)\n- [谈谈Javascript中的void操作符](http://segmentfault.com/a/1190000000474941)\n- [JavaScript中伪协议 javascript:使用探讨](http://www.jb51.net/article/52358.htm)","slug":"void-and-undefined","published":1,"updated":"2015-12-15T09:15:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zaros000ffsdiwbafyy3k","content":"<p>一直以来，<code>undefined</code> 都不是 JavaScript 的关键字或保留字，这意味着我们可以修改 window.undefined 的值。由于 undefined 会被频繁调用作为比较运算的操作数，所以在 ES5 规范之后，window.undefined 被定义为不可写、不可配置的属性。常见的 undefined 列述如下:</p>\n<ul>\n<li>变量声明后未赋值，则变量会被自动赋值为 undefined</li>\n<li>函数中定义了一些形参，如果传入的实参少于预定义的形参，那么有一些形参就会匹配不到实参，继而会被自动赋值为 undefined</li>\n<li>没有返回值的函数，默认返回 undefined</li>\n</ul>\n<p><code>void (expression)</code>，void 作为一个运算符，无论表达式的内容是什么，只要跟在 void 之后都会被调用执行，执行完毕后 void 操作符返回 undefined。简而言之，使用 void 运算符有三种用处：生成 undefined；让函数立即执行；充当 <code>javascript:</code> 协议的 URI。</p>\n<a id=\"more\"></a>\n<h2 id=\"生成-undefined\"><a href=\"#生成-undefined\" class=\"headerlink\" title=\"生成 undefined\"></a>生成 undefined</h2><p>使用 <code>void 0</code> 生成 undefined 的做法由来已久，既减少了在原形链上查找 window.undefined 的时间，也避免了误用被修改过的 undefined。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkLogin</span> (<span class=\"params\">loginName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginName === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wrong!'</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkLogin();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'Wrong!'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p><strong>运算符和函数组合使用，可以让函数立即执行。</strong>实际上，有许多运算符可以让函数立即执行，比如 +、-、!、~ 以及本文提到的 void 等运算符。此外，还有最常见的小括号（分组运算符）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'立即执行'</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; '立即执行'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"充当-javascript-协议的-URI\"><a href=\"#充当-javascript-协议的-URI\" class=\"headerlink\" title=\"充当 javascript: 协议的 URI\"></a>充当 <code>javascript:</code> 协议的 URI</h2><p>对于网页中的点赞、收藏等按钮，如果使用 a 标签来实现的话，往往会用到 <code>href=&quot;javascript:void(0)&quot;</code> 等类似的代码，这段代码的作用是点击链接时让页面不跳转。</p>\n<p>在 href=”javascript:void(0)” 中，使用了一个以 <code>javascript:</code> 协议开头的 URI，浏览器默认会对冒号后面的代码求值，然后将结果显示在新的页面，但有一种情况例外，如果结果是 undefined，浏览器就不会刷新页面渲染新值了。</p>\n<p>实际上，我们有很多方式实现点赞、收藏的效果，无需使用这么 Hack 的方式——虽然这确实很方便。</p>\n<blockquote>\n<p><code>javascript:</code> 协议声明了 URL 的主体是任意的 javascript 代码，由 javascript 解释器编译执行，通常使用 <code>javascript:URL</code> 执行某些不改变当前页面文档的代码，要做到这一点，必须确保 URL 的最后一条语句没有返回值，比如使用 <code>void 0</code>。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" target=\"_blank\" rel=\"external\">undefined</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void\" target=\"_blank\" rel=\"external\">void 运算符</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000474941\" target=\"_blank\" rel=\"external\">谈谈Javascript中的void操作符</a></li>\n<li><a href=\"http://www.jb51.net/article/52358.htm\" target=\"_blank\" rel=\"external\">JavaScript中伪协议 javascript:使用探讨</a></li>\n</ul>\n","excerpt":"<p>一直以来，<code>undefined</code> 都不是 JavaScript 的关键字或保留字，这意味着我们可以修改 window.undefined 的值。由于 undefined 会被频繁调用作为比较运算的操作数，所以在 ES5 规范之后，window.undefined 被定义为不可写、不可配置的属性。常见的 undefined 列述如下:</p>\n<ul>\n<li>变量声明后未赋值，则变量会被自动赋值为 undefined</li>\n<li>函数中定义了一些形参，如果传入的实参少于预定义的形参，那么有一些形参就会匹配不到实参，继而会被自动赋值为 undefined</li>\n<li>没有返回值的函数，默认返回 undefined</li>\n</ul>\n<p><code>void (expression)</code>，void 作为一个运算符，无论表达式的内容是什么，只要跟在 void 之后都会被调用执行，执行完毕后 void 操作符返回 undefined。简而言之，使用 void 运算符有三种用处：生成 undefined；让函数立即执行；充当 <code>javascript:</code> 协议的 URI。</p>","more":"<h2 id=\"生成-undefined\"><a href=\"#生成-undefined\" class=\"headerlink\" title=\"生成 undefined\"></a>生成 undefined</h2><p>使用 <code>void 0</code> 生成 undefined 的做法由来已久，既减少了在原形链上查找 window.undefined 的时间，也避免了误用被修改过的 undefined。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkLogin</span> (<span class=\"params\">loginName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginName === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wrong!'</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkLogin();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'Wrong!'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p><strong>运算符和函数组合使用，可以让函数立即执行。</strong>实际上，有许多运算符可以让函数立即执行，比如 +、-、!、~ 以及本文提到的 void 等运算符。此外，还有最常见的小括号（分组运算符）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'立即执行'</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// =&gt; '立即执行'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"充当-javascript-协议的-URI\"><a href=\"#充当-javascript-协议的-URI\" class=\"headerlink\" title=\"充当 javascript: 协议的 URI\"></a>充当 <code>javascript:</code> 协议的 URI</h2><p>对于网页中的点赞、收藏等按钮，如果使用 a 标签来实现的话，往往会用到 <code>href=&quot;javascript:void(0)&quot;</code> 等类似的代码，这段代码的作用是点击链接时让页面不跳转。</p>\n<p>在 href=”javascript:void(0)” 中，使用了一个以 <code>javascript:</code> 协议开头的 URI，浏览器默认会对冒号后面的代码求值，然后将结果显示在新的页面，但有一种情况例外，如果结果是 undefined，浏览器就不会刷新页面渲染新值了。</p>\n<p>实际上，我们有很多方式实现点赞、收藏的效果，无需使用这么 Hack 的方式——虽然这确实很方便。</p>\n<blockquote>\n<p><code>javascript:</code> 协议声明了 URL 的主体是任意的 javascript 代码，由 javascript 解释器编译执行，通常使用 <code>javascript:URL</code> 执行某些不改变当前页面文档的代码，要做到这一点，必须确保 URL 的最后一条语句没有返回值，比如使用 <code>void 0</code>。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void\">void 运算符</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000474941\">谈谈Javascript中的void操作符</a></li>\n<li><a href=\"http://www.jb51.net/article/52358.htm\">JavaScript中伪协议 javascript:使用探讨</a></li>\n</ul>"},{"title":"Mongodb","date":"2016-01-28T07:58:12.000Z","_content":"\nMongodb 提供了 Homebrew 的安装方式，安装过程如下：\n\n```bash\nbrew update\nbrew install mongodb\nmkdir -p /data/db\nchmod u+rw /data/db\nmongod\n```\n\n<!-- more -->\n\nMongodb 安装完全后，在 bin 文件夹下有以下可执行程序：\n\n- `mongod`，mongodb 的执行和部署程序\n- `mongo`，连接 mongodb 服务器的客户端\n- `mongoimport / mongoexport`，mongodb 数据导入导出程序\n- `mongoreestore / mongodump`，mongodb 二进制数据导入导出程序，常用做数据备份和恢复\n- `mongooplog`，操作日志记录程序\n- `mongostat`，mongodb 状态监控和查询程序\n\nMongodb 数据库的简单组成结构及分工职责：\n\n- `data`，存储数据库的数据文件\n- `log`，存储数据库的日志文件\n- `bin`，存储数据库的可执行文件\n- `conf`，存储数据库的配置文件\n\n创建一个轻量的 Mongodb 数据库：\n\n```bash\nmkdir mongodb-in-action\ncd mongodb-in-action\nmkdir data log conf bin\ncp /usr/local/Cellar/mongodb/3.2.1/bin/{mongod,mongo} ./bin/\ntouch conf/mongod.conf\n```\n\n`conf/mongod.conf` 是这个数据库的配置文件，内容如下：\n\n```bash\nport = 12345\n\ndbpath = data\nlogpath = log/mongod.log\n\n# 是否启用后台进程\nfork = true\n```\n\n然后使用指定的配置文件启动 Mongodb 服务器：\n\n```bash\n./bin/mongod -f ./conf/mongod.conf\n```\n\n接下来我们使用 `mongo` 连接数据库，连接之前查看 `mongo --help` 信息：\n\n- 查看第二行的 `usage` 了解使用方式\n- 查看第三行开始的示例了解连接格式\n- 查看 options 字段下的内容了解可用参数\n- 查看 Authentication Options 字段下的内容了解认证登录的方式\n\n接下来连接 `mongodb-in-action` 的 test 数据库:\n\n```bash\n./bin/mongo 127.0.0.1:12345/test\n```\n\n在 mongo 客户端中关闭 mongodb 数据库：\n\n```js\nuse admin\ndb.shutdownServer()\n```\n\n## 基本操作\n\nMongodb 数据库的常用操作：\n\n- `show dbs`，显示所有数据库\n- `use dbname`，切换到 dbname 数据库\n- `db.dropDatabase()`，删除当前数据库\n\n```js\nuse admin\n\n// 显示集合\nshow collections\n\n// 简单插入数据\ndb.imooc_collections.insert({ x: 1})\n\n// 简单查询数据\ndb.imooc_collections.find()\n\n// 使用 Javascript 语法插入多条数据\nfor ( var i = 0; i < 10; i++) {\n    db.imooc_collections.insert({ x: i * 5})\n}\n\n// 统计数据量\ndb.imooc_collections.find().count()\n\n// skip() 跳过数据\n// limit() 限制返回的数据长度\n// sort() 数据排序\ndb.imooc_collections.find().skip(3).limit(2).sort({x:1})\n\n// 简单更新数据\ndb.imooc_collections.update( {x: 1}, {x: 999})\n\n// 使用 $set 操作符进行局部更新\ndb.imooc_collections.insert( { x: 1, y: 2, z: 3} )\ndb.imooc_collections.update( { y: 2 }, { $set: { z: 0 } } )\n\n// Mongodb 默认更新找到的第一条数据\n// 同时更新多条数据需要是，第二个 JSON 参数必须是 $set \n// 第三个参数表示匹配不到数据时自动插入更新数据\n// 第四个参数表示是否同时更新多条记录\ndb.imooc_collections.update( { x: 999 }, { $set: { x: 321 } }, false, true )\n\n// 删除数据使用 remove()，该方法参数不能为空\ndb.imooc_collections.remove( {x: 0} )\n\n// 删除整个集合或者表\ndb.imooc_collections.drop()\n```\n\n## 索引\n\n索引是对数据库单列或多列进行排序的结构，使用索引可以快速访问数据库中的特定信息。Mongodb 中的索引主要分为以下几种：\n\n- \\_id 索引。\\_id 索引是大多数集合默认创建的索引类型，对于每一个插入的数据，Mongodb 都会自动生成一条唯一的 \\_id 字段\n- 单键索引，单键索引是最普通的索引，值为单一的值，比如字符串、数值或日期，不会自动创建\n- 多键索引，与单键索引不同的地方就在于它的值可以是复合类型数据\n- 复合索引，用于有多个查询条件的情景中\n- 过期索引，指在特定时间后会过期的索引，索引过期后，相应的数据也会被删除，常用于存储登录信息、存储日志等数据。存储在过期索引字段的值必须是指定的事件类型（ISODate 或者 ISODate 数组)\n- 全文索引，对字符串和字符串数组创建全文可搜索的索引\n- 地理位置索引，\n\n```js\n// 查看字段是否存在\ndb.imooc_collections.find({ x: { $exists: true } } )\n\n// 查看当前集合的所有索引\ndb.imooc_collections.getIndexes()\n\n// 创建单键索引\ndb.imooc_collections.ensureIndex({ x: 1 })\n\n// 创建多键索引\n// 如果插入的是数组，默认添加多键索引\ndb.imooc_collections.insert({ x: [1,2,3,4,5] })\n\n// 创建复合索引\ndb.imooc_collections.ensureIndex({ x: 1, y: 2 })\n\n// 创建过期数据\ndb.imooc_collections.insert({ x: new Date() })\n\n// 创建过期索引\ndb.imooc_collections.ensureIndex({ x: 1 }, { expireAfterSeconds: 10 } )\n\n// 创建全文索引\ndb.articles.ensureIndex({ key: \"text\" })\ndb.articles.ensureIndex({ k_1: \"text\", k_2: \"text\" })\ndb.articles.ensureIndex({ \"$**\": \"text\" })\n\n// 全文索引示例\ndb.article.insert({ \"article\": \"aa bb cc\" })\ndb.article.insert({ \"article\": \"aa bb cc dd\" })\ndb.article.insert({ \"article\": \"aa bb cc dd ee\" })\ndb.article.find({ $text: { $search: \"cc\" } } )\n\n// 全文索引相似度查询\ndb.article.find({ \n        $text: { $search: \"aa bb\" } \n    }, { \n        score: { $meta: \"textScore\" } \n})\n.sort({ \n    score: { $meta: \"textScore\" } \n}) \n```\n\n全文索引支持相似度查询，相似度查询的格式是在查询条件后添加字段：` { score: { $meta: \"textScore\" } }`，配合 sort 方法可以根据相似度对搜索结果进行排序。全文查找的注意点：\n\n- `$search: \"aa bb cc\"`，查询匹配 aa/bb/cc 其中之一的项\n- `$search: \"aa bb -cc\"`，查询匹配 aa/bb 其中之一但不包含 cc 的项\n- `$search: \"\\\"aa\\\" \\\"bb\\\"\"`，查询同时包含 aa/bb 的项\n\n索引的四个重要特性，这四个特性也是 ensureIndex() 的四个可选参数：\n\n- 名字\n- 唯一性\n- 稀疏性\n- 是否定时删除\n\n```js\ndb.imooc.ensureIndex(\n    { x: 1 }, \n    { name: \"xIndex\" },\n    { unique: true },\n    { sparse: true },\n    { expireAfterSconds: 10 }\n)\n```\n\n## 地理位置索引\n\n地址位置索引用于在 mongodb 中存储位置信息，创建后，各个位置之间可以相互检索。地理位置索引分为两类：2d 索引，用于存储和查找平面上的点；2dsphere 索引，用于存储和查找球面上的点。查找方式主要有两种：查找距离某个点一定距离内的点；查找包含在某个区域中的点。\n\n在 2d 索引中指定区域有以下三种格式：\n\n1. `$box: [ [lx, ly], [rx, ry] ]`，指定矩形\n2. `$center: [ [x, y], r ]`，指定圆形\n3. `$polygon: [ [x1, y1], [x2, y2], [x3, y3] ]`，指定多边形\n\n```js\n// 创建地理位置数据\ndb.localindex.insert({ w: [1,1] })\ndb.localindex.insert({ w: [1,2] })\ndb.localindex.insert({ w: [2,2] })\n\n// 创建 2d 索引\ndb.localindex.ensureIndex({ w: \"2d\" })\n\n// 根据 [1, 1] 查询附近的点\n// 匹配的点和 [1, 1] 的最大距离为 10\ndb.localindex.find({ w: { $near: [1, 1], $maxDistance: 10 } })\n\n// 在矩形区域内查找某个点\ndb.localindex.find({ w: { $geoWithin: { $box: [ [0, 0], [1.5, 2.5] ] } } })\n\n// 在圆形区域内查找某个点\ndb.localindex.find({ w: { $geoWithin: { $center: [ [1,1], 1 ] } } })\n\n// 在多边形区域内查找某个点\ndb.localindex.find({w: {$geoWithin: {$polygon: [[0, 0],[1, 0],[1, 3]]}}})\n\n// 创建 2dsphere 索引\ndb.localindex.ensureIndex({ w: \"2dsphere })\n```\n\n## 索引构建分析\n\n评判索引构建情况的四种工具：\n\n1. mongostat\n1. profile 集合\n1. 日志\n1. explain\n\n\n","source":"_posts/mongodb.md","raw":"title: mongodb\ndate: 2016-01-28 15:58:12\n---\n\nMongodb 提供了 Homebrew 的安装方式，安装过程如下：\n\n```bash\nbrew update\nbrew install mongodb\nmkdir -p /data/db\nchmod u+rw /data/db\nmongod\n```\n\n<!-- more -->\n\nMongodb 安装完全后，在 bin 文件夹下有以下可执行程序：\n\n- `mongod`，mongodb 的执行和部署程序\n- `mongo`，连接 mongodb 服务器的客户端\n- `mongoimport / mongoexport`，mongodb 数据导入导出程序\n- `mongoreestore / mongodump`，mongodb 二进制数据导入导出程序，常用做数据备份和恢复\n- `mongooplog`，操作日志记录程序\n- `mongostat`，mongodb 状态监控和查询程序\n\nMongodb 数据库的简单组成结构及分工职责：\n\n- `data`，存储数据库的数据文件\n- `log`，存储数据库的日志文件\n- `bin`，存储数据库的可执行文件\n- `conf`，存储数据库的配置文件\n\n创建一个轻量的 Mongodb 数据库：\n\n```bash\nmkdir mongodb-in-action\ncd mongodb-in-action\nmkdir data log conf bin\ncp /usr/local/Cellar/mongodb/3.2.1/bin/{mongod,mongo} ./bin/\ntouch conf/mongod.conf\n```\n\n`conf/mongod.conf` 是这个数据库的配置文件，内容如下：\n\n```bash\nport = 12345\n\ndbpath = data\nlogpath = log/mongod.log\n\n# 是否启用后台进程\nfork = true\n```\n\n然后使用指定的配置文件启动 Mongodb 服务器：\n\n```bash\n./bin/mongod -f ./conf/mongod.conf\n```\n\n接下来我们使用 `mongo` 连接数据库，连接之前查看 `mongo --help` 信息：\n\n- 查看第二行的 `usage` 了解使用方式\n- 查看第三行开始的示例了解连接格式\n- 查看 options 字段下的内容了解可用参数\n- 查看 Authentication Options 字段下的内容了解认证登录的方式\n\n接下来连接 `mongodb-in-action` 的 test 数据库:\n\n```bash\n./bin/mongo 127.0.0.1:12345/test\n```\n\n在 mongo 客户端中关闭 mongodb 数据库：\n\n```js\nuse admin\ndb.shutdownServer()\n```\n\n## 基本操作\n\nMongodb 数据库的常用操作：\n\n- `show dbs`，显示所有数据库\n- `use dbname`，切换到 dbname 数据库\n- `db.dropDatabase()`，删除当前数据库\n\n```js\nuse admin\n\n// 显示集合\nshow collections\n\n// 简单插入数据\ndb.imooc_collections.insert({ x: 1})\n\n// 简单查询数据\ndb.imooc_collections.find()\n\n// 使用 Javascript 语法插入多条数据\nfor ( var i = 0; i < 10; i++) {\n    db.imooc_collections.insert({ x: i * 5})\n}\n\n// 统计数据量\ndb.imooc_collections.find().count()\n\n// skip() 跳过数据\n// limit() 限制返回的数据长度\n// sort() 数据排序\ndb.imooc_collections.find().skip(3).limit(2).sort({x:1})\n\n// 简单更新数据\ndb.imooc_collections.update( {x: 1}, {x: 999})\n\n// 使用 $set 操作符进行局部更新\ndb.imooc_collections.insert( { x: 1, y: 2, z: 3} )\ndb.imooc_collections.update( { y: 2 }, { $set: { z: 0 } } )\n\n// Mongodb 默认更新找到的第一条数据\n// 同时更新多条数据需要是，第二个 JSON 参数必须是 $set \n// 第三个参数表示匹配不到数据时自动插入更新数据\n// 第四个参数表示是否同时更新多条记录\ndb.imooc_collections.update( { x: 999 }, { $set: { x: 321 } }, false, true )\n\n// 删除数据使用 remove()，该方法参数不能为空\ndb.imooc_collections.remove( {x: 0} )\n\n// 删除整个集合或者表\ndb.imooc_collections.drop()\n```\n\n## 索引\n\n索引是对数据库单列或多列进行排序的结构，使用索引可以快速访问数据库中的特定信息。Mongodb 中的索引主要分为以下几种：\n\n- \\_id 索引。\\_id 索引是大多数集合默认创建的索引类型，对于每一个插入的数据，Mongodb 都会自动生成一条唯一的 \\_id 字段\n- 单键索引，单键索引是最普通的索引，值为单一的值，比如字符串、数值或日期，不会自动创建\n- 多键索引，与单键索引不同的地方就在于它的值可以是复合类型数据\n- 复合索引，用于有多个查询条件的情景中\n- 过期索引，指在特定时间后会过期的索引，索引过期后，相应的数据也会被删除，常用于存储登录信息、存储日志等数据。存储在过期索引字段的值必须是指定的事件类型（ISODate 或者 ISODate 数组)\n- 全文索引，对字符串和字符串数组创建全文可搜索的索引\n- 地理位置索引，\n\n```js\n// 查看字段是否存在\ndb.imooc_collections.find({ x: { $exists: true } } )\n\n// 查看当前集合的所有索引\ndb.imooc_collections.getIndexes()\n\n// 创建单键索引\ndb.imooc_collections.ensureIndex({ x: 1 })\n\n// 创建多键索引\n// 如果插入的是数组，默认添加多键索引\ndb.imooc_collections.insert({ x: [1,2,3,4,5] })\n\n// 创建复合索引\ndb.imooc_collections.ensureIndex({ x: 1, y: 2 })\n\n// 创建过期数据\ndb.imooc_collections.insert({ x: new Date() })\n\n// 创建过期索引\ndb.imooc_collections.ensureIndex({ x: 1 }, { expireAfterSeconds: 10 } )\n\n// 创建全文索引\ndb.articles.ensureIndex({ key: \"text\" })\ndb.articles.ensureIndex({ k_1: \"text\", k_2: \"text\" })\ndb.articles.ensureIndex({ \"$**\": \"text\" })\n\n// 全文索引示例\ndb.article.insert({ \"article\": \"aa bb cc\" })\ndb.article.insert({ \"article\": \"aa bb cc dd\" })\ndb.article.insert({ \"article\": \"aa bb cc dd ee\" })\ndb.article.find({ $text: { $search: \"cc\" } } )\n\n// 全文索引相似度查询\ndb.article.find({ \n        $text: { $search: \"aa bb\" } \n    }, { \n        score: { $meta: \"textScore\" } \n})\n.sort({ \n    score: { $meta: \"textScore\" } \n}) \n```\n\n全文索引支持相似度查询，相似度查询的格式是在查询条件后添加字段：` { score: { $meta: \"textScore\" } }`，配合 sort 方法可以根据相似度对搜索结果进行排序。全文查找的注意点：\n\n- `$search: \"aa bb cc\"`，查询匹配 aa/bb/cc 其中之一的项\n- `$search: \"aa bb -cc\"`，查询匹配 aa/bb 其中之一但不包含 cc 的项\n- `$search: \"\\\"aa\\\" \\\"bb\\\"\"`，查询同时包含 aa/bb 的项\n\n索引的四个重要特性，这四个特性也是 ensureIndex() 的四个可选参数：\n\n- 名字\n- 唯一性\n- 稀疏性\n- 是否定时删除\n\n```js\ndb.imooc.ensureIndex(\n    { x: 1 }, \n    { name: \"xIndex\" },\n    { unique: true },\n    { sparse: true },\n    { expireAfterSconds: 10 }\n)\n```\n\n## 地理位置索引\n\n地址位置索引用于在 mongodb 中存储位置信息，创建后，各个位置之间可以相互检索。地理位置索引分为两类：2d 索引，用于存储和查找平面上的点；2dsphere 索引，用于存储和查找球面上的点。查找方式主要有两种：查找距离某个点一定距离内的点；查找包含在某个区域中的点。\n\n在 2d 索引中指定区域有以下三种格式：\n\n1. `$box: [ [lx, ly], [rx, ry] ]`，指定矩形\n2. `$center: [ [x, y], r ]`，指定圆形\n3. `$polygon: [ [x1, y1], [x2, y2], [x3, y3] ]`，指定多边形\n\n```js\n// 创建地理位置数据\ndb.localindex.insert({ w: [1,1] })\ndb.localindex.insert({ w: [1,2] })\ndb.localindex.insert({ w: [2,2] })\n\n// 创建 2d 索引\ndb.localindex.ensureIndex({ w: \"2d\" })\n\n// 根据 [1, 1] 查询附近的点\n// 匹配的点和 [1, 1] 的最大距离为 10\ndb.localindex.find({ w: { $near: [1, 1], $maxDistance: 10 } })\n\n// 在矩形区域内查找某个点\ndb.localindex.find({ w: { $geoWithin: { $box: [ [0, 0], [1.5, 2.5] ] } } })\n\n// 在圆形区域内查找某个点\ndb.localindex.find({ w: { $geoWithin: { $center: [ [1,1], 1 ] } } })\n\n// 在多边形区域内查找某个点\ndb.localindex.find({w: {$geoWithin: {$polygon: [[0, 0],[1, 0],[1, 3]]}}})\n\n// 创建 2dsphere 索引\ndb.localindex.ensureIndex({ w: \"2dsphere })\n```\n\n## 索引构建分析\n\n评判索引构建情况的四种工具：\n\n1. mongostat\n1. profile 集合\n1. 日志\n1. explain\n\n\n","slug":"mongodb","published":1,"updated":"2016-02-09T13:52:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarot000gfsdiul4czyz9","content":"<p>Mongodb 提供了 Homebrew 的安装方式，安装过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">mkdir -p /data/db</span><br><span class=\"line\">chmod u+rw /data/db</span><br><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Mongodb 安装完全后，在 bin 文件夹下有以下可执行程序：</p>\n<ul>\n<li><code>mongod</code>，mongodb 的执行和部署程序</li>\n<li><code>mongo</code>，连接 mongodb 服务器的客户端</li>\n<li><code>mongoimport / mongoexport</code>，mongodb 数据导入导出程序</li>\n<li><code>mongoreestore / mongodump</code>，mongodb 二进制数据导入导出程序，常用做数据备份和恢复</li>\n<li><code>mongooplog</code>，操作日志记录程序</li>\n<li><code>mongostat</code>，mongodb 状态监控和查询程序</li>\n</ul>\n<p>Mongodb 数据库的简单组成结构及分工职责：</p>\n<ul>\n<li><code>data</code>，存储数据库的数据文件</li>\n<li><code>log</code>，存储数据库的日志文件</li>\n<li><code>bin</code>，存储数据库的可执行文件</li>\n<li><code>conf</code>，存储数据库的配置文件</li>\n</ul>\n<p>创建一个轻量的 Mongodb 数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir mongodb-in-action</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mongodb-in-action</span><br><span class=\"line\">mkdir data <span class=\"built_in\">log</span> conf bin</span><br><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/Cellar/mongodb/3.2.1/bin/&#123;mongod,mongo&#125; ./bin/</span><br><span class=\"line\">touch conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p><code>conf/mongod.conf</code> 是这个数据库的配置文件，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">port = 12345</span><br><span class=\"line\"></span><br><span class=\"line\">dbpath = data</span><br><span class=\"line\">logpath = <span class=\"built_in\">log</span>/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用后台进程</span></span><br><span class=\"line\">fork = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>然后使用指定的配置文件启动 Mongodb 服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/mongod <span class=\"_\">-f</span> ./conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用 <code>mongo</code> 连接数据库，连接之前查看 <code>mongo --help</code> 信息：</p>\n<ul>\n<li>查看第二行的 <code>usage</code> 了解使用方式</li>\n<li>查看第三行开始的示例了解连接格式</li>\n<li>查看 options 字段下的内容了解可用参数</li>\n<li>查看 Authentication Options 字段下的内容了解认证登录的方式</li>\n</ul>\n<p>接下来连接 <code>mongodb-in-action</code> 的 test 数据库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/mongo 127.0.0.1:12345/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>在 mongo 客户端中关闭 mongodb 数据库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.shutdownServer()</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>Mongodb 数据库的常用操作：</p>\n<ul>\n<li><code>show dbs</code>，显示所有数据库</li>\n<li><code>use dbname</code>，切换到 dbname 数据库</li>\n<li><code>db.dropDatabase()</code>，删除当前数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示集合</span></span><br><span class=\"line\">show collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单插入数据</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单查询数据</span></span><br><span class=\"line\">db.imooc_collections.find()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Javascript 语法插入多条数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    db.imooc_collections.insert(&#123; x: i * <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 统计数据量</span></span><br><span class=\"line\">db.imooc_collections.find().count()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// skip() 跳过数据</span></span><br><span class=\"line\"><span class=\"comment\">// limit() 限制返回的数据长度</span></span><br><span class=\"line\"><span class=\"comment\">// sort() 数据排序</span></span><br><span class=\"line\">db.imooc_collections.find().skip(<span class=\"number\">3</span>).limit(<span class=\"number\">2</span>).sort(&#123;x:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单更新数据</span></span><br><span class=\"line\">db.imooc_collections.update( &#123;x: <span class=\"number\">1</span>&#125;, &#123;x: <span class=\"number\">999</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 $set 操作符进行局部更新</span></span><br><span class=\"line\">db.imooc_collections.insert( &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span>, z: <span class=\"number\">3</span>&#125; )</span><br><span class=\"line\">db.imooc_collections.update( &#123; y: <span class=\"number\">2</span> &#125;, &#123; $set: &#123; z: <span class=\"number\">0</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mongodb 默认更新找到的第一条数据</span></span><br><span class=\"line\"><span class=\"comment\">// 同时更新多条数据需要是，第二个 JSON 参数必须是 $set </span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数表示匹配不到数据时自动插入更新数据</span></span><br><span class=\"line\"><span class=\"comment\">// 第四个参数表示是否同时更新多条记录</span></span><br><span class=\"line\">db.imooc_collections.update( &#123; x: <span class=\"number\">999</span> &#125;, &#123; $set: &#123; x: <span class=\"number\">321</span> &#125; &#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据使用 remove()，该方法参数不能为空</span></span><br><span class=\"line\">db.imooc_collections.remove( &#123;x: <span class=\"number\">0</span>&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除整个集合或者表</span></span><br><span class=\"line\">db.imooc_collections.drop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是对数据库单列或多列进行排序的结构，使用索引可以快速访问数据库中的特定信息。Mongodb 中的索引主要分为以下几种：</p>\n<ul>\n<li>_id 索引。_id 索引是大多数集合默认创建的索引类型，对于每一个插入的数据，Mongodb 都会自动生成一条唯一的 _id 字段</li>\n<li>单键索引，单键索引是最普通的索引，值为单一的值，比如字符串、数值或日期，不会自动创建</li>\n<li>多键索引，与单键索引不同的地方就在于它的值可以是复合类型数据</li>\n<li>复合索引，用于有多个查询条件的情景中</li>\n<li>过期索引，指在特定时间后会过期的索引，索引过期后，相应的数据也会被删除，常用于存储登录信息、存储日志等数据。存储在过期索引字段的值必须是指定的事件类型（ISODate 或者 ISODate 数组)</li>\n<li>全文索引，对字符串和字符串数组创建全文可搜索的索引</li>\n<li>地理位置索引，</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看字段是否存在</span></span><br><span class=\"line\">db.imooc_collections.find(&#123; x: &#123; $exists: <span class=\"literal\">true</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看当前集合的所有索引</span></span><br><span class=\"line\">db.imooc_collections.getIndexes()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建单键索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建多键索引</span></span><br><span class=\"line\"><span class=\"comment\">// 如果插入的是数组，默认添加多键索引</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建复合索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建过期数据</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建过期索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span> &#125;, &#123; expireAfterSeconds: <span class=\"number\">10</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建全文索引</span></span><br><span class=\"line\">db.articles.ensureIndex(&#123; key: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\">db.articles.ensureIndex(&#123; k_1: <span class=\"string\">\"text\"</span>, k_2: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\">db.articles.ensureIndex(&#123; <span class=\"string\">\"$**\"</span>: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全文索引示例</span></span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc\"</span> &#125;)</span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc dd\"</span> &#125;)</span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc dd ee\"</span> &#125;)</span><br><span class=\"line\">db.article.find(&#123; $text: &#123; $search: <span class=\"string\">\"cc\"</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全文索引相似度查询</span></span><br><span class=\"line\">db.article.find(&#123; </span><br><span class=\"line\">        $text: &#123; $search: <span class=\"string\">\"aa bb\"</span> &#125; </span><br><span class=\"line\">    &#125;, &#123; </span><br><span class=\"line\">        score: &#123; $meta: <span class=\"string\">\"textScore\"</span> &#125; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.sort(&#123; </span><br><span class=\"line\">    score: &#123; $meta: <span class=\"string\">\"textScore\"</span> &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>全文索引支持相似度查询，相似度查询的格式是在查询条件后添加字段：<code>{ score: { $meta: &quot;textScore&quot; } }</code>，配合 sort 方法可以根据相似度对搜索结果进行排序。全文查找的注意点：</p>\n<ul>\n<li><code>$search: &quot;aa bb cc&quot;</code>，查询匹配 aa/bb/cc 其中之一的项</li>\n<li><code>$search: &quot;aa bb -cc&quot;</code>，查询匹配 aa/bb 其中之一但不包含 cc 的项</li>\n<li><code>$search: &quot;\\&quot;aa\\&quot; \\&quot;bb\\&quot;&quot;</code>，查询同时包含 aa/bb 的项</li>\n</ul>\n<p>索引的四个重要特性，这四个特性也是 ensureIndex() 的四个可选参数：</p>\n<ul>\n<li>名字</li>\n<li>唯一性</li>\n<li>稀疏性</li>\n<li>是否定时删除</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.imooc.ensureIndex(</span><br><span class=\"line\">    &#123; x: <span class=\"number\">1</span> &#125;, </span><br><span class=\"line\">    &#123; name: <span class=\"string\">\"xIndex\"</span> &#125;,</span><br><span class=\"line\">    &#123; unique: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; sparse: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; expireAfterSconds: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"地理位置索引\"><a href=\"#地理位置索引\" class=\"headerlink\" title=\"地理位置索引\"></a>地理位置索引</h2><p>地址位置索引用于在 mongodb 中存储位置信息，创建后，各个位置之间可以相互检索。地理位置索引分为两类：2d 索引，用于存储和查找平面上的点；2dsphere 索引，用于存储和查找球面上的点。查找方式主要有两种：查找距离某个点一定距离内的点；查找包含在某个区域中的点。</p>\n<p>在 2d 索引中指定区域有以下三种格式：</p>\n<ol>\n<li><code>$box: [ [lx, ly], [rx, ry] ]</code>，指定矩形</li>\n<li><code>$center: [ [x, y], r ]</code>，指定圆形</li>\n<li><code>$polygon: [ [x1, y1], [x2, y2], [x3, y3] ]</code>，指定多边形</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建地理位置数据</span></span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">1</span>,<span class=\"number\">1</span>] &#125;)</span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">1</span>,<span class=\"number\">2</span>] &#125;)</span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">2</span>,<span class=\"number\">2</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 2d 索引</span></span><br><span class=\"line\">db.localindex.ensureIndex(&#123; w: <span class=\"string\">\"2d\"</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据 [1, 1] 查询附近的点</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配的点和 [1, 1] 的最大距离为 10</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $near: [<span class=\"number\">1</span>, <span class=\"number\">1</span>], $maxDistance: <span class=\"number\">10</span> &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在矩形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $geoWithin: &#123; $box: [ [<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">1.5</span>, <span class=\"number\">2.5</span>] ] &#125; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在圆形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $geoWithin: &#123; $center: [ [<span class=\"number\">1</span>,<span class=\"number\">1</span>], <span class=\"number\">1</span> ] &#125; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在多边形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123;w: &#123;$geoWithin: &#123;$polygon: [[<span class=\"number\">0</span>, <span class=\"number\">0</span>],[<span class=\"number\">1</span>, <span class=\"number\">0</span>],[<span class=\"number\">1</span>, <span class=\"number\">3</span>]]&#125;&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 2dsphere 索引</span></span><br><span class=\"line\">db.localindex.ensureIndex(&#123; w: <span class=\"string\">\"2dsphere &#125;)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"索引构建分析\"><a href=\"#索引构建分析\" class=\"headerlink\" title=\"索引构建分析\"></a>索引构建分析</h2><p>评判索引构建情况的四种工具：</p>\n<ol>\n<li>mongostat</li>\n<li>profile 集合</li>\n<li>日志</li>\n<li>explain</li>\n</ol>\n","excerpt":"<p>Mongodb 提供了 Homebrew 的安装方式，安装过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">mkdir -p /data/db</span><br><span class=\"line\">chmod u+rw /data/db</span><br><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>","more":"<p>Mongodb 安装完全后，在 bin 文件夹下有以下可执行程序：</p>\n<ul>\n<li><code>mongod</code>，mongodb 的执行和部署程序</li>\n<li><code>mongo</code>，连接 mongodb 服务器的客户端</li>\n<li><code>mongoimport / mongoexport</code>，mongodb 数据导入导出程序</li>\n<li><code>mongoreestore / mongodump</code>，mongodb 二进制数据导入导出程序，常用做数据备份和恢复</li>\n<li><code>mongooplog</code>，操作日志记录程序</li>\n<li><code>mongostat</code>，mongodb 状态监控和查询程序</li>\n</ul>\n<p>Mongodb 数据库的简单组成结构及分工职责：</p>\n<ul>\n<li><code>data</code>，存储数据库的数据文件</li>\n<li><code>log</code>，存储数据库的日志文件</li>\n<li><code>bin</code>，存储数据库的可执行文件</li>\n<li><code>conf</code>，存储数据库的配置文件</li>\n</ul>\n<p>创建一个轻量的 Mongodb 数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir mongodb-in-action</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mongodb-in-action</span><br><span class=\"line\">mkdir data <span class=\"built_in\">log</span> conf bin</span><br><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/Cellar/mongodb/3.2.1/bin/&#123;mongod,mongo&#125; ./bin/</span><br><span class=\"line\">touch conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p><code>conf/mongod.conf</code> 是这个数据库的配置文件，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">port = 12345</span><br><span class=\"line\"></span><br><span class=\"line\">dbpath = data</span><br><span class=\"line\">logpath = <span class=\"built_in\">log</span>/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用后台进程</span></span><br><span class=\"line\">fork = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>然后使用指定的配置文件启动 Mongodb 服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/mongod <span class=\"_\">-f</span> ./conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用 <code>mongo</code> 连接数据库，连接之前查看 <code>mongo --help</code> 信息：</p>\n<ul>\n<li>查看第二行的 <code>usage</code> 了解使用方式</li>\n<li>查看第三行开始的示例了解连接格式</li>\n<li>查看 options 字段下的内容了解可用参数</li>\n<li>查看 Authentication Options 字段下的内容了解认证登录的方式</li>\n</ul>\n<p>接下来连接 <code>mongodb-in-action</code> 的 test 数据库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/mongo 127.0.0.1:12345/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>在 mongo 客户端中关闭 mongodb 数据库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.shutdownServer()</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>Mongodb 数据库的常用操作：</p>\n<ul>\n<li><code>show dbs</code>，显示所有数据库</li>\n<li><code>use dbname</code>，切换到 dbname 数据库</li>\n<li><code>db.dropDatabase()</code>，删除当前数据库</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示集合</span></span><br><span class=\"line\">show collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单插入数据</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单查询数据</span></span><br><span class=\"line\">db.imooc_collections.find()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Javascript 语法插入多条数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    db.imooc_collections.insert(&#123; x: i * <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 统计数据量</span></span><br><span class=\"line\">db.imooc_collections.find().count()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// skip() 跳过数据</span></span><br><span class=\"line\"><span class=\"comment\">// limit() 限制返回的数据长度</span></span><br><span class=\"line\"><span class=\"comment\">// sort() 数据排序</span></span><br><span class=\"line\">db.imooc_collections.find().skip(<span class=\"number\">3</span>).limit(<span class=\"number\">2</span>).sort(&#123;x:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单更新数据</span></span><br><span class=\"line\">db.imooc_collections.update( &#123;x: <span class=\"number\">1</span>&#125;, &#123;x: <span class=\"number\">999</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 $set 操作符进行局部更新</span></span><br><span class=\"line\">db.imooc_collections.insert( &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span>, z: <span class=\"number\">3</span>&#125; )</span><br><span class=\"line\">db.imooc_collections.update( &#123; y: <span class=\"number\">2</span> &#125;, &#123; $set: &#123; z: <span class=\"number\">0</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mongodb 默认更新找到的第一条数据</span></span><br><span class=\"line\"><span class=\"comment\">// 同时更新多条数据需要是，第二个 JSON 参数必须是 $set </span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数表示匹配不到数据时自动插入更新数据</span></span><br><span class=\"line\"><span class=\"comment\">// 第四个参数表示是否同时更新多条记录</span></span><br><span class=\"line\">db.imooc_collections.update( &#123; x: <span class=\"number\">999</span> &#125;, &#123; $set: &#123; x: <span class=\"number\">321</span> &#125; &#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据使用 remove()，该方法参数不能为空</span></span><br><span class=\"line\">db.imooc_collections.remove( &#123;x: <span class=\"number\">0</span>&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除整个集合或者表</span></span><br><span class=\"line\">db.imooc_collections.drop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是对数据库单列或多列进行排序的结构，使用索引可以快速访问数据库中的特定信息。Mongodb 中的索引主要分为以下几种：</p>\n<ul>\n<li>_id 索引。_id 索引是大多数集合默认创建的索引类型，对于每一个插入的数据，Mongodb 都会自动生成一条唯一的 _id 字段</li>\n<li>单键索引，单键索引是最普通的索引，值为单一的值，比如字符串、数值或日期，不会自动创建</li>\n<li>多键索引，与单键索引不同的地方就在于它的值可以是复合类型数据</li>\n<li>复合索引，用于有多个查询条件的情景中</li>\n<li>过期索引，指在特定时间后会过期的索引，索引过期后，相应的数据也会被删除，常用于存储登录信息、存储日志等数据。存储在过期索引字段的值必须是指定的事件类型（ISODate 或者 ISODate 数组)</li>\n<li>全文索引，对字符串和字符串数组创建全文可搜索的索引</li>\n<li>地理位置索引，</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看字段是否存在</span></span><br><span class=\"line\">db.imooc_collections.find(&#123; x: &#123; $exists: <span class=\"literal\">true</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看当前集合的所有索引</span></span><br><span class=\"line\">db.imooc_collections.getIndexes()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建单键索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建多键索引</span></span><br><span class=\"line\"><span class=\"comment\">// 如果插入的是数组，默认添加多键索引</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建复合索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建过期数据</span></span><br><span class=\"line\">db.imooc_collections.insert(&#123; x: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建过期索引</span></span><br><span class=\"line\">db.imooc_collections.ensureIndex(&#123; x: <span class=\"number\">1</span> &#125;, &#123; expireAfterSeconds: <span class=\"number\">10</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建全文索引</span></span><br><span class=\"line\">db.articles.ensureIndex(&#123; key: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\">db.articles.ensureIndex(&#123; k_1: <span class=\"string\">\"text\"</span>, k_2: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\">db.articles.ensureIndex(&#123; <span class=\"string\">\"$**\"</span>: <span class=\"string\">\"text\"</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全文索引示例</span></span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc\"</span> &#125;)</span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc dd\"</span> &#125;)</span><br><span class=\"line\">db.article.insert(&#123; <span class=\"string\">\"article\"</span>: <span class=\"string\">\"aa bb cc dd ee\"</span> &#125;)</span><br><span class=\"line\">db.article.find(&#123; $text: &#123; $search: <span class=\"string\">\"cc\"</span> &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全文索引相似度查询</span></span><br><span class=\"line\">db.article.find(&#123; </span><br><span class=\"line\">        $text: &#123; $search: <span class=\"string\">\"aa bb\"</span> &#125; </span><br><span class=\"line\">    &#125;, &#123; </span><br><span class=\"line\">        score: &#123; $meta: <span class=\"string\">\"textScore\"</span> &#125; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.sort(&#123; </span><br><span class=\"line\">    score: &#123; $meta: <span class=\"string\">\"textScore\"</span> &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>全文索引支持相似度查询，相似度查询的格式是在查询条件后添加字段：<code>{ score: { $meta: &quot;textScore&quot; } }</code>，配合 sort 方法可以根据相似度对搜索结果进行排序。全文查找的注意点：</p>\n<ul>\n<li><code>$search: &quot;aa bb cc&quot;</code>，查询匹配 aa/bb/cc 其中之一的项</li>\n<li><code>$search: &quot;aa bb -cc&quot;</code>，查询匹配 aa/bb 其中之一但不包含 cc 的项</li>\n<li><code>$search: &quot;\\&quot;aa\\&quot; \\&quot;bb\\&quot;&quot;</code>，查询同时包含 aa/bb 的项</li>\n</ul>\n<p>索引的四个重要特性，这四个特性也是 ensureIndex() 的四个可选参数：</p>\n<ul>\n<li>名字</li>\n<li>唯一性</li>\n<li>稀疏性</li>\n<li>是否定时删除</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.imooc.ensureIndex(</span><br><span class=\"line\">    &#123; x: <span class=\"number\">1</span> &#125;, </span><br><span class=\"line\">    &#123; name: <span class=\"string\">\"xIndex\"</span> &#125;,</span><br><span class=\"line\">    &#123; unique: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; sparse: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; expireAfterSconds: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"地理位置索引\"><a href=\"#地理位置索引\" class=\"headerlink\" title=\"地理位置索引\"></a>地理位置索引</h2><p>地址位置索引用于在 mongodb 中存储位置信息，创建后，各个位置之间可以相互检索。地理位置索引分为两类：2d 索引，用于存储和查找平面上的点；2dsphere 索引，用于存储和查找球面上的点。查找方式主要有两种：查找距离某个点一定距离内的点；查找包含在某个区域中的点。</p>\n<p>在 2d 索引中指定区域有以下三种格式：</p>\n<ol>\n<li><code>$box: [ [lx, ly], [rx, ry] ]</code>，指定矩形</li>\n<li><code>$center: [ [x, y], r ]</code>，指定圆形</li>\n<li><code>$polygon: [ [x1, y1], [x2, y2], [x3, y3] ]</code>，指定多边形</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建地理位置数据</span></span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">1</span>,<span class=\"number\">1</span>] &#125;)</span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">1</span>,<span class=\"number\">2</span>] &#125;)</span><br><span class=\"line\">db.localindex.insert(&#123; w: [<span class=\"number\">2</span>,<span class=\"number\">2</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 2d 索引</span></span><br><span class=\"line\">db.localindex.ensureIndex(&#123; w: <span class=\"string\">\"2d\"</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据 [1, 1] 查询附近的点</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配的点和 [1, 1] 的最大距离为 10</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $near: [<span class=\"number\">1</span>, <span class=\"number\">1</span>], $maxDistance: <span class=\"number\">10</span> &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在矩形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $geoWithin: &#123; $box: [ [<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">1.5</span>, <span class=\"number\">2.5</span>] ] &#125; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在圆形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123; w: &#123; $geoWithin: &#123; $center: [ [<span class=\"number\">1</span>,<span class=\"number\">1</span>], <span class=\"number\">1</span> ] &#125; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在多边形区域内查找某个点</span></span><br><span class=\"line\">db.localindex.find(&#123;w: &#123;$geoWithin: &#123;$polygon: [[<span class=\"number\">0</span>, <span class=\"number\">0</span>],[<span class=\"number\">1</span>, <span class=\"number\">0</span>],[<span class=\"number\">1</span>, <span class=\"number\">3</span>]]&#125;&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 2dsphere 索引</span></span><br><span class=\"line\">db.localindex.ensureIndex(&#123; w: <span class=\"string\">\"2dsphere &#125;)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"索引构建分析\"><a href=\"#索引构建分析\" class=\"headerlink\" title=\"索引构建分析\"></a>索引构建分析</h2><p>评判索引构建情况的四种工具：</p>\n<ol>\n<li>mongostat</li>\n<li>profile 集合</li>\n<li>日志</li>\n<li>explain</li>\n</ol>"},{"title":"Tmux","date":"2016-02-13T05:09:06.000Z","desc":"basic knowledge of tmux","_content":"\nRecently, I am learning some different programming languages which exciting and a little bit tired. Why tired? Coding, testing code and taking notes always need two or three panes in one shell window for each programming language every time, and this is where tmux comes in.\n\n![tmux-demo](/img/tmux-structure.png)\n\n> Tmux is a terminal multiplexer, and it lets developers switch easily between programs in one termial, detach them and reattach them to a different terminal. \n\n<!-- more -->\n\n## Key bindings\n\nThe GitHub repo [.tmux](https://github.com/gpakosz/.tmux) is a pretty and versatile self-contained tmux configuration which I am using. `C-a` is the prefix key provided by this repo, while we can keep use default `C-b` prefix. The following tables show common key bindings which come into play with prefix key, from session to pane:\n\n**SESSION KEY BINGDINGS**\n\n- `tmux ls`，显示所有 session\n- `tmux new -s session-name`，新建 session\n- `tmux attach -t session-name`，进入 session\n- `tmux kill-session -t session-name`，关闭 session\n\n| Key | Description |\n|:---:|:------------|\n| C-f | find session |\n| d   | hang-up session |\n| r   | reload configuration | \n\n**WINDOW KEY BINGDINGS**\n\n| Key | Description |\n|:---:|:------------| \n| c   | create new window |\n| ,   | rename current window |\n| s   | list all windows |\n| f   | find window |\n| 0~9 | switch window according to serial number |\n| &   | exit tmux and close current window |\n| space | adjust layout |\n\n**PANE KEY BINGDINGS**\n\n| Key | Description |\n|:---:|:------------| \n| %   | create new pane with horizontal direction |\n| \"   | create new pane with vertical direction |\n| hjkl | switch pane |\n| HJKL | adjust layout size of panes |\n| o   | cycle panes |\n| q   | display serial number of panes |\n| x   | close current pane |\n| {/} | switch postion of panes |\n| Enter | enter copy-mode |\n| l   | clear pane and history |\n","source":"_posts/Tmux.md","raw":"title: Tmux\ndate: 2016-02-13 13:09:06\ndesc: basic knowledge of tmux\n---\n\nRecently, I am learning some different programming languages which exciting and a little bit tired. Why tired? Coding, testing code and taking notes always need two or three panes in one shell window for each programming language every time, and this is where tmux comes in.\n\n![tmux-demo](/img/tmux-structure.png)\n\n> Tmux is a terminal multiplexer, and it lets developers switch easily between programs in one termial, detach them and reattach them to a different terminal. \n\n<!-- more -->\n\n## Key bindings\n\nThe GitHub repo [.tmux](https://github.com/gpakosz/.tmux) is a pretty and versatile self-contained tmux configuration which I am using. `C-a` is the prefix key provided by this repo, while we can keep use default `C-b` prefix. The following tables show common key bindings which come into play with prefix key, from session to pane:\n\n**SESSION KEY BINGDINGS**\n\n- `tmux ls`，显示所有 session\n- `tmux new -s session-name`，新建 session\n- `tmux attach -t session-name`，进入 session\n- `tmux kill-session -t session-name`，关闭 session\n\n| Key | Description |\n|:---:|:------------|\n| C-f | find session |\n| d   | hang-up session |\n| r   | reload configuration | \n\n**WINDOW KEY BINGDINGS**\n\n| Key | Description |\n|:---:|:------------| \n| c   | create new window |\n| ,   | rename current window |\n| s   | list all windows |\n| f   | find window |\n| 0~9 | switch window according to serial number |\n| &   | exit tmux and close current window |\n| space | adjust layout |\n\n**PANE KEY BINGDINGS**\n\n| Key | Description |\n|:---:|:------------| \n| %   | create new pane with horizontal direction |\n| \"   | create new pane with vertical direction |\n| hjkl | switch pane |\n| HJKL | adjust layout size of panes |\n| o   | cycle panes |\n| q   | display serial number of panes |\n| x   | close current pane |\n| {/} | switch postion of panes |\n| Enter | enter copy-mode |\n| l   | clear pane and history |\n","slug":"Tmux","published":1,"updated":"2016-02-13T10:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarov000hfsdixebarwz5","content":"<p>Recently, I am learning some different programming languages which exciting and a little bit tired. Why tired? Coding, testing code and taking notes always need two or three panes in one shell window for each programming language every time, and this is where tmux comes in.</p>\n<p><img src=\"/img/tmux-structure.png\" alt=\"tmux-demo\"></p>\n<blockquote>\n<p>Tmux is a terminal multiplexer, and it lets developers switch easily between programs in one termial, detach them and reattach them to a different terminal. </p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Key-bindings\"><a href=\"#Key-bindings\" class=\"headerlink\" title=\"Key bindings\"></a>Key bindings</h2><p>The GitHub repo <a href=\"https://github.com/gpakosz/.tmux\" target=\"_blank\" rel=\"external\">.tmux</a> is a pretty and versatile self-contained tmux configuration which I am using. <code>C-a</code> is the prefix key provided by this repo, while we can keep use default <code>C-b</code> prefix. The following tables show common key bindings which come into play with prefix key, from session to pane:</p>\n<p><strong>SESSION KEY BINGDINGS</strong></p>\n<ul>\n<li><code>tmux ls</code>，显示所有 session</li>\n<li><code>tmux new -s session-name</code>，新建 session</li>\n<li><code>tmux attach -t session-name</code>，进入 session</li>\n<li><code>tmux kill-session -t session-name</code>，关闭 session</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-f</td>\n<td style=\"text-align:left\">find session</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:left\">hang-up session</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">reload configuration</td>\n</tr>\n</tbody>\n</table>\n<p><strong>WINDOW KEY BINGDINGS</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:left\">create new window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">rename current window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">list all windows</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f</td>\n<td style=\"text-align:left\">find window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0~9</td>\n<td style=\"text-align:left\">switch window according to serial number</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:left\">exit tmux and close current window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">space</td>\n<td style=\"text-align:left\">adjust layout</td>\n</tr>\n</tbody>\n</table>\n<p><strong>PANE KEY BINGDINGS</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">create new pane with horizontal direction</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:left\">create new pane with vertical direction</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hjkl</td>\n<td style=\"text-align:left\">switch pane</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HJKL</td>\n<td style=\"text-align:left\">adjust layout size of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:left\">cycle panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:left\">display serial number of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:left\">close current pane</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{/}</td>\n<td style=\"text-align:left\">switch postion of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Enter</td>\n<td style=\"text-align:left\">enter copy-mode</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:left\">clear pane and history</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>Recently, I am learning some different programming languages which exciting and a little bit tired. Why tired? Coding, testing code and taking notes always need two or three panes in one shell window for each programming language every time, and this is where tmux comes in.</p>\n<p><img src=\"/img/tmux-structure.png\" alt=\"tmux-demo\"></p>\n<blockquote>\n<p>Tmux is a terminal multiplexer, and it lets developers switch easily between programs in one termial, detach them and reattach them to a different terminal. </p>\n</blockquote>","more":"<h2 id=\"Key-bindings\"><a href=\"#Key-bindings\" class=\"headerlink\" title=\"Key bindings\"></a>Key bindings</h2><p>The GitHub repo <a href=\"https://github.com/gpakosz/.tmux\">.tmux</a> is a pretty and versatile self-contained tmux configuration which I am using. <code>C-a</code> is the prefix key provided by this repo, while we can keep use default <code>C-b</code> prefix. The following tables show common key bindings which come into play with prefix key, from session to pane:</p>\n<p><strong>SESSION KEY BINGDINGS</strong></p>\n<ul>\n<li><code>tmux ls</code>，显示所有 session</li>\n<li><code>tmux new -s session-name</code>，新建 session</li>\n<li><code>tmux attach -t session-name</code>，进入 session</li>\n<li><code>tmux kill-session -t session-name</code>，关闭 session</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-f</td>\n<td style=\"text-align:left\">find session</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:left\">hang-up session</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">reload configuration</td>\n</tr>\n</tbody>\n</table>\n<p><strong>WINDOW KEY BINGDINGS</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:left\">create new window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">rename current window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">list all windows</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f</td>\n<td style=\"text-align:left\">find window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0~9</td>\n<td style=\"text-align:left\">switch window according to serial number</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:left\">exit tmux and close current window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">space</td>\n<td style=\"text-align:left\">adjust layout</td>\n</tr>\n</tbody>\n</table>\n<p><strong>PANE KEY BINGDINGS</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Key</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">create new pane with horizontal direction</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:left\">create new pane with vertical direction</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hjkl</td>\n<td style=\"text-align:left\">switch pane</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HJKL</td>\n<td style=\"text-align:left\">adjust layout size of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:left\">cycle panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:left\">display serial number of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:left\">close current pane</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{/}</td>\n<td style=\"text-align:left\">switch postion of panes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Enter</td>\n<td style=\"text-align:left\">enter copy-mode</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:left\">clear pane and history</td>\n</tr>\n</tbody>\n</table>"},{"title":"Mac Tool Kit","date":"2015-12-26T10:17:00.000Z","_content":"\n这会是一篇持续更新的文章，用于记录我在 mac 中常用的开发工具。过去的一年（2015）里，我使用 mac 作为开发的主力平台，在上面折腾过各类软件，以实现最高的开发效率和最舒适的开发环境。一切都是为了开发成果服务，脱离结果强调过程不是我支持的态度，简而言之，这些都是一些增益技巧。\n\n文中工具的排序规则（核心是优先安装具有依赖关系的软件）：\n\n1. 从常用工具中随机选择一个工具作为 random seed\n2. 根据 random seed 的配置过程进行上溯，上溯到的目标工具排在 random seed 之前\n3. 如果上溯到的系统工具不常用，以常用工具替换，比如 chrome 替换 safari\n4. random seed 可组合使用的工具排在 random seed 之后\n5. random seed 中包含的插件在 random seed 中以列表的形式列出\n6. 每次接触新工具，将 random seed 设为该工具，循环执行 2、3、4 过程\n7. 其他工具根据肌肉对键盘的非条件反射随机排列\n\n![mac tool kit 排列方法 2015-12-27.png](/img/mac-tool-kit.png)\n\n<!-- more -->\n\n## preparation\n\n在选择下文中的工具时，主要有两点参考标准：\n\n- 快速，指响应速度和切换速度，或者可以提高这两点的工具。目前键盘操作是无冲突下最快速的控制方式，所以这也是围绕速度进行评估的关键点。\n- 界面有设计亮点，这纯属前端职业病\n\n<div class=\"tip\">\n    初始化 mac 之后，依次进入系统偏好设置 -> 键盘 -> 修饰键，将 Caps Lock 键映射为 Control 键，别问为什么，用心去体会吧 —— Casp Lock 的功能价值与它在键盘布局中所占有的重要位置极度不相符。\n</div>\n \n## applications list\n\n1. [iTerm2](https://www.iterm2.com/downloads.html)，终端工具，替代系统自带的终端，主题 [dracula-theme](https://github.com/zenorocha/dracula-theme)。\n    - Xcode command Line Tool，Homebrew 的依赖，可通过 `xcode-select --install` 命令或者安装 Xcode 来完成\n    - [ici](https://github.com/Flowerowl/ici)，终端词典，基于爱词霸词库 \n\n1. [Xcode](https://developer.apple.com/cn/xcode/downloads/)，苹果产品开发环境，\n\n1. [Homebrew](http://brew.sh/)，OS X 的包管理工具：\n    - [nvm](https://github.com/creationix/nvm)，node 版本管理工具\n    - [node](https://github.com/nodejs/node)，运行在服务端的 JavaScript，使用 nvm 统一管理\n    - [tmux](https://tmux.github.io/)，终端复用工具\n    - [tree](http://mama.indstate.edu/users/ice/tree/)，树状结构目录\n    - [python / python3](https://www.python.org)，python 开发环境\n    - [nginx](http://nginx.org/)，反向代理服务器\n    - [httpie](https://github.com/jakubroztocil/httpie)，替代 curl 的 HTTP 终端工具\n    - [asciinema](https://asciinema.org/)，终端录屏工具\n\n1. [Homebrew Cask](http://caskroom.io/)，使用 hombrew 安装，可用于安装 OS X 应用：\n    - [haskell platform](http://caskroom.io/search)，haskell 开发环境\n\n1. [Chrome / Chrome Canary](http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html)，插件众多，开发调试便利，平时也比较依赖谷歌体系内的东西。插件：\n    - [GitHub Old Header](https://chrome.google.com/webstore/detail/github-old-header/bbencfiifelhglgknaheifiekmjndlek)，在顶部导航区提供一个指向个人页面的链接\n    - [HTTP status](https://chrome.google.com/webstore/detail/http-status/cknfnacbckhfpjahnmkblajcpledpfnp)，在地址栏显示 HTTTP 状态码\n    - [JSON Formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=zh-CN)，格式化浏览器预览到的 JSON 数据\n    - [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN)，为 GitHub 仓库提供一个树状结构目录\n    - [Save to Pocket](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=zh-CN)，右键保存到 Pocket\n\n1. [Sublime Text 3](http://www.sublimetext.com/3)，编辑器，适用多平台响应迅速扩展能力强。插件：\n    - [Package Control](https://packagecontrol.io/installation#st3)，Sublime 扩展插件的安装和管理工具\n    - [DashDoc](https://packagecontrol.io/packages/DashDoc)，调用 Dash\n    - [Emmet](http://emmet.io/)，前端开发工具集\n    - [BracketHighlighter](https://packagecontrol.io/packages/BracketHighlighter)，标签和符号的高亮工具\n    - [SideBarEnhancements](https://packagecontrol.io/packages/SideBarEnhancements)，侧边栏功能扩展插件\n    - [Material Theme](https://github.com/equinusocio/material-theme)，谷歌 material 风格的简洁主题\n    - [Babel](https://packagecontrol.io/packages/Babel)，JSX 和 ES6 的高亮插件，不具有编译功能\n    - [DocBlockr](https://packagecontrol.io/packages/DocBlockr)，Javascript, PHP, CoffeeScript, Actionscript, C & C++ 规范化注释\n\n1. [Dash](https://kapeli.com/dash)，开发文档、代码片段管理工具\n\n1. [alfred](https://www.alfredapp.com/)，必备辅助工具，提高工作效率，不要让双手离开键盘\n\n1. [Pocket](https://getpocket.com/)，离线阅读工具，也被用来做知识管理\n\n1. [Snip](http://snip.qq.com/)，滚动截屏必备工具\n\n1. [Ember](http://realmacsoftware.com/ember/)，图库管理，可以订阅 dribbble popular。\n\n1. [Microsoft office](https://products.office.com/zh-cn/mac/microsoft-office-for-mac)，我喜欢用 PowerPoint 来做流程图、序列图……\n\n1. [SizeUp](http://www.irradiatedsoftware.com/sizeup/)，管理应用程序窗口的位置和大小\n\n## host configuration\n\n最近在熟悉云主机的使用，下面是配置过程：\n\n1. ssh root 账号登录云主机，通过 `passwd` 命令更改主机密码，至于怎样设置结构复杂的密码，建议参考文章[《每一个程序员都有一颗当诗人的心》](http://www.hello-code.com/diary/201409/2223.html)。\n\n1. 使用 root 账号创建普通用户：`adduser sean`、`passwd sean`，然后为新用户配置权限，通过 `visudo` 命令添加 `sean ALL=(ALL) ALL` 配置信息，完成后退出 root 账户，使用普通账户登录云主机，比如这里的 sean。\n\n1. 安装常用工具：\n    - [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n    - [amix/vimrc](https://github.com/amix/vimrc)\n    - [bling/vim-airline](https://github.com/bling/vim-airline)\n    - [powerline/fonts](https://github.com/powerline/fonts)\n    - [nvm](https://github.com/creationix/nvm)\n    - [node](https://github.com/nodejs/node)\n    - [node:tldr](https://github.com/tldr-pages/tldr)\n    - [apt-get:tree](https://packages.debian.org/search?keywords=tree)\n\n## tldr\n\n不断地在中英文间进行切换也是非常低效率的操作，所以，初步设定在 2016 年底脱离非业务开发下对中文输入的依赖——不过我最喜欢的哲学思维还是先秦百家交叉融汇出的框架。","source":"_posts/mac-tool-kit.md","raw":"title: mac tool kit\ndate: 2015-12-26 18:17:00\n---\n\n这会是一篇持续更新的文章，用于记录我在 mac 中常用的开发工具。过去的一年（2015）里，我使用 mac 作为开发的主力平台，在上面折腾过各类软件，以实现最高的开发效率和最舒适的开发环境。一切都是为了开发成果服务，脱离结果强调过程不是我支持的态度，简而言之，这些都是一些增益技巧。\n\n文中工具的排序规则（核心是优先安装具有依赖关系的软件）：\n\n1. 从常用工具中随机选择一个工具作为 random seed\n2. 根据 random seed 的配置过程进行上溯，上溯到的目标工具排在 random seed 之前\n3. 如果上溯到的系统工具不常用，以常用工具替换，比如 chrome 替换 safari\n4. random seed 可组合使用的工具排在 random seed 之后\n5. random seed 中包含的插件在 random seed 中以列表的形式列出\n6. 每次接触新工具，将 random seed 设为该工具，循环执行 2、3、4 过程\n7. 其他工具根据肌肉对键盘的非条件反射随机排列\n\n![mac tool kit 排列方法 2015-12-27.png](/img/mac-tool-kit.png)\n\n<!-- more -->\n\n## preparation\n\n在选择下文中的工具时，主要有两点参考标准：\n\n- 快速，指响应速度和切换速度，或者可以提高这两点的工具。目前键盘操作是无冲突下最快速的控制方式，所以这也是围绕速度进行评估的关键点。\n- 界面有设计亮点，这纯属前端职业病\n\n<div class=\"tip\">\n    初始化 mac 之后，依次进入系统偏好设置 -> 键盘 -> 修饰键，将 Caps Lock 键映射为 Control 键，别问为什么，用心去体会吧 —— Casp Lock 的功能价值与它在键盘布局中所占有的重要位置极度不相符。\n</div>\n \n## applications list\n\n1. [iTerm2](https://www.iterm2.com/downloads.html)，终端工具，替代系统自带的终端，主题 [dracula-theme](https://github.com/zenorocha/dracula-theme)。\n    - Xcode command Line Tool，Homebrew 的依赖，可通过 `xcode-select --install` 命令或者安装 Xcode 来完成\n    - [ici](https://github.com/Flowerowl/ici)，终端词典，基于爱词霸词库 \n\n1. [Xcode](https://developer.apple.com/cn/xcode/downloads/)，苹果产品开发环境，\n\n1. [Homebrew](http://brew.sh/)，OS X 的包管理工具：\n    - [nvm](https://github.com/creationix/nvm)，node 版本管理工具\n    - [node](https://github.com/nodejs/node)，运行在服务端的 JavaScript，使用 nvm 统一管理\n    - [tmux](https://tmux.github.io/)，终端复用工具\n    - [tree](http://mama.indstate.edu/users/ice/tree/)，树状结构目录\n    - [python / python3](https://www.python.org)，python 开发环境\n    - [nginx](http://nginx.org/)，反向代理服务器\n    - [httpie](https://github.com/jakubroztocil/httpie)，替代 curl 的 HTTP 终端工具\n    - [asciinema](https://asciinema.org/)，终端录屏工具\n\n1. [Homebrew Cask](http://caskroom.io/)，使用 hombrew 安装，可用于安装 OS X 应用：\n    - [haskell platform](http://caskroom.io/search)，haskell 开发环境\n\n1. [Chrome / Chrome Canary](http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html)，插件众多，开发调试便利，平时也比较依赖谷歌体系内的东西。插件：\n    - [GitHub Old Header](https://chrome.google.com/webstore/detail/github-old-header/bbencfiifelhglgknaheifiekmjndlek)，在顶部导航区提供一个指向个人页面的链接\n    - [HTTP status](https://chrome.google.com/webstore/detail/http-status/cknfnacbckhfpjahnmkblajcpledpfnp)，在地址栏显示 HTTTP 状态码\n    - [JSON Formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=zh-CN)，格式化浏览器预览到的 JSON 数据\n    - [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN)，为 GitHub 仓库提供一个树状结构目录\n    - [Save to Pocket](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=zh-CN)，右键保存到 Pocket\n\n1. [Sublime Text 3](http://www.sublimetext.com/3)，编辑器，适用多平台响应迅速扩展能力强。插件：\n    - [Package Control](https://packagecontrol.io/installation#st3)，Sublime 扩展插件的安装和管理工具\n    - [DashDoc](https://packagecontrol.io/packages/DashDoc)，调用 Dash\n    - [Emmet](http://emmet.io/)，前端开发工具集\n    - [BracketHighlighter](https://packagecontrol.io/packages/BracketHighlighter)，标签和符号的高亮工具\n    - [SideBarEnhancements](https://packagecontrol.io/packages/SideBarEnhancements)，侧边栏功能扩展插件\n    - [Material Theme](https://github.com/equinusocio/material-theme)，谷歌 material 风格的简洁主题\n    - [Babel](https://packagecontrol.io/packages/Babel)，JSX 和 ES6 的高亮插件，不具有编译功能\n    - [DocBlockr](https://packagecontrol.io/packages/DocBlockr)，Javascript, PHP, CoffeeScript, Actionscript, C & C++ 规范化注释\n\n1. [Dash](https://kapeli.com/dash)，开发文档、代码片段管理工具\n\n1. [alfred](https://www.alfredapp.com/)，必备辅助工具，提高工作效率，不要让双手离开键盘\n\n1. [Pocket](https://getpocket.com/)，离线阅读工具，也被用来做知识管理\n\n1. [Snip](http://snip.qq.com/)，滚动截屏必备工具\n\n1. [Ember](http://realmacsoftware.com/ember/)，图库管理，可以订阅 dribbble popular。\n\n1. [Microsoft office](https://products.office.com/zh-cn/mac/microsoft-office-for-mac)，我喜欢用 PowerPoint 来做流程图、序列图……\n\n1. [SizeUp](http://www.irradiatedsoftware.com/sizeup/)，管理应用程序窗口的位置和大小\n\n## host configuration\n\n最近在熟悉云主机的使用，下面是配置过程：\n\n1. ssh root 账号登录云主机，通过 `passwd` 命令更改主机密码，至于怎样设置结构复杂的密码，建议参考文章[《每一个程序员都有一颗当诗人的心》](http://www.hello-code.com/diary/201409/2223.html)。\n\n1. 使用 root 账号创建普通用户：`adduser sean`、`passwd sean`，然后为新用户配置权限，通过 `visudo` 命令添加 `sean ALL=(ALL) ALL` 配置信息，完成后退出 root 账户，使用普通账户登录云主机，比如这里的 sean。\n\n1. 安装常用工具：\n    - [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n    - [amix/vimrc](https://github.com/amix/vimrc)\n    - [bling/vim-airline](https://github.com/bling/vim-airline)\n    - [powerline/fonts](https://github.com/powerline/fonts)\n    - [nvm](https://github.com/creationix/nvm)\n    - [node](https://github.com/nodejs/node)\n    - [node:tldr](https://github.com/tldr-pages/tldr)\n    - [apt-get:tree](https://packages.debian.org/search?keywords=tree)\n\n## tldr\n\n不断地在中英文间进行切换也是非常低效率的操作，所以，初步设定在 2016 年底脱离非业务开发下对中文输入的依赖——不过我最喜欢的哲学思维还是先秦百家交叉融汇出的框架。","slug":"mac-tool-kit","published":1,"updated":"2016-03-13T15:55:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarox000ifsdidg3u1vns","content":"<p>这会是一篇持续更新的文章，用于记录我在 mac 中常用的开发工具。过去的一年（2015）里，我使用 mac 作为开发的主力平台，在上面折腾过各类软件，以实现最高的开发效率和最舒适的开发环境。一切都是为了开发成果服务，脱离结果强调过程不是我支持的态度，简而言之，这些都是一些增益技巧。</p>\n<p>文中工具的排序规则（核心是优先安装具有依赖关系的软件）：</p>\n<ol>\n<li>从常用工具中随机选择一个工具作为 random seed</li>\n<li>根据 random seed 的配置过程进行上溯，上溯到的目标工具排在 random seed 之前</li>\n<li>如果上溯到的系统工具不常用，以常用工具替换，比如 chrome 替换 safari</li>\n<li>random seed 可组合使用的工具排在 random seed 之后</li>\n<li>random seed 中包含的插件在 random seed 中以列表的形式列出</li>\n<li>每次接触新工具，将 random seed 设为该工具，循环执行 2、3、4 过程</li>\n<li>其他工具根据肌肉对键盘的非条件反射随机排列</li>\n</ol>\n<p><img src=\"/img/mac-tool-kit.png\" alt=\"mac tool kit 排列方法 2015-12-27.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"preparation\"><a href=\"#preparation\" class=\"headerlink\" title=\"preparation\"></a>preparation</h2><p>在选择下文中的工具时，主要有两点参考标准：</p>\n<ul>\n<li>快速，指响应速度和切换速度，或者可以提高这两点的工具。目前键盘操作是无冲突下最快速的控制方式，所以这也是围绕速度进行评估的关键点。</li>\n<li>界面有设计亮点，这纯属前端职业病</li>\n</ul>\n<div class=\"tip\"><br>    初始化 mac 之后，依次进入系统偏好设置 -&gt; 键盘 -&gt; 修饰键，将 Caps Lock 键映射为 Control 键，别问为什么，用心去体会吧 —— Casp Lock 的功能价值与它在键盘布局中所占有的重要位置极度不相符。<br></div>\n\n<h2 id=\"applications-list\"><a href=\"#applications-list\" class=\"headerlink\" title=\"applications list\"></a>applications list</h2><ol>\n<li><p><a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"external\">iTerm2</a>，终端工具，替代系统自带的终端，主题 <a href=\"https://github.com/zenorocha/dracula-theme\" target=\"_blank\" rel=\"external\">dracula-theme</a>。</p>\n<ul>\n<li>Xcode command Line Tool，Homebrew 的依赖，可通过 <code>xcode-select --install</code> 命令或者安装 Xcode 来完成</li>\n<li><a href=\"https://github.com/Flowerowl/ici\" target=\"_blank\" rel=\"external\">ici</a>，终端词典，基于爱词霸词库 </li>\n</ul>\n</li>\n<li><p><a href=\"https://developer.apple.com/cn/xcode/downloads/\" target=\"_blank\" rel=\"external\">Xcode</a>，苹果产品开发环境，</p>\n</li>\n<li><p><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a>，OS X 的包管理工具：</p>\n<ul>\n<li><a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a>，node 版本管理工具</li>\n<li><a href=\"https://github.com/nodejs/node\" target=\"_blank\" rel=\"external\">node</a>，运行在服务端的 JavaScript，使用 nvm 统一管理</li>\n<li><a href=\"https://tmux.github.io/\" target=\"_blank\" rel=\"external\">tmux</a>，终端复用工具</li>\n<li><a href=\"http://mama.indstate.edu/users/ice/tree/\" target=\"_blank\" rel=\"external\">tree</a>，树状结构目录</li>\n<li><a href=\"https://www.python.org\" target=\"_blank\" rel=\"external\">python / python3</a>，python 开发环境</li>\n<li><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"external\">nginx</a>，反向代理服务器</li>\n<li><a href=\"https://github.com/jakubroztocil/httpie\" target=\"_blank\" rel=\"external\">httpie</a>，替代 curl 的 HTTP 终端工具</li>\n<li><a href=\"https://asciinema.org/\" target=\"_blank\" rel=\"external\">asciinema</a>，终端录屏工具</li>\n</ul>\n</li>\n<li><p><a href=\"http://caskroom.io/\" target=\"_blank\" rel=\"external\">Homebrew Cask</a>，使用 hombrew 安装，可用于安装 OS X 应用：</p>\n<ul>\n<li><a href=\"http://caskroom.io/search\" target=\"_blank\" rel=\"external\">haskell platform</a>，haskell 开发环境</li>\n</ul>\n</li>\n<li><p><a href=\"http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">Chrome / Chrome Canary</a>，插件众多，开发调试便利，平时也比较依赖谷歌体系内的东西。插件：</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/github-old-header/bbencfiifelhglgknaheifiekmjndlek\" target=\"_blank\" rel=\"external\">GitHub Old Header</a>，在顶部导航区提供一个指向个人页面的链接</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/http-status/cknfnacbckhfpjahnmkblajcpledpfnp\" target=\"_blank\" rel=\"external\">HTTP status</a>，在地址栏显示 HTTTP 状态码</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=zh-CN\" target=\"_blank\" rel=\"external\">JSON Formatter</a>，格式化浏览器预览到的 JSON 数据</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN\" target=\"_blank\" rel=\"external\">Octotree</a>，为 GitHub 仓库提供一个树状结构目录</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=zh-CN\" target=\"_blank\" rel=\"external\">Save to Pocket</a>，右键保存到 Pocket</li>\n</ul>\n</li>\n<li><p><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">Sublime Text 3</a>，编辑器，适用多平台响应迅速扩展能力强。插件：</p>\n<ul>\n<li><a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">Package Control</a>，Sublime 扩展插件的安装和管理工具</li>\n<li><a href=\"https://packagecontrol.io/packages/DashDoc\" target=\"_blank\" rel=\"external\">DashDoc</a>，调用 Dash</li>\n<li><a href=\"http://emmet.io/\" target=\"_blank\" rel=\"external\">Emmet</a>，前端开发工具集</li>\n<li><a href=\"https://packagecontrol.io/packages/BracketHighlighter\" target=\"_blank\" rel=\"external\">BracketHighlighter</a>，标签和符号的高亮工具</li>\n<li><a href=\"https://packagecontrol.io/packages/SideBarEnhancements\" target=\"_blank\" rel=\"external\">SideBarEnhancements</a>，侧边栏功能扩展插件</li>\n<li><a href=\"https://github.com/equinusocio/material-theme\" target=\"_blank\" rel=\"external\">Material Theme</a>，谷歌 material 风格的简洁主题</li>\n<li><a href=\"https://packagecontrol.io/packages/Babel\" target=\"_blank\" rel=\"external\">Babel</a>，JSX 和 ES6 的高亮插件，不具有编译功能</li>\n<li><a href=\"https://packagecontrol.io/packages/DocBlockr\" target=\"_blank\" rel=\"external\">DocBlockr</a>，Javascript, PHP, CoffeeScript, Actionscript, C &amp; C++ 规范化注释</li>\n</ul>\n</li>\n<li><p><a href=\"https://kapeli.com/dash\" target=\"_blank\" rel=\"external\">Dash</a>，开发文档、代码片段管理工具</p>\n</li>\n<li><p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"external\">alfred</a>，必备辅助工具，提高工作效率，不要让双手离开键盘</p>\n</li>\n<li><p><a href=\"https://getpocket.com/\" target=\"_blank\" rel=\"external\">Pocket</a>，离线阅读工具，也被用来做知识管理</p>\n</li>\n<li><p><a href=\"http://snip.qq.com/\" target=\"_blank\" rel=\"external\">Snip</a>，滚动截屏必备工具</p>\n</li>\n<li><p><a href=\"http://realmacsoftware.com/ember/\" target=\"_blank\" rel=\"external\">Ember</a>，图库管理，可以订阅 dribbble popular。</p>\n</li>\n<li><p><a href=\"https://products.office.com/zh-cn/mac/microsoft-office-for-mac\" target=\"_blank\" rel=\"external\">Microsoft office</a>，我喜欢用 PowerPoint 来做流程图、序列图……</p>\n</li>\n<li><p><a href=\"http://www.irradiatedsoftware.com/sizeup/\" target=\"_blank\" rel=\"external\">SizeUp</a>，管理应用程序窗口的位置和大小</p>\n</li>\n</ol>\n<h2 id=\"host-configuration\"><a href=\"#host-configuration\" class=\"headerlink\" title=\"host configuration\"></a>host configuration</h2><p>最近在熟悉云主机的使用，下面是配置过程：</p>\n<ol>\n<li><p>ssh root 账号登录云主机，通过 <code>passwd</code> 命令更改主机密码，至于怎样设置结构复杂的密码，建议参考文章<a href=\"http://www.hello-code.com/diary/201409/2223.html\" target=\"_blank\" rel=\"external\">《每一个程序员都有一颗当诗人的心》</a>。</p>\n</li>\n<li><p>使用 root 账号创建普通用户：<code>adduser sean</code>、<code>passwd sean</code>，然后为新用户配置权限，通过 <code>visudo</code> 命令添加 <code>sean ALL=(ALL) ALL</code> 配置信息，完成后退出 root 账户，使用普通账户登录云主机，比如这里的 sean。</p>\n</li>\n<li><p>安装常用工具：</p>\n<ul>\n<li><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a></li>\n<li><a href=\"https://github.com/amix/vimrc\" target=\"_blank\" rel=\"external\">amix/vimrc</a></li>\n<li><a href=\"https://github.com/bling/vim-airline\" target=\"_blank\" rel=\"external\">bling/vim-airline</a></li>\n<li><a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"external\">powerline/fonts</a></li>\n<li><a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a></li>\n<li><a href=\"https://github.com/nodejs/node\" target=\"_blank\" rel=\"external\">node</a></li>\n<li><a href=\"https://github.com/tldr-pages/tldr\" target=\"_blank\" rel=\"external\">node:tldr</a></li>\n<li><a href=\"https://packages.debian.org/search?keywords=tree\" target=\"_blank\" rel=\"external\">apt-get:tree</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"headerlink\" title=\"tldr\"></a>tldr</h2><p>不断地在中英文间进行切换也是非常低效率的操作，所以，初步设定在 2016 年底脱离非业务开发下对中文输入的依赖——不过我最喜欢的哲学思维还是先秦百家交叉融汇出的框架。</p>\n","excerpt":"<p>这会是一篇持续更新的文章，用于记录我在 mac 中常用的开发工具。过去的一年（2015）里，我使用 mac 作为开发的主力平台，在上面折腾过各类软件，以实现最高的开发效率和最舒适的开发环境。一切都是为了开发成果服务，脱离结果强调过程不是我支持的态度，简而言之，这些都是一些增益技巧。</p>\n<p>文中工具的排序规则（核心是优先安装具有依赖关系的软件）：</p>\n<ol>\n<li>从常用工具中随机选择一个工具作为 random seed</li>\n<li>根据 random seed 的配置过程进行上溯，上溯到的目标工具排在 random seed 之前</li>\n<li>如果上溯到的系统工具不常用，以常用工具替换，比如 chrome 替换 safari</li>\n<li>random seed 可组合使用的工具排在 random seed 之后</li>\n<li>random seed 中包含的插件在 random seed 中以列表的形式列出</li>\n<li>每次接触新工具，将 random seed 设为该工具，循环执行 2、3、4 过程</li>\n<li>其他工具根据肌肉对键盘的非条件反射随机排列</li>\n</ol>\n<p><img src=\"/img/mac-tool-kit.png\" alt=\"mac tool kit 排列方法 2015-12-27.png\"></p>","more":"<h2 id=\"preparation\"><a href=\"#preparation\" class=\"headerlink\" title=\"preparation\"></a>preparation</h2><p>在选择下文中的工具时，主要有两点参考标准：</p>\n<ul>\n<li>快速，指响应速度和切换速度，或者可以提高这两点的工具。目前键盘操作是无冲突下最快速的控制方式，所以这也是围绕速度进行评估的关键点。</li>\n<li>界面有设计亮点，这纯属前端职业病</li>\n</ul>\n<div class=\"tip\"><br>    初始化 mac 之后，依次进入系统偏好设置 -&gt; 键盘 -&gt; 修饰键，将 Caps Lock 键映射为 Control 键，别问为什么，用心去体会吧 —— Casp Lock 的功能价值与它在键盘布局中所占有的重要位置极度不相符。<br></div>\n\n<h2 id=\"applications-list\"><a href=\"#applications-list\" class=\"headerlink\" title=\"applications list\"></a>applications list</h2><ol>\n<li><p><a href=\"https://www.iterm2.com/downloads.html\">iTerm2</a>，终端工具，替代系统自带的终端，主题 <a href=\"https://github.com/zenorocha/dracula-theme\">dracula-theme</a>。</p>\n<ul>\n<li>Xcode command Line Tool，Homebrew 的依赖，可通过 <code>xcode-select --install</code> 命令或者安装 Xcode 来完成</li>\n<li><a href=\"https://github.com/Flowerowl/ici\">ici</a>，终端词典，基于爱词霸词库 </li>\n</ul>\n</li>\n<li><p><a href=\"https://developer.apple.com/cn/xcode/downloads/\">Xcode</a>，苹果产品开发环境，</p>\n</li>\n<li><p><a href=\"http://brew.sh/\">Homebrew</a>，OS X 的包管理工具：</p>\n<ul>\n<li><a href=\"https://github.com/creationix/nvm\">nvm</a>，node 版本管理工具</li>\n<li><a href=\"https://github.com/nodejs/node\">node</a>，运行在服务端的 JavaScript，使用 nvm 统一管理</li>\n<li><a href=\"https://tmux.github.io/\">tmux</a>，终端复用工具</li>\n<li><a href=\"http://mama.indstate.edu/users/ice/tree/\">tree</a>，树状结构目录</li>\n<li><a href=\"https://www.python.org\">python / python3</a>，python 开发环境</li>\n<li><a href=\"http://nginx.org/\">nginx</a>，反向代理服务器</li>\n<li><a href=\"https://github.com/jakubroztocil/httpie\">httpie</a>，替代 curl 的 HTTP 终端工具</li>\n<li><a href=\"https://asciinema.org/\">asciinema</a>，终端录屏工具</li>\n</ul>\n</li>\n<li><p><a href=\"http://caskroom.io/\">Homebrew Cask</a>，使用 hombrew 安装，可用于安装 OS X 应用：</p>\n<ul>\n<li><a href=\"http://caskroom.io/search\">haskell platform</a>，haskell 开发环境</li>\n</ul>\n</li>\n<li><p><a href=\"http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html\">Chrome / Chrome Canary</a>，插件众多，开发调试便利，平时也比较依赖谷歌体系内的东西。插件：</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/github-old-header/bbencfiifelhglgknaheifiekmjndlek\">GitHub Old Header</a>，在顶部导航区提供一个指向个人页面的链接</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/http-status/cknfnacbckhfpjahnmkblajcpledpfnp\">HTTP status</a>，在地址栏显示 HTTTP 状态码</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=zh-CN\">JSON Formatter</a>，格式化浏览器预览到的 JSON 数据</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN\">Octotree</a>，为 GitHub 仓库提供一个树状结构目录</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=zh-CN\">Save to Pocket</a>，右键保存到 Pocket</li>\n</ul>\n</li>\n<li><p><a href=\"http://www.sublimetext.com/3\">Sublime Text 3</a>，编辑器，适用多平台响应迅速扩展能力强。插件：</p>\n<ul>\n<li><a href=\"https://packagecontrol.io/installation#st3\">Package Control</a>，Sublime 扩展插件的安装和管理工具</li>\n<li><a href=\"https://packagecontrol.io/packages/DashDoc\">DashDoc</a>，调用 Dash</li>\n<li><a href=\"http://emmet.io/\">Emmet</a>，前端开发工具集</li>\n<li><a href=\"https://packagecontrol.io/packages/BracketHighlighter\">BracketHighlighter</a>，标签和符号的高亮工具</li>\n<li><a href=\"https://packagecontrol.io/packages/SideBarEnhancements\">SideBarEnhancements</a>，侧边栏功能扩展插件</li>\n<li><a href=\"https://github.com/equinusocio/material-theme\">Material Theme</a>，谷歌 material 风格的简洁主题</li>\n<li><a href=\"https://packagecontrol.io/packages/Babel\">Babel</a>，JSX 和 ES6 的高亮插件，不具有编译功能</li>\n<li><a href=\"https://packagecontrol.io/packages/DocBlockr\">DocBlockr</a>，Javascript, PHP, CoffeeScript, Actionscript, C &amp; C++ 规范化注释</li>\n</ul>\n</li>\n<li><p><a href=\"https://kapeli.com/dash\">Dash</a>，开发文档、代码片段管理工具</p>\n</li>\n<li><p><a href=\"https://www.alfredapp.com/\">alfred</a>，必备辅助工具，提高工作效率，不要让双手离开键盘</p>\n</li>\n<li><p><a href=\"https://getpocket.com/\">Pocket</a>，离线阅读工具，也被用来做知识管理</p>\n</li>\n<li><p><a href=\"http://snip.qq.com/\">Snip</a>，滚动截屏必备工具</p>\n</li>\n<li><p><a href=\"http://realmacsoftware.com/ember/\">Ember</a>，图库管理，可以订阅 dribbble popular。</p>\n</li>\n<li><p><a href=\"https://products.office.com/zh-cn/mac/microsoft-office-for-mac\">Microsoft office</a>，我喜欢用 PowerPoint 来做流程图、序列图……</p>\n</li>\n<li><p><a href=\"http://www.irradiatedsoftware.com/sizeup/\">SizeUp</a>，管理应用程序窗口的位置和大小</p>\n</li>\n</ol>\n<h2 id=\"host-configuration\"><a href=\"#host-configuration\" class=\"headerlink\" title=\"host configuration\"></a>host configuration</h2><p>最近在熟悉云主机的使用，下面是配置过程：</p>\n<ol>\n<li><p>ssh root 账号登录云主机，通过 <code>passwd</code> 命令更改主机密码，至于怎样设置结构复杂的密码，建议参考文章<a href=\"http://www.hello-code.com/diary/201409/2223.html\">《每一个程序员都有一颗当诗人的心》</a>。</p>\n</li>\n<li><p>使用 root 账号创建普通用户：<code>adduser sean</code>、<code>passwd sean</code>，然后为新用户配置权限，通过 <code>visudo</code> 命令添加 <code>sean ALL=(ALL) ALL</code> 配置信息，完成后退出 root 账户，使用普通账户登录云主机，比如这里的 sean。</p>\n</li>\n<li><p>安装常用工具：</p>\n<ul>\n<li><a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a></li>\n<li><a href=\"https://github.com/amix/vimrc\">amix/vimrc</a></li>\n<li><a href=\"https://github.com/bling/vim-airline\">bling/vim-airline</a></li>\n<li><a href=\"https://github.com/powerline/fonts\">powerline/fonts</a></li>\n<li><a href=\"https://github.com/creationix/nvm\">nvm</a></li>\n<li><a href=\"https://github.com/nodejs/node\">node</a></li>\n<li><a href=\"https://github.com/tldr-pages/tldr\">node:tldr</a></li>\n<li><a href=\"https://packages.debian.org/search?keywords=tree\">apt-get:tree</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"headerlink\" title=\"tldr\"></a>tldr</h2><p>不断地在中英文间进行切换也是非常低效率的操作，所以，初步设定在 2016 年底脱离非业务开发下对中文输入的依赖——不过我最喜欢的哲学思维还是先秦百家交叉融汇出的框架。</p>"},{"title":"WEB 开发者必看的技术站点","date":"2015-12-31T06:49:13.000Z","_content":"\n> 本文总结自 Quora 上的一个问答：[What are the top 10 websites a web developer must see](https://www.quora.com/What-are-the-top-10-websites-a-web-developer-must-see)。\n\n读专业书、看教程视频、浏览技术博客、参加讲座分享……这些提高技能的途径各有优劣，相比较而言，博客或者说技术网站可以最快接触前沿技术、分享技术实践，所以，除了依赖谷歌反馈的词条，我们还可以主动收集一些优秀的技术站点，便于自己了解、参与和实践业界最活跃的技术。\n\n<!-- more -->\n\n1. [GitHub](https://github.com) —— 当下最流行的版本管理工具，云集了世界上最优秀的开发者。在 GitHub 开源之风盛行，我喜欢在这里关注各类优秀项目，也喜欢在这里查找各种工具，比如需要某个 alfred 的插件，在这里搜一下也许就能找到，如果遇到了问题，和开发者反馈一下也不是什么难事。最近喜欢浏览 trending 和 follow 大神，便于了解业界动态，顺便细化下自己的技术栈。\n\n1. [A List Apart](http://alistapart.com/)—— 我想给这个网站定义几个头衔，比如顶级、前沿、经典、最具影响力之类等等。这个网站创办十八年了（from 1998），专注对前端方向的探索，每一篇文章都是深入思考的结晶。典型的文章就是[《Responsive Web Design》](http://alistapart.com/article/responsive-web-design)，发表之后迅速启发了业界的开发思维，打开了响应式设计的大门。\n\n1. [MDN](https://developer.mozilla.org) —— Mozilla 开发者网络知识库，权威、全面的 WEB 文档，支持多种语言，示例丰富。\n\n1. [Stack Overflow](http://stackoverflow.com/) —— 活跃的技术问答社区。一般问题都有开发者问过了，如果找不到，换一换关键字，最后的方式才应该是提问。作为开发者，为了使用 Stack Overflow 也应该给自己准备一个翻墙工具，永远不要闭门造车般的解决问题。\n\n1. [Can I Use](http://caniuse.com/) —— 如果你有兼容性问题，先来这里看看浏览器的支持情况吧。\n\n1. [CSS-Tricks](https://css-tricks.com/) —— 这里发表所有和 CSS 有关的技巧和教程，当然如果你想来这里找点黑科技，也是有的。\n\n1. [Codrops](http://tympanus.net/codrops/) —— 如果有一天我可以靠理想生活，那我肯定要先实践一番 Codrops 上的教程，这些教程的效果绝对出彩，这也是前端吸引我的魅力所在。\n\n1. [CodePen](http://codepen.io/) —— 在线 WEB 开发工具。一方面我们可以在这里快速实践自己的灵感，另一方面当我们的调试遇到困境，在这里搭一个 DEMO 详细描述下问题，然后发给有经验的人，绝对是最佳的问答礼仪。\n\n1. [Dribble](https://dribbble.com/) —— 作为前端开发者，要求我们必须具备一定的审美水平，来 Dribble 看看吧，你会重新燃起创造力的激情，比如用 WEB 技术实践几个 Driible 的原型图，那一定帅得不行不行的。\n\n1. [CSS Zen Garden（CSS 禅意花园）](http://csszengarden.com/)—— 现在网站的效果越来风格化，无论是简约还是拟物都十分精致，相比而言，来自上个年代的 CSS 禅意花园已经显得并不是很出彩了，但实际上其中还有很多重要的东西值得学习，建议各位读一读[ CSS 禅意花园](http://book.douban.com/subject/2052176/)这本书，看一下作者对各个主题的分析，了解从设计立意到编码开发的诸多思考。\n\n\n下面这些网站的内容大都涵盖了从 WEB 到设计、从图形到动效、从数据到运维的方方面面，是非常全面的技术站点：\n\n1. [DZone](https://dzone.com/) —— Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.\n\n1. [Smashing Magazine](http://www.smashingmagazine.com/) —— Smashing Magazine is an online magazine for professional Web designers and developers, with a focus on useful techniques, best practices and valuable resources.\n \n1. [SitePoint](http://www.sitepoint.com/) —— Learn Web Design & Development with SitePoint tutorials, courses and books - HTML5, CSS3, JavaScript, PHP, mobile app development, Responsive Web Design.\n\n1. [CodeProject](http://www.codeproject.com/) —— Free source code and tutorials for Software developers and Architects.; Updated: 2 Jan 2016.","source":"_posts/开发者必看的技术站点.md","raw":"title: WEB 开发者必看的技术站点\ndate: 2015-12-31 14:49:13\n---\n\n> 本文总结自 Quora 上的一个问答：[What are the top 10 websites a web developer must see](https://www.quora.com/What-are-the-top-10-websites-a-web-developer-must-see)。\n\n读专业书、看教程视频、浏览技术博客、参加讲座分享……这些提高技能的途径各有优劣，相比较而言，博客或者说技术网站可以最快接触前沿技术、分享技术实践，所以，除了依赖谷歌反馈的词条，我们还可以主动收集一些优秀的技术站点，便于自己了解、参与和实践业界最活跃的技术。\n\n<!-- more -->\n\n1. [GitHub](https://github.com) —— 当下最流行的版本管理工具，云集了世界上最优秀的开发者。在 GitHub 开源之风盛行，我喜欢在这里关注各类优秀项目，也喜欢在这里查找各种工具，比如需要某个 alfred 的插件，在这里搜一下也许就能找到，如果遇到了问题，和开发者反馈一下也不是什么难事。最近喜欢浏览 trending 和 follow 大神，便于了解业界动态，顺便细化下自己的技术栈。\n\n1. [A List Apart](http://alistapart.com/)—— 我想给这个网站定义几个头衔，比如顶级、前沿、经典、最具影响力之类等等。这个网站创办十八年了（from 1998），专注对前端方向的探索，每一篇文章都是深入思考的结晶。典型的文章就是[《Responsive Web Design》](http://alistapart.com/article/responsive-web-design)，发表之后迅速启发了业界的开发思维，打开了响应式设计的大门。\n\n1. [MDN](https://developer.mozilla.org) —— Mozilla 开发者网络知识库，权威、全面的 WEB 文档，支持多种语言，示例丰富。\n\n1. [Stack Overflow](http://stackoverflow.com/) —— 活跃的技术问答社区。一般问题都有开发者问过了，如果找不到，换一换关键字，最后的方式才应该是提问。作为开发者，为了使用 Stack Overflow 也应该给自己准备一个翻墙工具，永远不要闭门造车般的解决问题。\n\n1. [Can I Use](http://caniuse.com/) —— 如果你有兼容性问题，先来这里看看浏览器的支持情况吧。\n\n1. [CSS-Tricks](https://css-tricks.com/) —— 这里发表所有和 CSS 有关的技巧和教程，当然如果你想来这里找点黑科技，也是有的。\n\n1. [Codrops](http://tympanus.net/codrops/) —— 如果有一天我可以靠理想生活，那我肯定要先实践一番 Codrops 上的教程，这些教程的效果绝对出彩，这也是前端吸引我的魅力所在。\n\n1. [CodePen](http://codepen.io/) —— 在线 WEB 开发工具。一方面我们可以在这里快速实践自己的灵感，另一方面当我们的调试遇到困境，在这里搭一个 DEMO 详细描述下问题，然后发给有经验的人，绝对是最佳的问答礼仪。\n\n1. [Dribble](https://dribbble.com/) —— 作为前端开发者，要求我们必须具备一定的审美水平，来 Dribble 看看吧，你会重新燃起创造力的激情，比如用 WEB 技术实践几个 Driible 的原型图，那一定帅得不行不行的。\n\n1. [CSS Zen Garden（CSS 禅意花园）](http://csszengarden.com/)—— 现在网站的效果越来风格化，无论是简约还是拟物都十分精致，相比而言，来自上个年代的 CSS 禅意花园已经显得并不是很出彩了，但实际上其中还有很多重要的东西值得学习，建议各位读一读[ CSS 禅意花园](http://book.douban.com/subject/2052176/)这本书，看一下作者对各个主题的分析，了解从设计立意到编码开发的诸多思考。\n\n\n下面这些网站的内容大都涵盖了从 WEB 到设计、从图形到动效、从数据到运维的方方面面，是非常全面的技术站点：\n\n1. [DZone](https://dzone.com/) —— Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.\n\n1. [Smashing Magazine](http://www.smashingmagazine.com/) —— Smashing Magazine is an online magazine for professional Web designers and developers, with a focus on useful techniques, best practices and valuable resources.\n \n1. [SitePoint](http://www.sitepoint.com/) —— Learn Web Design & Development with SitePoint tutorials, courses and books - HTML5, CSS3, JavaScript, PHP, mobile app development, Responsive Web Design.\n\n1. [CodeProject](http://www.codeproject.com/) —— Free source code and tutorials for Software developers and Architects.; Updated: 2 Jan 2016.","slug":"开发者必看的技术站点","published":1,"updated":"2016-04-06T06:42:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp1000jfsdi9vr82pu0","content":"<blockquote>\n<p>本文总结自 Quora 上的一个问答：<a href=\"https://www.quora.com/What-are-the-top-10-websites-a-web-developer-must-see\" target=\"_blank\" rel=\"external\">What are the top 10 websites a web developer must see</a>。</p>\n</blockquote>\n<p>读专业书、看教程视频、浏览技术博客、参加讲座分享……这些提高技能的途径各有优劣，相比较而言，博客或者说技术网站可以最快接触前沿技术、分享技术实践，所以，除了依赖谷歌反馈的词条，我们还可以主动收集一些优秀的技术站点，便于自己了解、参与和实践业界最活跃的技术。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p><a href=\"https://github.com\" target=\"_blank\" rel=\"external\">GitHub</a> —— 当下最流行的版本管理工具，云集了世界上最优秀的开发者。在 GitHub 开源之风盛行，我喜欢在这里关注各类优秀项目，也喜欢在这里查找各种工具，比如需要某个 alfred 的插件，在这里搜一下也许就能找到，如果遇到了问题，和开发者反馈一下也不是什么难事。最近喜欢浏览 trending 和 follow 大神，便于了解业界动态，顺便细化下自己的技术栈。</p>\n</li>\n<li><p><a href=\"http://alistapart.com/\" target=\"_blank\" rel=\"external\">A List Apart</a>—— 我想给这个网站定义几个头衔，比如顶级、前沿、经典、最具影响力之类等等。这个网站创办十八年了（from 1998），专注对前端方向的探索，每一篇文章都是深入思考的结晶。典型的文章就是<a href=\"http://alistapart.com/article/responsive-web-design\" target=\"_blank\" rel=\"external\">《Responsive Web Design》</a>，发表之后迅速启发了业界的开发思维，打开了响应式设计的大门。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org\" target=\"_blank\" rel=\"external\">MDN</a> —— Mozilla 开发者网络知识库，权威、全面的 WEB 文档，支持多种语言，示例丰富。</p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">Stack Overflow</a> —— 活跃的技术问答社区。一般问题都有开发者问过了，如果找不到，换一换关键字，最后的方式才应该是提问。作为开发者，为了使用 Stack Overflow 也应该给自己准备一个翻墙工具，永远不要闭门造车般的解决问题。</p>\n</li>\n<li><p><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">Can I Use</a> —— 如果你有兼容性问题，先来这里看看浏览器的支持情况吧。</p>\n</li>\n<li><p><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"external\">CSS-Tricks</a> —— 这里发表所有和 CSS 有关的技巧和教程，当然如果你想来这里找点黑科技，也是有的。</p>\n</li>\n<li><p><a href=\"http://tympanus.net/codrops/\" target=\"_blank\" rel=\"external\">Codrops</a> —— 如果有一天我可以靠理想生活，那我肯定要先实践一番 Codrops 上的教程，这些教程的效果绝对出彩，这也是前端吸引我的魅力所在。</p>\n</li>\n<li><p><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"external\">CodePen</a> —— 在线 WEB 开发工具。一方面我们可以在这里快速实践自己的灵感，另一方面当我们的调试遇到困境，在这里搭一个 DEMO 详细描述下问题，然后发给有经验的人，绝对是最佳的问答礼仪。</p>\n</li>\n<li><p><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"external\">Dribble</a> —— 作为前端开发者，要求我们必须具备一定的审美水平，来 Dribble 看看吧，你会重新燃起创造力的激情，比如用 WEB 技术实践几个 Driible 的原型图，那一定帅得不行不行的。</p>\n</li>\n<li><p><a href=\"http://csszengarden.com/\" target=\"_blank\" rel=\"external\">CSS Zen Garden（CSS 禅意花园）</a>—— 现在网站的效果越来风格化，无论是简约还是拟物都十分精致，相比而言，来自上个年代的 CSS 禅意花园已经显得并不是很出彩了，但实际上其中还有很多重要的东西值得学习，建议各位读一读<a href=\"http://book.douban.com/subject/2052176/\" target=\"_blank\" rel=\"external\"> CSS 禅意花园</a>这本书，看一下作者对各个主题的分析，了解从设计立意到编码开发的诸多思考。</p>\n</li>\n</ol>\n<p>下面这些网站的内容大都涵盖了从 WEB 到设计、从图形到动效、从数据到运维的方方面面，是非常全面的技术站点：</p>\n<ol>\n<li><p><a href=\"https://dzone.com/\" target=\"_blank\" rel=\"external\">DZone</a> —— Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.</p>\n</li>\n<li><p><a href=\"http://www.smashingmagazine.com/\" target=\"_blank\" rel=\"external\">Smashing Magazine</a> —— Smashing Magazine is an online magazine for professional Web designers and developers, with a focus on useful techniques, best practices and valuable resources.</p>\n</li>\n<li><p><a href=\"http://www.sitepoint.com/\" target=\"_blank\" rel=\"external\">SitePoint</a> —— Learn Web Design &amp; Development with SitePoint tutorials, courses and books - HTML5, CSS3, JavaScript, PHP, mobile app development, Responsive Web Design.</p>\n</li>\n<li><p><a href=\"http://www.codeproject.com/\" target=\"_blank\" rel=\"external\">CodeProject</a> —— Free source code and tutorials for Software developers and Architects.; Updated: 2 Jan 2016.</p>\n</li>\n</ol>\n","excerpt":"<blockquote>\n<p>本文总结自 Quora 上的一个问答：<a href=\"https://www.quora.com/What-are-the-top-10-websites-a-web-developer-must-see\">What are the top 10 websites a web developer must see</a>。</p>\n</blockquote>\n<p>读专业书、看教程视频、浏览技术博客、参加讲座分享……这些提高技能的途径各有优劣，相比较而言，博客或者说技术网站可以最快接触前沿技术、分享技术实践，所以，除了依赖谷歌反馈的词条，我们还可以主动收集一些优秀的技术站点，便于自己了解、参与和实践业界最活跃的技术。</p>","more":"<ol>\n<li><p><a href=\"https://github.com\">GitHub</a> —— 当下最流行的版本管理工具，云集了世界上最优秀的开发者。在 GitHub 开源之风盛行，我喜欢在这里关注各类优秀项目，也喜欢在这里查找各种工具，比如需要某个 alfred 的插件，在这里搜一下也许就能找到，如果遇到了问题，和开发者反馈一下也不是什么难事。最近喜欢浏览 trending 和 follow 大神，便于了解业界动态，顺便细化下自己的技术栈。</p>\n</li>\n<li><p><a href=\"http://alistapart.com/\">A List Apart</a>—— 我想给这个网站定义几个头衔，比如顶级、前沿、经典、最具影响力之类等等。这个网站创办十八年了（from 1998），专注对前端方向的探索，每一篇文章都是深入思考的结晶。典型的文章就是<a href=\"http://alistapart.com/article/responsive-web-design\">《Responsive Web Design》</a>，发表之后迅速启发了业界的开发思维，打开了响应式设计的大门。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org\">MDN</a> —— Mozilla 开发者网络知识库，权威、全面的 WEB 文档，支持多种语言，示例丰富。</p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/\">Stack Overflow</a> —— 活跃的技术问答社区。一般问题都有开发者问过了，如果找不到，换一换关键字，最后的方式才应该是提问。作为开发者，为了使用 Stack Overflow 也应该给自己准备一个翻墙工具，永远不要闭门造车般的解决问题。</p>\n</li>\n<li><p><a href=\"http://caniuse.com/\">Can I Use</a> —— 如果你有兼容性问题，先来这里看看浏览器的支持情况吧。</p>\n</li>\n<li><p><a href=\"https://css-tricks.com/\">CSS-Tricks</a> —— 这里发表所有和 CSS 有关的技巧和教程，当然如果你想来这里找点黑科技，也是有的。</p>\n</li>\n<li><p><a href=\"http://tympanus.net/codrops/\">Codrops</a> —— 如果有一天我可以靠理想生活，那我肯定要先实践一番 Codrops 上的教程，这些教程的效果绝对出彩，这也是前端吸引我的魅力所在。</p>\n</li>\n<li><p><a href=\"http://codepen.io/\">CodePen</a> —— 在线 WEB 开发工具。一方面我们可以在这里快速实践自己的灵感，另一方面当我们的调试遇到困境，在这里搭一个 DEMO 详细描述下问题，然后发给有经验的人，绝对是最佳的问答礼仪。</p>\n</li>\n<li><p><a href=\"https://dribbble.com/\">Dribble</a> —— 作为前端开发者，要求我们必须具备一定的审美水平，来 Dribble 看看吧，你会重新燃起创造力的激情，比如用 WEB 技术实践几个 Driible 的原型图，那一定帅得不行不行的。</p>\n</li>\n<li><p><a href=\"http://csszengarden.com/\">CSS Zen Garden（CSS 禅意花园）</a>—— 现在网站的效果越来风格化，无论是简约还是拟物都十分精致，相比而言，来自上个年代的 CSS 禅意花园已经显得并不是很出彩了，但实际上其中还有很多重要的东西值得学习，建议各位读一读<a href=\"http://book.douban.com/subject/2052176/\"> CSS 禅意花园</a>这本书，看一下作者对各个主题的分析，了解从设计立意到编码开发的诸多思考。</p>\n</li>\n</ol>\n<p>下面这些网站的内容大都涵盖了从 WEB 到设计、从图形到动效、从数据到运维的方方面面，是非常全面的技术站点：</p>\n<ol>\n<li><p><a href=\"https://dzone.com/\">DZone</a> —— Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.</p>\n</li>\n<li><p><a href=\"http://www.smashingmagazine.com/\">Smashing Magazine</a> —— Smashing Magazine is an online magazine for professional Web designers and developers, with a focus on useful techniques, best practices and valuable resources.</p>\n</li>\n<li><p><a href=\"http://www.sitepoint.com/\">SitePoint</a> —— Learn Web Design &amp; Development with SitePoint tutorials, courses and books - HTML5, CSS3, JavaScript, PHP, mobile app development, Responsive Web Design.</p>\n</li>\n<li><p><a href=\"http://www.codeproject.com/\">CodeProject</a> —— Free source code and tutorials for Software developers and Architects.; Updated: 2 Jan 2016.</p>\n</li>\n</ol>"},{"title":"性能优化的十二个方面","date":"2016-03-04T12:37:34.000Z","desc":"本文介绍了性能优化的十二个方向，涉及前端开发的诸多方面。","_content":"\n> 翻译自：[12 steps to a faster web app](https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/)\n\n现在，web app 日益重视用户的交互体验，了解性能优化的方式则可以有效提高用户体验。阅读和实践下面的性能优化技巧，可以帮你改善应用的流畅度、渲染时间和其他方面的性能表现。\n\n<!-- more -->\n\n## 概述\n\n对 web app 进行性能优化是一份冗杂沉重的工作，这不仅是因为构建一个 web app 需要前后端协作，而且需要多方面的技术栈：数据库、后端、前端，需要运行在多种平台：iOS，安卓，Chrome，Firefox，Edge。这太复杂了！不过，还是有一些历经实践的通用方式可以用来优化 web app 的性能。在接下来的小节中，我们将逐步介绍相关的细节。\n\n> 一份来自 Bing 的研究表明，页面加载时间每增加 10ms，每年就会减少 $250k 的收入。\n\n#### 过早优化\n\n性能优化的难点在于找出开发中值得优化的地方。Donald Knuth 说过一句经典的话：“过早的优化是一切罪恶的根源”。这句话背后的意思是说：花费大量时间改善 1% 的性能毫无意义。同时，某些优化方案反倒影响了可读性或可维护性，甚至引入了新的问题。换言之，性能优化不应该被视为“榨干应用程序性能的方法”，而应该视为“对性能和收益的平衡性所进行的探索”。在践行以下优化技巧时一定要牢记，盲目优化会影响生产效率，甚至得不偿失。最好的方式是使用分析工具来查找性能瓶颈，并在性能优化和开发效率、可维护性等方面保持平衡。\n\n> 开发者浪费了大量的时间去思考或者担心程序的执行速度，但实际上从调试和后期维护的角度看，这些优化措施往往会带来严重的负面影响。我们应该着重 97% 的运行表现：过早的性能优化是一切罪恶的根源。当然，我们也不应该放弃 3% 的痛点。\n\n## 1. 文件压缩和模块打包\n\nJavaScript 通常是直接使用源码的方式分发的，而源码解析起来往往要慢于字节码。对于小脚本来说，两者解析的速度并不大，但对于大的应用程序来说，则会明显影响应用程序的启动速度。解决这一痛点，正是 [WebAssembly](https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/) 的出发点之一，它将大幅改善程序的启动速度。文件压缩是剔除文件中无用字符的流程，虽然处理后的代码丧失了可读性，但提高了浏览器的解析速度。\n\n另一方面，模块打包可以将不同的脚本合并为一个脚本，从而降低 HTTP 请求，减少资源加载时间。通常来说，这种工作都会交给相应的工具来处理，比如 [Webpack](https://webpack.github.io/)。\n\n```js\nfunction insert(i) {\n    document.write(\"Sample \" + i);\n}\n\nfor(var i = 0; i < 30; ++i) {\n    insert(i);\n}\n```\n\n压缩之后：\n\n```js\n!function(r){function t(o){if(e[o])return e[o].exports;var n=e[o]={exports:{},id:o,loaded:!1};return r[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var e={};return t.m=r,t.c=e,t.p=\"\",t(0)}([function(r,t){function e(r){document.write(\"Sample \"+r)}for(var o=0;30>o;++o)e(o)}]);\n//# sourceMappingURL=bundle.min.js.map\n```\n\n#### 深度打包\n\n使用 Webpack，我们也可以压缩 CSS 和合并图片，进一步改善程序的启动速度。更多有关 Webpack 的信息请参考[官方文档](http://webpack.github.io/docs/)。\n\n## 2. 按需加载\n\n按需加载资源或者说惰性加载资源（特别是图片）对优化 web app 的性能有很大帮助。对于图片较多的页面，使用惰性加载通常有以下三点好处：\n\n- 减少并发请求，缓解服务器压力，提高加载速度\n- 减少浏览器的内存占用率\n- 降低服务器的负载\n\n图片或其他资源惰性加载的方案一般是，在程序启动时加载首屏资源，在页面滚动时持续加载即将进入视口的资源。由于这种方法往往需要与页面结构和开发方式相协调，所以常常使用现有的插件和扩展来实现惰性加载。举例来说，[react-lazy-load](https://github.com/loktar00/react-lazy-load) 是一个基于 React 的图片惰性加载插件：\n\n```js\nconst MyComponent = () => (\n  <div>\n    Scroll to load images.\n    <div className=\"filler\" />\n    <LazyLoad height={762} offsetVertical={300}>\n      <img src='http://apod.nasa.gov/apod/image/1502/HDR_MVMQ20Feb2015ouellet1024.jpg' />\n    </LazyLoad>\n    (...)\n```\n\n一个典型的按需加载实例就是谷歌的[图片搜索工具](https://www.google.com/search?site=&tbm=isch&source=hp&biw=1366&bih=707&q=parrots&oq=parrots&gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA)，点击这一链接并滚动页面，打开开发者工具注意资源的加载时间。\n\n## 3. array-ids\n\n如果你正在使用 React / Ember / Angular 或者其他操作 DOM 的第三方库，那么使用 array-ids（或者是 Angular 1.x 中的 `track-by` 特性）可以有效提高页面性能，对动态网站的性能优化尤为突出。从最新的基准测试中我们也可以看出其中的优势：[More Benchmarks: Virtual DOM vs Angular 1 & 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)](https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/)。\n\n![https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg](https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg)\n\n其背后的核心概念就是尽可能多地重复利用现有节点。Array-ids 便于 DOM 操作引擎根据获取到的 DOM 节点与真实的节点相匹配。如果没有 array-id 或者 track-by，大多数第三方库都会简单粗暴的删除节点然后再创建节点，这会严重影响程序的执行速度。\n\n## 4. 缓存\n\n缓存常用来存储频繁调用的数据，当缓存后的数据再次被调用时，就可以由缓存直接提供数据，提高数据的响应速度。通常来说，一个 web app 都是由多个组件构成的，在这些组件中都能发现缓存的影子。比如动态内容服务器和客户端之间使用的缓存，通过减少通用请求降低服务器负载，可以改善页面的响应时间；比如代码中的缓存处理，可以优化某些通用的脚本访问模式。此外，还有数据库缓存和长进程缓存等。\n\n简而言之，缓存是改善应用程序响应速度和降低 CPU 负载的有效方式。在一个开发体系中，最难的不是如何使用缓存，而是找出哪里适合使用缓存。对于这一问题，我还是建议使用事件分析工具（profiler）：找出性能瓶颈，检测缓存是否成功，测试缓存是否容易失效……这些问题都需要历经实践才能得出有效的结论。\n\n使用缓存可以优化资源加载，比如，使用 [basket.js](https://addyosmani.com/basket.js/) 利用本地存储缓存应用的脚本，在第二次调用资源时可以迅速从本地存储中获得相应的资源。\n\nAmazon CloudFront 是现在比较流行的一项缓存服务。CloudFront 的工作机制类似内容分发网络（CDN），可以为动态内容设置缓存。\n\n## 5. HTTP/2\n\n目前，已经有越来越多的浏览器支持 HTTP/2。HTTP/2 的优势在于它与服务器的并发连接，比如，如果需要加载的小型资源（前提是你不对资源进行打包）比较多，HTTP/2 在响应时间和性能上都要远远优胜于 HTTP/1。你可以点击 [Akamai 的 HTTP/2 示例](https://http2.akamai.com/demo) 查看两者的区别。\n\n![https://cdn.auth0.com/blog/fasterweb/http2demo.png](https://cdn.auth0.com/blog/fasterweb/http2demo.png)\n\n## 6. 性能剖析\n\n性能剖析是应用程序进行性能优化的重要步骤。如上文所说，盲目地优化应用程序往往会降低生产力、产生新的痛点且难以维护。性能剖析的作用就是要找出应用程序中潜在的风险区域。\n\n对 web 应用程序来说，响应速度是一个非常重要的衡量指标，所以开发者都会尽可能地去提高资源的加载速度和页面的渲染速度。Chrome 浏览器提供了一系列优秀的性能剖析工具，其中最常用的就是开发者工具中的 timeline 和 network，善用它们可以准确定位有关响应速度的风险区域。\n\n![https://cdn.auth0.com/blog/fasterweb/timeline.png](https://cdn.auth0.com/blog/fasterweb/timeline.png)\n\ntimeline 面板便于快速查找耗时操作。\n\n![https://cdn.auth0.com/blog/fasterweb/network.png](https://cdn.auth0.com/blog/fasterweb/network.png)\n\nnetwork 面板便于定位由请求时间和串行加载引起的响应速度问题。\n\n此外，如果合理分析内存的使用率，也将有效提高应用程序的性能。如果你的页面中有大量的视觉元素（比如动态的表格）或者大量的交互元素（比如游戏），那么对内存使用的剖析就可以有效减少卡顿，提高帧速。如果你想了解如何在 Chrome 开发者工具中进行内存剖析，请参考这篇文章：[《4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them 》](https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/)。\n\nChrome 开发者工具也可以对 CPU 的使用进行剖析，更多详细信息请参考来自谷歌文档的这篇文章：[《 Profiling JavaScript Performance》](https://developer.chrome.com/devtools/docs/cpu-profiling)。\n\n![https://cdn.auth0.com/blog/fasterweb/cpu.png](https://cdn.auth0.com/blog/fasterweb/cpu.png)\n\n找出性能的核心痛点，才能让你更加高效地进行性能优化。\n\n相对而言，对后端进行性能剖析稍显困难。一般而言，从最耗时的请求入手查找相应的服务器是个不错的方法。这里并没有推荐任何有关后端的性能剖析工具，这是因为具体的剖析工具要视具体的后端技术栈而定。\n\n#### 算法\n\n在大多数情况下，选择更高效的算法可以比局部优化获得更佳的收益。从某种意义上说，对 CPU 和内存进行性能剖析有助于帮助开发者找出应用程序中较大的性能瓶颈。如果这些瓶颈并不是由代码的错误引起的，那很有可能就是算法的问题。\n\n## 7. 负载均衡\n\n在上文的缓存一节中，简单提到了内容分发网络（CDN）的概念。根据服务器或者地理区域分发负载可以有效提高资源的响应速度，这一优势在处理并发链接时尤为明显。\n\n简而言之，负载均衡类似于一种轮询方案，基于反向代理服务器 [nginx](http://nginx.org/en/docs/http/load_balancing.html) 或者成熟的分发网络（比如 [Cloudflare](https://www.cloudflare.com/) 和 [Amazon CloudFront](https://aws.amazon.com/cloudfront/) 构建。\n\n![https://cdn.auth0.com/blog/fasterweb/diagram.png](https://cdn.auth0.com/blog/fasterweb/diagram.png)\n\n为了实现负载均衡，需要将动态内容和静态内容进行分离，便于执行并行连接。换言之，串行访问削弱了负载均衡检索最佳路径并进行分发的能力。此外，并行加载资源还可以加快应用程序的启动速度。\n\n负载均衡也可以构建的很精细。如果数据模型不能够很好地与最终的一致性算法或缓存保持良好的匹配关系，那么必将导致诸多问题。幸运的是，大多数的应用程序所请求的数据都是一个缩减集，该缩减集本身具有较高级别的一致性。如果你的应用程序还没有具备这样的能力，那么你需要考虑重构它了。\n\n## 8. 同构 JavaScript\n\n对于 web 应用程序来说，一个增强用户体验的法门就是减少启动时间或者减少首屏渲染时间，这一点对于需要在客户端执行大量逻辑操作的单页应用尤为重要。在客户端执行的逻辑操作越多，通常意味着需要在首屏渲染前加载更多的资源。同构 JavaScript 就是用来解决这一问题的：JavaScript 可以同时在客户端和服务端执行，所以可以在服务端渲染出来首屏，然后将其发送给客户端，再由客户端的 JavaScript 接手剩下的逻辑处理。这一方案限制了服务端只能基于 JavaScript 框架，但可以提高用户体验。目前，在 [Meteor.js](https://www.meteor.com/) 中已经可以直接使用这一方式了。此外，在 [React](https://github.com/DavidWells/isomorphic-react-example) 框架中也可以采用这种方式，代码如下所示：\n\n```js\nvar React = require('react/addons');\nvar ReactApp = React.createFactory(require('../components/ReactApp').ReactApp);\n\nmodule.exports = function(app) {\n\n    app.get('/', function(req, res){\n        // React.renderToString takes your component\n        // and generates the markup\n        var reactHtml = React.renderToString(ReactApp({}));\n        // Output html rendered by react\n        // console.log(myAppHtml);\n        res.render('index.ejs', {reactOutput: reactHtml});\n    });\n\n};\n```\n\n下面是 Meteor.js 的简单示例：\n\n```js\nif (Meteor.isClient) {\n  Template.hello.greeting = function () {\n    return \"Welcome to myapp.\";\n  };\n\n  Template.hello.events({\n    'click input': function () {\n      // template data, if any, is available in 'this'\n      if (typeof console !== 'undefined')\n        console.log(\"You pressed the button\");\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n```\n\n如果你开发的是大中型复杂应用且支持同构发布，那么可以尝试一下这种方式，效果很可能令人震撼。\n\n## 9. 索引\n\n如果数据库查询占据了太多的执行时间，那么你应该考虑优化数据库的执行速度了。每种数据库和数据模型都各有特色。数据库优化有多种方向：数据模型、数据库类型以及其他配置，所以优化起来并不简单。不过，我们还是有一些通用的优化技巧，比如说：索引。索引根据数据库的数据创建快速访问的数据结构，改善对特定数据的检索速度。现在大多数的数据库都支持索引功能，\n\n在使用索引优化数据库之前，你应该研究当前应用程序的访问模式，分析最常用到的查询是什么，哪一个键或者字段会被频繁查询等等。\n\n## 10. 编译工具\n\nJavaScript 技术栈日益复杂，这也推动了语言本身的进步。不幸的是，JavaScript 的发展目前还要受限于用户的访问环境。虽然 ECMAScript 2015 已经对 JavaScript 做出了诸多改进，但是开发者尚不能直接遵循这一规范的代码。针对这一问题，也就衍生出了诸多编译工具，这些工具常用于将 ECMAScript 2015 的代码转换为 ECMAScript 5 的代码。此外，模块打包和文件压缩也加入到了编译过程，最终用于生成线上版本的代码。这些工具将代码转换为了一个受限的版本，间接影响到了最终代码的执行效率。谷歌开发者 Paul Irish 测试了代码转换对性能和文件大小的影响，详情请[点击链接](https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016)。虽然大多数情况下影响甚微，但这些差异仍然值得引起注意，因为随着应用程序的复杂大增高，这些差异也将日益增大。\n\n## 11. 阻塞渲染\n\nJavaScript 和 CSS 资源的加载都会阻塞页面的渲染过程。通过某些技巧，开发者可以尽快加载 JavaScript 和 CSS 资源，从而让浏览器尽快显示网站的内容。\n\n对 CSS 来说，本质上符合当前页面媒体属性的 CSS 规则会具有较高的处理优先级。页面的媒体属性由 CSS 的媒体查询进行匹配。媒体查询通知浏览器哪一个 CSS 脚本针对哪一种媒体属性。举例来说，相对于当前屏幕显示的 CSS，用于打印的 CSS 的优先级较低。\n\n可以为 `<link>` 标签设置与媒体查询有关的属性：\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" media=\"only screen and (max-device-width: 480px)\" href=\"mobile-device.css\" />\n```\n\n对 JavaScript 来说，关键是恰当地使用内嵌 JavaScript（即在 HTML 中的 JavaScript）。内嵌 JavaScript 应该尽可能简短，且不能阻塞对页面其他部分的阻塞。换言之，位于 HTML 文档树之中的内嵌 JavaScript 会阻塞 HTML 脚本的解析，强制解析引擎直到脚本执行完成才能继续解析。如果 HTML 树中有大量这种阻塞脚本或者阻塞时间过长，势必严重破坏应用程序的用户体验。内嵌 JavaScript 有助于防止网络获取过多的脚本。对于反复用到的脚本，或者体积较大的脚本，不建议使用内联形式。\n\n一种有效防止 JavaScript 阻塞 HTML 解析的方法是以异步的方式加载 `<script>` 标签。这种方式限制了我们队 DOM 的访问（无法使用 `document.write`)，但可以让浏览器在解析和渲染页面的时候无需考虑 JavaScript 的执行状态。换言之，为了获取最佳的启动速度，应该确保所有非必需的脚本都要以异步的形式加载：\n\n```js\n<script src=\"async.js\" async></script>\n```\n\n## 12. servce workers 和 stream\n\nJake Archibald 的[最新文章](https://jakearchibald.com/2016/streams-ftw/#streaming-results) 对提高渲染速度提出了一个很有意思的方案：结合 service workers 和 stream 进行页面渲染。结果相当令人信服：\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cjo9iq8k-bc\" frameborder=\"0\" allowfullscreen></iframe>\n\n不幸的是，这一技巧所用到的 API 尚在变化之中，所以还不能应用于实际开发中。这一技巧的核心是在网站和客户端之间存放一个 service worker。service worker 可以用于缓存数据（比如网站的头部等不常变动的部分），避免网络查找失败。如果缓存数据丢失，可以通过 stream 快速获取。\n\n## 扩展阅读\n\n更多有关性能优化的信息和工具请参考以下链接：\n\n[Best Practices for Speeding up Your Website - Yahoo Developer Network](https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016)\n[YSlow - a tool that checks for Yahoo's recommended optimizations](http://yslow.org/)\n[PageSpeed Insights - Google Developers](https://developers.google.com/speed/docs/insights/rules)\n[PageSpeed Tools - Google Developers](https://developers.google.com/speed/pagespeed/)\n[HTTP/2: The Long-Awaited Sequel](http://blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx)\n\n## 结论\n\n随着应用程序变得越来越庞大和复杂，性能优化在 web 开发中的地位也越来越重要。针对性的性能优化至关重要，有助于降低时间成本和维护成本。web 应用程序历经发展，其作用已经不再是单一的内容展现，学习通用的性能优化模式，可以将一个难以使用的应用程序转为一个易于上手的工具。没有任何规则是绝对的，只有不断研究和剖析技术栈的深层次逻辑，才能合理进行性能优化。\n\n","source":"_posts/性能优化的十二个方面.md","raw":"title: 性能优化的十二个方面\ndate: 2016-03-04 20:37:34\ndesc: 本文介绍了性能优化的十二个方向，涉及前端开发的诸多方面。\n---\n\n> 翻译自：[12 steps to a faster web app](https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/)\n\n现在，web app 日益重视用户的交互体验，了解性能优化的方式则可以有效提高用户体验。阅读和实践下面的性能优化技巧，可以帮你改善应用的流畅度、渲染时间和其他方面的性能表现。\n\n<!-- more -->\n\n## 概述\n\n对 web app 进行性能优化是一份冗杂沉重的工作，这不仅是因为构建一个 web app 需要前后端协作，而且需要多方面的技术栈：数据库、后端、前端，需要运行在多种平台：iOS，安卓，Chrome，Firefox，Edge。这太复杂了！不过，还是有一些历经实践的通用方式可以用来优化 web app 的性能。在接下来的小节中，我们将逐步介绍相关的细节。\n\n> 一份来自 Bing 的研究表明，页面加载时间每增加 10ms，每年就会减少 $250k 的收入。\n\n#### 过早优化\n\n性能优化的难点在于找出开发中值得优化的地方。Donald Knuth 说过一句经典的话：“过早的优化是一切罪恶的根源”。这句话背后的意思是说：花费大量时间改善 1% 的性能毫无意义。同时，某些优化方案反倒影响了可读性或可维护性，甚至引入了新的问题。换言之，性能优化不应该被视为“榨干应用程序性能的方法”，而应该视为“对性能和收益的平衡性所进行的探索”。在践行以下优化技巧时一定要牢记，盲目优化会影响生产效率，甚至得不偿失。最好的方式是使用分析工具来查找性能瓶颈，并在性能优化和开发效率、可维护性等方面保持平衡。\n\n> 开发者浪费了大量的时间去思考或者担心程序的执行速度，但实际上从调试和后期维护的角度看，这些优化措施往往会带来严重的负面影响。我们应该着重 97% 的运行表现：过早的性能优化是一切罪恶的根源。当然，我们也不应该放弃 3% 的痛点。\n\n## 1. 文件压缩和模块打包\n\nJavaScript 通常是直接使用源码的方式分发的，而源码解析起来往往要慢于字节码。对于小脚本来说，两者解析的速度并不大，但对于大的应用程序来说，则会明显影响应用程序的启动速度。解决这一痛点，正是 [WebAssembly](https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/) 的出发点之一，它将大幅改善程序的启动速度。文件压缩是剔除文件中无用字符的流程，虽然处理后的代码丧失了可读性，但提高了浏览器的解析速度。\n\n另一方面，模块打包可以将不同的脚本合并为一个脚本，从而降低 HTTP 请求，减少资源加载时间。通常来说，这种工作都会交给相应的工具来处理，比如 [Webpack](https://webpack.github.io/)。\n\n```js\nfunction insert(i) {\n    document.write(\"Sample \" + i);\n}\n\nfor(var i = 0; i < 30; ++i) {\n    insert(i);\n}\n```\n\n压缩之后：\n\n```js\n!function(r){function t(o){if(e[o])return e[o].exports;var n=e[o]={exports:{},id:o,loaded:!1};return r[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var e={};return t.m=r,t.c=e,t.p=\"\",t(0)}([function(r,t){function e(r){document.write(\"Sample \"+r)}for(var o=0;30>o;++o)e(o)}]);\n//# sourceMappingURL=bundle.min.js.map\n```\n\n#### 深度打包\n\n使用 Webpack，我们也可以压缩 CSS 和合并图片，进一步改善程序的启动速度。更多有关 Webpack 的信息请参考[官方文档](http://webpack.github.io/docs/)。\n\n## 2. 按需加载\n\n按需加载资源或者说惰性加载资源（特别是图片）对优化 web app 的性能有很大帮助。对于图片较多的页面，使用惰性加载通常有以下三点好处：\n\n- 减少并发请求，缓解服务器压力，提高加载速度\n- 减少浏览器的内存占用率\n- 降低服务器的负载\n\n图片或其他资源惰性加载的方案一般是，在程序启动时加载首屏资源，在页面滚动时持续加载即将进入视口的资源。由于这种方法往往需要与页面结构和开发方式相协调，所以常常使用现有的插件和扩展来实现惰性加载。举例来说，[react-lazy-load](https://github.com/loktar00/react-lazy-load) 是一个基于 React 的图片惰性加载插件：\n\n```js\nconst MyComponent = () => (\n  <div>\n    Scroll to load images.\n    <div className=\"filler\" />\n    <LazyLoad height={762} offsetVertical={300}>\n      <img src='http://apod.nasa.gov/apod/image/1502/HDR_MVMQ20Feb2015ouellet1024.jpg' />\n    </LazyLoad>\n    (...)\n```\n\n一个典型的按需加载实例就是谷歌的[图片搜索工具](https://www.google.com/search?site=&tbm=isch&source=hp&biw=1366&bih=707&q=parrots&oq=parrots&gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA)，点击这一链接并滚动页面，打开开发者工具注意资源的加载时间。\n\n## 3. array-ids\n\n如果你正在使用 React / Ember / Angular 或者其他操作 DOM 的第三方库，那么使用 array-ids（或者是 Angular 1.x 中的 `track-by` 特性）可以有效提高页面性能，对动态网站的性能优化尤为突出。从最新的基准测试中我们也可以看出其中的优势：[More Benchmarks: Virtual DOM vs Angular 1 & 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)](https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/)。\n\n![https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg](https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg)\n\n其背后的核心概念就是尽可能多地重复利用现有节点。Array-ids 便于 DOM 操作引擎根据获取到的 DOM 节点与真实的节点相匹配。如果没有 array-id 或者 track-by，大多数第三方库都会简单粗暴的删除节点然后再创建节点，这会严重影响程序的执行速度。\n\n## 4. 缓存\n\n缓存常用来存储频繁调用的数据，当缓存后的数据再次被调用时，就可以由缓存直接提供数据，提高数据的响应速度。通常来说，一个 web app 都是由多个组件构成的，在这些组件中都能发现缓存的影子。比如动态内容服务器和客户端之间使用的缓存，通过减少通用请求降低服务器负载，可以改善页面的响应时间；比如代码中的缓存处理，可以优化某些通用的脚本访问模式。此外，还有数据库缓存和长进程缓存等。\n\n简而言之，缓存是改善应用程序响应速度和降低 CPU 负载的有效方式。在一个开发体系中，最难的不是如何使用缓存，而是找出哪里适合使用缓存。对于这一问题，我还是建议使用事件分析工具（profiler）：找出性能瓶颈，检测缓存是否成功，测试缓存是否容易失效……这些问题都需要历经实践才能得出有效的结论。\n\n使用缓存可以优化资源加载，比如，使用 [basket.js](https://addyosmani.com/basket.js/) 利用本地存储缓存应用的脚本，在第二次调用资源时可以迅速从本地存储中获得相应的资源。\n\nAmazon CloudFront 是现在比较流行的一项缓存服务。CloudFront 的工作机制类似内容分发网络（CDN），可以为动态内容设置缓存。\n\n## 5. HTTP/2\n\n目前，已经有越来越多的浏览器支持 HTTP/2。HTTP/2 的优势在于它与服务器的并发连接，比如，如果需要加载的小型资源（前提是你不对资源进行打包）比较多，HTTP/2 在响应时间和性能上都要远远优胜于 HTTP/1。你可以点击 [Akamai 的 HTTP/2 示例](https://http2.akamai.com/demo) 查看两者的区别。\n\n![https://cdn.auth0.com/blog/fasterweb/http2demo.png](https://cdn.auth0.com/blog/fasterweb/http2demo.png)\n\n## 6. 性能剖析\n\n性能剖析是应用程序进行性能优化的重要步骤。如上文所说，盲目地优化应用程序往往会降低生产力、产生新的痛点且难以维护。性能剖析的作用就是要找出应用程序中潜在的风险区域。\n\n对 web 应用程序来说，响应速度是一个非常重要的衡量指标，所以开发者都会尽可能地去提高资源的加载速度和页面的渲染速度。Chrome 浏览器提供了一系列优秀的性能剖析工具，其中最常用的就是开发者工具中的 timeline 和 network，善用它们可以准确定位有关响应速度的风险区域。\n\n![https://cdn.auth0.com/blog/fasterweb/timeline.png](https://cdn.auth0.com/blog/fasterweb/timeline.png)\n\ntimeline 面板便于快速查找耗时操作。\n\n![https://cdn.auth0.com/blog/fasterweb/network.png](https://cdn.auth0.com/blog/fasterweb/network.png)\n\nnetwork 面板便于定位由请求时间和串行加载引起的响应速度问题。\n\n此外，如果合理分析内存的使用率，也将有效提高应用程序的性能。如果你的页面中有大量的视觉元素（比如动态的表格）或者大量的交互元素（比如游戏），那么对内存使用的剖析就可以有效减少卡顿，提高帧速。如果你想了解如何在 Chrome 开发者工具中进行内存剖析，请参考这篇文章：[《4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them 》](https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/)。\n\nChrome 开发者工具也可以对 CPU 的使用进行剖析，更多详细信息请参考来自谷歌文档的这篇文章：[《 Profiling JavaScript Performance》](https://developer.chrome.com/devtools/docs/cpu-profiling)。\n\n![https://cdn.auth0.com/blog/fasterweb/cpu.png](https://cdn.auth0.com/blog/fasterweb/cpu.png)\n\n找出性能的核心痛点，才能让你更加高效地进行性能优化。\n\n相对而言，对后端进行性能剖析稍显困难。一般而言，从最耗时的请求入手查找相应的服务器是个不错的方法。这里并没有推荐任何有关后端的性能剖析工具，这是因为具体的剖析工具要视具体的后端技术栈而定。\n\n#### 算法\n\n在大多数情况下，选择更高效的算法可以比局部优化获得更佳的收益。从某种意义上说，对 CPU 和内存进行性能剖析有助于帮助开发者找出应用程序中较大的性能瓶颈。如果这些瓶颈并不是由代码的错误引起的，那很有可能就是算法的问题。\n\n## 7. 负载均衡\n\n在上文的缓存一节中，简单提到了内容分发网络（CDN）的概念。根据服务器或者地理区域分发负载可以有效提高资源的响应速度，这一优势在处理并发链接时尤为明显。\n\n简而言之，负载均衡类似于一种轮询方案，基于反向代理服务器 [nginx](http://nginx.org/en/docs/http/load_balancing.html) 或者成熟的分发网络（比如 [Cloudflare](https://www.cloudflare.com/) 和 [Amazon CloudFront](https://aws.amazon.com/cloudfront/) 构建。\n\n![https://cdn.auth0.com/blog/fasterweb/diagram.png](https://cdn.auth0.com/blog/fasterweb/diagram.png)\n\n为了实现负载均衡，需要将动态内容和静态内容进行分离，便于执行并行连接。换言之，串行访问削弱了负载均衡检索最佳路径并进行分发的能力。此外，并行加载资源还可以加快应用程序的启动速度。\n\n负载均衡也可以构建的很精细。如果数据模型不能够很好地与最终的一致性算法或缓存保持良好的匹配关系，那么必将导致诸多问题。幸运的是，大多数的应用程序所请求的数据都是一个缩减集，该缩减集本身具有较高级别的一致性。如果你的应用程序还没有具备这样的能力，那么你需要考虑重构它了。\n\n## 8. 同构 JavaScript\n\n对于 web 应用程序来说，一个增强用户体验的法门就是减少启动时间或者减少首屏渲染时间，这一点对于需要在客户端执行大量逻辑操作的单页应用尤为重要。在客户端执行的逻辑操作越多，通常意味着需要在首屏渲染前加载更多的资源。同构 JavaScript 就是用来解决这一问题的：JavaScript 可以同时在客户端和服务端执行，所以可以在服务端渲染出来首屏，然后将其发送给客户端，再由客户端的 JavaScript 接手剩下的逻辑处理。这一方案限制了服务端只能基于 JavaScript 框架，但可以提高用户体验。目前，在 [Meteor.js](https://www.meteor.com/) 中已经可以直接使用这一方式了。此外，在 [React](https://github.com/DavidWells/isomorphic-react-example) 框架中也可以采用这种方式，代码如下所示：\n\n```js\nvar React = require('react/addons');\nvar ReactApp = React.createFactory(require('../components/ReactApp').ReactApp);\n\nmodule.exports = function(app) {\n\n    app.get('/', function(req, res){\n        // React.renderToString takes your component\n        // and generates the markup\n        var reactHtml = React.renderToString(ReactApp({}));\n        // Output html rendered by react\n        // console.log(myAppHtml);\n        res.render('index.ejs', {reactOutput: reactHtml});\n    });\n\n};\n```\n\n下面是 Meteor.js 的简单示例：\n\n```js\nif (Meteor.isClient) {\n  Template.hello.greeting = function () {\n    return \"Welcome to myapp.\";\n  };\n\n  Template.hello.events({\n    'click input': function () {\n      // template data, if any, is available in 'this'\n      if (typeof console !== 'undefined')\n        console.log(\"You pressed the button\");\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n```\n\n如果你开发的是大中型复杂应用且支持同构发布，那么可以尝试一下这种方式，效果很可能令人震撼。\n\n## 9. 索引\n\n如果数据库查询占据了太多的执行时间，那么你应该考虑优化数据库的执行速度了。每种数据库和数据模型都各有特色。数据库优化有多种方向：数据模型、数据库类型以及其他配置，所以优化起来并不简单。不过，我们还是有一些通用的优化技巧，比如说：索引。索引根据数据库的数据创建快速访问的数据结构，改善对特定数据的检索速度。现在大多数的数据库都支持索引功能，\n\n在使用索引优化数据库之前，你应该研究当前应用程序的访问模式，分析最常用到的查询是什么，哪一个键或者字段会被频繁查询等等。\n\n## 10. 编译工具\n\nJavaScript 技术栈日益复杂，这也推动了语言本身的进步。不幸的是，JavaScript 的发展目前还要受限于用户的访问环境。虽然 ECMAScript 2015 已经对 JavaScript 做出了诸多改进，但是开发者尚不能直接遵循这一规范的代码。针对这一问题，也就衍生出了诸多编译工具，这些工具常用于将 ECMAScript 2015 的代码转换为 ECMAScript 5 的代码。此外，模块打包和文件压缩也加入到了编译过程，最终用于生成线上版本的代码。这些工具将代码转换为了一个受限的版本，间接影响到了最终代码的执行效率。谷歌开发者 Paul Irish 测试了代码转换对性能和文件大小的影响，详情请[点击链接](https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016)。虽然大多数情况下影响甚微，但这些差异仍然值得引起注意，因为随着应用程序的复杂大增高，这些差异也将日益增大。\n\n## 11. 阻塞渲染\n\nJavaScript 和 CSS 资源的加载都会阻塞页面的渲染过程。通过某些技巧，开发者可以尽快加载 JavaScript 和 CSS 资源，从而让浏览器尽快显示网站的内容。\n\n对 CSS 来说，本质上符合当前页面媒体属性的 CSS 规则会具有较高的处理优先级。页面的媒体属性由 CSS 的媒体查询进行匹配。媒体查询通知浏览器哪一个 CSS 脚本针对哪一种媒体属性。举例来说，相对于当前屏幕显示的 CSS，用于打印的 CSS 的优先级较低。\n\n可以为 `<link>` 标签设置与媒体查询有关的属性：\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" media=\"only screen and (max-device-width: 480px)\" href=\"mobile-device.css\" />\n```\n\n对 JavaScript 来说，关键是恰当地使用内嵌 JavaScript（即在 HTML 中的 JavaScript）。内嵌 JavaScript 应该尽可能简短，且不能阻塞对页面其他部分的阻塞。换言之，位于 HTML 文档树之中的内嵌 JavaScript 会阻塞 HTML 脚本的解析，强制解析引擎直到脚本执行完成才能继续解析。如果 HTML 树中有大量这种阻塞脚本或者阻塞时间过长，势必严重破坏应用程序的用户体验。内嵌 JavaScript 有助于防止网络获取过多的脚本。对于反复用到的脚本，或者体积较大的脚本，不建议使用内联形式。\n\n一种有效防止 JavaScript 阻塞 HTML 解析的方法是以异步的方式加载 `<script>` 标签。这种方式限制了我们队 DOM 的访问（无法使用 `document.write`)，但可以让浏览器在解析和渲染页面的时候无需考虑 JavaScript 的执行状态。换言之，为了获取最佳的启动速度，应该确保所有非必需的脚本都要以异步的形式加载：\n\n```js\n<script src=\"async.js\" async></script>\n```\n\n## 12. servce workers 和 stream\n\nJake Archibald 的[最新文章](https://jakearchibald.com/2016/streams-ftw/#streaming-results) 对提高渲染速度提出了一个很有意思的方案：结合 service workers 和 stream 进行页面渲染。结果相当令人信服：\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cjo9iq8k-bc\" frameborder=\"0\" allowfullscreen></iframe>\n\n不幸的是，这一技巧所用到的 API 尚在变化之中，所以还不能应用于实际开发中。这一技巧的核心是在网站和客户端之间存放一个 service worker。service worker 可以用于缓存数据（比如网站的头部等不常变动的部分），避免网络查找失败。如果缓存数据丢失，可以通过 stream 快速获取。\n\n## 扩展阅读\n\n更多有关性能优化的信息和工具请参考以下链接：\n\n[Best Practices for Speeding up Your Website - Yahoo Developer Network](https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016)\n[YSlow - a tool that checks for Yahoo's recommended optimizations](http://yslow.org/)\n[PageSpeed Insights - Google Developers](https://developers.google.com/speed/docs/insights/rules)\n[PageSpeed Tools - Google Developers](https://developers.google.com/speed/pagespeed/)\n[HTTP/2: The Long-Awaited Sequel](http://blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx)\n\n## 结论\n\n随着应用程序变得越来越庞大和复杂，性能优化在 web 开发中的地位也越来越重要。针对性的性能优化至关重要，有助于降低时间成本和维护成本。web 应用程序历经发展，其作用已经不再是单一的内容展现，学习通用的性能优化模式，可以将一个难以使用的应用程序转为一个易于上手的工具。没有任何规则是绝对的，只有不断研究和剖析技术栈的深层次逻辑，才能合理进行性能优化。\n\n","slug":"性能优化的十二个方面","published":1,"updated":"2016-03-27T07:37:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp4000kfsdi2o67wr06","content":"<blockquote>\n<p>翻译自：<a href=\"https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/\" target=\"_blank\" rel=\"external\">12 steps to a faster web app</a></p>\n</blockquote>\n<p>现在，web app 日益重视用户的交互体验，了解性能优化的方式则可以有效提高用户体验。阅读和实践下面的性能优化技巧，可以帮你改善应用的流畅度、渲染时间和其他方面的性能表现。</p>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对 web app 进行性能优化是一份冗杂沉重的工作，这不仅是因为构建一个 web app 需要前后端协作，而且需要多方面的技术栈：数据库、后端、前端，需要运行在多种平台：iOS，安卓，Chrome，Firefox，Edge。这太复杂了！不过，还是有一些历经实践的通用方式可以用来优化 web app 的性能。在接下来的小节中，我们将逐步介绍相关的细节。</p>\n<blockquote>\n<p>一份来自 Bing 的研究表明，页面加载时间每增加 10ms，每年就会减少 $250k 的收入。</p>\n</blockquote>\n<h4 id=\"过早优化\"><a href=\"#过早优化\" class=\"headerlink\" title=\"过早优化\"></a>过早优化</h4><p>性能优化的难点在于找出开发中值得优化的地方。Donald Knuth 说过一句经典的话：“过早的优化是一切罪恶的根源”。这句话背后的意思是说：花费大量时间改善 1% 的性能毫无意义。同时，某些优化方案反倒影响了可读性或可维护性，甚至引入了新的问题。换言之，性能优化不应该被视为“榨干应用程序性能的方法”，而应该视为“对性能和收益的平衡性所进行的探索”。在践行以下优化技巧时一定要牢记，盲目优化会影响生产效率，甚至得不偿失。最好的方式是使用分析工具来查找性能瓶颈，并在性能优化和开发效率、可维护性等方面保持平衡。</p>\n<blockquote>\n<p>开发者浪费了大量的时间去思考或者担心程序的执行速度，但实际上从调试和后期维护的角度看，这些优化措施往往会带来严重的负面影响。我们应该着重 97% 的运行表现：过早的性能优化是一切罪恶的根源。当然，我们也不应该放弃 3% 的痛点。</p>\n</blockquote>\n<h2 id=\"1-文件压缩和模块打包\"><a href=\"#1-文件压缩和模块打包\" class=\"headerlink\" title=\"1. 文件压缩和模块打包\"></a>1. 文件压缩和模块打包</h2><p>JavaScript 通常是直接使用源码的方式分发的，而源码解析起来往往要慢于字节码。对于小脚本来说，两者解析的速度并不大，但对于大的应用程序来说，则会明显影响应用程序的启动速度。解决这一痛点，正是 <a href=\"https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/\" target=\"_blank\" rel=\"external\">WebAssembly</a> 的出发点之一，它将大幅改善程序的启动速度。文件压缩是剔除文件中无用字符的流程，虽然处理后的代码丧失了可读性，但提高了浏览器的解析速度。</p>\n<p>另一方面，模块打包可以将不同的脚本合并为一个脚本，从而降低 HTTP 请求，减少资源加载时间。通常来说，这种工作都会交给相应的工具来处理，比如 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"Sample \"</span> + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; ++i) &#123;</span><br><span class=\"line\">    insert(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩之后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\">o</span>)</span>&#123;<span class=\"keyword\">if</span>(e[o])<span class=\"keyword\">return</span> e[o].exports;<span class=\"keyword\">var</span> n=e[o]=&#123;exports:&#123;&#125;,id:o,loaded:!<span class=\"number\">1</span>&#125;;<span class=\"keyword\">return</span> r[o].call(n.exports,n,n.exports,t),n.loaded=!<span class=\"number\">0</span>,n.exports&#125;<span class=\"keyword\">var</span> e=&#123;&#125;;<span class=\"keyword\">return</span> t.m=r,t.c=e,t.p=<span class=\"string\">\"\"</span>,t(<span class=\"number\">0</span>)&#125;([<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r,t</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"string\">\"Sample \"</span>+r)&#125;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o=<span class=\"number\">0</span>;<span class=\"number\">30</span>&gt;o;++o)e(o)&#125;]);</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=bundle.min.js.map</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"深度打包\"><a href=\"#深度打包\" class=\"headerlink\" title=\"深度打包\"></a>深度打包</h4><p>使用 Webpack，我们也可以压缩 CSS 和合并图片，进一步改善程序的启动速度。更多有关 Webpack 的信息请参考<a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"2-按需加载\"><a href=\"#2-按需加载\" class=\"headerlink\" title=\"2. 按需加载\"></a>2. 按需加载</h2><p>按需加载资源或者说惰性加载资源（特别是图片）对优化 web app 的性能有很大帮助。对于图片较多的页面，使用惰性加载通常有以下三点好处：</p>\n<ul>\n<li>减少并发请求，缓解服务器压力，提高加载速度</li>\n<li>减少浏览器的内存占用率</li>\n<li>降低服务器的负载</li>\n</ul>\n<p>图片或其他资源惰性加载的方案一般是，在程序启动时加载首屏资源，在页面滚动时持续加载即将进入视口的资源。由于这种方法往往需要与页面结构和开发方式相协调，所以常常使用现有的插件和扩展来实现惰性加载。举例来说，<a href=\"https://github.com/loktar00/react-lazy-load\" target=\"_blank\" rel=\"external\">react-lazy-load</a> 是一个基于 React 的图片惰性加载插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = () =&gt; (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    Scroll to load images.</span><br><span class=\"line\">    &lt;div className=\"filler\" /&gt;</span><br><span class=\"line\">    &lt;LazyLoad height=&#123;762&#125; offsetVertical=&#123;300&#125;&gt;</span><br><span class=\"line\">      &lt;img src='http://apod.nasa.gov/apod/image/1502/HDR_MVMQ20Feb2015ouellet1024.jpg' /&gt;</span><br><span class=\"line\">    &lt;/LazyLoad&gt;</span><br><span class=\"line\">    (...)</span><br></pre></td></tr></table></figure>\n<p>一个典型的按需加载实例就是谷歌的<a href=\"https://www.google.com/search?site=&amp;tbm=isch&amp;source=hp&amp;biw=1366&amp;bih=707&amp;q=parrots&amp;oq=parrots&amp;gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA\" target=\"_blank\" rel=\"external\">图片搜索工具</a>，点击这一链接并滚动页面，打开开发者工具注意资源的加载时间。</p>\n<h2 id=\"3-array-ids\"><a href=\"#3-array-ids\" class=\"headerlink\" title=\"3. array-ids\"></a>3. array-ids</h2><p>如果你正在使用 React / Ember / Angular 或者其他操作 DOM 的第三方库，那么使用 array-ids（或者是 Angular 1.x 中的 <code>track-by</code> 特性）可以有效提高页面性能，对动态网站的性能优化尤为突出。从最新的基准测试中我们也可以看出其中的优势：<a href=\"https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/\" target=\"_blank\" rel=\"external\">More Benchmarks: Virtual DOM vs Angular 1 &amp; 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)</a>。</p>\n<p><img src=\"https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg\" alt=\"https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg\"></p>\n<p>其背后的核心概念就是尽可能多地重复利用现有节点。Array-ids 便于 DOM 操作引擎根据获取到的 DOM 节点与真实的节点相匹配。如果没有 array-id 或者 track-by，大多数第三方库都会简单粗暴的删除节点然后再创建节点，这会严重影响程序的执行速度。</p>\n<h2 id=\"4-缓存\"><a href=\"#4-缓存\" class=\"headerlink\" title=\"4. 缓存\"></a>4. 缓存</h2><p>缓存常用来存储频繁调用的数据，当缓存后的数据再次被调用时，就可以由缓存直接提供数据，提高数据的响应速度。通常来说，一个 web app 都是由多个组件构成的，在这些组件中都能发现缓存的影子。比如动态内容服务器和客户端之间使用的缓存，通过减少通用请求降低服务器负载，可以改善页面的响应时间；比如代码中的缓存处理，可以优化某些通用的脚本访问模式。此外，还有数据库缓存和长进程缓存等。</p>\n<p>简而言之，缓存是改善应用程序响应速度和降低 CPU 负载的有效方式。在一个开发体系中，最难的不是如何使用缓存，而是找出哪里适合使用缓存。对于这一问题，我还是建议使用事件分析工具（profiler）：找出性能瓶颈，检测缓存是否成功，测试缓存是否容易失效……这些问题都需要历经实践才能得出有效的结论。</p>\n<p>使用缓存可以优化资源加载，比如，使用 <a href=\"https://addyosmani.com/basket.js/\" target=\"_blank\" rel=\"external\">basket.js</a> 利用本地存储缓存应用的脚本，在第二次调用资源时可以迅速从本地存储中获得相应的资源。</p>\n<p>Amazon CloudFront 是现在比较流行的一项缓存服务。CloudFront 的工作机制类似内容分发网络（CDN），可以为动态内容设置缓存。</p>\n<h2 id=\"5-HTTP-2\"><a href=\"#5-HTTP-2\" class=\"headerlink\" title=\"5. HTTP/2\"></a>5. HTTP/2</h2><p>目前，已经有越来越多的浏览器支持 HTTP/2。HTTP/2 的优势在于它与服务器的并发连接，比如，如果需要加载的小型资源（前提是你不对资源进行打包）比较多，HTTP/2 在响应时间和性能上都要远远优胜于 HTTP/1。你可以点击 <a href=\"https://http2.akamai.com/demo\" target=\"_blank\" rel=\"external\">Akamai 的 HTTP/2 示例</a> 查看两者的区别。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/http2demo.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/http2demo.png\"></p>\n<h2 id=\"6-性能剖析\"><a href=\"#6-性能剖析\" class=\"headerlink\" title=\"6. 性能剖析\"></a>6. 性能剖析</h2><p>性能剖析是应用程序进行性能优化的重要步骤。如上文所说，盲目地优化应用程序往往会降低生产力、产生新的痛点且难以维护。性能剖析的作用就是要找出应用程序中潜在的风险区域。</p>\n<p>对 web 应用程序来说，响应速度是一个非常重要的衡量指标，所以开发者都会尽可能地去提高资源的加载速度和页面的渲染速度。Chrome 浏览器提供了一系列优秀的性能剖析工具，其中最常用的就是开发者工具中的 timeline 和 network，善用它们可以准确定位有关响应速度的风险区域。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/timeline.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/timeline.png\"></p>\n<p>timeline 面板便于快速查找耗时操作。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/network.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/network.png\"></p>\n<p>network 面板便于定位由请求时间和串行加载引起的响应速度问题。</p>\n<p>此外，如果合理分析内存的使用率，也将有效提高应用程序的性能。如果你的页面中有大量的视觉元素（比如动态的表格）或者大量的交互元素（比如游戏），那么对内存使用的剖析就可以有效减少卡顿，提高帧速。如果你想了解如何在 Chrome 开发者工具中进行内存剖析，请参考这篇文章：<a href=\"https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"external\">《4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them 》</a>。</p>\n<p>Chrome 开发者工具也可以对 CPU 的使用进行剖析，更多详细信息请参考来自谷歌文档的这篇文章：<a href=\"https://developer.chrome.com/devtools/docs/cpu-profiling\" target=\"_blank\" rel=\"external\">《 Profiling JavaScript Performance》</a>。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/cpu.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/cpu.png\"></p>\n<p>找出性能的核心痛点，才能让你更加高效地进行性能优化。</p>\n<p>相对而言，对后端进行性能剖析稍显困难。一般而言，从最耗时的请求入手查找相应的服务器是个不错的方法。这里并没有推荐任何有关后端的性能剖析工具，这是因为具体的剖析工具要视具体的后端技术栈而定。</p>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><p>在大多数情况下，选择更高效的算法可以比局部优化获得更佳的收益。从某种意义上说，对 CPU 和内存进行性能剖析有助于帮助开发者找出应用程序中较大的性能瓶颈。如果这些瓶颈并不是由代码的错误引起的，那很有可能就是算法的问题。</p>\n<h2 id=\"7-负载均衡\"><a href=\"#7-负载均衡\" class=\"headerlink\" title=\"7. 负载均衡\"></a>7. 负载均衡</h2><p>在上文的缓存一节中，简单提到了内容分发网络（CDN）的概念。根据服务器或者地理区域分发负载可以有效提高资源的响应速度，这一优势在处理并发链接时尤为明显。</p>\n<p>简而言之，负载均衡类似于一种轮询方案，基于反向代理服务器 <a href=\"http://nginx.org/en/docs/http/load_balancing.html\" target=\"_blank\" rel=\"external\">nginx</a> 或者成熟的分发网络（比如 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">Cloudflare</a> 和 <a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"external\">Amazon CloudFront</a> 构建。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/diagram.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/diagram.png\"></p>\n<p>为了实现负载均衡，需要将动态内容和静态内容进行分离，便于执行并行连接。换言之，串行访问削弱了负载均衡检索最佳路径并进行分发的能力。此外，并行加载资源还可以加快应用程序的启动速度。</p>\n<p>负载均衡也可以构建的很精细。如果数据模型不能够很好地与最终的一致性算法或缓存保持良好的匹配关系，那么必将导致诸多问题。幸运的是，大多数的应用程序所请求的数据都是一个缩减集，该缩减集本身具有较高级别的一致性。如果你的应用程序还没有具备这样的能力，那么你需要考虑重构它了。</p>\n<h2 id=\"8-同构-JavaScript\"><a href=\"#8-同构-JavaScript\" class=\"headerlink\" title=\"8. 同构 JavaScript\"></a>8. 同构 JavaScript</h2><p>对于 web 应用程序来说，一个增强用户体验的法门就是减少启动时间或者减少首屏渲染时间，这一点对于需要在客户端执行大量逻辑操作的单页应用尤为重要。在客户端执行的逻辑操作越多，通常意味着需要在首屏渲染前加载更多的资源。同构 JavaScript 就是用来解决这一问题的：JavaScript 可以同时在客户端和服务端执行，所以可以在服务端渲染出来首屏，然后将其发送给客户端，再由客户端的 JavaScript 接手剩下的逻辑处理。这一方案限制了服务端只能基于 JavaScript 框架，但可以提高用户体验。目前，在 <a href=\"https://www.meteor.com/\" target=\"_blank\" rel=\"external\">Meteor.js</a> 中已经可以直接使用这一方式了。此外，在 <a href=\"https://github.com/DavidWells/isomorphic-react-example\" target=\"_blank\" rel=\"external\">React</a> 框架中也可以采用这种方式，代码如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react/addons'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ReactApp = React.createFactory(<span class=\"built_in\">require</span>(<span class=\"string\">'../components/ReactApp'</span>).ReactApp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// React.renderToString takes your component</span></span><br><span class=\"line\">        <span class=\"comment\">// and generates the markup</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> reactHtml = React.renderToString(ReactApp(&#123;&#125;));</span><br><span class=\"line\">        <span class=\"comment\">// Output html rendered by react</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(myAppHtml);</span></span><br><span class=\"line\">        res.render(<span class=\"string\">'index.ejs'</span>, &#123;reactOutput: reactHtml&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>下面是 Meteor.js 的简单示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Meteor.isClient) &#123;</span><br><span class=\"line\">  Template.hello.greeting = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Welcome to myapp.\"</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Template.hello.events(&#123;</span><br><span class=\"line\">    <span class=\"string\">'click input'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// template data, if any, is available in 'this'</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You pressed the button\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Meteor.isServer) &#123;</span><br><span class=\"line\">  Meteor.startup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code to run on server at startup</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你开发的是大中型复杂应用且支持同构发布，那么可以尝试一下这种方式，效果很可能令人震撼。</p>\n<h2 id=\"9-索引\"><a href=\"#9-索引\" class=\"headerlink\" title=\"9. 索引\"></a>9. 索引</h2><p>如果数据库查询占据了太多的执行时间，那么你应该考虑优化数据库的执行速度了。每种数据库和数据模型都各有特色。数据库优化有多种方向：数据模型、数据库类型以及其他配置，所以优化起来并不简单。不过，我们还是有一些通用的优化技巧，比如说：索引。索引根据数据库的数据创建快速访问的数据结构，改善对特定数据的检索速度。现在大多数的数据库都支持索引功能，</p>\n<p>在使用索引优化数据库之前，你应该研究当前应用程序的访问模式，分析最常用到的查询是什么，哪一个键或者字段会被频繁查询等等。</p>\n<h2 id=\"10-编译工具\"><a href=\"#10-编译工具\" class=\"headerlink\" title=\"10. 编译工具\"></a>10. 编译工具</h2><p>JavaScript 技术栈日益复杂，这也推动了语言本身的进步。不幸的是，JavaScript 的发展目前还要受限于用户的访问环境。虽然 ECMAScript 2015 已经对 JavaScript 做出了诸多改进，但是开发者尚不能直接遵循这一规范的代码。针对这一问题，也就衍生出了诸多编译工具，这些工具常用于将 ECMAScript 2015 的代码转换为 ECMAScript 5 的代码。此外，模块打包和文件压缩也加入到了编译过程，最终用于生成线上版本的代码。这些工具将代码转换为了一个受限的版本，间接影响到了最终代码的执行效率。谷歌开发者 Paul Irish 测试了代码转换对性能和文件大小的影响，详情请<a href=\"https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016\" target=\"_blank\" rel=\"external\">点击链接</a>。虽然大多数情况下影响甚微，但这些差异仍然值得引起注意，因为随着应用程序的复杂大增高，这些差异也将日益增大。</p>\n<h2 id=\"11-阻塞渲染\"><a href=\"#11-阻塞渲染\" class=\"headerlink\" title=\"11. 阻塞渲染\"></a>11. 阻塞渲染</h2><p>JavaScript 和 CSS 资源的加载都会阻塞页面的渲染过程。通过某些技巧，开发者可以尽快加载 JavaScript 和 CSS 资源，从而让浏览器尽快显示网站的内容。</p>\n<p>对 CSS 来说，本质上符合当前页面媒体属性的 CSS 规则会具有较高的处理优先级。页面的媒体属性由 CSS 的媒体查询进行匹配。媒体查询通知浏览器哪一个 CSS 脚本针对哪一种媒体属性。举例来说，相对于当前屏幕显示的 CSS，用于打印的 CSS 的优先级较低。</p>\n<p>可以为 <code>&lt;link&gt;</code> 标签设置与媒体查询有关的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"only screen and (max-device-width: 480px)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mobile-device.css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对 JavaScript 来说，关键是恰当地使用内嵌 JavaScript（即在 HTML 中的 JavaScript）。内嵌 JavaScript 应该尽可能简短，且不能阻塞对页面其他部分的阻塞。换言之，位于 HTML 文档树之中的内嵌 JavaScript 会阻塞 HTML 脚本的解析，强制解析引擎直到脚本执行完成才能继续解析。如果 HTML 树中有大量这种阻塞脚本或者阻塞时间过长，势必严重破坏应用程序的用户体验。内嵌 JavaScript 有助于防止网络获取过多的脚本。对于反复用到的脚本，或者体积较大的脚本，不建议使用内联形式。</p>\n<p>一种有效防止 JavaScript 阻塞 HTML 解析的方法是以异步的方式加载 <code>&lt;script&gt;</code> 标签。这种方式限制了我们队 DOM 的访问（无法使用 <code>document.write</code>)，但可以让浏览器在解析和渲染页面的时候无需考虑 JavaScript 的执行状态。换言之，为了获取最佳的启动速度，应该确保所有非必需的脚本都要以异步的形式加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"async.js\"</span> <span class=\"keyword\">async</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12-servce-workers-和-stream\"><a href=\"#12-servce-workers-和-stream\" class=\"headerlink\" title=\"12. servce workers 和 stream\"></a>12. servce workers 和 stream</h2><p>Jake Archibald 的<a href=\"https://jakearchibald.com/2016/streams-ftw/#streaming-results\" target=\"_blank\" rel=\"external\">最新文章</a> 对提高渲染速度提出了一个很有意思的方案：结合 service workers 和 stream 进行页面渲染。结果相当令人信服：</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cjo9iq8k-bc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>不幸的是，这一技巧所用到的 API 尚在变化之中，所以还不能应用于实际开发中。这一技巧的核心是在网站和客户端之间存放一个 service worker。service worker 可以用于缓存数据（比如网站的头部等不常变动的部分），避免网络查找失败。如果缓存数据丢失，可以通过 stream 快速获取。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p>更多有关性能优化的信息和工具请参考以下链接：</p>\n<p><a href=\"https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016\" target=\"_blank\" rel=\"external\">Best Practices for Speeding up Your Website - Yahoo Developer Network</a><br><a href=\"http://yslow.org/\" target=\"_blank\" rel=\"external\">YSlow - a tool that checks for Yahoo’s recommended optimizations</a><br><a href=\"https://developers.google.com/speed/docs/insights/rules\" target=\"_blank\" rel=\"external\">PageSpeed Insights - Google Developers</a><br><a href=\"https://developers.google.com/speed/pagespeed/\" target=\"_blank\" rel=\"external\">PageSpeed Tools - Google Developers</a><br><a href=\"http://blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx\" target=\"_blank\" rel=\"external\">HTTP/2: The Long-Awaited Sequel</a></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>随着应用程序变得越来越庞大和复杂，性能优化在 web 开发中的地位也越来越重要。针对性的性能优化至关重要，有助于降低时间成本和维护成本。web 应用程序历经发展，其作用已经不再是单一的内容展现，学习通用的性能优化模式，可以将一个难以使用的应用程序转为一个易于上手的工具。没有任何规则是绝对的，只有不断研究和剖析技术栈的深层次逻辑，才能合理进行性能优化。</p>\n","excerpt":"<blockquote>\n<p>翻译自：<a href=\"https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/\">12 steps to a faster web app</a></p>\n</blockquote>\n<p>现在，web app 日益重视用户的交互体验，了解性能优化的方式则可以有效提高用户体验。阅读和实践下面的性能优化技巧，可以帮你改善应用的流畅度、渲染时间和其他方面的性能表现。</p>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对 web app 进行性能优化是一份冗杂沉重的工作，这不仅是因为构建一个 web app 需要前后端协作，而且需要多方面的技术栈：数据库、后端、前端，需要运行在多种平台：iOS，安卓，Chrome，Firefox，Edge。这太复杂了！不过，还是有一些历经实践的通用方式可以用来优化 web app 的性能。在接下来的小节中，我们将逐步介绍相关的细节。</p>\n<blockquote>\n<p>一份来自 Bing 的研究表明，页面加载时间每增加 10ms，每年就会减少 $250k 的收入。</p>\n</blockquote>\n<h4 id=\"过早优化\"><a href=\"#过早优化\" class=\"headerlink\" title=\"过早优化\"></a>过早优化</h4><p>性能优化的难点在于找出开发中值得优化的地方。Donald Knuth 说过一句经典的话：“过早的优化是一切罪恶的根源”。这句话背后的意思是说：花费大量时间改善 1% 的性能毫无意义。同时，某些优化方案反倒影响了可读性或可维护性，甚至引入了新的问题。换言之，性能优化不应该被视为“榨干应用程序性能的方法”，而应该视为“对性能和收益的平衡性所进行的探索”。在践行以下优化技巧时一定要牢记，盲目优化会影响生产效率，甚至得不偿失。最好的方式是使用分析工具来查找性能瓶颈，并在性能优化和开发效率、可维护性等方面保持平衡。</p>\n<blockquote>\n<p>开发者浪费了大量的时间去思考或者担心程序的执行速度，但实际上从调试和后期维护的角度看，这些优化措施往往会带来严重的负面影响。我们应该着重 97% 的运行表现：过早的性能优化是一切罪恶的根源。当然，我们也不应该放弃 3% 的痛点。</p>\n</blockquote>\n<h2 id=\"1-文件压缩和模块打包\"><a href=\"#1-文件压缩和模块打包\" class=\"headerlink\" title=\"1. 文件压缩和模块打包\"></a>1. 文件压缩和模块打包</h2><p>JavaScript 通常是直接使用源码的方式分发的，而源码解析起来往往要慢于字节码。对于小脚本来说，两者解析的速度并不大，但对于大的应用程序来说，则会明显影响应用程序的启动速度。解决这一痛点，正是 <a href=\"https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/\">WebAssembly</a> 的出发点之一，它将大幅改善程序的启动速度。文件压缩是剔除文件中无用字符的流程，虽然处理后的代码丧失了可读性，但提高了浏览器的解析速度。</p>\n<p>另一方面，模块打包可以将不同的脚本合并为一个脚本，从而降低 HTTP 请求，减少资源加载时间。通常来说，这种工作都会交给相应的工具来处理，比如 <a href=\"https://webpack.github.io/\">Webpack</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"Sample \"</span> + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; ++i) &#123;</span><br><span class=\"line\">    insert(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩之后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\">o</span>)</span>&#123;<span class=\"keyword\">if</span>(e[o])<span class=\"keyword\">return</span> e[o].exports;<span class=\"keyword\">var</span> n=e[o]=&#123;exports:&#123;&#125;,id:o,loaded:!<span class=\"number\">1</span>&#125;;<span class=\"keyword\">return</span> r[o].call(n.exports,n,n.exports,t),n.loaded=!<span class=\"number\">0</span>,n.exports&#125;<span class=\"keyword\">var</span> e=&#123;&#125;;<span class=\"keyword\">return</span> t.m=r,t.c=e,t.p=<span class=\"string\">\"\"</span>,t(<span class=\"number\">0</span>)&#125;([<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r,t</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">r</span>)</span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"string\">\"Sample \"</span>+r)&#125;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o=<span class=\"number\">0</span>;<span class=\"number\">30</span>&gt;o;++o)e(o)&#125;]);</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=bundle.min.js.map</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"深度打包\"><a href=\"#深度打包\" class=\"headerlink\" title=\"深度打包\"></a>深度打包</h4><p>使用 Webpack，我们也可以压缩 CSS 和合并图片，进一步改善程序的启动速度。更多有关 Webpack 的信息请参考<a href=\"http://webpack.github.io/docs/\">官方文档</a>。</p>\n<h2 id=\"2-按需加载\"><a href=\"#2-按需加载\" class=\"headerlink\" title=\"2. 按需加载\"></a>2. 按需加载</h2><p>按需加载资源或者说惰性加载资源（特别是图片）对优化 web app 的性能有很大帮助。对于图片较多的页面，使用惰性加载通常有以下三点好处：</p>\n<ul>\n<li>减少并发请求，缓解服务器压力，提高加载速度</li>\n<li>减少浏览器的内存占用率</li>\n<li>降低服务器的负载</li>\n</ul>\n<p>图片或其他资源惰性加载的方案一般是，在程序启动时加载首屏资源，在页面滚动时持续加载即将进入视口的资源。由于这种方法往往需要与页面结构和开发方式相协调，所以常常使用现有的插件和扩展来实现惰性加载。举例来说，<a href=\"https://github.com/loktar00/react-lazy-load\">react-lazy-load</a> 是一个基于 React 的图片惰性加载插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = () =&gt; (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    Scroll to load images.</span><br><span class=\"line\">    &lt;div className=\"filler\" /&gt;</span><br><span class=\"line\">    &lt;LazyLoad height=&#123;762&#125; offsetVertical=&#123;300&#125;&gt;</span><br><span class=\"line\">      &lt;img src='http://apod.nasa.gov/apod/image/1502/HDR_MVMQ20Feb2015ouellet1024.jpg' /&gt;</span><br><span class=\"line\">    &lt;/LazyLoad&gt;</span><br><span class=\"line\">    (...)</span><br></pre></td></tr></table></figure>\n<p>一个典型的按需加载实例就是谷歌的<a href=\"https://www.google.com/search?site=&amp;tbm=isch&amp;source=hp&amp;biw=1366&amp;bih=707&amp;q=parrots&amp;oq=parrots&amp;gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA\">图片搜索工具</a>，点击这一链接并滚动页面，打开开发者工具注意资源的加载时间。</p>\n<h2 id=\"3-array-ids\"><a href=\"#3-array-ids\" class=\"headerlink\" title=\"3. array-ids\"></a>3. array-ids</h2><p>如果你正在使用 React / Ember / Angular 或者其他操作 DOM 的第三方库，那么使用 array-ids（或者是 Angular 1.x 中的 <code>track-by</code> 特性）可以有效提高页面性能，对动态网站的性能优化尤为突出。从最新的基准测试中我们也可以看出其中的优势：<a href=\"https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/\">More Benchmarks: Virtual DOM vs Angular 1 &amp; 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)</a>。</p>\n<p><img src=\"https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg\" alt=\"https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg\"></p>\n<p>其背后的核心概念就是尽可能多地重复利用现有节点。Array-ids 便于 DOM 操作引擎根据获取到的 DOM 节点与真实的节点相匹配。如果没有 array-id 或者 track-by，大多数第三方库都会简单粗暴的删除节点然后再创建节点，这会严重影响程序的执行速度。</p>\n<h2 id=\"4-缓存\"><a href=\"#4-缓存\" class=\"headerlink\" title=\"4. 缓存\"></a>4. 缓存</h2><p>缓存常用来存储频繁调用的数据，当缓存后的数据再次被调用时，就可以由缓存直接提供数据，提高数据的响应速度。通常来说，一个 web app 都是由多个组件构成的，在这些组件中都能发现缓存的影子。比如动态内容服务器和客户端之间使用的缓存，通过减少通用请求降低服务器负载，可以改善页面的响应时间；比如代码中的缓存处理，可以优化某些通用的脚本访问模式。此外，还有数据库缓存和长进程缓存等。</p>\n<p>简而言之，缓存是改善应用程序响应速度和降低 CPU 负载的有效方式。在一个开发体系中，最难的不是如何使用缓存，而是找出哪里适合使用缓存。对于这一问题，我还是建议使用事件分析工具（profiler）：找出性能瓶颈，检测缓存是否成功，测试缓存是否容易失效……这些问题都需要历经实践才能得出有效的结论。</p>\n<p>使用缓存可以优化资源加载，比如，使用 <a href=\"https://addyosmani.com/basket.js/\">basket.js</a> 利用本地存储缓存应用的脚本，在第二次调用资源时可以迅速从本地存储中获得相应的资源。</p>\n<p>Amazon CloudFront 是现在比较流行的一项缓存服务。CloudFront 的工作机制类似内容分发网络（CDN），可以为动态内容设置缓存。</p>\n<h2 id=\"5-HTTP-2\"><a href=\"#5-HTTP-2\" class=\"headerlink\" title=\"5. HTTP/2\"></a>5. HTTP/2</h2><p>目前，已经有越来越多的浏览器支持 HTTP/2。HTTP/2 的优势在于它与服务器的并发连接，比如，如果需要加载的小型资源（前提是你不对资源进行打包）比较多，HTTP/2 在响应时间和性能上都要远远优胜于 HTTP/1。你可以点击 <a href=\"https://http2.akamai.com/demo\">Akamai 的 HTTP/2 示例</a> 查看两者的区别。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/http2demo.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/http2demo.png\"></p>\n<h2 id=\"6-性能剖析\"><a href=\"#6-性能剖析\" class=\"headerlink\" title=\"6. 性能剖析\"></a>6. 性能剖析</h2><p>性能剖析是应用程序进行性能优化的重要步骤。如上文所说，盲目地优化应用程序往往会降低生产力、产生新的痛点且难以维护。性能剖析的作用就是要找出应用程序中潜在的风险区域。</p>\n<p>对 web 应用程序来说，响应速度是一个非常重要的衡量指标，所以开发者都会尽可能地去提高资源的加载速度和页面的渲染速度。Chrome 浏览器提供了一系列优秀的性能剖析工具，其中最常用的就是开发者工具中的 timeline 和 network，善用它们可以准确定位有关响应速度的风险区域。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/timeline.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/timeline.png\"></p>\n<p>timeline 面板便于快速查找耗时操作。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/network.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/network.png\"></p>\n<p>network 面板便于定位由请求时间和串行加载引起的响应速度问题。</p>\n<p>此外，如果合理分析内存的使用率，也将有效提高应用程序的性能。如果你的页面中有大量的视觉元素（比如动态的表格）或者大量的交互元素（比如游戏），那么对内存使用的剖析就可以有效减少卡顿，提高帧速。如果你想了解如何在 Chrome 开发者工具中进行内存剖析，请参考这篇文章：<a href=\"https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\">《4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them 》</a>。</p>\n<p>Chrome 开发者工具也可以对 CPU 的使用进行剖析，更多详细信息请参考来自谷歌文档的这篇文章：<a href=\"https://developer.chrome.com/devtools/docs/cpu-profiling\">《 Profiling JavaScript Performance》</a>。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/cpu.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/cpu.png\"></p>\n<p>找出性能的核心痛点，才能让你更加高效地进行性能优化。</p>\n<p>相对而言，对后端进行性能剖析稍显困难。一般而言，从最耗时的请求入手查找相应的服务器是个不错的方法。这里并没有推荐任何有关后端的性能剖析工具，这是因为具体的剖析工具要视具体的后端技术栈而定。</p>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><p>在大多数情况下，选择更高效的算法可以比局部优化获得更佳的收益。从某种意义上说，对 CPU 和内存进行性能剖析有助于帮助开发者找出应用程序中较大的性能瓶颈。如果这些瓶颈并不是由代码的错误引起的，那很有可能就是算法的问题。</p>\n<h2 id=\"7-负载均衡\"><a href=\"#7-负载均衡\" class=\"headerlink\" title=\"7. 负载均衡\"></a>7. 负载均衡</h2><p>在上文的缓存一节中，简单提到了内容分发网络（CDN）的概念。根据服务器或者地理区域分发负载可以有效提高资源的响应速度，这一优势在处理并发链接时尤为明显。</p>\n<p>简而言之，负载均衡类似于一种轮询方案，基于反向代理服务器 <a href=\"http://nginx.org/en/docs/http/load_balancing.html\">nginx</a> 或者成熟的分发网络（比如 <a href=\"https://www.cloudflare.com/\">Cloudflare</a> 和 <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a> 构建。</p>\n<p><img src=\"https://cdn.auth0.com/blog/fasterweb/diagram.png\" alt=\"https://cdn.auth0.com/blog/fasterweb/diagram.png\"></p>\n<p>为了实现负载均衡，需要将动态内容和静态内容进行分离，便于执行并行连接。换言之，串行访问削弱了负载均衡检索最佳路径并进行分发的能力。此外，并行加载资源还可以加快应用程序的启动速度。</p>\n<p>负载均衡也可以构建的很精细。如果数据模型不能够很好地与最终的一致性算法或缓存保持良好的匹配关系，那么必将导致诸多问题。幸运的是，大多数的应用程序所请求的数据都是一个缩减集，该缩减集本身具有较高级别的一致性。如果你的应用程序还没有具备这样的能力，那么你需要考虑重构它了。</p>\n<h2 id=\"8-同构-JavaScript\"><a href=\"#8-同构-JavaScript\" class=\"headerlink\" title=\"8. 同构 JavaScript\"></a>8. 同构 JavaScript</h2><p>对于 web 应用程序来说，一个增强用户体验的法门就是减少启动时间或者减少首屏渲染时间，这一点对于需要在客户端执行大量逻辑操作的单页应用尤为重要。在客户端执行的逻辑操作越多，通常意味着需要在首屏渲染前加载更多的资源。同构 JavaScript 就是用来解决这一问题的：JavaScript 可以同时在客户端和服务端执行，所以可以在服务端渲染出来首屏，然后将其发送给客户端，再由客户端的 JavaScript 接手剩下的逻辑处理。这一方案限制了服务端只能基于 JavaScript 框架，但可以提高用户体验。目前，在 <a href=\"https://www.meteor.com/\">Meteor.js</a> 中已经可以直接使用这一方式了。此外，在 <a href=\"https://github.com/DavidWells/isomorphic-react-example\">React</a> 框架中也可以采用这种方式，代码如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react/addons'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ReactApp = React.createFactory(<span class=\"built_in\">require</span>(<span class=\"string\">'../components/ReactApp'</span>).ReactApp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// React.renderToString takes your component</span></span><br><span class=\"line\">        <span class=\"comment\">// and generates the markup</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> reactHtml = React.renderToString(ReactApp(&#123;&#125;));</span><br><span class=\"line\">        <span class=\"comment\">// Output html rendered by react</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(myAppHtml);</span></span><br><span class=\"line\">        res.render(<span class=\"string\">'index.ejs'</span>, &#123;reactOutput: reactHtml&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>下面是 Meteor.js 的简单示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Meteor.isClient) &#123;</span><br><span class=\"line\">  Template.hello.greeting = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Welcome to myapp.\"</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Template.hello.events(&#123;</span><br><span class=\"line\">    <span class=\"string\">'click input'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// template data, if any, is available in 'this'</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You pressed the button\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Meteor.isServer) &#123;</span><br><span class=\"line\">  Meteor.startup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code to run on server at startup</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你开发的是大中型复杂应用且支持同构发布，那么可以尝试一下这种方式，效果很可能令人震撼。</p>\n<h2 id=\"9-索引\"><a href=\"#9-索引\" class=\"headerlink\" title=\"9. 索引\"></a>9. 索引</h2><p>如果数据库查询占据了太多的执行时间，那么你应该考虑优化数据库的执行速度了。每种数据库和数据模型都各有特色。数据库优化有多种方向：数据模型、数据库类型以及其他配置，所以优化起来并不简单。不过，我们还是有一些通用的优化技巧，比如说：索引。索引根据数据库的数据创建快速访问的数据结构，改善对特定数据的检索速度。现在大多数的数据库都支持索引功能，</p>\n<p>在使用索引优化数据库之前，你应该研究当前应用程序的访问模式，分析最常用到的查询是什么，哪一个键或者字段会被频繁查询等等。</p>\n<h2 id=\"10-编译工具\"><a href=\"#10-编译工具\" class=\"headerlink\" title=\"10. 编译工具\"></a>10. 编译工具</h2><p>JavaScript 技术栈日益复杂，这也推动了语言本身的进步。不幸的是，JavaScript 的发展目前还要受限于用户的访问环境。虽然 ECMAScript 2015 已经对 JavaScript 做出了诸多改进，但是开发者尚不能直接遵循这一规范的代码。针对这一问题，也就衍生出了诸多编译工具，这些工具常用于将 ECMAScript 2015 的代码转换为 ECMAScript 5 的代码。此外，模块打包和文件压缩也加入到了编译过程，最终用于生成线上版本的代码。这些工具将代码转换为了一个受限的版本，间接影响到了最终代码的执行效率。谷歌开发者 Paul Irish 测试了代码转换对性能和文件大小的影响，详情请<a href=\"https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016\">点击链接</a>。虽然大多数情况下影响甚微，但这些差异仍然值得引起注意，因为随着应用程序的复杂大增高，这些差异也将日益增大。</p>\n<h2 id=\"11-阻塞渲染\"><a href=\"#11-阻塞渲染\" class=\"headerlink\" title=\"11. 阻塞渲染\"></a>11. 阻塞渲染</h2><p>JavaScript 和 CSS 资源的加载都会阻塞页面的渲染过程。通过某些技巧，开发者可以尽快加载 JavaScript 和 CSS 资源，从而让浏览器尽快显示网站的内容。</p>\n<p>对 CSS 来说，本质上符合当前页面媒体属性的 CSS 规则会具有较高的处理优先级。页面的媒体属性由 CSS 的媒体查询进行匹配。媒体查询通知浏览器哪一个 CSS 脚本针对哪一种媒体属性。举例来说，相对于当前屏幕显示的 CSS，用于打印的 CSS 的优先级较低。</p>\n<p>可以为 <code>&lt;link&gt;</code> 标签设置与媒体查询有关的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"only screen and (max-device-width: 480px)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mobile-device.css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对 JavaScript 来说，关键是恰当地使用内嵌 JavaScript（即在 HTML 中的 JavaScript）。内嵌 JavaScript 应该尽可能简短，且不能阻塞对页面其他部分的阻塞。换言之，位于 HTML 文档树之中的内嵌 JavaScript 会阻塞 HTML 脚本的解析，强制解析引擎直到脚本执行完成才能继续解析。如果 HTML 树中有大量这种阻塞脚本或者阻塞时间过长，势必严重破坏应用程序的用户体验。内嵌 JavaScript 有助于防止网络获取过多的脚本。对于反复用到的脚本，或者体积较大的脚本，不建议使用内联形式。</p>\n<p>一种有效防止 JavaScript 阻塞 HTML 解析的方法是以异步的方式加载 <code>&lt;script&gt;</code> 标签。这种方式限制了我们队 DOM 的访问（无法使用 <code>document.write</code>)，但可以让浏览器在解析和渲染页面的时候无需考虑 JavaScript 的执行状态。换言之，为了获取最佳的启动速度，应该确保所有非必需的脚本都要以异步的形式加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"async.js\"</span> <span class=\"keyword\">async</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12-servce-workers-和-stream\"><a href=\"#12-servce-workers-和-stream\" class=\"headerlink\" title=\"12. servce workers 和 stream\"></a>12. servce workers 和 stream</h2><p>Jake Archibald 的<a href=\"https://jakearchibald.com/2016/streams-ftw/#streaming-results\">最新文章</a> 对提高渲染速度提出了一个很有意思的方案：结合 service workers 和 stream 进行页面渲染。结果相当令人信服：</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cjo9iq8k-bc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>不幸的是，这一技巧所用到的 API 尚在变化之中，所以还不能应用于实际开发中。这一技巧的核心是在网站和客户端之间存放一个 service worker。service worker 可以用于缓存数据（比如网站的头部等不常变动的部分），避免网络查找失败。如果缓存数据丢失，可以通过 stream 快速获取。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p>更多有关性能优化的信息和工具请参考以下链接：</p>\n<p><a href=\"https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016\">Best Practices for Speeding up Your Website - Yahoo Developer Network</a><br><a href=\"http://yslow.org/\">YSlow - a tool that checks for Yahoo’s recommended optimizations</a><br><a href=\"https://developers.google.com/speed/docs/insights/rules\">PageSpeed Insights - Google Developers</a><br><a href=\"https://developers.google.com/speed/pagespeed/\">PageSpeed Tools - Google Developers</a><br><a href=\"http://blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx\">HTTP/2: The Long-Awaited Sequel</a></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>随着应用程序变得越来越庞大和复杂，性能优化在 web 开发中的地位也越来越重要。针对性的性能优化至关重要，有助于降低时间成本和维护成本。web 应用程序历经发展，其作用已经不再是单一的内容展现，学习通用的性能优化模式，可以将一个难以使用的应用程序转为一个易于上手的工具。没有任何规则是绝对的，只有不断研究和剖析技术栈的深层次逻辑，才能合理进行性能优化。</p>"},{"title":"数据类型的分类","date":"2015-11-15T11:29:36.000Z","_content":"\n开始写作本文的时候，我已经顺利地度过了四个月的前端实习生活，其间经手的项目勉强称得上稳定和健壮。但是刚刚学习前端的那些日子，可没现在这么自信，回想起来仍然颇多感慨。\n\n《JavaScript 典型应用与最佳实践》是我学习 JavaScript 的启蒙书籍，初版于 2008 年，面色古老而又心思缜密。其中的原始值和引用值一节，让我对 JavaScript 中数据类型的理解豁然开朗。如果从写作的角度看这本书，它的亮点在于以一种结构化的思维由浅入深地引导读者，主干和分支条缕清晰。有趣的是，在我用谷歌为结构化思维（Structed Thinking）查找一些理论依据的时候，链接到了一本更古老的书籍《金字塔原理：思考、写作和解决问题的逻辑》，书中介绍的正是作者自 1963 年以来反复实践的一套结构化思维，具体的细节等我读完后再聊吧。\n\n<!-- more -->\n\n最近项目中使用到的技术都比较激进，比如 ES6 / React / Flux 等等。在 ES6 的代码中你能看到诸多其他语言的影子，比如 Python，所以上一周我决定重新回顾一下 Python 中的要点，选用的参考资料是由 Wesley J. Chun 编写的《Python 核心编程（第二版）》。\n\n当读到 4.8 节《标准类型的分类》时，我可以确定，这又是一次结构化思维在知识传播过程中华丽的表演。在高级程序设计语言中，数据类型是必不可少的一部分。理解一门语言的数据类型，也是最基础的一步。虽然下面的示例交错使用 Python 和 JavaScript，但其中所叙述的本质是具有广泛性的。\n\n## Python\n\nPython 中每个对象都有三个特性：id, type 和 value。这些特性在对象初始化时创建。Python 内建了多种数据类型，基本类型包括：\n\n- integer, long integer, float, complex number\n- string\n- list\n- tuple\n- dictionary\n\n对数据类型分类，可以让我们更清晰地理解类型之间的关系以及工作原理。首先，使用存储模型进行分类。存储类型的衡量标准就是看对象能保存多少个对象。对于只能存储单个基本类型的对象，我们称之为原子或标量存储；那些可以存储多个基本类型的对象，称之为容器存储。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n标量 / 原子存储| 数值、字符串\n容器类型       | 列表、元素、字典\n\n然后，使用更新模型进行分类，更新模型的分类依据是看对象是否允许多次赋值。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n可变类型       | 列表、字典\n不可变类型     | 数值、字符串、元组\n\n最后，使用访问模型进行分类，访问模型的分类依据是看访问方式：直接存取、顺序存取以及映射存取。直接存储通过地址直接访问内存获取数据，数值属于这一类型；顺序存取通过对象的索引从 0 顺序访问内部元素，字符串、列表和元组都属于这一类型；映射存储与顺序存取类型，不同点在于它使用哈希键来访问数据，字典属于这一类型。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n直接访问       | 数值\n顺序访问       | 字符串、列表、元组\n映射访问       | 字典\n\n> 文中使用这么多的模型对数据类型分类，将基本类型和扩展类型进行区别，描述了各种类型的具体特征。简而言之，文中调侃了一句话：“一个优秀的工匠应该知道自己的工具箱有什么宝贝”。\n\n## JavaScript\n\nECMAScript 规范中定义了变量的两种类型：原始值类型和引用值类型。用以区分的依据就是它们在内存中的存储类型：值存储和址存储。\n\n为什么要分值和地址两种方式？一般而言，值存储的变量（原始值类型）都具有占据空间小、大小固定的特点。只有 string 是个特例，虽然它不具备大小固定的要求，但它是不可变的，是稳定而又会被频繁调用的。在其他语言中，string 大多是可变的。\n\n址存储的类型，具有占据空间大、大小不固定的特点，因此如果使用值存储的方式放在内存中，将会影响程序运行的性能。","source":"_posts/数据类型的分类.md","raw":"title: 数据类型的分类\ndate: 2015-11-15 19:29:36\n---\n\n开始写作本文的时候，我已经顺利地度过了四个月的前端实习生活，其间经手的项目勉强称得上稳定和健壮。但是刚刚学习前端的那些日子，可没现在这么自信，回想起来仍然颇多感慨。\n\n《JavaScript 典型应用与最佳实践》是我学习 JavaScript 的启蒙书籍，初版于 2008 年，面色古老而又心思缜密。其中的原始值和引用值一节，让我对 JavaScript 中数据类型的理解豁然开朗。如果从写作的角度看这本书，它的亮点在于以一种结构化的思维由浅入深地引导读者，主干和分支条缕清晰。有趣的是，在我用谷歌为结构化思维（Structed Thinking）查找一些理论依据的时候，链接到了一本更古老的书籍《金字塔原理：思考、写作和解决问题的逻辑》，书中介绍的正是作者自 1963 年以来反复实践的一套结构化思维，具体的细节等我读完后再聊吧。\n\n<!-- more -->\n\n最近项目中使用到的技术都比较激进，比如 ES6 / React / Flux 等等。在 ES6 的代码中你能看到诸多其他语言的影子，比如 Python，所以上一周我决定重新回顾一下 Python 中的要点，选用的参考资料是由 Wesley J. Chun 编写的《Python 核心编程（第二版）》。\n\n当读到 4.8 节《标准类型的分类》时，我可以确定，这又是一次结构化思维在知识传播过程中华丽的表演。在高级程序设计语言中，数据类型是必不可少的一部分。理解一门语言的数据类型，也是最基础的一步。虽然下面的示例交错使用 Python 和 JavaScript，但其中所叙述的本质是具有广泛性的。\n\n## Python\n\nPython 中每个对象都有三个特性：id, type 和 value。这些特性在对象初始化时创建。Python 内建了多种数据类型，基本类型包括：\n\n- integer, long integer, float, complex number\n- string\n- list\n- tuple\n- dictionary\n\n对数据类型分类，可以让我们更清晰地理解类型之间的关系以及工作原理。首先，使用存储模型进行分类。存储类型的衡量标准就是看对象能保存多少个对象。对于只能存储单个基本类型的对象，我们称之为原子或标量存储；那些可以存储多个基本类型的对象，称之为容器存储。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n标量 / 原子存储| 数值、字符串\n容器类型       | 列表、元素、字典\n\n然后，使用更新模型进行分类，更新模型的分类依据是看对象是否允许多次赋值。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n可变类型       | 列表、字典\n不可变类型     | 数值、字符串、元组\n\n最后，使用访问模型进行分类，访问模型的分类依据是看访问方式：直接存取、顺序存取以及映射存取。直接存储通过地址直接访问内存获取数据，数值属于这一类型；顺序存取通过对象的索引从 0 顺序访问内部元素，字符串、列表和元组都属于这一类型；映射存储与顺序存取类型，不同点在于它使用哈希键来访问数据，字典属于这一类型。\n\n分类          | Python 类型\n:-----------:|:-------------------:\n直接访问       | 数值\n顺序访问       | 字符串、列表、元组\n映射访问       | 字典\n\n> 文中使用这么多的模型对数据类型分类，将基本类型和扩展类型进行区别，描述了各种类型的具体特征。简而言之，文中调侃了一句话：“一个优秀的工匠应该知道自己的工具箱有什么宝贝”。\n\n## JavaScript\n\nECMAScript 规范中定义了变量的两种类型：原始值类型和引用值类型。用以区分的依据就是它们在内存中的存储类型：值存储和址存储。\n\n为什么要分值和地址两种方式？一般而言，值存储的变量（原始值类型）都具有占据空间小、大小固定的特点。只有 string 是个特例，虽然它不具备大小固定的要求，但它是不可变的，是稳定而又会被频繁调用的。在其他语言中，string 大多是可变的。\n\n址存储的类型，具有占据空间大、大小不固定的特点，因此如果使用值存储的方式放在内存中，将会影响程序运行的性能。","slug":"数据类型的分类","published":1,"updated":"2015-12-15T09:15:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp5000lfsdi5qcv32nv","content":"<p>开始写作本文的时候，我已经顺利地度过了四个月的前端实习生活，其间经手的项目勉强称得上稳定和健壮。但是刚刚学习前端的那些日子，可没现在这么自信，回想起来仍然颇多感慨。</p>\n<p>《JavaScript 典型应用与最佳实践》是我学习 JavaScript 的启蒙书籍，初版于 2008 年，面色古老而又心思缜密。其中的原始值和引用值一节，让我对 JavaScript 中数据类型的理解豁然开朗。如果从写作的角度看这本书，它的亮点在于以一种结构化的思维由浅入深地引导读者，主干和分支条缕清晰。有趣的是，在我用谷歌为结构化思维（Structed Thinking）查找一些理论依据的时候，链接到了一本更古老的书籍《金字塔原理：思考、写作和解决问题的逻辑》，书中介绍的正是作者自 1963 年以来反复实践的一套结构化思维，具体的细节等我读完后再聊吧。</p>\n<a id=\"more\"></a>\n<p>最近项目中使用到的技术都比较激进，比如 ES6 / React / Flux 等等。在 ES6 的代码中你能看到诸多其他语言的影子，比如 Python，所以上一周我决定重新回顾一下 Python 中的要点，选用的参考资料是由 Wesley J. Chun 编写的《Python 核心编程（第二版）》。</p>\n<p>当读到 4.8 节《标准类型的分类》时，我可以确定，这又是一次结构化思维在知识传播过程中华丽的表演。在高级程序设计语言中，数据类型是必不可少的一部分。理解一门语言的数据类型，也是最基础的一步。虽然下面的示例交错使用 Python 和 JavaScript，但其中所叙述的本质是具有广泛性的。</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Python 中每个对象都有三个特性：id, type 和 value。这些特性在对象初始化时创建。Python 内建了多种数据类型，基本类型包括：</p>\n<ul>\n<li>integer, long integer, float, complex number</li>\n<li>string</li>\n<li>list</li>\n<li>tuple</li>\n<li>dictionary</li>\n</ul>\n<p>对数据类型分类，可以让我们更清晰地理解类型之间的关系以及工作原理。首先，使用存储模型进行分类。存储类型的衡量标准就是看对象能保存多少个对象。对于只能存储单个基本类型的对象，我们称之为原子或标量存储；那些可以存储多个基本类型的对象，称之为容器存储。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">标量 / 原子存储</td>\n<td style=\"text-align:center\">数值、字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器类型</td>\n<td style=\"text-align:center\">列表、元素、字典</td>\n</tr>\n</tbody>\n</table>\n<p>然后，使用更新模型进行分类，更新模型的分类依据是看对象是否允许多次赋值。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">可变类型</td>\n<td style=\"text-align:center\">列表、字典</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不可变类型</td>\n<td style=\"text-align:center\">数值、字符串、元组</td>\n</tr>\n</tbody>\n</table>\n<p>最后，使用访问模型进行分类，访问模型的分类依据是看访问方式：直接存取、顺序存取以及映射存取。直接存储通过地址直接访问内存获取数据，数值属于这一类型；顺序存取通过对象的索引从 0 顺序访问内部元素，字符串、列表和元组都属于这一类型；映射存储与顺序存取类型，不同点在于它使用哈希键来访问数据，字典属于这一类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">直接访问</td>\n<td style=\"text-align:center\">数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">顺序访问</td>\n<td style=\"text-align:center\">字符串、列表、元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">映射访问</td>\n<td style=\"text-align:center\">字典</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>文中使用这么多的模型对数据类型分类，将基本类型和扩展类型进行区别，描述了各种类型的具体特征。简而言之，文中调侃了一句话：“一个优秀的工匠应该知道自己的工具箱有什么宝贝”。</p>\n</blockquote>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>ECMAScript 规范中定义了变量的两种类型：原始值类型和引用值类型。用以区分的依据就是它们在内存中的存储类型：值存储和址存储。</p>\n<p>为什么要分值和地址两种方式？一般而言，值存储的变量（原始值类型）都具有占据空间小、大小固定的特点。只有 string 是个特例，虽然它不具备大小固定的要求，但它是不可变的，是稳定而又会被频繁调用的。在其他语言中，string 大多是可变的。</p>\n<p>址存储的类型，具有占据空间大、大小不固定的特点，因此如果使用值存储的方式放在内存中，将会影响程序运行的性能。</p>\n","excerpt":"<p>开始写作本文的时候，我已经顺利地度过了四个月的前端实习生活，其间经手的项目勉强称得上稳定和健壮。但是刚刚学习前端的那些日子，可没现在这么自信，回想起来仍然颇多感慨。</p>\n<p>《JavaScript 典型应用与最佳实践》是我学习 JavaScript 的启蒙书籍，初版于 2008 年，面色古老而又心思缜密。其中的原始值和引用值一节，让我对 JavaScript 中数据类型的理解豁然开朗。如果从写作的角度看这本书，它的亮点在于以一种结构化的思维由浅入深地引导读者，主干和分支条缕清晰。有趣的是，在我用谷歌为结构化思维（Structed Thinking）查找一些理论依据的时候，链接到了一本更古老的书籍《金字塔原理：思考、写作和解决问题的逻辑》，书中介绍的正是作者自 1963 年以来反复实践的一套结构化思维，具体的细节等我读完后再聊吧。</p>","more":"<p>最近项目中使用到的技术都比较激进，比如 ES6 / React / Flux 等等。在 ES6 的代码中你能看到诸多其他语言的影子，比如 Python，所以上一周我决定重新回顾一下 Python 中的要点，选用的参考资料是由 Wesley J. Chun 编写的《Python 核心编程（第二版）》。</p>\n<p>当读到 4.8 节《标准类型的分类》时，我可以确定，这又是一次结构化思维在知识传播过程中华丽的表演。在高级程序设计语言中，数据类型是必不可少的一部分。理解一门语言的数据类型，也是最基础的一步。虽然下面的示例交错使用 Python 和 JavaScript，但其中所叙述的本质是具有广泛性的。</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Python 中每个对象都有三个特性：id, type 和 value。这些特性在对象初始化时创建。Python 内建了多种数据类型，基本类型包括：</p>\n<ul>\n<li>integer, long integer, float, complex number</li>\n<li>string</li>\n<li>list</li>\n<li>tuple</li>\n<li>dictionary</li>\n</ul>\n<p>对数据类型分类，可以让我们更清晰地理解类型之间的关系以及工作原理。首先，使用存储模型进行分类。存储类型的衡量标准就是看对象能保存多少个对象。对于只能存储单个基本类型的对象，我们称之为原子或标量存储；那些可以存储多个基本类型的对象，称之为容器存储。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">标量 / 原子存储</td>\n<td style=\"text-align:center\">数值、字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容器类型</td>\n<td style=\"text-align:center\">列表、元素、字典</td>\n</tr>\n</tbody>\n</table>\n<p>然后，使用更新模型进行分类，更新模型的分类依据是看对象是否允许多次赋值。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">可变类型</td>\n<td style=\"text-align:center\">列表、字典</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不可变类型</td>\n<td style=\"text-align:center\">数值、字符串、元组</td>\n</tr>\n</tbody>\n</table>\n<p>最后，使用访问模型进行分类，访问模型的分类依据是看访问方式：直接存取、顺序存取以及映射存取。直接存储通过地址直接访问内存获取数据，数值属于这一类型；顺序存取通过对象的索引从 0 顺序访问内部元素，字符串、列表和元组都属于这一类型；映射存储与顺序存取类型，不同点在于它使用哈希键来访问数据，字典属于这一类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">直接访问</td>\n<td style=\"text-align:center\">数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">顺序访问</td>\n<td style=\"text-align:center\">字符串、列表、元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">映射访问</td>\n<td style=\"text-align:center\">字典</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>文中使用这么多的模型对数据类型分类，将基本类型和扩展类型进行区别，描述了各种类型的具体特征。简而言之，文中调侃了一句话：“一个优秀的工匠应该知道自己的工具箱有什么宝贝”。</p>\n</blockquote>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>ECMAScript 规范中定义了变量的两种类型：原始值类型和引用值类型。用以区分的依据就是它们在内存中的存储类型：值存储和址存储。</p>\n<p>为什么要分值和地址两种方式？一般而言，值存储的变量（原始值类型）都具有占据空间小、大小固定的特点。只有 string 是个特例，虽然它不具备大小固定的要求，但它是不可变的，是稳定而又会被频繁调用的。在其他语言中，string 大多是可变的。</p>\n<p>址存储的类型，具有占据空间大、大小不固定的特点，因此如果使用值存储的方式放在内存中，将会影响程序运行的性能。</p>"},{"title":"洗牌算法","date":"2016-03-16T05:45:02.000Z","desc":"本文介绍了洗牌算法的 JS 实现和实现原理。","_content":"\n> 翻译自 [Shuffling an Array in JavaScript](https://www.kirupa.com/html5/shuffling_array_js.htm)\n\n洗牌算法是一个比较形象的术语，本质上是让一个数组内的元素随机排列。举例来说，我们有一个如下图所示的数组，数组长度为 9，数组内元素的值顺次分别是 1~9：\n\n![shffle-array-1](/img/shuffle-array-1.png)\n\n从上面这个数组入手，我们要做的就是打乱数组内元素的顺序：\n\n![shffle-array-2](/img/shuffle-array-2.png)\n\n<!-- more -->\n\n## 代码实现\n\n维基百科上的 [Fisher–Yates shuffle](http://en.wikipedia.org/wiki/Knuth_shuffle) 词条对洗牌算法做了详细介绍，下面演示的算法也是基于其中的理论编写的：\n\n```js\nArray.prototype.shuffle = function() {\n    var input = this;\n    for (var i = input.length-1; i >=0; i--) {     \n    for (var i = input.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); \n        var itemAtIndex = input[randomIndex]; \n         \n        input[randomIndex] = input[i]; \n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n \nvar tempArray = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\ntempArray.shuffle();\n \n// and the result is...\nalert(tempArray); \n```\n\n在上面的代码中，我们创建了一个 `shffle()` 方法，该方法用于随机排列数组内的元素。此外，我们将该方法挂载在了 `Array` 对象的原型下面，所以任何数组都可以直接调用该方法：\n\n```js\nvar tempArray = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\ntempArray.shuffle(); \n```\n\n## 工作原理\n\n看完代码之后，让我们看看它对数组都做了写什么。首先，该方法选中数组的最后一个元素：\n\n![shffule-array-3](/img/shuffle-array-3.png)\n\n接下来确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围：\n\n![shffule-array-4](/img/shuffle-array-4.png)\n\n确定范围后，从中随机挑选一个数，这里假设随机选中的元素为 4：\n\n![shffule-array-5](/img/shuffle-array-5.png)\n\n然后交换最后一个元素和随机选中的元素的值：\n\n![shffule-array-6](/img/shuffle-array-6.png)\n\n上面的交换完成后，相当于我们完成了对数组最后一个元素的随机处理。接下来选中数组内倒数第二的元素：\n\n![shffule-array-7](/img/shuffle-array-7.png)\n\n之所以从后往前处理，是因为这样便于确定随机选择的范围。这次我们假定随机到的元素为 2:\n\n![shffule-array-8](/img/shuffle-array-8.png)\n\n接着交换倒数第一个元素和 2 号元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作：\n\n![shffule-array-9](/img/shuffle-array-9.png)\n\n剩下的就是一些重复性的工作，不多做介绍了。\n\n## 分析代码\n\n在上一节给各位用图例演示了洗牌流程，下面我们从代码本身看看洗牌流程。先从 `shuffle` 函数说起吧：\n\n```js\nArray.prototype.shuffle = function() {\n    var input = this;\n     \n    for (var i = input.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); \n        var itemAtIndex = input[randomIndex]; \n         \n        input[randomIndex] = input[i]; \n        input[i] = itemAtIndex;\n    }\n    return input;\n} \n```\n\n`shuffle` 函数挂载在 `Array` 对象的原型之下，便于数组直接调用该函数。在 `shuffle` 函数内部，`this` 引用的就是调用该 `shuffle` 的数组：\n\n```js\nvar input = this;\n```\n\n在上面的代码中，我用一个新的变量引用 `this`，也就是调用 `shuffle` 函数的数组。下一步，看一下 `for` 循环内都干了什么：\n\n```js\nfor (var i = input.length-1; i >=0; i--) {\n \n    var randomIndex = Math.floor(Math.random()*(i+1)); \n    var itemAtIndex = input[randomIndex]; \n     \n    input[randomIndex] = input[i]; \n    input[i] = itemAtIndex;\n}\n```\n\n该循环用于遍历所有数组内的所有元素，并进行随机交换。注意，遍历顺序是从后往前进行的，也就是说从 `input.length-1` 位置的元素开始，知道遍历到数组中的第一个元素。遍历过程中的位置由变量 `i` 指定。\n\n这里的变量 `i` 就是上面图例中被选中的元素：\n\n![shffule-array-3](/img/shuffle-array-3.png)\n\n接下来，使用了两行代码在指定范围内挑选一个随机元素：\n\n```js\nvar randomIndex = Math.floor(Math.random()*(i+1)); \nvar itemAtIndex = input[randomIndex];\n```\n\n变量 `randomIndex` 存储了一个随机数，该随机数可以用作数组的索引，进而提取一个随机元素。注意，该随机数的最大值并不是数组的长度，而是变量 `i` 的值。\n\n确定了随机元素的索引之后，用新的变量保存该元素的值，然后交换选中元素和随机元素的值：\n\n```js\nvar itemAtIndex = input[randomIndex];\ninput[randomIndex] = input[i]; \ninput[i] = itemAtIndex;\n```\n\n在这三行代码中，第一行使用新的变量保存了随机元素的值；第二行将选中元素 `input[i]` 的值赋给随机元素 `input[randomIndex]`；第三行就随机元素的值 `itemAtIndex` 赋给选中元素 `input[i]`。本质上是一个互换两个元素的值的过程，并不难理解。\n\n至此，循环内的逻辑就介绍完了，剩下的都是重复操作。\n\n## 随机性测试\n\n<div id=\"random-chart\" style=\"width=100%;\"></div>\n<script src=\"http://cdn.hcharts.cn/jquery/jquery-2.1.4.min.js\"></script>\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script>\n    $(function() {\n        var sum = [];\n        var array = []\n        var arrayLength = 21;\n        var iterateTimes = 10000;\n\n        Array.prototype.shuffle = function () {\n            var arr = this;\n\n            for (var i = arr.length - 1; i >= 0; i--) {\n                var randomIndex = Math.floor(Math.random() * (i + 1));\n                var randomElemValue = arr[randomIndex];\n\n                arr[randomIndex] = arr[i];\n                arr[i] = randomElemValue;\n            }\n            return arr;\n        }\n\n        function init (len) {\n            for (var i = 0; i < len; i++) {\n                sum[i] = 0;\n                array[i] = i;\n            }\n        }\n\n        function createArray () {\n            var arr = [];\n\n            for (var i = 0; i < arrayLength; i++) {\n                arr[i] = i;\n            }\n\n            return arr;\n        }\n\n        function calculateSum (times) {\n            for (var i = 0; i < times; i++) {\n                var arr = createArray().shuffle();\n                for (var j = 0; j < arrayLength; j++) {\n                    sum[j] += arr[j];\n                }\n            }\n        }\n\n        init(arrayLength);\n        calculateSum(iterateTimes);\n\n        $(\"#random-chart\").highcharts({\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: '洗牌的随机性结果'\n            },\n            xAxis: {\n                categories: array\n            },\n            yAxis: {\n                title: {\n                    text: '总值'\n                }\n            },\n            series: [{\n                name: '不同位置的总值',\n                color: '#42b983',\n                data: sum\n            }]\n        });\n    });\n</script>\n\n上图是使用 Highcharts 制作的随机性测试图表，以可视化的方式校验本文中洗牌算法的随机性。每次刷新页面都会重新计算和生成该图表。\n\n生成上图的数据是这样计算而来的：首先创建一个数组（上图使用的数组为 `[0, 1, 2 ... 18, 19, 20]`），然后使用本文中的洗牌算法重新排序，排序完成后记录每一个元素的值……以此步骤执行 10000 次，最后对同一索引位置上的数值进行求和。如此执行 10000 次之后，索引之间的总值应该相差不大。\n\n由计算可得：\n\n$$average=\\frac{(0+20)\\times21\\times10000}{2\\times21}=100k$$\n\n###### 参考资料\n\n- [Shuffling an Array in JavaScript](https://www.kirupa.com/html5/shuffling_array_js.htm)\n- [Fisher–Yates Shuffle](https://bost.ocks.org/mike/shuffle/)\n- [Hacker News: A visual explanation of Fisher–Yates shuffle](https://news.ycombinator.com/item?id=3464607)\n- [Stack Overflow: Is it correct to use JavaScript Array.sort() method for shuffling?](http://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling/962890#962890)","source":"_posts/洗牌算法.md","raw":"title: 洗牌算法\ndate: 2016-03-16 13:45:02\ndesc: 本文介绍了洗牌算法的 JS 实现和实现原理。\n---\n\n> 翻译自 [Shuffling an Array in JavaScript](https://www.kirupa.com/html5/shuffling_array_js.htm)\n\n洗牌算法是一个比较形象的术语，本质上是让一个数组内的元素随机排列。举例来说，我们有一个如下图所示的数组，数组长度为 9，数组内元素的值顺次分别是 1~9：\n\n![shffle-array-1](/img/shuffle-array-1.png)\n\n从上面这个数组入手，我们要做的就是打乱数组内元素的顺序：\n\n![shffle-array-2](/img/shuffle-array-2.png)\n\n<!-- more -->\n\n## 代码实现\n\n维基百科上的 [Fisher–Yates shuffle](http://en.wikipedia.org/wiki/Knuth_shuffle) 词条对洗牌算法做了详细介绍，下面演示的算法也是基于其中的理论编写的：\n\n```js\nArray.prototype.shuffle = function() {\n    var input = this;\n    for (var i = input.length-1; i >=0; i--) {     \n    for (var i = input.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); \n        var itemAtIndex = input[randomIndex]; \n         \n        input[randomIndex] = input[i]; \n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n \nvar tempArray = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\ntempArray.shuffle();\n \n// and the result is...\nalert(tempArray); \n```\n\n在上面的代码中，我们创建了一个 `shffle()` 方法，该方法用于随机排列数组内的元素。此外，我们将该方法挂载在了 `Array` 对象的原型下面，所以任何数组都可以直接调用该方法：\n\n```js\nvar tempArray = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\ntempArray.shuffle(); \n```\n\n## 工作原理\n\n看完代码之后，让我们看看它对数组都做了写什么。首先，该方法选中数组的最后一个元素：\n\n![shffule-array-3](/img/shuffle-array-3.png)\n\n接下来确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围：\n\n![shffule-array-4](/img/shuffle-array-4.png)\n\n确定范围后，从中随机挑选一个数，这里假设随机选中的元素为 4：\n\n![shffule-array-5](/img/shuffle-array-5.png)\n\n然后交换最后一个元素和随机选中的元素的值：\n\n![shffule-array-6](/img/shuffle-array-6.png)\n\n上面的交换完成后，相当于我们完成了对数组最后一个元素的随机处理。接下来选中数组内倒数第二的元素：\n\n![shffule-array-7](/img/shuffle-array-7.png)\n\n之所以从后往前处理，是因为这样便于确定随机选择的范围。这次我们假定随机到的元素为 2:\n\n![shffule-array-8](/img/shuffle-array-8.png)\n\n接着交换倒数第一个元素和 2 号元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作：\n\n![shffule-array-9](/img/shuffle-array-9.png)\n\n剩下的就是一些重复性的工作，不多做介绍了。\n\n## 分析代码\n\n在上一节给各位用图例演示了洗牌流程，下面我们从代码本身看看洗牌流程。先从 `shuffle` 函数说起吧：\n\n```js\nArray.prototype.shuffle = function() {\n    var input = this;\n     \n    for (var i = input.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); \n        var itemAtIndex = input[randomIndex]; \n         \n        input[randomIndex] = input[i]; \n        input[i] = itemAtIndex;\n    }\n    return input;\n} \n```\n\n`shuffle` 函数挂载在 `Array` 对象的原型之下，便于数组直接调用该函数。在 `shuffle` 函数内部，`this` 引用的就是调用该 `shuffle` 的数组：\n\n```js\nvar input = this;\n```\n\n在上面的代码中，我用一个新的变量引用 `this`，也就是调用 `shuffle` 函数的数组。下一步，看一下 `for` 循环内都干了什么：\n\n```js\nfor (var i = input.length-1; i >=0; i--) {\n \n    var randomIndex = Math.floor(Math.random()*(i+1)); \n    var itemAtIndex = input[randomIndex]; \n     \n    input[randomIndex] = input[i]; \n    input[i] = itemAtIndex;\n}\n```\n\n该循环用于遍历所有数组内的所有元素，并进行随机交换。注意，遍历顺序是从后往前进行的，也就是说从 `input.length-1` 位置的元素开始，知道遍历到数组中的第一个元素。遍历过程中的位置由变量 `i` 指定。\n\n这里的变量 `i` 就是上面图例中被选中的元素：\n\n![shffule-array-3](/img/shuffle-array-3.png)\n\n接下来，使用了两行代码在指定范围内挑选一个随机元素：\n\n```js\nvar randomIndex = Math.floor(Math.random()*(i+1)); \nvar itemAtIndex = input[randomIndex];\n```\n\n变量 `randomIndex` 存储了一个随机数，该随机数可以用作数组的索引，进而提取一个随机元素。注意，该随机数的最大值并不是数组的长度，而是变量 `i` 的值。\n\n确定了随机元素的索引之后，用新的变量保存该元素的值，然后交换选中元素和随机元素的值：\n\n```js\nvar itemAtIndex = input[randomIndex];\ninput[randomIndex] = input[i]; \ninput[i] = itemAtIndex;\n```\n\n在这三行代码中，第一行使用新的变量保存了随机元素的值；第二行将选中元素 `input[i]` 的值赋给随机元素 `input[randomIndex]`；第三行就随机元素的值 `itemAtIndex` 赋给选中元素 `input[i]`。本质上是一个互换两个元素的值的过程，并不难理解。\n\n至此，循环内的逻辑就介绍完了，剩下的都是重复操作。\n\n## 随机性测试\n\n<div id=\"random-chart\" style=\"width=100%;\"></div>\n<script src=\"http://cdn.hcharts.cn/jquery/jquery-2.1.4.min.js\"></script>\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script>\n    $(function() {\n        var sum = [];\n        var array = []\n        var arrayLength = 21;\n        var iterateTimes = 10000;\n\n        Array.prototype.shuffle = function () {\n            var arr = this;\n\n            for (var i = arr.length - 1; i >= 0; i--) {\n                var randomIndex = Math.floor(Math.random() * (i + 1));\n                var randomElemValue = arr[randomIndex];\n\n                arr[randomIndex] = arr[i];\n                arr[i] = randomElemValue;\n            }\n            return arr;\n        }\n\n        function init (len) {\n            for (var i = 0; i < len; i++) {\n                sum[i] = 0;\n                array[i] = i;\n            }\n        }\n\n        function createArray () {\n            var arr = [];\n\n            for (var i = 0; i < arrayLength; i++) {\n                arr[i] = i;\n            }\n\n            return arr;\n        }\n\n        function calculateSum (times) {\n            for (var i = 0; i < times; i++) {\n                var arr = createArray().shuffle();\n                for (var j = 0; j < arrayLength; j++) {\n                    sum[j] += arr[j];\n                }\n            }\n        }\n\n        init(arrayLength);\n        calculateSum(iterateTimes);\n\n        $(\"#random-chart\").highcharts({\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: '洗牌的随机性结果'\n            },\n            xAxis: {\n                categories: array\n            },\n            yAxis: {\n                title: {\n                    text: '总值'\n                }\n            },\n            series: [{\n                name: '不同位置的总值',\n                color: '#42b983',\n                data: sum\n            }]\n        });\n    });\n</script>\n\n上图是使用 Highcharts 制作的随机性测试图表，以可视化的方式校验本文中洗牌算法的随机性。每次刷新页面都会重新计算和生成该图表。\n\n生成上图的数据是这样计算而来的：首先创建一个数组（上图使用的数组为 `[0, 1, 2 ... 18, 19, 20]`），然后使用本文中的洗牌算法重新排序，排序完成后记录每一个元素的值……以此步骤执行 10000 次，最后对同一索引位置上的数值进行求和。如此执行 10000 次之后，索引之间的总值应该相差不大。\n\n由计算可得：\n\n$$average=\\frac{(0+20)\\times21\\times10000}{2\\times21}=100k$$\n\n###### 参考资料\n\n- [Shuffling an Array in JavaScript](https://www.kirupa.com/html5/shuffling_array_js.htm)\n- [Fisher–Yates Shuffle](https://bost.ocks.org/mike/shuffle/)\n- [Hacker News: A visual explanation of Fisher–Yates shuffle](https://news.ycombinator.com/item?id=3464607)\n- [Stack Overflow: Is it correct to use JavaScript Array.sort() method for shuffling?](http://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling/962890#962890)","slug":"洗牌算法","published":1,"updated":"2016-04-03T03:34:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp7000mfsdilc8bgbo9","content":"<blockquote>\n<p>翻译自 <a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\" target=\"_blank\" rel=\"external\">Shuffling an Array in JavaScript</a></p>\n</blockquote>\n<p>洗牌算法是一个比较形象的术语，本质上是让一个数组内的元素随机排列。举例来说，我们有一个如下图所示的数组，数组长度为 9，数组内元素的值顺次分别是 1~9：</p>\n<p><img src=\"/img/shuffle-array-1.png\" alt=\"shffle-array-1\"></p>\n<p>从上面这个数组入手，我们要做的就是打乱数组内元素的顺序：</p>\n<p><img src=\"/img/shuffle-array-2.png\" alt=\"shffle-array-2\"></p>\n<a id=\"more\"></a>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>维基百科上的 <a href=\"http://en.wikipedia.org/wiki/Knuth_shuffle\" target=\"_blank\" rel=\"external\">Fisher–Yates shuffle</a> 词条对洗牌算法做了详细介绍，下面演示的算法也是基于其中的理论编写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">         </span><br><span class=\"line\">        input[randomIndex] = input[i]; </span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tempArray = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span> ]</span><br><span class=\"line\">tempArray.shuffle();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// and the result is...</span></span><br><span class=\"line\">alert(tempArray);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们创建了一个 <code>shffle()</code> 方法，该方法用于随机排列数组内的元素。此外，我们将该方法挂载在了 <code>Array</code> 对象的原型下面，所以任何数组都可以直接调用该方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tempArray = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span> ]</span><br><span class=\"line\">tempArray.shuffle();</span><br></pre></td></tr></table></figure>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>看完代码之后，让我们看看它对数组都做了写什么。首先，该方法选中数组的最后一个元素：</p>\n<p><img src=\"/img/shuffle-array-3.png\" alt=\"shffule-array-3\"></p>\n<p>接下来确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围：</p>\n<p><img src=\"/img/shuffle-array-4.png\" alt=\"shffule-array-4\"></p>\n<p>确定范围后，从中随机挑选一个数，这里假设随机选中的元素为 4：</p>\n<p><img src=\"/img/shuffle-array-5.png\" alt=\"shffule-array-5\"></p>\n<p>然后交换最后一个元素和随机选中的元素的值：</p>\n<p><img src=\"/img/shuffle-array-6.png\" alt=\"shffule-array-6\"></p>\n<p>上面的交换完成后，相当于我们完成了对数组最后一个元素的随机处理。接下来选中数组内倒数第二的元素：</p>\n<p><img src=\"/img/shuffle-array-7.png\" alt=\"shffule-array-7\"></p>\n<p>之所以从后往前处理，是因为这样便于确定随机选择的范围。这次我们假定随机到的元素为 2:</p>\n<p><img src=\"/img/shuffle-array-8.png\" alt=\"shffule-array-8\"></p>\n<p>接着交换倒数第一个元素和 2 号元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作：</p>\n<p><img src=\"/img/shuffle-array-9.png\" alt=\"shffule-array-9\"></p>\n<p>剩下的就是一些重复性的工作，不多做介绍了。</p>\n<h2 id=\"分析代码\"><a href=\"#分析代码\" class=\"headerlink\" title=\"分析代码\"></a>分析代码</h2><p>在上一节给各位用图例演示了洗牌流程，下面我们从代码本身看看洗牌流程。先从 <code>shuffle</code> 函数说起吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">         </span><br><span class=\"line\">        input[randomIndex] = input[i]; </span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>shuffle</code> 函数挂载在 <code>Array</code> 对象的原型之下，便于数组直接调用该函数。在 <code>shuffle</code> 函数内部，<code>this</code> 引用的就是调用该 <code>shuffle</code> 的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我用一个新的变量引用 <code>this</code>，也就是调用 <code>shuffle</code> 函数的数组。下一步，看一下 <code>for</code> 循环内都干了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">     </span><br><span class=\"line\">    input[randomIndex] = input[i]; </span><br><span class=\"line\">    input[i] = itemAtIndex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该循环用于遍历所有数组内的所有元素，并进行随机交换。注意，遍历顺序是从后往前进行的，也就是说从 <code>input.length-1</code> 位置的元素开始，知道遍历到数组中的第一个元素。遍历过程中的位置由变量 <code>i</code> 指定。</p>\n<p>这里的变量 <code>i</code> 就是上面图例中被选中的元素：</p>\n<p><img src=\"/img/shuffle-array-3.png\" alt=\"shffule-array-3\"></p>\n<p>接下来，使用了两行代码在指定范围内挑选一个随机元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\"><span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br></pre></td></tr></table></figure>\n<p>变量 <code>randomIndex</code> 存储了一个随机数，该随机数可以用作数组的索引，进而提取一个随机元素。注意，该随机数的最大值并不是数组的长度，而是变量 <code>i</code> 的值。</p>\n<p>确定了随机元素的索引之后，用新的变量保存该元素的值，然后交换选中元素和随机元素的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br><span class=\"line\">input[randomIndex] = input[i]; </span><br><span class=\"line\">input[i] = itemAtIndex;</span><br></pre></td></tr></table></figure>\n<p>在这三行代码中，第一行使用新的变量保存了随机元素的值；第二行将选中元素 <code>input[i]</code> 的值赋给随机元素 <code>input[randomIndex]</code>；第三行就随机元素的值 <code>itemAtIndex</code> 赋给选中元素 <code>input[i]</code>。本质上是一个互换两个元素的值的过程，并不难理解。</p>\n<p>至此，循环内的逻辑就介绍完了，剩下的都是重复操作。</p>\n<h2 id=\"随机性测试\"><a href=\"#随机性测试\" class=\"headerlink\" title=\"随机性测试\"></a>随机性测试</h2><p><div id=\"random-chart\" style=\"width=100%;\"></div></p>\n<script src=\"http://cdn.hcharts.cn/jquery/jquery-2.1.4.min.js\"></script>\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script>\n    $(function() {\n        var sum = [];\n        var array = []\n        var arrayLength = 21;\n        var iterateTimes = 10000;\n\n        Array.prototype.shuffle = function () {\n            var arr = this;\n\n            for (var i = arr.length - 1; i >= 0; i--) {\n                var randomIndex = Math.floor(Math.random() * (i + 1));\n                var randomElemValue = arr[randomIndex];\n\n                arr[randomIndex] = arr[i];\n                arr[i] = randomElemValue;\n            }\n            return arr;\n        }\n\n        function init (len) {\n            for (var i = 0; i < len; i++) {\n                sum[i] = 0;\n                array[i] = i;\n            }\n        }\n\n        function createArray () {\n            var arr = [];\n\n            for (var i = 0; i < arrayLength; i++) {\n                arr[i] = i;\n            }\n\n            return arr;\n        }\n\n        function calculateSum (times) {\n            for (var i = 0; i < times; i++) {\n                var arr = createArray().shuffle();\n                for (var j = 0; j < arrayLength; j++) {\n                    sum[j] += arr[j];\n                }\n            }\n        }\n\n        init(arrayLength);\n        calculateSum(iterateTimes);\n\n        $(\"#random-chart\").highcharts({\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: '洗牌的随机性结果'\n            },\n            xAxis: {\n                categories: array\n            },\n            yAxis: {\n                title: {\n                    text: '总值'\n                }\n            },\n            series: [{\n                name: '不同位置的总值',\n                color: '#42b983',\n                data: sum\n            }]\n        });\n    });\n</script>\n\n<p>上图是使用 Highcharts 制作的随机性测试图表，以可视化的方式校验本文中洗牌算法的随机性。每次刷新页面都会重新计算和生成该图表。</p>\n<p>生成上图的数据是这样计算而来的：首先创建一个数组（上图使用的数组为 <code>[0, 1, 2 ... 18, 19, 20]</code>），然后使用本文中的洗牌算法重新排序，排序完成后记录每一个元素的值……以此步骤执行 10000 次，最后对同一索引位置上的数值进行求和。如此执行 10000 次之后，索引之间的总值应该相差不大。</p>\n<p>由计算可得：</p>\n<p>$$average=\\frac{(0+20)\\times21\\times10000}{2\\times21}=100k$$</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\" target=\"_blank\" rel=\"external\">Shuffling an Array in JavaScript</a></li>\n<li><a href=\"https://bost.ocks.org/mike/shuffle/\" target=\"_blank\" rel=\"external\">Fisher–Yates Shuffle</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=3464607\" target=\"_blank\" rel=\"external\">Hacker News: A visual explanation of Fisher–Yates shuffle</a></li>\n<li><a href=\"http://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling/962890#962890\" target=\"_blank\" rel=\"external\">Stack Overflow: Is it correct to use JavaScript Array.sort() method for shuffling?</a></li>\n</ul>\n","excerpt":"<blockquote>\n<p>翻译自 <a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\">Shuffling an Array in JavaScript</a></p>\n</blockquote>\n<p>洗牌算法是一个比较形象的术语，本质上是让一个数组内的元素随机排列。举例来说，我们有一个如下图所示的数组，数组长度为 9，数组内元素的值顺次分别是 1~9：</p>\n<p><img src=\"/img/shuffle-array-1.png\" alt=\"shffle-array-1\"></p>\n<p>从上面这个数组入手，我们要做的就是打乱数组内元素的顺序：</p>\n<p><img src=\"/img/shuffle-array-2.png\" alt=\"shffle-array-2\"></p>","more":"<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>维基百科上的 <a href=\"http://en.wikipedia.org/wiki/Knuth_shuffle\">Fisher–Yates shuffle</a> 词条对洗牌算法做了详细介绍，下面演示的算法也是基于其中的理论编写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">         </span><br><span class=\"line\">        input[randomIndex] = input[i]; </span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tempArray = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span> ]</span><br><span class=\"line\">tempArray.shuffle();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// and the result is...</span></span><br><span class=\"line\">alert(tempArray);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们创建了一个 <code>shffle()</code> 方法，该方法用于随机排列数组内的元素。此外，我们将该方法挂载在了 <code>Array</code> 对象的原型下面，所以任何数组都可以直接调用该方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tempArray = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span> ]</span><br><span class=\"line\">tempArray.shuffle();</span><br></pre></td></tr></table></figure>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>看完代码之后，让我们看看它对数组都做了写什么。首先，该方法选中数组的最后一个元素：</p>\n<p><img src=\"/img/shuffle-array-3.png\" alt=\"shffule-array-3\"></p>\n<p>接下来确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围：</p>\n<p><img src=\"/img/shuffle-array-4.png\" alt=\"shffule-array-4\"></p>\n<p>确定范围后，从中随机挑选一个数，这里假设随机选中的元素为 4：</p>\n<p><img src=\"/img/shuffle-array-5.png\" alt=\"shffule-array-5\"></p>\n<p>然后交换最后一个元素和随机选中的元素的值：</p>\n<p><img src=\"/img/shuffle-array-6.png\" alt=\"shffule-array-6\"></p>\n<p>上面的交换完成后，相当于我们完成了对数组最后一个元素的随机处理。接下来选中数组内倒数第二的元素：</p>\n<p><img src=\"/img/shuffle-array-7.png\" alt=\"shffule-array-7\"></p>\n<p>之所以从后往前处理，是因为这样便于确定随机选择的范围。这次我们假定随机到的元素为 2:</p>\n<p><img src=\"/img/shuffle-array-8.png\" alt=\"shffule-array-8\"></p>\n<p>接着交换倒数第一个元素和 2 号元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作：</p>\n<p><img src=\"/img/shuffle-array-9.png\" alt=\"shffule-array-9\"></p>\n<p>剩下的就是一些重复性的工作，不多做介绍了。</p>\n<h2 id=\"分析代码\"><a href=\"#分析代码\" class=\"headerlink\" title=\"分析代码\"></a>分析代码</h2><p>在上一节给各位用图例演示了洗牌流程，下面我们从代码本身看看洗牌流程。先从 <code>shuffle</code> 函数说起吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">         </span><br><span class=\"line\">        input[randomIndex] = input[i]; </span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>shuffle</code> 函数挂载在 <code>Array</code> 对象的原型之下，便于数组直接调用该函数。在 <code>shuffle</code> 函数内部，<code>this</code> 引用的就是调用该 <code>shuffle</code> 的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我用一个新的变量引用 <code>this</code>，也就是调用 <code>shuffle</code> 函数的数组。下一步，看一下 <code>for</code> 循环内都干了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex]; </span><br><span class=\"line\">     </span><br><span class=\"line\">    input[randomIndex] = input[i]; </span><br><span class=\"line\">    input[i] = itemAtIndex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该循环用于遍历所有数组内的所有元素，并进行随机交换。注意，遍历顺序是从后往前进行的，也就是说从 <code>input.length-1</code> 位置的元素开始，知道遍历到数组中的第一个元素。遍历过程中的位置由变量 <code>i</code> 指定。</p>\n<p>这里的变量 <code>i</code> 就是上面图例中被选中的元素：</p>\n<p><img src=\"/img/shuffle-array-3.png\" alt=\"shffule-array-3\"></p>\n<p>接下来，使用了两行代码在指定范围内挑选一个随机元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)); </span><br><span class=\"line\"><span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br></pre></td></tr></table></figure>\n<p>变量 <code>randomIndex</code> 存储了一个随机数，该随机数可以用作数组的索引，进而提取一个随机元素。注意，该随机数的最大值并不是数组的长度，而是变量 <code>i</code> 的值。</p>\n<p>确定了随机元素的索引之后，用新的变量保存该元素的值，然后交换选中元素和随机元素的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br><span class=\"line\">input[randomIndex] = input[i]; </span><br><span class=\"line\">input[i] = itemAtIndex;</span><br></pre></td></tr></table></figure>\n<p>在这三行代码中，第一行使用新的变量保存了随机元素的值；第二行将选中元素 <code>input[i]</code> 的值赋给随机元素 <code>input[randomIndex]</code>；第三行就随机元素的值 <code>itemAtIndex</code> 赋给选中元素 <code>input[i]</code>。本质上是一个互换两个元素的值的过程，并不难理解。</p>\n<p>至此，循环内的逻辑就介绍完了，剩下的都是重复操作。</p>\n<h2 id=\"随机性测试\"><a href=\"#随机性测试\" class=\"headerlink\" title=\"随机性测试\"></a>随机性测试</h2><p><div id=\"random-chart\" style=\"width=100%;\"></div></p>\n<script src=\"http://cdn.hcharts.cn/jquery/jquery-2.1.4.min.js\"></script>\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script>\n    $(function() {\n        var sum = [];\n        var array = []\n        var arrayLength = 21;\n        var iterateTimes = 10000;\n\n        Array.prototype.shuffle = function () {\n            var arr = this;\n\n            for (var i = arr.length - 1; i >= 0; i--) {\n                var randomIndex = Math.floor(Math.random() * (i + 1));\n                var randomElemValue = arr[randomIndex];\n\n                arr[randomIndex] = arr[i];\n                arr[i] = randomElemValue;\n            }\n            return arr;\n        }\n\n        function init (len) {\n            for (var i = 0; i < len; i++) {\n                sum[i] = 0;\n                array[i] = i;\n            }\n        }\n\n        function createArray () {\n            var arr = [];\n\n            for (var i = 0; i < arrayLength; i++) {\n                arr[i] = i;\n            }\n\n            return arr;\n        }\n\n        function calculateSum (times) {\n            for (var i = 0; i < times; i++) {\n                var arr = createArray().shuffle();\n                for (var j = 0; j < arrayLength; j++) {\n                    sum[j] += arr[j];\n                }\n            }\n        }\n\n        init(arrayLength);\n        calculateSum(iterateTimes);\n\n        $(\"#random-chart\").highcharts({\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: '洗牌的随机性结果'\n            },\n            xAxis: {\n                categories: array\n            },\n            yAxis: {\n                title: {\n                    text: '总值'\n                }\n            },\n            series: [{\n                name: '不同位置的总值',\n                color: '#42b983',\n                data: sum\n            }]\n        });\n    });\n</script>\n\n<p>上图是使用 Highcharts 制作的随机性测试图表，以可视化的方式校验本文中洗牌算法的随机性。每次刷新页面都会重新计算和生成该图表。</p>\n<p>生成上图的数据是这样计算而来的：首先创建一个数组（上图使用的数组为 <code>[0, 1, 2 ... 18, 19, 20]</code>），然后使用本文中的洗牌算法重新排序，排序完成后记录每一个元素的值……以此步骤执行 10000 次，最后对同一索引位置上的数值进行求和。如此执行 10000 次之后，索引之间的总值应该相差不大。</p>\n<p>由计算可得：</p>\n<p>$$average=\\frac{(0+20)\\times21\\times10000}{2\\times21}=100k$$</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\">Shuffling an Array in JavaScript</a></li>\n<li><a href=\"https://bost.ocks.org/mike/shuffle/\">Fisher–Yates Shuffle</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=3464607\">Hacker News: A visual explanation of Fisher–Yates shuffle</a></li>\n<li><a href=\"http://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling/962890#962890\">Stack Overflow: Is it correct to use JavaScript Array.sort() method for shuffling?</a></li>\n</ul>"},{"title":"求值策略","date":"2015-12-10T05:43:07.000Z","_content":"\n> 须知参差多态乃是幸福本源。\n\n求值策略所要解决的问题是：何时求值。之所以要控制求值的时间，往往是出于对内存占用和执行效率的考虑。在维基百科的求值策略词条中，列出了五种求值策略：\n\n- 预先求值，表达式绑定到变量时，立即求值并附加给变量\n- 延迟求值，表达式绑定到变量后，并不求值，直到变量被调用时才求值\n- 局部求值，又称柯里化\n- 分布求值，map/reduce，典型应用是分布式计算\n- 短路求值，与 (&&) 、或 (||) 逻辑运算\n\n顾名思义，预先求值和延迟求值是一对对立的求值策略。在下面的 js 代码段中，声明了变量 x，x 赋值后又被调用了三次：\n\n```js\n// 1\nvar x = 5 + 3 * (1 + 5 ^ 2);\n// 2\nconsole.log(x);\nconsole.log(x + 2);\n// 3\nfunc(x);\n```\n\n<!-- more -->\n\n在 1 处，变量 x 完成了声明和赋值等初始化工作，它的值由表达式 (5 + 3 * (1 + 5 ^ 2)) 决定。在 2 处，console.log() 函数调用了变量 x 两次。让我们暂时忽略 js 编译器的求值策略，从个人主观的理性思维来思考一下：面对预先求值和延迟求值，你会怎么选择呢？\n\n做出选择之前，我们需要对变量 x 有一个复杂度的认知：如果表达式的复杂度高，那么该表达式所占用的内存空间也就越高，在变量 x 和表达式解绑前这段内存空间都无法释放掉，意味着 x 的间接内存占用了越高，此外，高复杂度也意味着较长的执行时间，所以复杂度和内存占用、执行效率至少是一种线性相关。\n\n如此说来，那么我们应该选择预先求值的求值策略，这样的好处是：变量 x 初始化时表达式立即计算，x 被重新赋值为 83，重新赋值后表达式所占用的内存空间被释放掉，达到了节省内存空间的目的；多次调用变量 x 时，x 的值已经是可以直接用于运算的数值，而不是需要计算的表达式，减少了重复运算，提高了执行效率。\n\n如果事情按照上面描述的美好愿景发展的话，就没有延迟求值策略出现的必要了。在 3 处，我们向函数 func() 传递了变量 x。这里的 func() 类似于一个黑盒，我们不了解其内部的处理机制，也无法确定 x 是否会被使用。这个时候延迟求值的价值就体现出来了，如果变量 x 在函数内部没有被使用，就不会执行求值，避免了预先求值所要执行的求值运算。\n\n随着表达式的复杂度逐渐提高，预先求值和延迟求值在内存占用、执行效率上的差异就会愈发明显。所以根据数据类型的复杂度，js 将数据类型分为原始值和引用值，传递参数时，原始值按值传递，引用值按引用传递。","source":"_posts/求值策略.md","raw":"title: 求值策略\ndate: 2015-12-10 13:43:07\n---\n\n> 须知参差多态乃是幸福本源。\n\n求值策略所要解决的问题是：何时求值。之所以要控制求值的时间，往往是出于对内存占用和执行效率的考虑。在维基百科的求值策略词条中，列出了五种求值策略：\n\n- 预先求值，表达式绑定到变量时，立即求值并附加给变量\n- 延迟求值，表达式绑定到变量后，并不求值，直到变量被调用时才求值\n- 局部求值，又称柯里化\n- 分布求值，map/reduce，典型应用是分布式计算\n- 短路求值，与 (&&) 、或 (||) 逻辑运算\n\n顾名思义，预先求值和延迟求值是一对对立的求值策略。在下面的 js 代码段中，声明了变量 x，x 赋值后又被调用了三次：\n\n```js\n// 1\nvar x = 5 + 3 * (1 + 5 ^ 2);\n// 2\nconsole.log(x);\nconsole.log(x + 2);\n// 3\nfunc(x);\n```\n\n<!-- more -->\n\n在 1 处，变量 x 完成了声明和赋值等初始化工作，它的值由表达式 (5 + 3 * (1 + 5 ^ 2)) 决定。在 2 处，console.log() 函数调用了变量 x 两次。让我们暂时忽略 js 编译器的求值策略，从个人主观的理性思维来思考一下：面对预先求值和延迟求值，你会怎么选择呢？\n\n做出选择之前，我们需要对变量 x 有一个复杂度的认知：如果表达式的复杂度高，那么该表达式所占用的内存空间也就越高，在变量 x 和表达式解绑前这段内存空间都无法释放掉，意味着 x 的间接内存占用了越高，此外，高复杂度也意味着较长的执行时间，所以复杂度和内存占用、执行效率至少是一种线性相关。\n\n如此说来，那么我们应该选择预先求值的求值策略，这样的好处是：变量 x 初始化时表达式立即计算，x 被重新赋值为 83，重新赋值后表达式所占用的内存空间被释放掉，达到了节省内存空间的目的；多次调用变量 x 时，x 的值已经是可以直接用于运算的数值，而不是需要计算的表达式，减少了重复运算，提高了执行效率。\n\n如果事情按照上面描述的美好愿景发展的话，就没有延迟求值策略出现的必要了。在 3 处，我们向函数 func() 传递了变量 x。这里的 func() 类似于一个黑盒，我们不了解其内部的处理机制，也无法确定 x 是否会被使用。这个时候延迟求值的价值就体现出来了，如果变量 x 在函数内部没有被使用，就不会执行求值，避免了预先求值所要执行的求值运算。\n\n随着表达式的复杂度逐渐提高，预先求值和延迟求值在内存占用、执行效率上的差异就会愈发明显。所以根据数据类型的复杂度，js 将数据类型分为原始值和引用值，传递参数时，原始值按值传递，引用值按引用传递。","slug":"求值策略","published":1,"updated":"2015-12-15T09:15:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp8000nfsdis8ed9d2n","content":"<blockquote>\n<p>须知参差多态乃是幸福本源。</p>\n</blockquote>\n<p>求值策略所要解决的问题是：何时求值。之所以要控制求值的时间，往往是出于对内存占用和执行效率的考虑。在维基百科的求值策略词条中，列出了五种求值策略：</p>\n<ul>\n<li>预先求值，表达式绑定到变量时，立即求值并附加给变量</li>\n<li>延迟求值，表达式绑定到变量后，并不求值，直到变量被调用时才求值</li>\n<li>局部求值，又称柯里化</li>\n<li>分布求值，map/reduce，典型应用是分布式计算</li>\n<li>短路求值，与 (&amp;&amp;) 、或 (||) 逻辑运算</li>\n</ul>\n<p>顾名思义，预先求值和延迟求值是一对对立的求值策略。在下面的 js 代码段中，声明了变量 x，x 赋值后又被调用了三次：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> + <span class=\"number\">3</span> * (<span class=\"number\">1</span> + <span class=\"number\">5</span> ^ <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x + <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">func(x);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在 1 处，变量 x 完成了声明和赋值等初始化工作，它的值由表达式 (5 + 3 * (1 + 5 ^ 2)) 决定。在 2 处，console.log() 函数调用了变量 x 两次。让我们暂时忽略 js 编译器的求值策略，从个人主观的理性思维来思考一下：面对预先求值和延迟求值，你会怎么选择呢？</p>\n<p>做出选择之前，我们需要对变量 x 有一个复杂度的认知：如果表达式的复杂度高，那么该表达式所占用的内存空间也就越高，在变量 x 和表达式解绑前这段内存空间都无法释放掉，意味着 x 的间接内存占用了越高，此外，高复杂度也意味着较长的执行时间，所以复杂度和内存占用、执行效率至少是一种线性相关。</p>\n<p>如此说来，那么我们应该选择预先求值的求值策略，这样的好处是：变量 x 初始化时表达式立即计算，x 被重新赋值为 83，重新赋值后表达式所占用的内存空间被释放掉，达到了节省内存空间的目的；多次调用变量 x 时，x 的值已经是可以直接用于运算的数值，而不是需要计算的表达式，减少了重复运算，提高了执行效率。</p>\n<p>如果事情按照上面描述的美好愿景发展的话，就没有延迟求值策略出现的必要了。在 3 处，我们向函数 func() 传递了变量 x。这里的 func() 类似于一个黑盒，我们不了解其内部的处理机制，也无法确定 x 是否会被使用。这个时候延迟求值的价值就体现出来了，如果变量 x 在函数内部没有被使用，就不会执行求值，避免了预先求值所要执行的求值运算。</p>\n<p>随着表达式的复杂度逐渐提高，预先求值和延迟求值在内存占用、执行效率上的差异就会愈发明显。所以根据数据类型的复杂度，js 将数据类型分为原始值和引用值，传递参数时，原始值按值传递，引用值按引用传递。</p>\n","excerpt":"<blockquote>\n<p>须知参差多态乃是幸福本源。</p>\n</blockquote>\n<p>求值策略所要解决的问题是：何时求值。之所以要控制求值的时间，往往是出于对内存占用和执行效率的考虑。在维基百科的求值策略词条中，列出了五种求值策略：</p>\n<ul>\n<li>预先求值，表达式绑定到变量时，立即求值并附加给变量</li>\n<li>延迟求值，表达式绑定到变量后，并不求值，直到变量被调用时才求值</li>\n<li>局部求值，又称柯里化</li>\n<li>分布求值，map/reduce，典型应用是分布式计算</li>\n<li>短路求值，与 (&amp;&amp;) 、或 (||) 逻辑运算</li>\n</ul>\n<p>顾名思义，预先求值和延迟求值是一对对立的求值策略。在下面的 js 代码段中，声明了变量 x，x 赋值后又被调用了三次：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> + <span class=\"number\">3</span> * (<span class=\"number\">1</span> + <span class=\"number\">5</span> ^ <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x + <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">func(x);</span><br></pre></td></tr></table></figure>","more":"<p>在 1 处，变量 x 完成了声明和赋值等初始化工作，它的值由表达式 (5 + 3 * (1 + 5 ^ 2)) 决定。在 2 处，console.log() 函数调用了变量 x 两次。让我们暂时忽略 js 编译器的求值策略，从个人主观的理性思维来思考一下：面对预先求值和延迟求值，你会怎么选择呢？</p>\n<p>做出选择之前，我们需要对变量 x 有一个复杂度的认知：如果表达式的复杂度高，那么该表达式所占用的内存空间也就越高，在变量 x 和表达式解绑前这段内存空间都无法释放掉，意味着 x 的间接内存占用了越高，此外，高复杂度也意味着较长的执行时间，所以复杂度和内存占用、执行效率至少是一种线性相关。</p>\n<p>如此说来，那么我们应该选择预先求值的求值策略，这样的好处是：变量 x 初始化时表达式立即计算，x 被重新赋值为 83，重新赋值后表达式所占用的内存空间被释放掉，达到了节省内存空间的目的；多次调用变量 x 时，x 的值已经是可以直接用于运算的数值，而不是需要计算的表达式，减少了重复运算，提高了执行效率。</p>\n<p>如果事情按照上面描述的美好愿景发展的话，就没有延迟求值策略出现的必要了。在 3 处，我们向函数 func() 传递了变量 x。这里的 func() 类似于一个黑盒，我们不了解其内部的处理机制，也无法确定 x 是否会被使用。这个时候延迟求值的价值就体现出来了，如果变量 x 在函数内部没有被使用，就不会执行求值，避免了预先求值所要执行的求值运算。</p>\n<p>随着表达式的复杂度逐渐提高，预先求值和延迟求值在内存占用、执行效率上的差异就会愈发明显。所以根据数据类型的复杂度，js 将数据类型分为原始值和引用值，传递参数时，原始值按值传递，引用值按引用传递。</p>"},{"title":"读《图解 TCP/IP》（未完成）","date":"2016-04-12T13:38:11.000Z","desc":"本文记录了阅读《图解 TCP/IP》一书后的笔记，用于巩固网络知识，便于以后查询使用。","_content":"\nTCP/IP 协议并不单指 TCP 和 IP 两种协议，在大多数情况下，它是进行 IP 通讯所必须用到的协议群的统称，有时也称 TCP/IP 为网络协议族（Internet Protocol Suite）。\n\n![tcp-ip-protocol-group-2016-04-13](/img/tcp-ip-protocol-group-2016-04-13.png)\n\n<!-- more -->\n\nOSI 参考模型注重的是**通信协议必要的功能是什么**，而 TCP/IP 则更强调**在计算机上实现协议需要哪些程序**，具体可以将 TCP/IP 协议分为五层：由应用程序实现的应用层（DNS、URI、HTTP、TLS/SSL...）；由操作系统实现的传输层（TCP、UDP...）和网络层（ARP、IP...）；由设备驱动程序与网络接口实现的数据链路层和物理层。\n\nIP 协议应用于网络层，它约定了跨网传输数据的规范，传输过程中以 IP 地址作为主机的标识，核心是基于 IP 地址转发分包数据的协议。虽然 IP 协议是一种分组交换协议，但不具有重发机制，属于不可靠传输协议。\n\n![data-package-header-2016-04-13](/img/data-package-header-2016-04-13.png)\n\n数据每经过一个分层，就会被添加一个首部，该首部保存了当前层的配置信息，而对于下一层来说，从上一层发送过来的所有包都被认为是数据，这些数据经过再次打包会继续往下一层传递。\n\n> **包、帧、数据报、段、消息**\n> 以上五个术语都是用来描述数据的单位，其中，包是一个全能性的术语；帧是数据链路层中包的单位；数据报是 IP 和 UDP 等网络层以上层次中包的单位；段表示 TCP 数据流中的信息；消息是应用协议中数据的单位。\n\n## 数据链路层\n\n\n## 待整理资料\n\nMAC 地址由制造商识别号、制造商内部产品编号和产品通用编号组成，具有唯一性，IP 地址在具有唯一性的同时还具有层次性，当通信主题的 IP 地址不同、主机号不同，但网路号相同时，说明它们处于同一个网段。MAC 和 IP 的寻址方式是一样的，只不过 MAC 寻址使用地址转发表，IP 寻址使用路由控制表。\n\n###### 术语表\n\n- `WAN（Wide Area Network）`，广域网\n- `MAN（Metropolitan Area Network）`，城域网\n- `LAN（Local Area Network）`，局域网\n- `批处理（Batch Processing）`，事先将程序和数据写入卡带，由计算机按顺序批量处理的系统\n- `分时系统（TSS）`，允许多用户同时使用一台计算机，计算机对 CPU 按时间进行切片供多用户使用\n- `ISO（International Organization for Standards）`，国际标准化组织\n- `OSI（Open Systems Interconnection）`，开放式通信系统互联参考模型\n- `Unicast`，单播，一对一通信，比如固话通信\n- `Broadcast`，广播，一对多通信，比如电视信号的发送\n- `Multicast`，多播，比如电话会议\n- `Anycast`，任播，比如 DNS 根域名解析服务器\n- `ICMP`，用于向发送端反馈异常或检测网络稳定性的协议\n- `ARP`，从分组数据包的 IP 地址解析出物理地址（MAC）的协议\n\n","source":"_posts/读《图解-TCP-IP》.md","raw":"title: 读《图解 TCP/IP》（未完成）\ndate: 2016-04-12 21:38:11\ndesc: 本文记录了阅读《图解 TCP/IP》一书后的笔记，用于巩固网络知识，便于以后查询使用。\n---\n\nTCP/IP 协议并不单指 TCP 和 IP 两种协议，在大多数情况下，它是进行 IP 通讯所必须用到的协议群的统称，有时也称 TCP/IP 为网络协议族（Internet Protocol Suite）。\n\n![tcp-ip-protocol-group-2016-04-13](/img/tcp-ip-protocol-group-2016-04-13.png)\n\n<!-- more -->\n\nOSI 参考模型注重的是**通信协议必要的功能是什么**，而 TCP/IP 则更强调**在计算机上实现协议需要哪些程序**，具体可以将 TCP/IP 协议分为五层：由应用程序实现的应用层（DNS、URI、HTTP、TLS/SSL...）；由操作系统实现的传输层（TCP、UDP...）和网络层（ARP、IP...）；由设备驱动程序与网络接口实现的数据链路层和物理层。\n\nIP 协议应用于网络层，它约定了跨网传输数据的规范，传输过程中以 IP 地址作为主机的标识，核心是基于 IP 地址转发分包数据的协议。虽然 IP 协议是一种分组交换协议，但不具有重发机制，属于不可靠传输协议。\n\n![data-package-header-2016-04-13](/img/data-package-header-2016-04-13.png)\n\n数据每经过一个分层，就会被添加一个首部，该首部保存了当前层的配置信息，而对于下一层来说，从上一层发送过来的所有包都被认为是数据，这些数据经过再次打包会继续往下一层传递。\n\n> **包、帧、数据报、段、消息**\n> 以上五个术语都是用来描述数据的单位，其中，包是一个全能性的术语；帧是数据链路层中包的单位；数据报是 IP 和 UDP 等网络层以上层次中包的单位；段表示 TCP 数据流中的信息；消息是应用协议中数据的单位。\n\n## 数据链路层\n\n\n## 待整理资料\n\nMAC 地址由制造商识别号、制造商内部产品编号和产品通用编号组成，具有唯一性，IP 地址在具有唯一性的同时还具有层次性，当通信主题的 IP 地址不同、主机号不同，但网路号相同时，说明它们处于同一个网段。MAC 和 IP 的寻址方式是一样的，只不过 MAC 寻址使用地址转发表，IP 寻址使用路由控制表。\n\n###### 术语表\n\n- `WAN（Wide Area Network）`，广域网\n- `MAN（Metropolitan Area Network）`，城域网\n- `LAN（Local Area Network）`，局域网\n- `批处理（Batch Processing）`，事先将程序和数据写入卡带，由计算机按顺序批量处理的系统\n- `分时系统（TSS）`，允许多用户同时使用一台计算机，计算机对 CPU 按时间进行切片供多用户使用\n- `ISO（International Organization for Standards）`，国际标准化组织\n- `OSI（Open Systems Interconnection）`，开放式通信系统互联参考模型\n- `Unicast`，单播，一对一通信，比如固话通信\n- `Broadcast`，广播，一对多通信，比如电视信号的发送\n- `Multicast`，多播，比如电话会议\n- `Anycast`，任播，比如 DNS 根域名解析服务器\n- `ICMP`，用于向发送端反馈异常或检测网络稳定性的协议\n- `ARP`，从分组数据包的 IP 地址解析出物理地址（MAC）的协议\n\n","slug":"读《图解-TCP-IP》","published":1,"updated":"2016-04-13T12:44:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarp9000ofsdikfdkj7xo","content":"<p>TCP/IP 协议并不单指 TCP 和 IP 两种协议，在大多数情况下，它是进行 IP 通讯所必须用到的协议群的统称，有时也称 TCP/IP 为网络协议族（Internet Protocol Suite）。</p>\n<p><img src=\"/img/tcp-ip-protocol-group-2016-04-13.png\" alt=\"tcp-ip-protocol-group-2016-04-13\"></p>\n<a id=\"more\"></a>\n<p>OSI 参考模型注重的是<strong>通信协议必要的功能是什么</strong>，而 TCP/IP 则更强调<strong>在计算机上实现协议需要哪些程序</strong>，具体可以将 TCP/IP 协议分为五层：由应用程序实现的应用层（DNS、URI、HTTP、TLS/SSL…）；由操作系统实现的传输层（TCP、UDP…）和网络层（ARP、IP…）；由设备驱动程序与网络接口实现的数据链路层和物理层。</p>\n<p>IP 协议应用于网络层，它约定了跨网传输数据的规范，传输过程中以 IP 地址作为主机的标识，核心是基于 IP 地址转发分包数据的协议。虽然 IP 协议是一种分组交换协议，但不具有重发机制，属于不可靠传输协议。</p>\n<p><img src=\"/img/data-package-header-2016-04-13.png\" alt=\"data-package-header-2016-04-13\"></p>\n<p>数据每经过一个分层，就会被添加一个首部，该首部保存了当前层的配置信息，而对于下一层来说，从上一层发送过来的所有包都被认为是数据，这些数据经过再次打包会继续往下一层传递。</p>\n<blockquote>\n<p><strong>包、帧、数据报、段、消息</strong><br>以上五个术语都是用来描述数据的单位，其中，包是一个全能性的术语；帧是数据链路层中包的单位；数据报是 IP 和 UDP 等网络层以上层次中包的单位；段表示 TCP 数据流中的信息；消息是应用协议中数据的单位。</p>\n</blockquote>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><h2 id=\"待整理资料\"><a href=\"#待整理资料\" class=\"headerlink\" title=\"待整理资料\"></a>待整理资料</h2><p>MAC 地址由制造商识别号、制造商内部产品编号和产品通用编号组成，具有唯一性，IP 地址在具有唯一性的同时还具有层次性，当通信主题的 IP 地址不同、主机号不同，但网路号相同时，说明它们处于同一个网段。MAC 和 IP 的寻址方式是一样的，只不过 MAC 寻址使用地址转发表，IP 寻址使用路由控制表。</p>\n<h6 id=\"术语表\"><a href=\"#术语表\" class=\"headerlink\" title=\"术语表\"></a>术语表</h6><ul>\n<li><code>WAN（Wide Area Network）</code>，广域网</li>\n<li><code>MAN（Metropolitan Area Network）</code>，城域网</li>\n<li><code>LAN（Local Area Network）</code>，局域网</li>\n<li><code>批处理（Batch Processing）</code>，事先将程序和数据写入卡带，由计算机按顺序批量处理的系统</li>\n<li><code>分时系统（TSS）</code>，允许多用户同时使用一台计算机，计算机对 CPU 按时间进行切片供多用户使用</li>\n<li><code>ISO（International Organization for Standards）</code>，国际标准化组织</li>\n<li><code>OSI（Open Systems Interconnection）</code>，开放式通信系统互联参考模型</li>\n<li><code>Unicast</code>，单播，一对一通信，比如固话通信</li>\n<li><code>Broadcast</code>，广播，一对多通信，比如电视信号的发送</li>\n<li><code>Multicast</code>，多播，比如电话会议</li>\n<li><code>Anycast</code>，任播，比如 DNS 根域名解析服务器</li>\n<li><code>ICMP</code>，用于向发送端反馈异常或检测网络稳定性的协议</li>\n<li><code>ARP</code>，从分组数据包的 IP 地址解析出物理地址（MAC）的协议</li>\n</ul>\n","excerpt":"<p>TCP/IP 协议并不单指 TCP 和 IP 两种协议，在大多数情况下，它是进行 IP 通讯所必须用到的协议群的统称，有时也称 TCP/IP 为网络协议族（Internet Protocol Suite）。</p>\n<p><img src=\"/img/tcp-ip-protocol-group-2016-04-13.png\" alt=\"tcp-ip-protocol-group-2016-04-13\"></p>","more":"<p>OSI 参考模型注重的是<strong>通信协议必要的功能是什么</strong>，而 TCP/IP 则更强调<strong>在计算机上实现协议需要哪些程序</strong>，具体可以将 TCP/IP 协议分为五层：由应用程序实现的应用层（DNS、URI、HTTP、TLS/SSL…）；由操作系统实现的传输层（TCP、UDP…）和网络层（ARP、IP…）；由设备驱动程序与网络接口实现的数据链路层和物理层。</p>\n<p>IP 协议应用于网络层，它约定了跨网传输数据的规范，传输过程中以 IP 地址作为主机的标识，核心是基于 IP 地址转发分包数据的协议。虽然 IP 协议是一种分组交换协议，但不具有重发机制，属于不可靠传输协议。</p>\n<p><img src=\"/img/data-package-header-2016-04-13.png\" alt=\"data-package-header-2016-04-13\"></p>\n<p>数据每经过一个分层，就会被添加一个首部，该首部保存了当前层的配置信息，而对于下一层来说，从上一层发送过来的所有包都被认为是数据，这些数据经过再次打包会继续往下一层传递。</p>\n<blockquote>\n<p><strong>包、帧、数据报、段、消息</strong><br>以上五个术语都是用来描述数据的单位，其中，包是一个全能性的术语；帧是数据链路层中包的单位；数据报是 IP 和 UDP 等网络层以上层次中包的单位；段表示 TCP 数据流中的信息；消息是应用协议中数据的单位。</p>\n</blockquote>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><h2 id=\"待整理资料\"><a href=\"#待整理资料\" class=\"headerlink\" title=\"待整理资料\"></a>待整理资料</h2><p>MAC 地址由制造商识别号、制造商内部产品编号和产品通用编号组成，具有唯一性，IP 地址在具有唯一性的同时还具有层次性，当通信主题的 IP 地址不同、主机号不同，但网路号相同时，说明它们处于同一个网段。MAC 和 IP 的寻址方式是一样的，只不过 MAC 寻址使用地址转发表，IP 寻址使用路由控制表。</p>\n<h6 id=\"术语表\"><a href=\"#术语表\" class=\"headerlink\" title=\"术语表\"></a>术语表</h6><ul>\n<li><code>WAN（Wide Area Network）</code>，广域网</li>\n<li><code>MAN（Metropolitan Area Network）</code>，城域网</li>\n<li><code>LAN（Local Area Network）</code>，局域网</li>\n<li><code>批处理（Batch Processing）</code>，事先将程序和数据写入卡带，由计算机按顺序批量处理的系统</li>\n<li><code>分时系统（TSS）</code>，允许多用户同时使用一台计算机，计算机对 CPU 按时间进行切片供多用户使用</li>\n<li><code>ISO（International Organization for Standards）</code>，国际标准化组织</li>\n<li><code>OSI（Open Systems Interconnection）</code>，开放式通信系统互联参考模型</li>\n<li><code>Unicast</code>，单播，一对一通信，比如固话通信</li>\n<li><code>Broadcast</code>，广播，一对多通信，比如电视信号的发送</li>\n<li><code>Multicast</code>，多播，比如电话会议</li>\n<li><code>Anycast</code>，任播，比如 DNS 根域名解析服务器</li>\n<li><code>ICMP</code>，用于向发送端反馈异常或检测网络稳定性的协议</li>\n<li><code>ARP</code>，从分组数据包的 IP 地址解析出物理地址（MAC）的协议</li>\n</ul>"},{"title":"读《高性能网站建设指南》","date":"2016-04-07T02:13:10.000Z","desc":"本文是《高性能网站建设指南》的读书笔记，初步学习了前端性能优化的基础知识。","_content":"\n![browser-fetch-flow-2016-04-07.png](/img/browser-fetch-flow-2016-04-07.png)\n\n《高性能网站建设指南》中文版出版于 2008 年，是雅虎前端团队在性能方面持续研究的成果。虽然书中内容相对当前的技术栈或多或少存在一些陈旧和不适，但仍是了解前端性能优化的不二入门读物。以前上学的时候，上了年纪的老教师最喜欢讲一句话：万变不离其宗。这是一句放诸四海而皆准的教条，诚不欺我。\n\n前端性能优化，既有宏观方面的考量也有细微之处的锱铢必较。做性能优化的目的不是减少用户下载页面资源的时间，而是减少用户等待页面响应的时间。下面的表格显示了用户对不同延迟时间的心理反馈：\n\n| 延迟时间           | 心理反馈                                             |\n|:-----------------:|-----------------------------------------------------|\n| 0~16ms            | 屏幕帧速在 60 帧以上，用户感觉不到响应卡顿、跳帧和延迟等现象，用户体验极其优秀 |\n| 0~100ms           | 程序反应迅速，体验良好，如果响应超过 100ms，用户将会感受到响应不及时 |\n| 100~300ms         | 用户将会感受到轻微的响应延迟 |\n| 300~1000ms        | 用户将会感受到渐进式的响应，对于网页来说，加载资源和重绘页面视图都是响应的类型 |\n| 1000+ms           | 用户将对当前的操作失去耐心和信心 |\n| 10000+ms          | 用户将会放弃当前的操作，或许也将否定该网站 |\n\n<!-- more -->\n\n下图记录的是当前博客首次加载资源的耗时情况，其中红色标出的地方是页面加载时间，这个时间包含两个部分，上边是总共用时，下边是延迟时间（Latency，等待资源传送的时间），从中可以发现，延迟时间平均占据了总时间的 80%~90%：\n\n![resources-loading-times-2016-04-07](/img/resources-loading-times-2016-04-07.png)\n\n通常来说，改进前端性能所需要的资源和时间，往往要小于后端。后端需要通过重构架构、优化路径、更改硬件、分布化数据库等重操作才能明显改进性能，且优化周期长达数周或数月之久。\n\n前端性能优化已经被证实是高效和可维护的开发行为，后面将会一一介绍十四条常规的优化规则。相关规则的优化不仅仅限于前端方向，和后端以及网络通信都有一定的联系。\n\n## HTTP\n\nHTTP 是一种客户端/服务器协议，由请求和响应构成。作为客户端，当浏览器向特定 URL 发送 HTTP 请求后，URL 对应的宿主服务器就会返回 HTTP 响应。该协议以纯文本格式发送信息，请求类型包括：GET、POST、HEAD、DELETE、OPTIONS 和 TRACE。\n\n我们最常用的是 GET 请求，下面展示了首次请求 `pinggod.com/index.html` 资源时发送的请求信息和响应信息（状态码、头信息以及响应体）：\n\n```bash\n# Request\nGET / HTTP/1.1\nHost: pinggod.com\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n# and so on ...\n\n# Response\nHTTP/1.1 200 OK\nServer: GitHub.com\nDate: Fri, 08 Apr 2016 16:35:38 GMT\nContent-Type: text/html; charset=utf-8\n# and so on ...\n```\n\n## 减少 HTTP 请求\n\n在前图中我们已经看到，每次接收到的 HTTP 响应，有 80%~90% 的时间花在了响应时间上，而不是资源的下载时间，这也就是说，随着 HTTP 请求/响应量的增多，所浪费的时间也就更多，所以，减少 HTTP 请求/响应的数量，将会直接减少资源的响应时间，带来前端页面 50% 以上的响应速度优化。\n\n下面是一些优化资源首次加载的方法，对于后续页面的浏览，可以使用其他优化规则：\n\n- 图片地图，即 HTML 的 `<map name=\"\"></map>` 标签\n- CSS Sprites，使用一张图片集成多个小图片，使用一次请求获取集成后的图片，通过 CSS 属性控制图片的显示，这一技术不仅可以减少 HTTP 请求，还可以减少下载的资源体积，这是因为合并后的图片减少了大量重复性的图片信息，比如颜色表、格式信息等等\n- 内联图片，即 `<img src=\"data:[<mediatype>][;base64], <data>\" alt=\"\">`，缺点是 Base64 编码会增加图片的大小，且不能够被缓存\n- 合并 JavaScript 和 CSS\n\n<div class=\"tip\">\n本文不会涉及 HTTP2 的内容，但是在这里有必要提及的是，HTTP2 的多路复用特性相比于人工维护的 CSS Sprites 等技术具有更高的可维护性和开发效率。\n</div>\n\n## CDN\n\n内容分发网络（CDN，Content Delivery Networks) 是一组分布在不同地理位置的 Web 服务器，通过就近原则提高资源响应速度。CDN 既能提高性能，还能节省成本。在优化性能时，CDN 可以选择网络阶跃数最小的服务器或响应最短的服务器向用户提供内容。\n\n除了性能方面的考量，使用 CDN 还可以提供数据备份、扩展存储能力和内容缓存的功能，有助于缓和 Web 峰值流量带来的压力。\n\nCDN 常用于分发静态资源，比如图片、脚本和样式表，这是因为静态资源具有较少的依赖性。对于地理位置分散的用户，CDN 可以轻易改善资源的响应速度。\n\n## Last-Modified && Expires && Cache-control\n\n服务器向客户端发送的响应资源会携带一条 `Last-Modified` 头信息，用于通知客户端该资源的最新更新时间。当客户端再次请求该资源的时候，为了确定该资源是否有效，就会发起一个条件 GET 请求（Conditional GET Request），该请求携带 `If-Modified-Since` 头信息，便于服务器验证资源是否过期，如果资源没有过期，则服务器返回 `304 Not Modified` 状态码并不发送响应体，从而实现更快更轻量的响应。此外，还有 `ETag` 和 `If-None-Match` 两种执行条件 GET 请求的方式。\n\n虽然 `Last-Modified / If-Modified-Since` 等条件 GET 请求和 304 响应加快了页面响应，但该机制仍在客户端和服务器之间执行了一次请求/响应，以进行有效性检查。针对这一问题，我们可以使用 `Expires` 头信息来解决，Expires 头信息的值是一个时间戳（timestamp）。当浏览器在时间戳之前再次访问该资源时，会直接从浏览器缓存获取该资源，不会发起任何 HTTP 请求。\n\n虽然 Expires 头信息消除了 HTTP 校验请求，但也带了新的问题：\n\n- 由于它的值是一个特定日期，所以客户端和服务器必须保持严格的时钟同步\n- 过期日期需要经常校验，且过期后需提供新的时间戳\n\n针对这一问题，HTTP 1.1 引入了 `Cache-Control: max-age=<Integer>` 头信息，它的值以秒为单位。在 Cache-Control 允许的时间内，浏览器都会直接从缓存中获取资源。max-age 接收的有效期非常长，甚至长达十年之久。此外，HTTP 规定，当同时存在 max-age 指令和 Expires 头信息时，优先使用 max-age。\n\n当静态资源被浏览器缓存后，用户如何在缓存有效期内获取修改后的资源呢？首先，不建议缓存 HTML 文档；其次，通过在 HTML 文件中修订资源名的方式通知浏览器获取新的资源。修订资源名的方式多种多样，比如添加时间戳、版本号等。\n\n## 压缩\n\n客户端在向服务器发送 HTTP 请求时，可以携带 `Accept-Encoding` 头信息来告知服务器客户端支持哪些压缩格式。服务器在响应信息中使用 `Content-Encoding` 头信息通知当前资源的压缩格式：\n\n```bash\n# Request\nAccept-Encoding: gzip deflate\n\n# Response\nContent-Encoding: gzip\n```\n\n压缩需要客户端和服务器耗费额外的 CPU 资源进行解压缩，通常来说，图片和 PDF 都是已经压缩过得资源，无需再次压缩，而脚本和样式表是值得压缩的。\n\n当浏览器通过代理服务器与资源服务器通信时，由于接入代理服务器的客户端不一定支持相同的压缩格式，甚至不支持压缩格式，所以需要一种机制通知代理服务器向资源服务器请求所有压缩格式（包括未压缩格式）的资源，便于分发给不同的客户端。这一机制就是利用资源服务器向代理服务器发送 `Vary` 头信息：\n\n```bash\n# Response\nVary: Accept-Encoding\n```\n\n## 浏览器渲染机制\n\n在这一节，本书推荐了两个法则：将样式表置于文档顶部，将脚本置于文档底部。浏览器绘制出首屏内容前，必须完成 DOM 树和 CSS 样式规则的解析，然后合成渲染树，所以，优先加载文档和样式资源就可以加快首屏渲染速度。反之，如果将样式表置于文档底部，则只有加载完样式表之前的所有资源才会加载样式表，直接影响了浏览器合成渲染树绘制首屏内容的流程。\n\nHTTP 1.1 规范建议浏览器从每个主机名并行地下载两个资源，这也就是说，主机名越多，并行下载量就会越多。但事实上情况并不是这样的，当主机名增多之后，并行解析大量资源会占用大量的 CPU 性能，并增加 DNS 查询时间，更多信息请参考 [Maximizing Parallel Downloads in the Carpool Lane](http://yuiblog.com/blog/2007/04/11/performance-research-part-4/) 一文。\n\n将脚本置于文档底部，有两个直接原因：\n\n- 脚本会阻塞后面文档内容的渲染\n- 脚本资源会阻塞其他资源的并行加载\n\n> 浏览器之所以存在这样的机制，是因为 JavaScript 缺乏模块机制，如果不同的 JavaScript 之间存在依赖关系，就必须优先加载依赖脚本。对此可能还存在其他原因，此处留待修改。\n\n## 外部脚本和样式\n\n将脚本和样式以独立资源的形式存储和获取，便于在多个页面之间进行复用，尤其是配合 CDN、浏览器缓存的情况下，性能优化效果巨大。\n\n抛开性能方面的考量，将脚本和样式表从文档中独立出来，也有助于提高可读性和可维护性。\n\n这一规则并不是绝对的，比如对于浏览器主页来说，它们的访问量大、组件复用率低，通常用户的第二次跳转都是其他的网站。\n\n## DNS 查询\n\nIP 地址和域名的关系就像是电话本中的电话号码和联系人姓名，DNS 是一套帮助浏览器根据域名查找 IP 地址的系统。DNS 查询也会占用时间，通常浏览器查找一个特定主机名的 IP 需要花费 20~120ms 的时间。\n\n就像对待静态资源一样，浏览器也可以缓存 DNS 数据，便于再次查找某个主机名时，短时间内不再进行 DNS 查询。查询到的 DNS 记录通常包含 TTL（Time-to-live，存活时间），用于告知客户端该记录的缓存时长。操作系统会考虑 TTL 的值，但浏览器并不会，它有自己的时间限制，此外，浏览器对 DNS 记录的数量也有限制，好在即使浏览器的 DNS 记录丢了，还可以使用操作系统缓存的记录。\n\n持久连接（Persisent Connection）可以让浏览器在单一连接上发送多个请求，避免了重复创建 socket 连接的低效问题。浏览器和服务器都是通过发送 `Connection: Keep-Alive` 头信息来表示持久连接，发送 `Connection: close` 来关闭持久连接：\n\n```bash\n# Request && Response\nConnection: keep-alive\n\n# Close Persisent Connection\nConnection: close\n```\n\n当浏览器和服务器之间是持久连接时，没有理由进行 DNS 查询。`Connection: keep-alive` 连接可以同时覆盖 TTL 和浏览器的对 DNS 记录的时间限制。\n\n之前提过，增加主机名可以增加并行下载量，但也会增加 DNS 查询，两相权衡取其轻，最好不要少于两个主机名，也不要大于四个主机名。\n\n## 精简\n\n这里涉及三个名词：压缩、精简和混淆。压缩的原理是根据重复字节创建一个词典，缩减重复的字节；精简的原理是去除代码中无关的内容，比如注释、空白等；混淆常使用较短的名称替换变量名、函数名。\n\n## 重定向\n\n重定向（Redirect）用于将用户从一个 URL 重新定位到另一个 URL，常见的重定向方式包括：\n\n- 使用 meta refresh 标签重定向\n- 使用 JavaScript `document.location` 重定向\n- 使用 3XX HTTP 状态码重定向（优先推荐），比如 301（Moved Permancently）和 302 （Moved Temporarily）\n\n重定向的存在具有必要性，比如：\n\n- 跟踪内部流量，通过分析服务器的重定向数量获取流量流动方向\n- 跟踪出站流量，搜索引擎可以使用查询字符串 `?url=http%3a//pinggod.com` 记录出站流量，通过分析该查询字符串即可计算出与出站目标有关的信息，此外还可以使用信标（beacon）的方式，即监听点击事件，在点击外链时向服务器请求数据，间接驱动服务器记录跳转信息\n- 美化 URL，便于用户记忆\n\n```js\n// Beacon\nvar b;\nvar handleClick = function (a) {\n    b = new Image();\n    b.src = \"http://rds.yahoo.com/?url=\" + escape(a.href);\n}\n```\n\n## ETag\n\nETag（Entity Tag，实体标签），是服务器和客户端确认缓存资源有效性的机制。服务器会使用一个字符串来标识某个特定版本的资源，这个字符串就是 ETag 的值。如果浏览器要验证缓存，就会使用 `If-Node-Match` 头信息将 ETag 传回服务器，如果在服务器校验成功，则返回 304 状态码。\n\nETag 的问题在于，对于不同的服务器来说，相同版本的资源可能具有不同的 ETag 值。此外，根据 HTTP 1.1 的规定，如果请求中同时出现了 If-None-Match 和 If-modified-Since 头信息，则 If-None-Match 具有更高的优先级，除非这两个头信息在服务器和客户端保持完全一致，否则禁止传回 304 响应。\n\n###### 参考资料\n\n- [高性能网站建设指南](https://book.douban.com/subject/3132277/)\n- [How browser works?](http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/)\n\n","source":"_posts/读《高性能网站建设指南》.md","raw":"title: 读《高性能网站建设指南》\ndate: 2016-04-07 10:13:10\ndesc: 本文是《高性能网站建设指南》的读书笔记，初步学习了前端性能优化的基础知识。\n---\n\n![browser-fetch-flow-2016-04-07.png](/img/browser-fetch-flow-2016-04-07.png)\n\n《高性能网站建设指南》中文版出版于 2008 年，是雅虎前端团队在性能方面持续研究的成果。虽然书中内容相对当前的技术栈或多或少存在一些陈旧和不适，但仍是了解前端性能优化的不二入门读物。以前上学的时候，上了年纪的老教师最喜欢讲一句话：万变不离其宗。这是一句放诸四海而皆准的教条，诚不欺我。\n\n前端性能优化，既有宏观方面的考量也有细微之处的锱铢必较。做性能优化的目的不是减少用户下载页面资源的时间，而是减少用户等待页面响应的时间。下面的表格显示了用户对不同延迟时间的心理反馈：\n\n| 延迟时间           | 心理反馈                                             |\n|:-----------------:|-----------------------------------------------------|\n| 0~16ms            | 屏幕帧速在 60 帧以上，用户感觉不到响应卡顿、跳帧和延迟等现象，用户体验极其优秀 |\n| 0~100ms           | 程序反应迅速，体验良好，如果响应超过 100ms，用户将会感受到响应不及时 |\n| 100~300ms         | 用户将会感受到轻微的响应延迟 |\n| 300~1000ms        | 用户将会感受到渐进式的响应，对于网页来说，加载资源和重绘页面视图都是响应的类型 |\n| 1000+ms           | 用户将对当前的操作失去耐心和信心 |\n| 10000+ms          | 用户将会放弃当前的操作，或许也将否定该网站 |\n\n<!-- more -->\n\n下图记录的是当前博客首次加载资源的耗时情况，其中红色标出的地方是页面加载时间，这个时间包含两个部分，上边是总共用时，下边是延迟时间（Latency，等待资源传送的时间），从中可以发现，延迟时间平均占据了总时间的 80%~90%：\n\n![resources-loading-times-2016-04-07](/img/resources-loading-times-2016-04-07.png)\n\n通常来说，改进前端性能所需要的资源和时间，往往要小于后端。后端需要通过重构架构、优化路径、更改硬件、分布化数据库等重操作才能明显改进性能，且优化周期长达数周或数月之久。\n\n前端性能优化已经被证实是高效和可维护的开发行为，后面将会一一介绍十四条常规的优化规则。相关规则的优化不仅仅限于前端方向，和后端以及网络通信都有一定的联系。\n\n## HTTP\n\nHTTP 是一种客户端/服务器协议，由请求和响应构成。作为客户端，当浏览器向特定 URL 发送 HTTP 请求后，URL 对应的宿主服务器就会返回 HTTP 响应。该协议以纯文本格式发送信息，请求类型包括：GET、POST、HEAD、DELETE、OPTIONS 和 TRACE。\n\n我们最常用的是 GET 请求，下面展示了首次请求 `pinggod.com/index.html` 资源时发送的请求信息和响应信息（状态码、头信息以及响应体）：\n\n```bash\n# Request\nGET / HTTP/1.1\nHost: pinggod.com\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n# and so on ...\n\n# Response\nHTTP/1.1 200 OK\nServer: GitHub.com\nDate: Fri, 08 Apr 2016 16:35:38 GMT\nContent-Type: text/html; charset=utf-8\n# and so on ...\n```\n\n## 减少 HTTP 请求\n\n在前图中我们已经看到，每次接收到的 HTTP 响应，有 80%~90% 的时间花在了响应时间上，而不是资源的下载时间，这也就是说，随着 HTTP 请求/响应量的增多，所浪费的时间也就更多，所以，减少 HTTP 请求/响应的数量，将会直接减少资源的响应时间，带来前端页面 50% 以上的响应速度优化。\n\n下面是一些优化资源首次加载的方法，对于后续页面的浏览，可以使用其他优化规则：\n\n- 图片地图，即 HTML 的 `<map name=\"\"></map>` 标签\n- CSS Sprites，使用一张图片集成多个小图片，使用一次请求获取集成后的图片，通过 CSS 属性控制图片的显示，这一技术不仅可以减少 HTTP 请求，还可以减少下载的资源体积，这是因为合并后的图片减少了大量重复性的图片信息，比如颜色表、格式信息等等\n- 内联图片，即 `<img src=\"data:[<mediatype>][;base64], <data>\" alt=\"\">`，缺点是 Base64 编码会增加图片的大小，且不能够被缓存\n- 合并 JavaScript 和 CSS\n\n<div class=\"tip\">\n本文不会涉及 HTTP2 的内容，但是在这里有必要提及的是，HTTP2 的多路复用特性相比于人工维护的 CSS Sprites 等技术具有更高的可维护性和开发效率。\n</div>\n\n## CDN\n\n内容分发网络（CDN，Content Delivery Networks) 是一组分布在不同地理位置的 Web 服务器，通过就近原则提高资源响应速度。CDN 既能提高性能，还能节省成本。在优化性能时，CDN 可以选择网络阶跃数最小的服务器或响应最短的服务器向用户提供内容。\n\n除了性能方面的考量，使用 CDN 还可以提供数据备份、扩展存储能力和内容缓存的功能，有助于缓和 Web 峰值流量带来的压力。\n\nCDN 常用于分发静态资源，比如图片、脚本和样式表，这是因为静态资源具有较少的依赖性。对于地理位置分散的用户，CDN 可以轻易改善资源的响应速度。\n\n## Last-Modified && Expires && Cache-control\n\n服务器向客户端发送的响应资源会携带一条 `Last-Modified` 头信息，用于通知客户端该资源的最新更新时间。当客户端再次请求该资源的时候，为了确定该资源是否有效，就会发起一个条件 GET 请求（Conditional GET Request），该请求携带 `If-Modified-Since` 头信息，便于服务器验证资源是否过期，如果资源没有过期，则服务器返回 `304 Not Modified` 状态码并不发送响应体，从而实现更快更轻量的响应。此外，还有 `ETag` 和 `If-None-Match` 两种执行条件 GET 请求的方式。\n\n虽然 `Last-Modified / If-Modified-Since` 等条件 GET 请求和 304 响应加快了页面响应，但该机制仍在客户端和服务器之间执行了一次请求/响应，以进行有效性检查。针对这一问题，我们可以使用 `Expires` 头信息来解决，Expires 头信息的值是一个时间戳（timestamp）。当浏览器在时间戳之前再次访问该资源时，会直接从浏览器缓存获取该资源，不会发起任何 HTTP 请求。\n\n虽然 Expires 头信息消除了 HTTP 校验请求，但也带了新的问题：\n\n- 由于它的值是一个特定日期，所以客户端和服务器必须保持严格的时钟同步\n- 过期日期需要经常校验，且过期后需提供新的时间戳\n\n针对这一问题，HTTP 1.1 引入了 `Cache-Control: max-age=<Integer>` 头信息，它的值以秒为单位。在 Cache-Control 允许的时间内，浏览器都会直接从缓存中获取资源。max-age 接收的有效期非常长，甚至长达十年之久。此外，HTTP 规定，当同时存在 max-age 指令和 Expires 头信息时，优先使用 max-age。\n\n当静态资源被浏览器缓存后，用户如何在缓存有效期内获取修改后的资源呢？首先，不建议缓存 HTML 文档；其次，通过在 HTML 文件中修订资源名的方式通知浏览器获取新的资源。修订资源名的方式多种多样，比如添加时间戳、版本号等。\n\n## 压缩\n\n客户端在向服务器发送 HTTP 请求时，可以携带 `Accept-Encoding` 头信息来告知服务器客户端支持哪些压缩格式。服务器在响应信息中使用 `Content-Encoding` 头信息通知当前资源的压缩格式：\n\n```bash\n# Request\nAccept-Encoding: gzip deflate\n\n# Response\nContent-Encoding: gzip\n```\n\n压缩需要客户端和服务器耗费额外的 CPU 资源进行解压缩，通常来说，图片和 PDF 都是已经压缩过得资源，无需再次压缩，而脚本和样式表是值得压缩的。\n\n当浏览器通过代理服务器与资源服务器通信时，由于接入代理服务器的客户端不一定支持相同的压缩格式，甚至不支持压缩格式，所以需要一种机制通知代理服务器向资源服务器请求所有压缩格式（包括未压缩格式）的资源，便于分发给不同的客户端。这一机制就是利用资源服务器向代理服务器发送 `Vary` 头信息：\n\n```bash\n# Response\nVary: Accept-Encoding\n```\n\n## 浏览器渲染机制\n\n在这一节，本书推荐了两个法则：将样式表置于文档顶部，将脚本置于文档底部。浏览器绘制出首屏内容前，必须完成 DOM 树和 CSS 样式规则的解析，然后合成渲染树，所以，优先加载文档和样式资源就可以加快首屏渲染速度。反之，如果将样式表置于文档底部，则只有加载完样式表之前的所有资源才会加载样式表，直接影响了浏览器合成渲染树绘制首屏内容的流程。\n\nHTTP 1.1 规范建议浏览器从每个主机名并行地下载两个资源，这也就是说，主机名越多，并行下载量就会越多。但事实上情况并不是这样的，当主机名增多之后，并行解析大量资源会占用大量的 CPU 性能，并增加 DNS 查询时间，更多信息请参考 [Maximizing Parallel Downloads in the Carpool Lane](http://yuiblog.com/blog/2007/04/11/performance-research-part-4/) 一文。\n\n将脚本置于文档底部，有两个直接原因：\n\n- 脚本会阻塞后面文档内容的渲染\n- 脚本资源会阻塞其他资源的并行加载\n\n> 浏览器之所以存在这样的机制，是因为 JavaScript 缺乏模块机制，如果不同的 JavaScript 之间存在依赖关系，就必须优先加载依赖脚本。对此可能还存在其他原因，此处留待修改。\n\n## 外部脚本和样式\n\n将脚本和样式以独立资源的形式存储和获取，便于在多个页面之间进行复用，尤其是配合 CDN、浏览器缓存的情况下，性能优化效果巨大。\n\n抛开性能方面的考量，将脚本和样式表从文档中独立出来，也有助于提高可读性和可维护性。\n\n这一规则并不是绝对的，比如对于浏览器主页来说，它们的访问量大、组件复用率低，通常用户的第二次跳转都是其他的网站。\n\n## DNS 查询\n\nIP 地址和域名的关系就像是电话本中的电话号码和联系人姓名，DNS 是一套帮助浏览器根据域名查找 IP 地址的系统。DNS 查询也会占用时间，通常浏览器查找一个特定主机名的 IP 需要花费 20~120ms 的时间。\n\n就像对待静态资源一样，浏览器也可以缓存 DNS 数据，便于再次查找某个主机名时，短时间内不再进行 DNS 查询。查询到的 DNS 记录通常包含 TTL（Time-to-live，存活时间），用于告知客户端该记录的缓存时长。操作系统会考虑 TTL 的值，但浏览器并不会，它有自己的时间限制，此外，浏览器对 DNS 记录的数量也有限制，好在即使浏览器的 DNS 记录丢了，还可以使用操作系统缓存的记录。\n\n持久连接（Persisent Connection）可以让浏览器在单一连接上发送多个请求，避免了重复创建 socket 连接的低效问题。浏览器和服务器都是通过发送 `Connection: Keep-Alive` 头信息来表示持久连接，发送 `Connection: close` 来关闭持久连接：\n\n```bash\n# Request && Response\nConnection: keep-alive\n\n# Close Persisent Connection\nConnection: close\n```\n\n当浏览器和服务器之间是持久连接时，没有理由进行 DNS 查询。`Connection: keep-alive` 连接可以同时覆盖 TTL 和浏览器的对 DNS 记录的时间限制。\n\n之前提过，增加主机名可以增加并行下载量，但也会增加 DNS 查询，两相权衡取其轻，最好不要少于两个主机名，也不要大于四个主机名。\n\n## 精简\n\n这里涉及三个名词：压缩、精简和混淆。压缩的原理是根据重复字节创建一个词典，缩减重复的字节；精简的原理是去除代码中无关的内容，比如注释、空白等；混淆常使用较短的名称替换变量名、函数名。\n\n## 重定向\n\n重定向（Redirect）用于将用户从一个 URL 重新定位到另一个 URL，常见的重定向方式包括：\n\n- 使用 meta refresh 标签重定向\n- 使用 JavaScript `document.location` 重定向\n- 使用 3XX HTTP 状态码重定向（优先推荐），比如 301（Moved Permancently）和 302 （Moved Temporarily）\n\n重定向的存在具有必要性，比如：\n\n- 跟踪内部流量，通过分析服务器的重定向数量获取流量流动方向\n- 跟踪出站流量，搜索引擎可以使用查询字符串 `?url=http%3a//pinggod.com` 记录出站流量，通过分析该查询字符串即可计算出与出站目标有关的信息，此外还可以使用信标（beacon）的方式，即监听点击事件，在点击外链时向服务器请求数据，间接驱动服务器记录跳转信息\n- 美化 URL，便于用户记忆\n\n```js\n// Beacon\nvar b;\nvar handleClick = function (a) {\n    b = new Image();\n    b.src = \"http://rds.yahoo.com/?url=\" + escape(a.href);\n}\n```\n\n## ETag\n\nETag（Entity Tag，实体标签），是服务器和客户端确认缓存资源有效性的机制。服务器会使用一个字符串来标识某个特定版本的资源，这个字符串就是 ETag 的值。如果浏览器要验证缓存，就会使用 `If-Node-Match` 头信息将 ETag 传回服务器，如果在服务器校验成功，则返回 304 状态码。\n\nETag 的问题在于，对于不同的服务器来说，相同版本的资源可能具有不同的 ETag 值。此外，根据 HTTP 1.1 的规定，如果请求中同时出现了 If-None-Match 和 If-modified-Since 头信息，则 If-None-Match 具有更高的优先级，除非这两个头信息在服务器和客户端保持完全一致，否则禁止传回 304 响应。\n\n###### 参考资料\n\n- [高性能网站建设指南](https://book.douban.com/subject/3132277/)\n- [How browser works?](http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/)\n\n","slug":"读《高性能网站建设指南》","published":1,"updated":"2016-04-12T05:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin3zarpc000pfsdi6sipoi6l","content":"<p><img src=\"/img/browser-fetch-flow-2016-04-07.png\" alt=\"browser-fetch-flow-2016-04-07.png\"></p>\n<p>《高性能网站建设指南》中文版出版于 2008 年，是雅虎前端团队在性能方面持续研究的成果。虽然书中内容相对当前的技术栈或多或少存在一些陈旧和不适，但仍是了解前端性能优化的不二入门读物。以前上学的时候，上了年纪的老教师最喜欢讲一句话：万变不离其宗。这是一句放诸四海而皆准的教条，诚不欺我。</p>\n<p>前端性能优化，既有宏观方面的考量也有细微之处的锱铢必较。做性能优化的目的不是减少用户下载页面资源的时间，而是减少用户等待页面响应的时间。下面的表格显示了用户对不同延迟时间的心理反馈：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">延迟时间</th>\n<th>心理反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0~16ms</td>\n<td>屏幕帧速在 60 帧以上，用户感觉不到响应卡顿、跳帧和延迟等现象，用户体验极其优秀</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0~100ms</td>\n<td>程序反应迅速，体验良好，如果响应超过 100ms，用户将会感受到响应不及时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">100~300ms</td>\n<td>用户将会感受到轻微的响应延迟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300~1000ms</td>\n<td>用户将会感受到渐进式的响应，对于网页来说，加载资源和重绘页面视图都是响应的类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000+ms</td>\n<td>用户将对当前的操作失去耐心和信心</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10000+ms</td>\n<td>用户将会放弃当前的操作，或许也将否定该网站</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>下图记录的是当前博客首次加载资源的耗时情况，其中红色标出的地方是页面加载时间，这个时间包含两个部分，上边是总共用时，下边是延迟时间（Latency，等待资源传送的时间），从中可以发现，延迟时间平均占据了总时间的 80%~90%：</p>\n<p><img src=\"/img/resources-loading-times-2016-04-07.png\" alt=\"resources-loading-times-2016-04-07\"></p>\n<p>通常来说，改进前端性能所需要的资源和时间，往往要小于后端。后端需要通过重构架构、优化路径、更改硬件、分布化数据库等重操作才能明显改进性能，且优化周期长达数周或数月之久。</p>\n<p>前端性能优化已经被证实是高效和可维护的开发行为，后面将会一一介绍十四条常规的优化规则。相关规则的优化不仅仅限于前端方向，和后端以及网络通信都有一定的联系。</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP 是一种客户端/服务器协议，由请求和响应构成。作为客户端，当浏览器向特定 URL 发送 HTTP 请求后，URL 对应的宿主服务器就会返回 HTTP 响应。该协议以纯文本格式发送信息，请求类型包括：GET、POST、HEAD、DELETE、OPTIONS 和 TRACE。</p>\n<p>我们最常用的是 GET 请求，下面展示了首次请求 <code>pinggod.com/index.html</code> 资源时发送的请求信息和响应信息（状态码、头信息以及响应体）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request</span></span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: pinggod.com</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"><span class=\"comment\"># and so on ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: GitHub.com</span><br><span class=\"line\">Date: Fri, 08 Apr 2016 16:35:38 GMT</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\"><span class=\"comment\"># and so on ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"减少-HTTP-请求\"><a href=\"#减少-HTTP-请求\" class=\"headerlink\" title=\"减少 HTTP 请求\"></a>减少 HTTP 请求</h2><p>在前图中我们已经看到，每次接收到的 HTTP 响应，有 80%~90% 的时间花在了响应时间上，而不是资源的下载时间，这也就是说，随着 HTTP 请求/响应量的增多，所浪费的时间也就更多，所以，减少 HTTP 请求/响应的数量，将会直接减少资源的响应时间，带来前端页面 50% 以上的响应速度优化。</p>\n<p>下面是一些优化资源首次加载的方法，对于后续页面的浏览，可以使用其他优化规则：</p>\n<ul>\n<li>图片地图，即 HTML 的 <code>&lt;map name=&quot;&quot;&gt;&lt;/map&gt;</code> 标签</li>\n<li>CSS Sprites，使用一张图片集成多个小图片，使用一次请求获取集成后的图片，通过 CSS 属性控制图片的显示，这一技术不仅可以减少 HTTP 请求，还可以减少下载的资源体积，这是因为合并后的图片减少了大量重复性的图片信息，比如颜色表、格式信息等等</li>\n<li>内联图片，即 <code>&lt;img src=&quot;data:[&lt;mediatype&gt;][;base64], &lt;data&gt;&quot; alt=&quot;&quot;&gt;</code>，缺点是 Base64 编码会增加图片的大小，且不能够被缓存</li>\n<li>合并 JavaScript 和 CSS</li>\n</ul>\n<div class=\"tip\"><br>本文不会涉及 HTTP2 的内容，但是在这里有必要提及的是，HTTP2 的多路复用特性相比于人工维护的 CSS Sprites 等技术具有更高的可维护性和开发效率。<br></div>\n\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>内容分发网络（CDN，Content Delivery Networks) 是一组分布在不同地理位置的 Web 服务器，通过就近原则提高资源响应速度。CDN 既能提高性能，还能节省成本。在优化性能时，CDN 可以选择网络阶跃数最小的服务器或响应最短的服务器向用户提供内容。</p>\n<p>除了性能方面的考量，使用 CDN 还可以提供数据备份、扩展存储能力和内容缓存的功能，有助于缓和 Web 峰值流量带来的压力。</p>\n<p>CDN 常用于分发静态资源，比如图片、脚本和样式表，这是因为静态资源具有较少的依赖性。对于地理位置分散的用户，CDN 可以轻易改善资源的响应速度。</p>\n<h2 id=\"Last-Modified-amp-amp-Expires-amp-amp-Cache-control\"><a href=\"#Last-Modified-amp-amp-Expires-amp-amp-Cache-control\" class=\"headerlink\" title=\"Last-Modified &amp;&amp; Expires &amp;&amp; Cache-control\"></a>Last-Modified &amp;&amp; Expires &amp;&amp; Cache-control</h2><p>服务器向客户端发送的响应资源会携带一条 <code>Last-Modified</code> 头信息，用于通知客户端该资源的最新更新时间。当客户端再次请求该资源的时候，为了确定该资源是否有效，就会发起一个条件 GET 请求（Conditional GET Request），该请求携带 <code>If-Modified-Since</code> 头信息，便于服务器验证资源是否过期，如果资源没有过期，则服务器返回 <code>304 Not Modified</code> 状态码并不发送响应体，从而实现更快更轻量的响应。此外，还有 <code>ETag</code> 和 <code>If-None-Match</code> 两种执行条件 GET 请求的方式。</p>\n<p>虽然 <code>Last-Modified / If-Modified-Since</code> 等条件 GET 请求和 304 响应加快了页面响应，但该机制仍在客户端和服务器之间执行了一次请求/响应，以进行有效性检查。针对这一问题，我们可以使用 <code>Expires</code> 头信息来解决，Expires 头信息的值是一个时间戳（timestamp）。当浏览器在时间戳之前再次访问该资源时，会直接从浏览器缓存获取该资源，不会发起任何 HTTP 请求。</p>\n<p>虽然 Expires 头信息消除了 HTTP 校验请求，但也带了新的问题：</p>\n<ul>\n<li>由于它的值是一个特定日期，所以客户端和服务器必须保持严格的时钟同步</li>\n<li>过期日期需要经常校验，且过期后需提供新的时间戳</li>\n</ul>\n<p>针对这一问题，HTTP 1.1 引入了 <code>Cache-Control: max-age=&lt;Integer&gt;</code> 头信息，它的值以秒为单位。在 Cache-Control 允许的时间内，浏览器都会直接从缓存中获取资源。max-age 接收的有效期非常长，甚至长达十年之久。此外，HTTP 规定，当同时存在 max-age 指令和 Expires 头信息时，优先使用 max-age。</p>\n<p>当静态资源被浏览器缓存后，用户如何在缓存有效期内获取修改后的资源呢？首先，不建议缓存 HTML 文档；其次，通过在 HTML 文件中修订资源名的方式通知浏览器获取新的资源。修订资源名的方式多种多样，比如添加时间戳、版本号等。</p>\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><p>客户端在向服务器发送 HTTP 请求时，可以携带 <code>Accept-Encoding</code> 头信息来告知服务器客户端支持哪些压缩格式。服务器在响应信息中使用 <code>Content-Encoding</code> 头信息通知当前资源的压缩格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request</span></span><br><span class=\"line\">Accept-Encoding: gzip deflate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>\n<p>压缩需要客户端和服务器耗费额外的 CPU 资源进行解压缩，通常来说，图片和 PDF 都是已经压缩过得资源，无需再次压缩，而脚本和样式表是值得压缩的。</p>\n<p>当浏览器通过代理服务器与资源服务器通信时，由于接入代理服务器的客户端不一定支持相同的压缩格式，甚至不支持压缩格式，所以需要一种机制通知代理服务器向资源服务器请求所有压缩格式（包括未压缩格式）的资源，便于分发给不同的客户端。这一机制就是利用资源服务器向代理服务器发送 <code>Vary</code> 头信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">Vary: Accept-Encoding</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器渲染机制\"><a href=\"#浏览器渲染机制\" class=\"headerlink\" title=\"浏览器渲染机制\"></a>浏览器渲染机制</h2><p>在这一节，本书推荐了两个法则：将样式表置于文档顶部，将脚本置于文档底部。浏览器绘制出首屏内容前，必须完成 DOM 树和 CSS 样式规则的解析，然后合成渲染树，所以，优先加载文档和样式资源就可以加快首屏渲染速度。反之，如果将样式表置于文档底部，则只有加载完样式表之前的所有资源才会加载样式表，直接影响了浏览器合成渲染树绘制首屏内容的流程。</p>\n<p>HTTP 1.1 规范建议浏览器从每个主机名并行地下载两个资源，这也就是说，主机名越多，并行下载量就会越多。但事实上情况并不是这样的，当主机名增多之后，并行解析大量资源会占用大量的 CPU 性能，并增加 DNS 查询时间，更多信息请参考 <a href=\"http://yuiblog.com/blog/2007/04/11/performance-research-part-4/\" target=\"_blank\" rel=\"external\">Maximizing Parallel Downloads in the Carpool Lane</a> 一文。</p>\n<p>将脚本置于文档底部，有两个直接原因：</p>\n<ul>\n<li>脚本会阻塞后面文档内容的渲染</li>\n<li>脚本资源会阻塞其他资源的并行加载</li>\n</ul>\n<blockquote>\n<p>浏览器之所以存在这样的机制，是因为 JavaScript 缺乏模块机制，如果不同的 JavaScript 之间存在依赖关系，就必须优先加载依赖脚本。对此可能还存在其他原因，此处留待修改。</p>\n</blockquote>\n<h2 id=\"外部脚本和样式\"><a href=\"#外部脚本和样式\" class=\"headerlink\" title=\"外部脚本和样式\"></a>外部脚本和样式</h2><p>将脚本和样式以独立资源的形式存储和获取，便于在多个页面之间进行复用，尤其是配合 CDN、浏览器缓存的情况下，性能优化效果巨大。</p>\n<p>抛开性能方面的考量，将脚本和样式表从文档中独立出来，也有助于提高可读性和可维护性。</p>\n<p>这一规则并不是绝对的，比如对于浏览器主页来说，它们的访问量大、组件复用率低，通常用户的第二次跳转都是其他的网站。</p>\n<h2 id=\"DNS-查询\"><a href=\"#DNS-查询\" class=\"headerlink\" title=\"DNS 查询\"></a>DNS 查询</h2><p>IP 地址和域名的关系就像是电话本中的电话号码和联系人姓名，DNS 是一套帮助浏览器根据域名查找 IP 地址的系统。DNS 查询也会占用时间，通常浏览器查找一个特定主机名的 IP 需要花费 20~120ms 的时间。</p>\n<p>就像对待静态资源一样，浏览器也可以缓存 DNS 数据，便于再次查找某个主机名时，短时间内不再进行 DNS 查询。查询到的 DNS 记录通常包含 TTL（Time-to-live，存活时间），用于告知客户端该记录的缓存时长。操作系统会考虑 TTL 的值，但浏览器并不会，它有自己的时间限制，此外，浏览器对 DNS 记录的数量也有限制，好在即使浏览器的 DNS 记录丢了，还可以使用操作系统缓存的记录。</p>\n<p>持久连接（Persisent Connection）可以让浏览器在单一连接上发送多个请求，避免了重复创建 socket 连接的低效问题。浏览器和服务器都是通过发送 <code>Connection: Keep-Alive</code> 头信息来表示持久连接，发送 <code>Connection: close</code> 来关闭持久连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request &amp;&amp; Response</span></span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Close Persisent Connection</span></span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure>\n<p>当浏览器和服务器之间是持久连接时，没有理由进行 DNS 查询。<code>Connection: keep-alive</code> 连接可以同时覆盖 TTL 和浏览器的对 DNS 记录的时间限制。</p>\n<p>之前提过，增加主机名可以增加并行下载量，但也会增加 DNS 查询，两相权衡取其轻，最好不要少于两个主机名，也不要大于四个主机名。</p>\n<h2 id=\"精简\"><a href=\"#精简\" class=\"headerlink\" title=\"精简\"></a>精简</h2><p>这里涉及三个名词：压缩、精简和混淆。压缩的原理是根据重复字节创建一个词典，缩减重复的字节；精简的原理是去除代码中无关的内容，比如注释、空白等；混淆常使用较短的名称替换变量名、函数名。</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>重定向（Redirect）用于将用户从一个 URL 重新定位到另一个 URL，常见的重定向方式包括：</p>\n<ul>\n<li>使用 meta refresh 标签重定向</li>\n<li>使用 JavaScript <code>document.location</code> 重定向</li>\n<li>使用 3XX HTTP 状态码重定向（优先推荐），比如 301（Moved Permancently）和 302 （Moved Temporarily）</li>\n</ul>\n<p>重定向的存在具有必要性，比如：</p>\n<ul>\n<li>跟踪内部流量，通过分析服务器的重定向数量获取流量流动方向</li>\n<li>跟踪出站流量，搜索引擎可以使用查询字符串 <code>?url=http%3a//pinggod.com</code> 记录出站流量，通过分析该查询字符串即可计算出与出站目标有关的信息，此外还可以使用信标（beacon）的方式，即监听点击事件，在点击外链时向服务器请求数据，间接驱动服务器记录跳转信息</li>\n<li>美化 URL，便于用户记忆</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Beacon</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    b.src = <span class=\"string\">\"http://rds.yahoo.com/?url=\"</span> + <span class=\"built_in\">escape</span>(a.href);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>ETag（Entity Tag，实体标签），是服务器和客户端确认缓存资源有效性的机制。服务器会使用一个字符串来标识某个特定版本的资源，这个字符串就是 ETag 的值。如果浏览器要验证缓存，就会使用 <code>If-Node-Match</code> 头信息将 ETag 传回服务器，如果在服务器校验成功，则返回 304 状态码。</p>\n<p>ETag 的问题在于，对于不同的服务器来说，相同版本的资源可能具有不同的 ETag 值。此外，根据 HTTP 1.1 的规定，如果请求中同时出现了 If-None-Match 和 If-modified-Since 头信息，则 If-None-Match 具有更高的优先级，除非这两个头信息在服务器和客户端保持完全一致，否则禁止传回 304 响应。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://book.douban.com/subject/3132277/\" target=\"_blank\" rel=\"external\">高性能网站建设指南</a></li>\n<li><a href=\"http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\" target=\"_blank\" rel=\"external\">How browser works?</a></li>\n</ul>\n","excerpt":"<p><img src=\"/img/browser-fetch-flow-2016-04-07.png\" alt=\"browser-fetch-flow-2016-04-07.png\"></p>\n<p>《高性能网站建设指南》中文版出版于 2008 年，是雅虎前端团队在性能方面持续研究的成果。虽然书中内容相对当前的技术栈或多或少存在一些陈旧和不适，但仍是了解前端性能优化的不二入门读物。以前上学的时候，上了年纪的老教师最喜欢讲一句话：万变不离其宗。这是一句放诸四海而皆准的教条，诚不欺我。</p>\n<p>前端性能优化，既有宏观方面的考量也有细微之处的锱铢必较。做性能优化的目的不是减少用户下载页面资源的时间，而是减少用户等待页面响应的时间。下面的表格显示了用户对不同延迟时间的心理反馈：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">延迟时间</th>\n<th>心理反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0~16ms</td>\n<td>屏幕帧速在 60 帧以上，用户感觉不到响应卡顿、跳帧和延迟等现象，用户体验极其优秀</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0~100ms</td>\n<td>程序反应迅速，体验良好，如果响应超过 100ms，用户将会感受到响应不及时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">100~300ms</td>\n<td>用户将会感受到轻微的响应延迟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300~1000ms</td>\n<td>用户将会感受到渐进式的响应，对于网页来说，加载资源和重绘页面视图都是响应的类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000+ms</td>\n<td>用户将对当前的操作失去耐心和信心</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10000+ms</td>\n<td>用户将会放弃当前的操作，或许也将否定该网站</td>\n</tr>\n</tbody>\n</table>","more":"<p>下图记录的是当前博客首次加载资源的耗时情况，其中红色标出的地方是页面加载时间，这个时间包含两个部分，上边是总共用时，下边是延迟时间（Latency，等待资源传送的时间），从中可以发现，延迟时间平均占据了总时间的 80%~90%：</p>\n<p><img src=\"/img/resources-loading-times-2016-04-07.png\" alt=\"resources-loading-times-2016-04-07\"></p>\n<p>通常来说，改进前端性能所需要的资源和时间，往往要小于后端。后端需要通过重构架构、优化路径、更改硬件、分布化数据库等重操作才能明显改进性能，且优化周期长达数周或数月之久。</p>\n<p>前端性能优化已经被证实是高效和可维护的开发行为，后面将会一一介绍十四条常规的优化规则。相关规则的优化不仅仅限于前端方向，和后端以及网络通信都有一定的联系。</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP 是一种客户端/服务器协议，由请求和响应构成。作为客户端，当浏览器向特定 URL 发送 HTTP 请求后，URL 对应的宿主服务器就会返回 HTTP 响应。该协议以纯文本格式发送信息，请求类型包括：GET、POST、HEAD、DELETE、OPTIONS 和 TRACE。</p>\n<p>我们最常用的是 GET 请求，下面展示了首次请求 <code>pinggod.com/index.html</code> 资源时发送的请求信息和响应信息（状态码、头信息以及响应体）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request</span></span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: pinggod.com</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"><span class=\"comment\"># and so on ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: GitHub.com</span><br><span class=\"line\">Date: Fri, 08 Apr 2016 16:35:38 GMT</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\"><span class=\"comment\"># and so on ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"减少-HTTP-请求\"><a href=\"#减少-HTTP-请求\" class=\"headerlink\" title=\"减少 HTTP 请求\"></a>减少 HTTP 请求</h2><p>在前图中我们已经看到，每次接收到的 HTTP 响应，有 80%~90% 的时间花在了响应时间上，而不是资源的下载时间，这也就是说，随着 HTTP 请求/响应量的增多，所浪费的时间也就更多，所以，减少 HTTP 请求/响应的数量，将会直接减少资源的响应时间，带来前端页面 50% 以上的响应速度优化。</p>\n<p>下面是一些优化资源首次加载的方法，对于后续页面的浏览，可以使用其他优化规则：</p>\n<ul>\n<li>图片地图，即 HTML 的 <code>&lt;map name=&quot;&quot;&gt;&lt;/map&gt;</code> 标签</li>\n<li>CSS Sprites，使用一张图片集成多个小图片，使用一次请求获取集成后的图片，通过 CSS 属性控制图片的显示，这一技术不仅可以减少 HTTP 请求，还可以减少下载的资源体积，这是因为合并后的图片减少了大量重复性的图片信息，比如颜色表、格式信息等等</li>\n<li>内联图片，即 <code>&lt;img src=&quot;data:[&lt;mediatype&gt;][;base64], &lt;data&gt;&quot; alt=&quot;&quot;&gt;</code>，缺点是 Base64 编码会增加图片的大小，且不能够被缓存</li>\n<li>合并 JavaScript 和 CSS</li>\n</ul>\n<div class=\"tip\"><br>本文不会涉及 HTTP2 的内容，但是在这里有必要提及的是，HTTP2 的多路复用特性相比于人工维护的 CSS Sprites 等技术具有更高的可维护性和开发效率。<br></div>\n\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>内容分发网络（CDN，Content Delivery Networks) 是一组分布在不同地理位置的 Web 服务器，通过就近原则提高资源响应速度。CDN 既能提高性能，还能节省成本。在优化性能时，CDN 可以选择网络阶跃数最小的服务器或响应最短的服务器向用户提供内容。</p>\n<p>除了性能方面的考量，使用 CDN 还可以提供数据备份、扩展存储能力和内容缓存的功能，有助于缓和 Web 峰值流量带来的压力。</p>\n<p>CDN 常用于分发静态资源，比如图片、脚本和样式表，这是因为静态资源具有较少的依赖性。对于地理位置分散的用户，CDN 可以轻易改善资源的响应速度。</p>\n<h2 id=\"Last-Modified-amp-amp-Expires-amp-amp-Cache-control\"><a href=\"#Last-Modified-amp-amp-Expires-amp-amp-Cache-control\" class=\"headerlink\" title=\"Last-Modified &amp;&amp; Expires &amp;&amp; Cache-control\"></a>Last-Modified &amp;&amp; Expires &amp;&amp; Cache-control</h2><p>服务器向客户端发送的响应资源会携带一条 <code>Last-Modified</code> 头信息，用于通知客户端该资源的最新更新时间。当客户端再次请求该资源的时候，为了确定该资源是否有效，就会发起一个条件 GET 请求（Conditional GET Request），该请求携带 <code>If-Modified-Since</code> 头信息，便于服务器验证资源是否过期，如果资源没有过期，则服务器返回 <code>304 Not Modified</code> 状态码并不发送响应体，从而实现更快更轻量的响应。此外，还有 <code>ETag</code> 和 <code>If-None-Match</code> 两种执行条件 GET 请求的方式。</p>\n<p>虽然 <code>Last-Modified / If-Modified-Since</code> 等条件 GET 请求和 304 响应加快了页面响应，但该机制仍在客户端和服务器之间执行了一次请求/响应，以进行有效性检查。针对这一问题，我们可以使用 <code>Expires</code> 头信息来解决，Expires 头信息的值是一个时间戳（timestamp）。当浏览器在时间戳之前再次访问该资源时，会直接从浏览器缓存获取该资源，不会发起任何 HTTP 请求。</p>\n<p>虽然 Expires 头信息消除了 HTTP 校验请求，但也带了新的问题：</p>\n<ul>\n<li>由于它的值是一个特定日期，所以客户端和服务器必须保持严格的时钟同步</li>\n<li>过期日期需要经常校验，且过期后需提供新的时间戳</li>\n</ul>\n<p>针对这一问题，HTTP 1.1 引入了 <code>Cache-Control: max-age=&lt;Integer&gt;</code> 头信息，它的值以秒为单位。在 Cache-Control 允许的时间内，浏览器都会直接从缓存中获取资源。max-age 接收的有效期非常长，甚至长达十年之久。此外，HTTP 规定，当同时存在 max-age 指令和 Expires 头信息时，优先使用 max-age。</p>\n<p>当静态资源被浏览器缓存后，用户如何在缓存有效期内获取修改后的资源呢？首先，不建议缓存 HTML 文档；其次，通过在 HTML 文件中修订资源名的方式通知浏览器获取新的资源。修订资源名的方式多种多样，比如添加时间戳、版本号等。</p>\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><p>客户端在向服务器发送 HTTP 请求时，可以携带 <code>Accept-Encoding</code> 头信息来告知服务器客户端支持哪些压缩格式。服务器在响应信息中使用 <code>Content-Encoding</code> 头信息通知当前资源的压缩格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request</span></span><br><span class=\"line\">Accept-Encoding: gzip deflate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>\n<p>压缩需要客户端和服务器耗费额外的 CPU 资源进行解压缩，通常来说，图片和 PDF 都是已经压缩过得资源，无需再次压缩，而脚本和样式表是值得压缩的。</p>\n<p>当浏览器通过代理服务器与资源服务器通信时，由于接入代理服务器的客户端不一定支持相同的压缩格式，甚至不支持压缩格式，所以需要一种机制通知代理服务器向资源服务器请求所有压缩格式（包括未压缩格式）的资源，便于分发给不同的客户端。这一机制就是利用资源服务器向代理服务器发送 <code>Vary</code> 头信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Response</span></span><br><span class=\"line\">Vary: Accept-Encoding</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器渲染机制\"><a href=\"#浏览器渲染机制\" class=\"headerlink\" title=\"浏览器渲染机制\"></a>浏览器渲染机制</h2><p>在这一节，本书推荐了两个法则：将样式表置于文档顶部，将脚本置于文档底部。浏览器绘制出首屏内容前，必须完成 DOM 树和 CSS 样式规则的解析，然后合成渲染树，所以，优先加载文档和样式资源就可以加快首屏渲染速度。反之，如果将样式表置于文档底部，则只有加载完样式表之前的所有资源才会加载样式表，直接影响了浏览器合成渲染树绘制首屏内容的流程。</p>\n<p>HTTP 1.1 规范建议浏览器从每个主机名并行地下载两个资源，这也就是说，主机名越多，并行下载量就会越多。但事实上情况并不是这样的，当主机名增多之后，并行解析大量资源会占用大量的 CPU 性能，并增加 DNS 查询时间，更多信息请参考 <a href=\"http://yuiblog.com/blog/2007/04/11/performance-research-part-4/\">Maximizing Parallel Downloads in the Carpool Lane</a> 一文。</p>\n<p>将脚本置于文档底部，有两个直接原因：</p>\n<ul>\n<li>脚本会阻塞后面文档内容的渲染</li>\n<li>脚本资源会阻塞其他资源的并行加载</li>\n</ul>\n<blockquote>\n<p>浏览器之所以存在这样的机制，是因为 JavaScript 缺乏模块机制，如果不同的 JavaScript 之间存在依赖关系，就必须优先加载依赖脚本。对此可能还存在其他原因，此处留待修改。</p>\n</blockquote>\n<h2 id=\"外部脚本和样式\"><a href=\"#外部脚本和样式\" class=\"headerlink\" title=\"外部脚本和样式\"></a>外部脚本和样式</h2><p>将脚本和样式以独立资源的形式存储和获取，便于在多个页面之间进行复用，尤其是配合 CDN、浏览器缓存的情况下，性能优化效果巨大。</p>\n<p>抛开性能方面的考量，将脚本和样式表从文档中独立出来，也有助于提高可读性和可维护性。</p>\n<p>这一规则并不是绝对的，比如对于浏览器主页来说，它们的访问量大、组件复用率低，通常用户的第二次跳转都是其他的网站。</p>\n<h2 id=\"DNS-查询\"><a href=\"#DNS-查询\" class=\"headerlink\" title=\"DNS 查询\"></a>DNS 查询</h2><p>IP 地址和域名的关系就像是电话本中的电话号码和联系人姓名，DNS 是一套帮助浏览器根据域名查找 IP 地址的系统。DNS 查询也会占用时间，通常浏览器查找一个特定主机名的 IP 需要花费 20~120ms 的时间。</p>\n<p>就像对待静态资源一样，浏览器也可以缓存 DNS 数据，便于再次查找某个主机名时，短时间内不再进行 DNS 查询。查询到的 DNS 记录通常包含 TTL（Time-to-live，存活时间），用于告知客户端该记录的缓存时长。操作系统会考虑 TTL 的值，但浏览器并不会，它有自己的时间限制，此外，浏览器对 DNS 记录的数量也有限制，好在即使浏览器的 DNS 记录丢了，还可以使用操作系统缓存的记录。</p>\n<p>持久连接（Persisent Connection）可以让浏览器在单一连接上发送多个请求，避免了重复创建 socket 连接的低效问题。浏览器和服务器都是通过发送 <code>Connection: Keep-Alive</code> 头信息来表示持久连接，发送 <code>Connection: close</code> 来关闭持久连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request &amp;&amp; Response</span></span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Close Persisent Connection</span></span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure>\n<p>当浏览器和服务器之间是持久连接时，没有理由进行 DNS 查询。<code>Connection: keep-alive</code> 连接可以同时覆盖 TTL 和浏览器的对 DNS 记录的时间限制。</p>\n<p>之前提过，增加主机名可以增加并行下载量，但也会增加 DNS 查询，两相权衡取其轻，最好不要少于两个主机名，也不要大于四个主机名。</p>\n<h2 id=\"精简\"><a href=\"#精简\" class=\"headerlink\" title=\"精简\"></a>精简</h2><p>这里涉及三个名词：压缩、精简和混淆。压缩的原理是根据重复字节创建一个词典，缩减重复的字节；精简的原理是去除代码中无关的内容，比如注释、空白等；混淆常使用较短的名称替换变量名、函数名。</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>重定向（Redirect）用于将用户从一个 URL 重新定位到另一个 URL，常见的重定向方式包括：</p>\n<ul>\n<li>使用 meta refresh 标签重定向</li>\n<li>使用 JavaScript <code>document.location</code> 重定向</li>\n<li>使用 3XX HTTP 状态码重定向（优先推荐），比如 301（Moved Permancently）和 302 （Moved Temporarily）</li>\n</ul>\n<p>重定向的存在具有必要性，比如：</p>\n<ul>\n<li>跟踪内部流量，通过分析服务器的重定向数量获取流量流动方向</li>\n<li>跟踪出站流量，搜索引擎可以使用查询字符串 <code>?url=http%3a//pinggod.com</code> 记录出站流量，通过分析该查询字符串即可计算出与出站目标有关的信息，此外还可以使用信标（beacon）的方式，即监听点击事件，在点击外链时向服务器请求数据，间接驱动服务器记录跳转信息</li>\n<li>美化 URL，便于用户记忆</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Beacon</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    b = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    b.src = <span class=\"string\">\"http://rds.yahoo.com/?url=\"</span> + <span class=\"built_in\">escape</span>(a.href);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>ETag（Entity Tag，实体标签），是服务器和客户端确认缓存资源有效性的机制。服务器会使用一个字符串来标识某个特定版本的资源，这个字符串就是 ETag 的值。如果浏览器要验证缓存，就会使用 <code>If-Node-Match</code> 头信息将 ETag 传回服务器，如果在服务器校验成功，则返回 304 状态码。</p>\n<p>ETag 的问题在于，对于不同的服务器来说，相同版本的资源可能具有不同的 ETag 值。此外，根据 HTTP 1.1 的规定，如果请求中同时出现了 If-None-Match 和 If-modified-Since 头信息，则 If-None-Match 具有更高的优先级，除非这两个头信息在服务器和客户端保持完全一致，否则禁止传回 304 响应。</p>\n<h6 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h6><ul>\n<li><a href=\"https://book.douban.com/subject/3132277/\">高性能网站建设指南</a></li>\n<li><a href=\"http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\">How browser works?</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}